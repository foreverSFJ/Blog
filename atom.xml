<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>foreverSFJ</title>
  
  <subtitle>今夜月色真美，希望风也温柔~~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.foreversfj.com/"/>
  <updated>2020-05-17T05:15:12.335Z</updated>
  <id>https://blog.foreversfj.com/</id>
  
  <author>
    <name>foreverSFJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第5章 Maven总结</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/05_Maven%E6%80%BB%E7%BB%93.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/05_Maven%E6%80%BB%E7%BB%93.html</id>
    <published>2020-05-17T05:11:59.000Z</published>
    <updated>2020-05-17T05:15:12.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第5章-Maven总结"><a href="#第5章-Maven总结" class="headerlink" title="第5章 Maven总结"></a>第5章 Maven总结</h1><h2 id="5-1-maven仓库"><a href="#5-1-maven仓库" class="headerlink" title="5.1 maven仓库"></a>5.1 maven仓库</h2><p>1、maven仓库的类型有哪些？</p><p>2、maven工程查找仓库的流程是什么？</p><p>3、本地仓库如何配置？</p><h2 id="5-2-常用的maven命令"><a href="#5-2-常用的maven命令" class="headerlink" title="5.2 常用的maven命令"></a>5.2 常用的maven命令</h2><p>常用 的maven命令包括：</p><p>compile：编译</p><p>clean：清理</p><p>test：测试</p><p>package：打包</p><p>install：安装</p><h2 id="5-3-坐标定义"><a href="#5-3-坐标定义" class="headerlink" title="5.3 坐标定义"></a>5.3 坐标定义</h2><p>在pom.xml中定义坐标，内容包括：groupId、artifactId、version，详细内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--项目名称，定义为组织名+项目名，类似包名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模块名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-first<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当前项目版本号，snapshot为快照版本即非正式版本，release为正式发布版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>打包类型<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-4-pom基本配置"><a href="#5-4-pom基本配置" class="headerlink" title="5.4 pom基本配置"></a>5.4 pom基本配置</h2><p>pom.xml是Maven项目的核心配置文件，位于每个工程的根目录，基本配置如下：</p><p><code>&lt;project &gt;</code> ：文件的根节点 . </p><p><code>&lt;modelversion &gt;</code>： pom.xml使用的对象模型版本</p><p><code>&lt;groupId &gt;</code>：项目名称，一般写项目的域名</p><p><code>&lt;artifactId &gt;</code>：模块名称，子项目名或模块名称</p><p><code>&lt;version &gt;</code> ：产品的版本号 .</p><p><code>&lt;packaging &gt;</code>：打包类型，一般有jar、war、pom 等 </p><p><code>&lt;name &gt;</code>：项目的显示名，常用于 Maven 生成的文档。 </p><p><code>&lt;description &gt;</code> ：项目描述，常用于 Maven 生成的文档</p><p><code>&lt;dependencies&gt;</code>：项目依赖构件配置，配置项目依赖构件的坐标</p><p><code>&lt;build&gt;</code>：项目构建配置，配置编译、运行插件等。</p>]]></content>
    
    <summary type="html">
    
      最基础的Maven知识总结
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="Maven" scheme="https://blog.foreversfj.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>第4章 maven工程运行调试</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/04_Maven%E5%B7%A5%E7%A8%8B%E7%9A%84%E8%BF%90%E8%A1%8C%E8%B0%83%E8%AF%95.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/04_Maven%E5%B7%A5%E7%A8%8B%E7%9A%84%E8%BF%90%E8%A1%8C%E8%B0%83%E8%AF%95.html</id>
    <published>2020-05-17T05:08:26.000Z</published>
    <updated>2020-05-17T05:11:35.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第4章-maven工程运行调试"><a href="#第4章-maven工程运行调试" class="headerlink" title="第4章 maven工程运行调试"></a>第4章 maven工程运行调试</h1><h2 id="4-1-端口占用处理"><a href="#4-1-端口占用处理" class="headerlink" title="4.1 端口占用处理"></a>4.1 端口占用处理</h2><p>重新执行<code>tomcat:run</code>命令重启工程，重启之前需手动停止 tomcat，否则报下边的错误：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/vkUB4o26BAAc.jpg!blog" alt=""></p><h2 id="4-2-断点调试"><a href="#4-2-断点调试" class="headerlink" title="4.2 断点调试"></a>4.2 断点调试</h2><p>点击如图所示选项</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/OkkU6rGunWui.jpg!blog" alt=""></p><p>在弹出框中点击如图加号按钮找到maven选项</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/97wtSXG7RbgB.jpg!blog" alt=""></p><p>在弹出窗口中填写如下信息</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/v7aGXeFPPgj7.jpg!blog" alt=""></p><p>完成后先Apply再OK结束配置后，可以在主界面找到我们刚才配置的操作名称。</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/3prLSaeGqNqb.jpg!blog" alt=""></p><p>如上图红框选中的两个按钮，左侧是正常启动，右侧是debug启动。</p>]]></content>
    
    <summary type="html">
    
      本节简述maven工程运行调试的部分措施
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="Maven" scheme="https://blog.foreversfj.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>第3章 第二节 maven项目搭建Web构架</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/03_3_Maven%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/03_3_Maven%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</id>
    <published>2020-05-17T04:29:57.000Z</published>
    <updated>2020-05-17T05:07:47.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第3章-Maven常用命令"><a href="#第3章-Maven常用命令" class="headerlink" title="第3章 Maven常用命令"></a>第3章 Maven常用命令</h1><h2 id="3-5-搭建Web构架"><a href="#3-5-搭建Web构架" class="headerlink" title="3.5 搭建Web构架"></a>3.5 搭建Web构架</h2><h3 id="3-5-1-创建一个Servlet"><a href="#3-5-1-创建一个Servlet" class="headerlink" title="3.5.1 创建一个Servlet"></a>3.5.1 创建一个Servlet</h3><p><code>src/java/main</code>创建了一个Servlet，但报错</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/vmFL9CzttfFq.jpg!blog" alt=""></p><p>要解决问题，就是要将<code>servlet-api-xxx.jar</code>包放进来，作为maven工程应当添加servlet的坐标，从而导入它的jar</p><h3 id="3-5-2-在pom-xml文件添加坐标"><a href="#3-5-2-在pom-xml文件添加坐标" class="headerlink" title="3.5.2 在pom.xml文件添加坐标"></a>3.5.2 在pom.xml文件添加坐标</h3><p>直接打开<code>hello_maven</code>工程的<code>pom.xml</code>文件，再添加坐标</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/1kCgzDwPQmP2.jpg!blog" alt=""></p><p>添加jar包的坐标时，还可以指定这个jar包将来的作用范围。</p><p>每个maven工程都需要定义本工程的坐标，坐标是maven对jar包的身份定义，比如：入门程序的坐标定义如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--项目名称，定义为组织名+项目名，类似包名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模块名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello_maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当前项目版本号，snapshot为快照版本即非正式版本，release为正式发布版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span> &gt;</span>打包类型<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 打包类型：</span></span><br><span class="line"><span class="comment">jar：执行package会打成jar包</span></span><br><span class="line"><span class="comment">war：执行package会打成war包</span></span><br><span class="line"><span class="comment">pom ：用于maven工程的继承，通常父工程设置为pom --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-3-坐标的来源方式"><a href="#3-5-3-坐标的来源方式" class="headerlink" title="3.5.3 坐标的来源方式"></a>3.5.3 坐标的来源方式</h3><p>添加依赖需要指定依赖jar包的坐标，但是很多情况我们是不知道jar包的的坐标，可以通过如下方式查询：</p><ul><li><p><strong>从互联网搜索：</strong></p><ul><li><a href="http://search.maven.org/" target="_blank" rel="noopener">http://search.maven.org/</a></li><li><a href="http://mvnrepository.com/" target="_blank" rel="noopener">http://mvnrepository.com/</a></li></ul><p>网站搜索示例：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/Tg18pSltSjTe.jpg!blog" alt=""></p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/2m3PGbHmT3qM.jpg!blog" alt=""></p></li></ul><h3 id="3-5-4-依赖范围"><a href="#3-5-4-依赖范围" class="headerlink" title="3.5.4 依赖范围"></a>3.5.4 依赖范围</h3><p>A依赖B，需要在A的<code>pom.xml</code>文件中添加B的坐标，添加坐标时需要指定依赖范围，依赖范围包括：</p><ul><li><p><strong>compile：</strong>编译范围，指A在编译时依赖B，此范围为默认依赖范围。编译范围的依赖会用在编译、测试、运行，由于运行时需要所以编译范围的依赖会被打包。</p></li><li><p><strong>provided：</strong>provided依赖只有在当JDK或者一个容器已提供该依赖之后才使用， provided依赖在编译和测试时需要，在运行时不需要，比如：servlet api被tomcat容器提供。</p></li><li><p><strong>runtime：</strong>runtime依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如：jdbc的驱动包。由于运行时需要所以runtime范围的依赖会被打包。</p></li><li><p><strong>test：</strong>test范围依赖 在编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用，比如：junit。由于运行时不需要所以test范围依赖不会被打包。</p></li><li><p><strong>system</strong>：system范围依赖与provided类似，但是你必须显式的提供一个对于本地系统中JAR文件的路径，需要指定systemPath磁盘路径，system依赖不推荐使用。</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/v4yJnnH4KRxw.jpg!blog" alt=""></p></li></ul><p>在maven-web工程中测试各各scop。</p><p><strong>测试总结：</strong></p><ul><li>默认引入 的jar包 ——- compile 【默认范围 可以不写】（编译、测试、运行 都有效 ）</li><li>servlet-api 、jsp-api ——- provided （编译、测试 有效， 运行时无效 防止和tomcat下jar冲突）</li><li>jdbc驱动jar包 —- runtime （测试、运行 有效 ）</li><li>junit —– test （测试有效）</li></ul><p>依赖范围由强到弱的顺序是：<strong>compile&gt;provided&gt;runtime&gt;test</strong></p><h3 id="3-5-5-项目中添加的坐标"><a href="#3-5-5-项目中添加的坐标" class="headerlink" title="3.5.5 项目中添加的坐标"></a>3.5.5 项目中添加的坐标</h3><p><img src="http://cdn.foreversfj.com/image/blog/20200517/574WJOC4w7qv.jpg!blog" alt=""></p><h3 id="3-5-6-设置jdk编译版本"><a href="#3-5-6-设置jdk编译版本" class="headerlink" title="3.5.6 设置jdk编译版本"></a>3.5.6 设置jdk编译版本</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-7-编写servlet"><a href="#3-5-7-编写servlet" class="headerlink" title="3.5.7 编写servlet"></a>3.5.7 编写servlet</h3><p>在<code>src/main/java</code>中创建ServletTest</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/NCb0SwQ5xHkj.jpg!blog" alt=""></p><p>内容如下：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/bb09gFWJHEIe.jpg!blog" alt=""></p><h3 id="3-5-8-编写jsp"><a href="#3-5-8-编写jsp" class="headerlink" title="3.5.8 编写jsp"></a>3.5.8 编写jsp</h3><p><img src="http://cdn.foreversfj.com/image/blog/20200517/kumyavwMXozJ.jpg!blog" alt=""></p><h3 id="3-5-9-在web-xml中配置servlet访问路径"><a href="#3-5-9-在web-xml中配置servlet访问路径" class="headerlink" title="3.5.9 在web.xml中配置servlet访问路径"></a>3.5.9 在web.xml中配置servlet访问路径</h3><p><img src="http://cdn.foreversfj.com/image/blog/20200517/06VpaRl0eKv2.jpg!blog" alt=""></p><h3 id="3-5-10-添加tomcat7插件"><a href="#3-5-10-添加tomcat7插件" class="headerlink" title="3.5.10 添加tomcat7插件"></a>3.5.10 添加tomcat7插件</h3><p>在pom文件中添加如下内容</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/NaTY43jl8v3D.jpg!blog" alt=""></p><p>此时点击idea最右侧Maven Projects，</p><p>就可以看到我们新添加的tomcat7插件</p><p>双击tomcat7插件下tomcat7:run命令直接运行项目</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/2oh117eAHdu3.jpg!blog" alt=""></p><p>也可以直接点击如图按钮，手动输入tomc7:run命令运行项目</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/Xfzvrrk6nac7.jpg!blog" alt=""></p><p>点击后弹出如下图窗口</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/8YeRrzsq8hQN.jpg!blog" alt=""></p><h3 id="3-5-11-运行结果"><a href="#3-5-11-运行结果" class="headerlink" title="3.5.11 运行结果"></a>3.5.11 运行结果</h3><p><img src="http://cdn.foreversfj.com/image/blog/20200517/LIfFb80cCSxk.jpg!blog" alt=""></p>]]></content>
    
    <summary type="html">
    
      实战idea开发maven项目
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="Maven" scheme="https://blog.foreversfj.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>第3章 第二节 idea开发maven项目</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/03_2_Maven%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/03_2_Maven%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</id>
    <published>2020-05-17T04:29:57.000Z</published>
    <updated>2020-05-17T05:07:07.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第3章-Maven常用命令"><a href="#第3章-Maven常用命令" class="headerlink" title="第3章 Maven常用命令"></a>第3章 Maven常用命令</h1><h2 id="3-4-idea开发maven项目"><a href="#3-4-idea开发maven项目" class="headerlink" title="3.4 idea开发maven项目"></a>3.4 idea开发maven项目</h2><h3 id="3-4-1-idea的maven配置"><a href="#3-4-1-idea的maven配置" class="headerlink" title="3.4.1 idea的maven配置"></a>3.4.1 idea的maven配置</h3><p><strong>配置maven</strong>：</p><p>打开→File→Settings配置maven</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/ejb99w4pNzMy.png!blog" alt=""></p><p>依据图片指示，选择本地maven安装目录，指定maven安装目录下conf文件夹中settings配置文件。</p><h3 id="3-4-2-创建一个maven的web工程"><a href="#3-4-2-创建一个maven的web工程" class="headerlink" title="3.4.2 创建一个maven的web工程"></a>3.4.2 创建一个maven的web工程</h3><ol><li><p>打开idea，选择创建一个新工程</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/pOaj7TDNkyGO.png!blog" alt=""></p></li><li><p>选择 idea 提供好的 maven 的web 工程模板 </p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/ncJfS0azBbOx.png!blog" alt=""></p></li><li><p>点击 Next 填写项目信息 </p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/g0blHtpn1SQF.png!blog" alt=""></p></li><li><p>点击Next，此处不做改动。</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/Tuvak2l30qTG.jpg!blog" alt=""></p></li><li><p>点击Next选择项目所在目录</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/l10j0JH0rnXD.jpg!blog" alt=""></p></li><li><p>点击Finish后开始创建工程，耐心等待，直到出现如下界面。</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/rWHek1fbGCat.jpg!blog" alt=""></p></li><li><p>手动添加<code>src/main/java</code>目录，如下图右键main文件夹→New→Directory</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/pF7K6tamzlva.jpg!blog" alt=""></p></li><li><p>创建一个新的文件夹命名为java</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/bL0gXIcVKPOr.jpg!blog" alt=""></p></li><li><p>点击OK后，在新的文件夹java上右键→Make Directory as→Sources Root</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/xOdbXql4JtAu.jpg!blog" alt=""></p></li></ol>]]></content>
    
    <summary type="html">
    
      实战idea开发maven项目
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="Maven" scheme="https://blog.foreversfj.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>第3章 第一节 Maven常用命令</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/03_1_Maven%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/03_1_Maven%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</id>
    <published>2020-05-17T04:14:20.000Z</published>
    <updated>2020-05-17T04:29:33.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第3章-Maven常用命令"><a href="#第3章-Maven常用命令" class="headerlink" title="第3章 Maven常用命令"></a>第3章 Maven常用命令</h1><h2 id="3-1-基础命令"><a href="#3-1-基础命令" class="headerlink" title="3.1 基础命令"></a>3.1 基础命令</h2><h3 id="3-1-1-compile"><a href="#3-1-1-compile" class="headerlink" title="3.1.1 compile"></a>3.1.1 compile</h3><p>compile是maven工程的编译命令，作用是将src/main/java下的文件编译为class文件输出到target目录下。</p><p>cmd进入命令状态，执行mvn compile，如下图提示成功：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/1m6rvM3QttnH.png!blogw" alt=""></p><p>查看 target 目录，class 文件已生成，编译完成。 </p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/w229C9VcGl0u.png!blog" alt=""></p><h3 id="3-1-2-test"><a href="#3-1-2-test" class="headerlink" title="3.1.2 test"></a>3.1.2 test</h3><p>test 是 maven 工程的测试命令  <code>mvn test</code>，会执行 <code>src/test/java</code> 下的单元测试类。 </p><p>cmd 执行<code>mvn test</code>执行 <code>src/test/java</code>下单元测试类，下图为测试结果，运行 1 个测试用例，全部成功。</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/zdDGcw9iRKad.png!blog" alt=""></p><h3 id="3-1-3-clean"><a href="#3-1-3-clean" class="headerlink" title="3.1.3 clean"></a>3.1.3 clean</h3><p>clean是maven工程的清理命令，执行 <code>clean</code>会删除<code>target</code>目录及内容。</p><h3 id="3-1-4-package"><a href="#3-1-4-package" class="headerlink" title="3.1.4 package"></a>3.1.4 package</h3><p>package是maven工程的打包命令，对于java工程执行package打成jar包，对于web工程打成war包。</p><h3 id="3-1-5-install"><a href="#3-1-5-install" class="headerlink" title="3.1.5 install"></a>3.1.5 install</h3><p>install是maven工程的安装命令，执行install将maven打成jar包或war包发布到本地仓库。</p><p>从运行结果中，可以看出：</p><p><strong>当后面的命令执行时，前面的操作过程也都会自动。</strong></p><h2 id="3-2-Maven指令的生命周期"><a href="#3-2-Maven指令的生命周期" class="headerlink" title="3.2 Maven指令的生命周期"></a>3.2 Maven指令的生命周期</h2><p>maven对项目构建过程分为三套相互独立的生命周期，请注意这里说的是“三套”，而且“相互独立”，这三套生命周期分别是：</p><p><strong>Clean Lifecycle</strong> 在进行真正的构建之前进行一些清理工作。</p><p><strong>Default Lifecycle</strong> 构建的核心部分，编译，测试，打包，部署等等。</p><p><strong>Site Lifecycle</strong> 生成项目报告，站点，发布站点。</p><h2 id="3-3-maven的概念模型"><a href="#3-3-maven的概念模型" class="headerlink" title="3.3 maven的概念模型"></a>3.3 maven的概念模型</h2><p>Maven包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/BufzmTgRimWR.png!blog" alt=""></p><ul><li><p>项目对象模型 (Project Object Model)</p><p>一个maven工程都有一个pom.xml文件，通过pom.xml文件定义项目的坐标、项目依赖、项目信息、插件目标等。</p></li><li><p>依赖管理系统(Dependency Management System)</p><p>通过maven的依赖管理对项目所依赖的jar 包进行统一管理。</p><p>比如：项目依赖<code>junit4.9</code>，通过在<code>pom.xml</code>中定义<code>junit4.9</code>的依赖，即使用<code>junit4.9</code>，如下所示是<code>junit4.9</code>的依赖定义：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此项目运行使用junit，所以此项目依赖junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit的项目名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit的模块名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖范围：单元测试时使用junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>一个项目生命周期(Project Lifecycle)</p><p>使用maven完成项目的构建，项目构建包括：清理、编译、测试、部署等过程，maven将这些过程规范为一个生命周期，如下所示是生命周期的各各阶段：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/H3wflCNCSHro.png!blog" alt=""></p><p>maven通过执行一些简单命令即可实现上边生命周期的各各过程，比如执行mvn compile执行编译、执行mvn clean执行清理。</p></li><li><p>一组标准集合</p><p>maven将整个项目管理过程定义一组标准，比如：通过maven构建工程有标准的目录结构，有标准的生命周期阶段、依赖管理有标准的坐标定义等。</p></li><li><p>插件(plugin)目标(goal)</p><p>maven 管理项目生命周期过程都是基于插件完成的。</p></li></ul>]]></content>
    
    <summary type="html">
    
      在cmd中通过一系列的maven命令来对我们的maven-helloworld工程进行编译、测试、运行、打包、安装、部署。
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="Maven" scheme="https://blog.foreversfj.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>第2章 第三节 Maven工程的认识</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/02_3_Maven%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/02_3_Maven%E7%9A%84%E4%BD%BF%E7%94%A8.html</id>
    <published>2020-05-17T03:05:00.000Z</published>
    <updated>2020-05-17T04:26:52.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第2章-Maven的使用"><a href="#第2章-Maven的使用" class="headerlink" title="第2章 Maven的使用"></a>第2章 Maven的使用</h1><h2 id="2-3-Maven工程的认识"><a href="#2-3-Maven工程的认识" class="headerlink" title="2.3 Maven工程的认识"></a>2.3 Maven工程的认识</h2><h3 id="2-3-1-Maven工程的目录结构"><a href="#2-3-1-Maven工程的目录结构" class="headerlink" title="2.3.1 Maven工程的目录结构"></a>2.3.1 Maven工程的目录结构</h3><p><img src="http://cdn.foreversfj.com/image/blog/20200517/dq1MUjv6FbJ2.png!blog" alt=""></p><p>作为一个maven工程，它的src目录和pom.xml是必备的。</p><p>进入src目录后，我们发现它里面的目录结构如下：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/aabYL9g2adwT.png!blog" alt=""></p><p><strong><code>src/main/java</code></strong> —— 存放项目的.java文件</p><p><strong><code>src/main/resources</code></strong> —— 存放项目资源文件，如spring, hibernate配置文件</p><p><strong><code>src/test/java</code></strong> —— 存放所有单元测试.java文件，如JUnit测试类</p><p><strong><code>src/test/resources</code></strong> —— 测试资源文件</p><p><strong><code>target</code></strong> —— 项目输出位置，编译后的class文件会输出到此目录</p><p><strong><code>pom.xml</code></strong>——maven项目核心配置文件</p><blockquote><p>注意：如果是普通的java项目，那么就没有webapp目录。</p></blockquote><h3 id="2-3-2-Maven工程的运行"><a href="#2-3-2-Maven工程的运行" class="headerlink" title="2.3.2 Maven工程的运行"></a>2.3.2 Maven工程的运行</h3><p>进入maven工程目录（当前目录有<code>pom.xml</code>文件），运行<code>tomcat:run</code>命令。</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/HdSVL4K2vB2u.png!blog" alt=""></p><p>根据上边的提示信息，通过浏览器访问：<a href="http://localhost:8080/maven-helloworld/" target="_blank" rel="noopener">http://localhost:8080/maven-helloworld/</a></p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/5Yiux7V91roC.png!blog" alt=""></p><h3 id="2-3-3-问题处理"><a href="#2-3-3-问题处理" class="headerlink" title="2.3.3 问题处理"></a>2.3.3 问题处理</h3><p>如果本地仓库配置错误会报下边的错误</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/eruuy2QPeQde.png!blog" alt=""></p><p><strong>分析：</strong></p><p>maven工程运行先从本地仓库找jar包，本地仓库没有再从中央仓库找，上边提示downloading…<br>表示 从中央仓库下载jar，由于本地没有联网，报错。</p><p><strong>解决：</strong></p><p>在maven安装目录的conf/setting.xml文件中配置本地仓库，参考上一节。</p>]]></content>
    
    <summary type="html">
    
      本章节介绍Maven的初始化工程
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="Maven" scheme="https://blog.foreversfj.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>第2章 第一节 Maven的安装</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/02_1_Maven%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/02_1_Maven%E7%9A%84%E4%BD%BF%E7%94%A8.html</id>
    <published>2020-05-17T02:45:54.000Z</published>
    <updated>2020-05-17T04:13:41.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第2章-Maven的使用"><a href="#第2章-Maven的使用" class="headerlink" title="第2章 Maven的使用"></a>第2章 Maven的使用</h1><h2 id="2-1-Maven的安装"><a href="#2-1-Maven的安装" class="headerlink" title="2.1 Maven的安装"></a>2.1 Maven的安装</h2><h3 id="2-1-1-Maven软件的下载"><a href="#2-1-1-Maven软件的下载" class="headerlink" title="2.1.1 Maven软件的下载"></a>2.1.1 Maven软件的下载</h3><p>为了使用Maven管理工具，我们首先要到官网去下载它的安装软件。通过百度搜索“Maven“如下：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/KGP0at1pYOOE.png!blog" alt=""></p><p>点击<code>Download</code>链接，就可以直接进入到<code>Maven</code>软件的下载页面：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/9Tqpc7Y2qGN3.png!blog" alt=""></p><p>目前最新版是apache-maven-3.5.3版本，我们当时使用的是apache-maven-3.5.2版本，大家也可以下载最新版本。</p><p>Apache-maven-3.5.2下载地址：<a href="http://archive.apache.org/dist/maven/maven-3/" target="_blank" rel="noopener">http://archive.apache.org/dist/maven/maven-3/</a></p><p>下载后的版本如下：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/fzziX8i8o7Kc.png" alt=""></p><h3 id="2-1-2-Maven软件的安装"><a href="#2-1-2-Maven软件的安装" class="headerlink" title="2.1.2 Maven软件的安装"></a>2.1.2 Maven软件的安装</h3><p>Maven下载后，将Maven解压到一个没有中文没有空格的路径下，比如<code>D:\software\maven</code>下面。</p><p>解压后目录结构如下：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/QJsCBF6cKcKz.png!blog" alt=""></p><p><strong><code>bin</code></strong>：存放了maven的命令，比如我们前面用到的<code>mvn tomcat:run</code></p><p><strong><code>boot</code></strong>：存放了一些maven本身的引导程序，如类加载器等</p><p><strong><code>conf</code></strong>：存放了maven的一些配置文件，如<code>setting.xml</code>文件</p><p><strong><code>lib</code></strong>：存放了maven本身运行所需的一些jar包</p><p>至此我们的maven软件就可以使用了，前提是你的电脑上之前已经安装并配置好了JDK。</p><h3 id="2-1-3-JDK的准备及统一"><a href="#2-1-3-JDK的准备及统一" class="headerlink" title="2.1.3 JDK的准备及统一"></a>2.1.3 JDK的准备及统一</h3><ol><li><p>JDK环境:</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/cxWtOUV9TR9p.png!blog" alt=""></p></li></ol><h3 id="2-1-4-Maven及JDK配置"><a href="#2-1-4-Maven及JDK配置" class="headerlink" title="2.1.4 Maven及JDK配置"></a>2.1.4 Maven及JDK配置</h3><p>电脑上需安装java环境，安装JDK1.7 + 版本 （将JAVA_HOME/bin 配置环境变量path ），我们使用的是JDK8相关版本</p><p>配置 MAVEN_HOME ，变量值就是你的maven安装 的路径（bin目录之前一级目录）</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/CqP0dI2suBXp.png!blog" alt=""></p><p>上面配置了我们的Maven软件，注意这个目录就是之前你解压maven的压缩文件包在的的目录，最好不要有中文和空格。</p><p>再次检查JDK的安装目录，如下图：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/DgogTuAHWXYx.png!blog" alt=""></p><h3 id="2-1-5-Maven软件版本测试"><a href="#2-1-5-Maven软件版本测试" class="headerlink" title="2.1.5 Maven软件版本测试"></a>2.1.5 Maven软件版本测试</h3><p>通过 mvn -v命令检查 maven是否安装成功，看到maven的版本为3.5.2及java版本为1.8即为安装成功。</p><p>找开cmd命令，输入<code>mvn –v</code>命令，如下图：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/O2SN4wHNS8Kd.png!blog" alt=""></p><p>我们发现maven的版本，及jdk的版本符合要求，这样我们的maven软件安装就成功了。</p>]]></content>
    
    <summary type="html">
    
      本章节介绍Maven的基本使用方法
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="Maven" scheme="https://blog.foreversfj.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>第2章 第二节 Maven仓库</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/02_2_Maven%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/02_2_Maven%E7%9A%84%E4%BD%BF%E7%94%A8.html</id>
    <published>2020-05-17T02:45:54.000Z</published>
    <updated>2020-05-17T04:13:29.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第2章-Maven的使用"><a href="#第2章-Maven的使用" class="headerlink" title="第2章 Maven的使用"></a>第2章 Maven的使用</h1><h2 id="2-2-Maven仓库"><a href="#2-2-Maven仓库" class="headerlink" title="2.2 Maven仓库"></a>2.2 Maven仓库</h2><h3 id="2-2-1-Maven仓库的分类"><a href="#2-2-1-Maven仓库的分类" class="headerlink" title="2.2.1 Maven仓库的分类"></a>2.2.1 Maven仓库的分类</h3><p>maven的工作需要从仓库下载一些jar包，如下图所示，本地的项目A、项目B等都会通过maven软件从远程仓库（可以理解为互联网上的仓库）下载jar包并存在本地仓库，本地仓库 就是本地文件夹，当第二次需要此jar包时则不再从远程仓库下载，因为本地仓库已经存在了，可以将本地仓库理解为缓存，有了本地仓库就不用每次从远程仓库下载了。</p><p>下图描述了maven中仓库的类型：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/CfyueE4VFSL0.png!blog" alt=""></p><ul><li><p>本地仓库 ：用来存储从远程仓库或中央仓库下载的插件和jar包，项目使用一些插件或jar包，优先从本地仓库查找</p><p>默认本地仓库位置在 <code>${user.dir}/.m2/repository</code>，<code>${user.dir}</code>表示windows用户目录。</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/VdQGL1ncnNgn.png!blog" alt=""></p></li><li><p>远程仓库：如果本地需要插件或者jar包，本地仓库没有，默认去远程仓库下载。</p><p>远程仓库可以在互联网内也可以在局域网内。</p></li><li><p>中央仓库 ：在maven软件中内置一个远程仓库<a href="http://repo1.maven.org/maven2" target="_blank" rel="noopener">地址</a> ，它是中央仓库，服务于整个互联网，它是由Maven团队自己维护，里面存储了非常全的jar包，它包含了世界上大部分流行的开源项目构件。</p></li></ul><h3 id="2-2-2-Maven本地仓库的配置"><a href="#2-2-2-Maven本地仓库的配置" class="headerlink" title="2.2.2 Maven本地仓库的配置"></a>2.2.2 Maven本地仓库的配置</h3><p>如果在无网的状态下学习，需要有事先准备的本地仓库，将 仓库文件“repository.rar”解压至自己的电脑上，如解压在D:\repository目录下（可以放在没有中文及空格的目录下）。</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/UAes3e0qcDN6.png!blog" alt=""></p><p>在MAVE_HOME/conf/settings.xml文件中配置本地仓库位置（maven的安装目录下）：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/BNQJyxs9Wea9.png!blog" alt=""></p><p>打开settings.xml文件，配置如下：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/IhIfGzkqosE1.png!blog" alt=""></p><h3 id="2-2-3-全局setting与用户setting"><a href="#2-2-3-全局setting与用户setting" class="headerlink" title="2.2.3 全局setting与用户setting"></a>2.2.3 全局setting与用户setting</h3><p>maven仓库地址、私服等配置信息需要在<code>setting.xml</code>文件中配置，分为全局配置和用户配置。</p><p>在maven安装目录下的有<code>conf/setting.xml</code>文件，此<code>setting.xml</code>文件用于maven的所有project项目，它作为maven的全局配置。</p><p>如需要个性配置则需要在用户配置中设置，用户配置的<code>setting.xml</code>文件默认的位置在：<code>${user.dir} /.m2/settings.xml</code>目录中,<code>${user.dir}</code>指windows 中的用户目录。</p><p>maven会先找用户配置，如果找到则以用户配置文件为准，否则使用全局配置文件。</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/AMxSvVjYacCM.png!blog" alt=""></p>]]></content>
    
    <summary type="html">
    
      本章节介绍Maven的仓库使用以及本地仓库的建立
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="Maven" scheme="https://blog.foreversfj.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>第1章 Maven介绍</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/01_Maven%E4%BB%8B%E7%BB%8D.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-Maven/01_Maven%E4%BB%8B%E7%BB%8D.html</id>
    <published>2020-05-17T02:35:05.000Z</published>
    <updated>2020-05-17T04:08:09.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-Maven介绍"><a href="#第1章-Maven介绍" class="headerlink" title="第1章 Maven介绍"></a>第1章 Maven介绍</h1><h2 id="1-1-什么是Maven"><a href="#1-1-什么是Maven" class="headerlink" title="1.1 什么是Maven"></a>1.1 什么是Maven</h2><h3 id="1-1-1-什么是Maven"><a href="#1-1-1-什么是Maven" class="headerlink" title="1.1.1 什么是Maven"></a>1.1.1 什么是Maven</h3><p>Maven的正确发音是[ˈmevən]，而不是“马瘟”以及其他什么瘟。Maven在美国是一个口语化的词语，代表专家、内行的意思。</p><p>一个对Maven比较正式的定义是这么说的：Maven是一个项目管理工具，它包含了一个项目对象模型 (<strong>POM：Project Object Model</strong>)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。</p><h3 id="1-1-1-Maven能解决什么问题"><a href="#1-1-1-Maven能解决什么问题" class="headerlink" title="1.1.1 Maven能解决什么问题"></a>1.1.1 Maven能解决什么问题</h3><p>可以用更通俗的方式来说明。我们知道，项目开发不仅仅是写写代码而已，期间会伴随着各种必不可少的事情要做，下面列举几个感受一下：</p><p>1、我们需要引用各种jar包，尤其是比较大的工程，引用的jar包往往有几十个乃至上百个， 每用到一种jar包，都需要手动引入工程目录，而且经常遇到各种让人抓狂的jar包冲突，版本冲突。</p><p>2、我们辛辛苦苦写好了Java文件，可是只懂0和1的白痴电脑却完全读不懂，需要将它编译成二进制字节码。好歹现在这项工作可以由各种集成开发工具帮我们完成，Eclipse、IDEA等都可以将代码即时编译。当然，如果你嫌生命漫长，何不铺张，也可以用记事本来敲代码，然后用javac命令一个个地去编译，逗电脑玩。</p><p>3、世界上没有不存在bug的代码，计算机喜欢bug就和人们总是喜欢美女帅哥一样。为了追求美为了减少bug，因此写完了代码，我们还要写一些单元测试，然后一个个的运行来检验代码质量。</p><p>4、再优雅的代码也是要出来卖的。我们后面还需要把代码与各种配置文件、资源整合到一起，定型打包，如果是web项目，还需要将之发布到服务器，供人蹂躏。</p><p>试想，如果现在有一种工具，可以把你从上面的繁琐工作中解放出来，能帮你构建工程，管理jar包，编译代码，还能帮你自动运行单元测试，打包，生成报表，甚至能帮你部署项目，生成Web站点，你会心动吗？Maven就可以解决上面所提到的这些问题。</p><h3 id="1-1-3-Maven的优势举例"><a href="#1-1-3-Maven的优势举例" class="headerlink" title="1.1.3 Maven的优势举例"></a>1.1.3 Maven的优势举例</h3><p>前面我们通过Web阶段项目，要能够将项目运行起来，就必须将该项目所依赖的一些jar包添加到工程中，否则项目就不能运行。试想如果具有相同架构的项目有十个，那么我们就需要将这一份jar包复制到十个不同的工程中。我们一起来看一个CRM项目的工程大小。</p><p>使用传统Web项目构建的CRM项目如下：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/na6ka6BeKifn.png!blog" alt=""></p><p>原因主要是因为上面的WEB程序要运行，我们必须将项目运行所需的Jar包复制到工程目录中，从而导致了工程很大。</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/gnQFi3pSIHXc.png!blog" alt=""></p><blockquote><p>小结：可以初步推断它里面一定没有jar 包，继续思考，没有jar包的项目怎么可能运行呢？</p></blockquote><h2 id="1-2-Maven的两个精典作用"><a href="#1-2-Maven的两个精典作用" class="headerlink" title="1.2 Maven的两个精典作用"></a>1.2 Maven的两个精典作用</h2><h3 id="1-2-1-Maven的依赖管理"><a href="#1-2-1-Maven的依赖管理" class="headerlink" title="1.2.1 Maven的依赖管理"></a>1.2.1 Maven的依赖管理</h3><p>Maven的一个核心特性就是依赖管理。当我们涉及到多模块的项目（包含成百个模块或者子项目），管理依赖就变成一项困难的任务。Maven展示出了它对处理这种情形的高度控制。</p><p>传统的WEB项目中，我们必须将工程所依赖的jar包复制到工程中，导致了工程的变得很大。那么maven工程是如何使得工程变得很少呢？</p><p>分析如下：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/Bis3JaFPmfiB.png!blog" alt=""></p><p>通过分析发现：maven工程中不直接将jar包导入到工程中，而是通过在pom.xml文件中添加所需jar包的坐标，这样就很好的避免了jar直接引入进来，在需要用到jar包的时候，只要查找pom.xml文件，再通过pom.xml文件中的坐标，到一个专门用于”存放jar包的仓库”(maven仓库)中根据坐标从而找到这些jar包，再把这些jar包拿去运行。</p><p>那么问题来了</p><p>第一：”存放jar包的仓库”长什么样？</p><p>第二：通过读取pom.xml 文件中的坐标，再到仓库中找到jar包，会不会很慢？从而导致这种方式不可行！</p><p>第一个问题：存放jar包的仓库长什么样，这一点我们后期会分析仓库的分类，也会带大家去看我们的本地的仓库长什么样。</p><p>第二个问题：通过pom.xml文件配置要引入的jar包的坐标，再读取坐标并到仓库中加载jar包，这样我们就可以直接使用jar包了，为了解决这个过程中速度慢的问题，maven中也有索引的概念，通过建立索引，可以大大提高加载jar包的速度，使得我们认为jar包基本跟放在本地的工程文件中再读取出来的速度是一样的。这个过程就好比我们查阅字典时，为了能够加快查找到内容，书前面的目录就好比是索引，有了这个目录我们就可以方便找到内容了，一样的在maven仓库中有了索引我们就可以认为可以快速找到jar包。</p><h3 id="1-2-2-项目的一键构建"><a href="#1-2-2-项目的一键构建" class="headerlink" title="1.2.2 项目的一键构建"></a>1.2.2 项目的一键构建</h3><p>我们的项目，往往都要经历编译、测试、运行、打包、安装 ，部署等一系列过程。</p><p><strong>什么是构建？</strong></p><p>指的是项目从编译、测试、运行、打包、安装 ，部署整个过程都交给maven进行管理，这个过程称为构建。</p><p><strong>一键构建</strong>：指的是整个构建过程，使用maven一个命令可以轻松完成整个工作。</p><p>Maven规范化构建流程如下：</p><p><img src="http://cdn.foreversfj.com/image/blog/20200517/eTwr6nSlMB3R.png!blog" alt=""></p>]]></content>
    
    <summary type="html">
    
      本章介绍什么是Maven，Maven有什么作用。
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="Maven" scheme="https://blog.foreversfj.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>第四部分 第十四章 3.Redis工具</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-Java/JavaWeb/14_3%20Redis%E5%B7%A5%E5%85%B7.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-Java/JavaWeb/14_3%20Redis%E5%B7%A5%E5%85%B7.html</id>
    <published>2019-08-28T03:28:23.000Z</published>
    <updated>2019-09-05T17:24:12.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="14-3-Redis工具"><a href="#14-3-Redis工具" class="headerlink" title="14.3 Redis工具"></a>14.3 Redis工具</h1><h2 id="14-3-1-持久化"><a href="#14-3-1-持久化" class="headerlink" title="14.3.1 持久化"></a>14.3.1 持久化</h2><ul><li><p>redis是一个内存数据库，当redis服务器重启，或者电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。</p></li><li><p>redis持久化机制：</p><ul><li><p><strong>RDB</strong>：默认方式，不需要进行配置，默认就使用这种机制</p><blockquote><p>在一定的间隔时间中，检测key的变化情况，然后持久化数据</p></blockquote><ol><li>编辑<code>redis.windwos.conf</code>文件<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   after 900 sec (15 min) if at least 1 key changed</span></span><br><span class="line"><span class="attr">save</span> <span class="string">900 1</span></span><br><span class="line"><span class="comment">#   after 300 sec (5 min) if at least 10 keys changed</span></span><br><span class="line"><span class="attr">save</span> <span class="string">300 10</span></span><br><span class="line"><span class="comment">#   after 60 sec if at least 10000 keys changed</span></span><br><span class="line"><span class="attr">save</span> <span class="string">60 10000</span></span><br></pre></td></tr></table></figure></li><li>重新启动redis服务器，并指定配置文件名称<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\JavaWeb\redis\windows<span class="number">-64</span>\redis<span class="number">-2.8</span><span class="number">.9</span>&gt;redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>AOF</strong>：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</p><ol><li>编辑<code>redis.windwos.conf</code>文件<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">appendonly</span> <span class="string">no（关闭aof） --&gt; appendonly yes （开启aof）</span></span><br><span class="line"><span class="comment"># appendfsync always ： 每一次操作都进行持久化</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">everysec ： 每隔一秒进行一次持久化</span></span><br><span class="line"><span class="comment"># appendfsync no     ： 不进行持久化</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><h2 id="14-3-2-Java客户端-Jedis"><a href="#14-3-2-Java客户端-Jedis" class="headerlink" title="14.3.2 Java客户端 Jedis"></a>14.3.2 Java客户端 Jedis</h2><ul><li><strong><code>Jedis</code></strong>： 一款java操作redis数据库的工具.</li></ul><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>下载jedis的jar包</li><li>使用  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>,<span class="number">6379</span>);</span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line">jedis.set(<span class="string">"username"</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure></li></ol><h4 id="Jedis操作各种redis中的数据结构"><a href="#Jedis操作各种redis中的数据结构" class="headerlink" title="Jedis操作各种redis中的数据结构"></a>Jedis操作各种redis中的数据结构</h4><h5 id="●-字符串类型-string"><a href="#●-字符串类型-string" class="headerlink" title="● 字符串类型 string"></a>● 字符串类型 string</h5><ul><li><strong><code>set</code></strong></li><li><strong><code>get</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line"><span class="comment">//如果使用空参构造，默认值 "localhost",6379端口</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">//存储</span></span><br><span class="line">jedis.set(<span class="string">"username"</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line">String username = jedis.get(<span class="string">"username"</span>);</span><br><span class="line">System.out.println(username);</span><br><span class="line"><span class="comment">//可以使用setex()方法存储可以指定过期时间的 key value</span></span><br><span class="line"><span class="comment">//将activecode：hehe键值对存入redis，并且20秒后自动删除该键值对</span></span><br><span class="line">jedis.setex(<span class="string">"activecode"</span>,<span class="number">20</span>,<span class="string">"hehe"</span>);</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><h5 id="●-哈希类型-hash"><a href="#●-哈希类型-hash" class="headerlink" title="● 哈希类型 hash"></a>● 哈希类型 hash</h5><p><strong>map格式</strong>  </p><ul><li><strong><code>hset</code></strong></li><li><strong><code>hget</code></strong></li><li><strong><code>hgetAll</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 "localhost",6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">// 存储hash</span></span><br><span class="line">jedis.hset(<span class="string">"user"</span>,<span class="string">"name"</span>,<span class="string">"lisi"</span>);</span><br><span class="line">jedis.hset(<span class="string">"user"</span>,<span class="string">"age"</span>,<span class="string">"23"</span>);</span><br><span class="line">jedis.hset(<span class="string">"user"</span>,<span class="string">"gender"</span>,<span class="string">"female"</span>);</span><br><span class="line"><span class="comment">// 获取hash</span></span><br><span class="line">String name = jedis.hget(<span class="string">"user"</span>, <span class="string">"name"</span>);</span><br><span class="line">System.out.println(name);</span><br><span class="line"><span class="comment">// 获取hash的所有map中的数据</span></span><br><span class="line">Map&lt;String, String&gt; user = jedis.hgetAll(<span class="string">"user"</span>);</span><br><span class="line"><span class="comment">// keyset</span></span><br><span class="line">Set&lt;String&gt; keySet = user.keySet();</span><br><span class="line"><span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">    <span class="comment">//获取value</span></span><br><span class="line">    String value = user.get(key);</span><br><span class="line">    System.out.println(key + <span class="string">":"</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><h5 id="●-列表类型-list"><a href="#●-列表类型-list" class="headerlink" title="● 列表类型 list"></a>● 列表类型 list</h5><p><strong>linkedlist格式。支持重复元素</strong></p><ul><li><strong><code>lpush / rpush</code></strong></li><li><strong><code>lpop / rpop</code></strong></li><li><strong><code>lrange start end</code></strong>：范围获取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 "localhost",6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">// list 存储</span></span><br><span class="line">jedis.lpush(<span class="string">"mylist"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);<span class="comment">//从左边存</span></span><br><span class="line">jedis.rpush(<span class="string">"mylist"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);<span class="comment">//从右边存</span></span><br><span class="line"><span class="comment">// list 范围获取</span></span><br><span class="line">List&lt;String&gt; mylist = jedis.lrange(<span class="string">"mylist"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(mylist);</span><br><span class="line"><span class="comment">// list 弹出</span></span><br><span class="line">String element1 = jedis.lpop(<span class="string">"mylist"</span>);<span class="comment">//c</span></span><br><span class="line">System.out.println(element1);</span><br><span class="line">String element2 = jedis.rpop(<span class="string">"mylist"</span>);<span class="comment">//c</span></span><br><span class="line">System.out.println(element2);</span><br><span class="line"><span class="comment">// list 范围获取</span></span><br><span class="line">List&lt;String&gt; mylist2 = jedis.lrange(<span class="string">"mylist"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(mylist2);</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><h5 id="●-集合类型-set"><a href="#●-集合类型-set" class="headerlink" title="● 集合类型 set"></a>● 集合类型 set</h5><p><strong>不允许重复元素</strong></p><ul><li><strong><code>sadd</code></strong></li><li><strong><code>smembers</code></strong>：获取所有元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 "localhost",6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">// set 存储</span></span><br><span class="line">jedis.sadd(<span class="string">"myset"</span>,<span class="string">"java"</span>,<span class="string">"php"</span>,<span class="string">"c++"</span>);</span><br><span class="line"><span class="comment">// set 获取</span></span><br><span class="line">Set&lt;String&gt; myset = jedis.smembers(<span class="string">"myset"</span>);</span><br><span class="line">System.out.println(myset);</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><h5 id="●-有序集合类型-sortedset"><a href="#●-有序集合类型-sortedset" class="headerlink" title="● 有序集合类型 sortedset"></a>● 有序集合类型 sortedset</h5><p><strong>不允许重复元素，且元素有顺序</strong></p><ul><li><strong><code>zadd</code></strong></li><li><strong><code>zrange</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 "localhost",6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">// sortedset 存储</span></span><br><span class="line">jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">3</span>,<span class="string">"亚瑟"</span>);</span><br><span class="line">jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">30</span>,<span class="string">"后裔"</span>);</span><br><span class="line">jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">55</span>,<span class="string">"孙悟空"</span>);</span><br><span class="line"><span class="comment">// sortedset 获取</span></span><br><span class="line">Set&lt;String&gt; mysortedset = jedis.zrange(<span class="string">"mysortedset"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(mysortedset);</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><h3 id="jedis连接池：-JedisPool"><a href="#jedis连接池：-JedisPool" class="headerlink" title="jedis连接池： JedisPool"></a>jedis连接池： JedisPool</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li><p>创建JedisPool连接池对象</p></li><li><p>调用方法 getResource()方法获取Jedis连接</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0.创建一个配置对象</span></span><br><span class="line">JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">config.setMaxTotal(<span class="number">50</span>);</span><br><span class="line">config.setMaxIdle(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//1.创建Jedis连接池对象</span></span><br><span class="line">JedisPool jedisPool = <span class="keyword">new</span> JedisPool(config,<span class="string">"localhost"</span>,<span class="number">6379</span>);</span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">Jedis jedis = jedisPool.getResource();</span><br><span class="line"><span class="comment">//3. 使用</span></span><br><span class="line">jedis.set(<span class="string">"hehe"</span>,<span class="string">"heihei"</span>);</span><br><span class="line"><span class="comment">//4. 关闭 归还到连接池中</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure></li></ol><h4 id="连接池工具类"><a href="#连接池工具类" class="headerlink" title="连接池工具类"></a>连接池工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        InputStream is = JedisPoolUtils.class.getClassLoader().getResourceAsStream("jedis.properties");</span><br><span class="line">        <span class="comment">//创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//关联文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pro.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取数据，设置到JedisPoolConfig中</span></span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(Integer.parseInt(pro.getProperty(<span class="string">"maxTotal"</span>)));</span><br><span class="line">        config.setMaxIdle(Integer.parseInt(pro.getProperty(<span class="string">"maxIdle"</span>)));</span><br><span class="line">        <span class="comment">//初始化JedisPool</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(config,pro.getProperty(<span class="string">"host"</span>),Integer.parseInt(pro.getProperty(<span class="string">"port"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取连接方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      redis是一个内存数据库，当redis服务器重启，或者电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="java" scheme="https://blog.foreversfj.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第四部分 第十四章 2.Redis使用</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-Java/JavaWeb/14_2%20Redis%E4%BD%BF%E7%94%A8.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-Java/JavaWeb/14_2%20Redis%E4%BD%BF%E7%94%A8.html</id>
    <published>2019-08-28T02:55:57.000Z</published>
    <updated>2019-09-05T15:39:45.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="14-2-Redis使用"><a href="#14-2-Redis使用" class="headerlink" title="14.2 Redis使用"></a>14.2 Redis使用</h1><h2 id="14-2-1-下载安装"><a href="#14-2-1-下载安装" class="headerlink" title="14.2.1 下载安装"></a>14.2.1 下载安装</h2><ul><li>官网：<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a></li><li>中文网：<a href="http://www.redis.net.cn/" target="_blank" rel="noopener">http://www.redis.net.cn/</a></li><li>解压直接可以使用：<ul><li><strong><code>redis.windows.conf</code></strong>：配置文件</li><li><strong><code>redis-cli.exe</code></strong>：redis的客户端</li><li><strong><code>redis-server.exe</code></strong>：redis服务器端</li></ul></li></ul><h2 id="14-2-2-命令操作"><a href="#14-2-2-命令操作" class="headerlink" title="14.2.2 命令操作"></a>14.2.2 命令操作</h2><h3 id="redis的数据结构"><a href="#redis的数据结构" class="headerlink" title="redis的数据结构"></a>redis的数据结构</h3><ul><li><p>redis存储的是：key,value格式的数据，其中key都是字符串，value有5种不同的数据结构</p><ul><li><p>value的数据结构：</p><ol><li>字符串类型 string</li><li>哈希类型 hash ： map格式  </li><li>列表类型 list ： linkedlist格式。支持重复元素</li><li>集合类型 set  ： 不允许重复元素</li><li>有序集合类型 sortedset：不允许重复元素，且元素有顺序</li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190905/V4bhfworbYOy.png!blog" alt=""></p></li></ul></li></ul><h3 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型 string"></a>字符串类型 string</h3><ol><li>存储：<strong><code>set key value</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> username zhangsan</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></li><li>获取：<strong><code>get key</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">get</span> username</span><br><span class="line"><span class="string">"zhangsan"</span></span><br></pre></td></tr></table></figure></li><li>删除：<strong><code>del key</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; del age</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="哈希类型-hash"><a href="#哈希类型-hash" class="headerlink" title="哈希类型 hash"></a>哈希类型 hash</h3><ol><li>存储：<strong><code>hset key field value</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hset myhash username lisi</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hset myhash password <span class="number">123</span></span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li>获取：<ul><li><strong><code>hget key field</code></strong>：获取指定的field对应的值<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hget myhash username</span><br><span class="line"><span class="string">"lisi"</span></span><br></pre></td></tr></table></figure></li><li><strong><code>hgetall key</code></strong>：获取所有的field和value<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hgetall myhash</span><br><span class="line"><span class="number">1</span>) <span class="string">"username"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"password"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"123"</span></span><br></pre></td></tr></table></figure></li></ul></li><li>删除：<strong><code>hdel key field</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hdel myhash username</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="列表类型-list"><a href="#列表类型-list" class="headerlink" title="列表类型 list"></a>列表类型 list</h3><p><b><font color=red>可以添加一个元素到列表的头部（左边）或者尾部（右边）</font></b></p><ul><li><strong>添加：</strong><ul><li><strong><code>lpush key value</code></strong>：将元素加入列表左表</li><li><strong><code>rpush key value</code></strong>：将元素加入列表右边<br><img src="//cdn.foreversfj.com/image/blog/20190905/NcC6MEH0LmFk.png!blog" alt=""><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush myList a</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush myList b</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush myList c</span><br><span class="line">(integer) <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>获取：</strong><ul><li><strong><code>lrange key start end</code></strong>：范围获取<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange myList <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"b"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"a"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"c"</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>删除：</strong><ul><li><strong><code>lpop key</code></strong>： 删除列表最左边的元素，并将元素返回</li><li><strong><code>rpop key</code></strong>： 删除列表最右边的元素，并将元素返回</li></ul></li></ul><h3 id="集合类型-set"><a href="#集合类型-set" class="headerlink" title="集合类型 set"></a>集合类型 set</h3><p><b><font color=red>不允许重复元素</font></b></p><ul><li>存储：<strong><code>sadd key value</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd myset a</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd myset a</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li>获取：<strong><code>smembers key</code></strong>：获取set集合中所有元素<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers myset</span><br><span class="line"><span class="number">1</span>) <span class="string">"a"</span></span><br></pre></td></tr></table></figure></li><li>删除：<strong><code>srem key value</code></strong>：删除set集合中的某个元素    <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; srem myset a</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="有序集合类型-sortedset"><a href="#有序集合类型-sortedset" class="headerlink" title="有序集合类型 sortedset"></a>有序集合类型 sortedset</h3><p><b><font color=red>不允许重复元素，且元素有顺序。</font></b>每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><ul><li>存储：<strong><code>zadd key score value</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd mysort <span class="number">60</span> zhangsan</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd mysort <span class="number">50</span> lisi</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd mysort <span class="number">80</span> wangwu</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li>获取：<strong><code>zrange key start end [withscores]</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange mysort <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"zhangsan"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"wangwu"</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange mysort <span class="number">0</span> <span class="number">-1</span> withscores</span><br><span class="line"><span class="number">1</span>) <span class="string">"zhangsan"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"60"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"wangwu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"80"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">6</span>) <span class="string">"500"</span></span><br></pre></td></tr></table></figure></li><li>删除：<strong><code>zrem key value</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrem mysort lisi</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><ul><li><strong><code>keys *</code></strong>：查询所有的键</li><li><strong><code>type key</code></strong>： 获取键对应的value的类型</li><li><strong><code>del key</code></strong>：删除指定的key value</li></ul><h2 id="14-2-3-一个小练习"><a href="#14-2-3-一个小练习" class="headerlink" title="14.2.3 一个小练习"></a>14.2.3 一个小练习</h2><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><ol><li>提供index.html页面，页面中有一个省份 下拉列表</li><li>当 页面加载完成后 发送ajax请求，加载所有省份</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>使用redis缓存一些不经常发生变化的数据。<ul><li>数据库的数据一旦发生改变，则需要更新缓存。<ul><li>数据库的表执行 增删改的相关操作，需要将redis缓存数据情况，再次存入</li><li>在service对应的增删改方法中，将redis数据删除。</li></ul></li></ul></li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190905/gcyjG7mX1Sjb.png!blog" alt=""></p>]]></content>
    
    <summary type="html">
    
      本节讲述Redis的基本使用语法
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="java" scheme="https://blog.foreversfj.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第四部分 第十四章 1.Redis</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-Java/JavaWeb/14_1%20Redis%E5%85%A5%E9%97%A8.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-Java/JavaWeb/14_1%20Redis%E5%85%A5%E9%97%A8.html</id>
    <published>2019-08-28T02:45:48.000Z</published>
    <updated>2019-09-05T15:33:52.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="14-1-Redis概念"><a href="#14-1-Redis概念" class="headerlink" title="14.1 Redis概念"></a>14.1 Redis概念</h1><p><strong>redis是一款高性能的NOSQL系列的非关系型数据库</strong></p><h2 id="14-1-1-什么是NOSQL"><a href="#14-1-1-什么是NOSQL" class="headerlink" title="14.1.1 什么是NOSQL"></a>14.1.1 什么是NOSQL</h2><p>&emsp;&emsp;<strong>NoSQL</strong>(<i>NoSQL = Not Only SQL</i>)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。</p><p>&emsp;&emsp;随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p><h3 id="NOSQL和关系型数据库比较"><a href="#NOSQL和关系型数据库比较" class="headerlink" title="NOSQL和关系型数据库比较"></a>NOSQL和关系型数据库比较</h3><ul><li><p><strong>优点：</strong></p><ul><li>成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。</li><li>查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。</li><li>存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。</li><li>扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。</li></ul></li><li><p><strong>缺点：</strong></p><ul><li>维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。</li><li>不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。</li><li>不提供关系型数据库对事务的处理。</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190905/4VPpver90VNr.png!blog" alt=""></p></li></ul><h3 id="非关系型数据库的优势"><a href="#非关系型数据库的优势" class="headerlink" title="非关系型数据库的优势"></a>非关系型数据库的优势</h3><ul><li>性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。</li><li>可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</li></ul><h3 id="关系型数据库的优势"><a href="#关系型数据库的优势" class="headerlink" title="关系型数据库的优势"></a>关系型数据库的优势</h3><ul><li>复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。</li><li>事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&emsp;&emsp;关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，</p><p>&emsp;&emsp;让NoSQL数据库对关系型数据库的不足进行弥补。</p><p>&emsp;&emsp;一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据</p><h2 id="14-1-2-主流的NOSQL产品"><a href="#14-1-2-主流的NOSQL产品" class="headerlink" title="14.1.2 主流的NOSQL产品"></a>14.1.2 主流的NOSQL产品</h2><h3 id="键值-Key-Value-存储数据库"><a href="#键值-Key-Value-存储数据库" class="headerlink" title="键值(Key-Value)存储数据库"></a>键值(Key-Value)存储数据库</h3><ul><li>相关产品： Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB</li><li>典型应用： 内容缓存，主要用于处理大量数据的高访问负载。 </li><li>数据模型： 一系列键值对</li><li>优势： 快速查询</li><li>劣势： 存储的数据缺少结构化</li></ul><h3 id="列存储数据库"><a href="#列存储数据库" class="headerlink" title="列存储数据库"></a>列存储数据库</h3><ul><li>相关产品：Cassandra, HBase, Riak</li><li>典型应用：分布式的文件系统</li><li>数据模型：以列簇式存储，将同一列数据存在一起</li><li>优势：查找速度快，可扩展性强，更容易进行分布式扩展</li><li>劣势：功能相对局限</li></ul><h3 id="文档型数据库"><a href="#文档型数据库" class="headerlink" title="文档型数据库"></a>文档型数据库</h3><ul><li>相关产品：CouchDB、MongoDB</li><li>典型应用：Web应用（与Key-Value类似，Value是结构化的）</li><li>数据模型： 一系列键值对</li><li>优势：数据结构要求不严格</li><li>劣势： 查询性能不高，而且缺乏统一的查询语法</li></ul><h3 id="图形-Graph-数据库"><a href="#图形-Graph-数据库" class="headerlink" title="图形(Graph)数据库"></a>图形(Graph)数据库</h3><ul><li>相关数据库：Neo4J、InfoGrid、Infinite Graph</li><li>典型应用：社交网络</li><li>数据模型：图结构</li><li>优势：利用图结构相关算法。</li><li>劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。</li></ul><h2 id="14-1-3-什么是Redis"><a href="#14-1-3-什么是Redis" class="headerlink" title="14.1.3 什么是Redis"></a>14.1.3 什么是Redis</h2><p>&emsp;&emsp;Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：</p><ul><li>字符串类型 string</li><li>哈希类型 hash</li><li>列表类型 list</li><li>集合类型 set</li><li>有序集合类型 sortedset</li></ul><h3 id="redis的应用场景"><a href="#redis的应用场景" class="headerlink" title="redis的应用场景"></a>redis的应用场景</h3><ul><li>缓存（数据查询、短连接、新闻内容、商品内容等等）</li><li>聊天室的在线好友列表</li><li>任务队列。（秒杀、抢购、12306等等）</li><li>应用排行榜</li><li>网站访问统计</li><li>数据过期处理（可以精确到毫秒</li><li>分布式集群架构中的session分离</li></ul>]]></content>
    
    <summary type="html">
    
      redis是一款高性能的NOSQL系列的非关系型数据库
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="java" scheme="https://blog.foreversfj.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第四部分 第十三章 2.JSON</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-Java/JavaWeb/13_2%20JSON.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-Java/JavaWeb/13_2%20JSON.html</id>
    <published>2019-08-28T02:25:40.000Z</published>
    <updated>2019-09-05T15:31:52.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="13-2-JSON"><a href="#13-2-JSON" class="headerlink" title="13.2 JSON"></a>13.2 JSON</h1><h2 id="13-2-1-概念"><a href="#13-2-1-概念" class="headerlink" title="13.2.1 概念"></a>13.2.1 概念</h2><p><strong>JavaScript Object Notation</strong>===&gt;JavaScript对象表示法</p><p><img src="http://cdn.foreversfj.com/image/blog/20190905/fc5zY4hmRFma.png?imageslim" alt="mark"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.setName(<span class="string">"张三"</span>);</span><br><span class="line">p.setAge(<span class="number">23</span>);</span><br><span class="line">p.setGender(<span class="string">"男"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="number">23</span>,<span class="string">"gender"</span>:<span class="string">"男"</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>json现在多用于存储和交换文本信息的语法</li><li>进行数据的传输</li><li>JSON 比 XML 更小、更快，更易解析。</li></ul><h2 id="13-2-2-语法"><a href="#13-2-2-语法" class="headerlink" title="13.2.2 语法"></a>13.2.2 语法</h2><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><ul><li>数据在名称/值对中：json数据是由键值对构成的<ul><li>键用引号(单双都行)引起来，也可以不使用引号</li><li>值得取值类型：<ol><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true 或 false）</li><li>数组（在方括号中）<code>{&quot;persons&quot;:[{},{}]}</code></li><li>对象（在花括号中）<code>{&quot;address&quot;:{&quot;province&quot;：&quot;陕西&quot;....}}</code></li><li>null</li></ol></li></ul></li><li>数据由逗号分隔：多个键值对由逗号分隔</li><li>花括号保存对象：使用<code>{}</code>定义json 格式</li><li>方括号保存数组：<code>[]</code></li></ul><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><ol><li>json对象.键名</li><li>json对象[“键名”]</li><li>数组对象[索引]</li><li>遍历  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义基本格式</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="string">'gender'</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> ps = [&#123;<span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="string">"age"</span>: <span class="number">23</span>, <span class="string">"gender"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">          &#123;<span class="string">"name"</span>: <span class="string">"李四"</span>, <span class="string">"age"</span>: <span class="number">24</span>, <span class="string">"gender"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">          &#123;<span class="string">"name"</span>: <span class="string">"王五"</span>, <span class="string">"age"</span>: <span class="number">25</span>, <span class="string">"gender"</span>: <span class="literal">false</span>&#125;];</span><br><span class="line"><span class="comment">//获取person对象中所有的键和值</span></span><br><span class="line"><span class="comment">/** //for in 循环</span></span><br><span class="line"><span class="comment"> * for(var key in person)&#123;</span></span><br><span class="line"><span class="comment"> *   //这样的方式获取不行。因为相当于  person."name"</span></span><br><span class="line"><span class="comment"> *   //alert(key + ":" + person.key);</span></span><br><span class="line"><span class="comment"> *   alert(key+":"+person[key]);</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//获取ps中的所有值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ps.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> p = ps[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> p)&#123;</span><br><span class="line">        alert(key+<span class="string">":"</span>+p[key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="13-2-3-JSON数据和Java对象的相互转换"><a href="#13-2-3-JSON数据和Java对象的相互转换" class="headerlink" title="13.2.3 JSON数据和Java对象的相互转换"></a>13.2.3 JSON数据和Java对象的相互转换</h2><ul><li><strong>JSON解析器：</strong><ul><li>常见的解析器：<code>Jsonlib</code>，<code>Gson</code>，<code>fastjson</code>，<code>jackson</code></li></ul></li></ul><ol><li><p><strong>JSON转为Java对象</strong></p><ol><li>导入jackson的相关jar包</li><li>创建Jackson核心对象 ObjectMapper</li><li>调用ObjectMapper的相关方法进行转换<ol><li>readValue(json字符串数据,Class)</li></ol></li></ol></li><li><p><strong>Java对象转换JSON</strong></p><ol><li><p>使用步骤：</p><ul><li>导入jackson的相关jar包</li><li>创建Jackson核心对象 ObjectMapper</li><li>调用ObjectMapper的相关方法进行转换</li></ul><ol><li><p><strong>转换方法：</strong></p><ul><li><strong><code>writeValue(参数1，obj)</code></strong><blockquote><p>参数1：</p><ul><li><strong><code>File</code></strong>：将obj对象转换为JSON字符串，并保存到指定的文件中</li><li><strong><code>Writer</code></strong>：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中</li><li><strong><code>OutputStream</code></strong>：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中</li></ul></blockquote></li><li><strong><code>writeValueAsString(obj)</code></strong>：将对象转为json字符串</li></ul></li><li><p><strong>注解：</strong></p><ul><li><p><strong><code>@JsonIgnore</code></strong>：排除属性。</p></li><li><p><strong><code>@JsonFormat</code></strong>：属性值得格式化</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><strong>复杂java对象转换</strong></p><ul><li><strong><code>List</code></strong>：数组</li><li><strong><code>Map</code></strong>：对象格式一致</li></ul></li></ol></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      json多用于存储和交换文本信息的语法，原来进行数据的传输
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="java" scheme="https://blog.foreversfj.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第四部分 第十三章 1.AJAX</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-Java/JavaWeb/13_1%20AJAX.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-Java/JavaWeb/13_1%20AJAX.html</id>
    <published>2019-08-28T01:47:53.000Z</published>
    <updated>2019-09-05T15:26:53.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="13-1-AJAX"><a href="#13-1-AJAX" class="headerlink" title="13.1 AJAX"></a>13.1 AJAX</h1><h2 id="13-1-1-概念"><a href="#13-1-1-概念" class="headerlink" title="13.1.1 概念"></a>13.1.1 概念</h2><p><strong>ASynchronous JavaScript And XML</strong>===&gt;异步的JavaScript和XML</p><p><strong>异步和同步</strong>：客户端和服务器端相互通信的基础上</p><p><img src="//cdn.foreversfj.com/image/blog/20190905/AXpIP1AovaFe.png!blog" alt=""></p><ul><li>客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。</li><li>客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</li></ul><p>&emsp;&emsp;<strong>Ajax</strong>是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p><p>&emsp;&emsp;通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><p>&emsp;&emsp;传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。</p><p>&emsp;&emsp;提升用户的体验</p><h2 id="13-1-2-实现方式"><a href="#13-1-2-实现方式" class="headerlink" title="13.1.2 实现方式"></a>13.1.2 实现方式</h2><h3 id="原生的JS实现方式"><a href="#原生的JS实现方式" class="headerlink" title="原生的JS实现方式"></a>原生的JS实现方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建核心对象</span></span><br><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">&#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">// code for IE6, IE5</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. 建立连接</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数：</span></span><br><span class="line"><span class="comment"> *  1. 请求方式：GET、POST</span></span><br><span class="line"><span class="comment"> *    * get方式，请求参数在URL后边拼接。send方法为空参</span></span><br><span class="line"><span class="comment"> *    * post方式，请求参数在send方法中定义</span></span><br><span class="line"><span class="comment"> *  2. 请求的URL：</span></span><br><span class="line"><span class="comment"> *  3. 同步或异步请求：true（异步）或 false（同步）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"ajaxServlet?username=tom"</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//3.发送请求</span></span><br><span class="line">xmlhttp.send();</span><br><span class="line"><span class="comment">//4.接受并处理来自服务器的响应结果</span></span><br><span class="line"><span class="comment">//获取方式 ：xmlhttp.responseText</span></span><br><span class="line"><span class="comment">//什么时候获取？当服务器响应成功后再获取</span></span><br><span class="line"><span class="comment">//当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。</span></span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断readyState就绪状态是否为4，判断status响应状态码是否为200</span></span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取服务器的响应结果</span></span><br><span class="line">        <span class="keyword">var</span> responseText = xmlhttp.responseText;</span><br><span class="line">        alert(responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JQeury实现方式"><a href="#JQeury实现方式" class="headerlink" title="JQeury实现方式"></a>JQeury实现方式</h3><h4 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax()"></a><code>$.ajax()</code></h4><ul><li><strong>语法</strong>：<code>$.ajax({键值对})</code>;</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用$.ajax()发送异步请求</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">"ajaxServlet1111"</span> , <span class="comment">// 请求路径</span></span><br><span class="line">    type:<span class="string">"POST"</span> , <span class="comment">//请求方式</span></span><br><span class="line">    <span class="comment">//data: "username=jack&amp;age=23",//请求参数</span></span><br><span class="line">    data:&#123;<span class="string">"username"</span>:<span class="string">"jack"</span>,<span class="string">"age"</span>:<span class="number">23</span>&#125;,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        alert(data);</span><br><span class="line">    &#125;,<span class="comment">//响应成功后的回调函数</span></span><br><span class="line">    error:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"出错啦..."</span>)</span><br><span class="line">    &#125;,<span class="comment">//表示如果请求响应出现错误，会执行的回调函数</span></span><br><span class="line">    dataType:<span class="string">"text"</span><span class="comment">//设置接受到的响应数据的格式</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="get-：发送get请求"><a href="#get-：发送get请求" class="headerlink" title="$.get()：发送get请求"></a><code>$.get()</code>：发送get请求</h4><ul><li><strong>语法</strong>：<code>$.get(url, [data], [callback], [type])</code></li><li><strong>参数</strong>：<ul><li><strong><code>url</code></strong>：请求路径</li><li><strong><code>data</code></strong>：请求参数</li><li><strong><code>callback</code></strong>：回调函数</li><li><strong><code>type</code></strong>：响应结果的类型</li></ul></li></ul><h4 id="post-：发送post请求"><a href="#post-：发送post请求" class="headerlink" title="$.post()：发送post请求"></a><code>$.post()</code>：发送post请求</h4><ul><li><strong>语法</strong>：<code>$.post(url, [data], [callback], [type])</code></li><li><strong>参数</strong>：<ul><li><strong><code>url</code></strong>：请求路径</li><li><strong><code>data</code></strong>：请求参数</li><li><strong><code>callback</code></strong>：回调函数</li><li><strong><code>type</code></strong>：响应结果的类型</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="java" scheme="https://blog.foreversfj.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第四部分 第十二章 4.案例</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-Java/JavaWeb/12_4%20JQuery%E6%A1%88%E4%BE%8B.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-Java/JavaWeb/12_4%20JQuery%E6%A1%88%E4%BE%8B.html</id>
    <published>2019-08-27T11:38:28.000Z</published>
    <updated>2019-09-05T15:24:55.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-4-案例"><a href="#12-4-案例" class="headerlink" title="12.4 案例"></a>12.4 案例</h1><h2 id="12-4-1-广告显示和隐藏"><a href="#12-4-1-广告显示和隐藏" class="headerlink" title="12.4.1 广告显示和隐藏"></a>12.4.1 广告显示和隐藏</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>广告的自动显示与隐藏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#content</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">height</span>:<span class="number">500px</span>;<span class="attribute">background</span>:<span class="number">#999</span>&#125;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入jquery--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">            /**</span><br><span class="line">             * 需求：</span><br><span class="line">             *   1. 当页面加载完，3秒后。自动显示广告</span><br><span class="line">             *   2. 广告显示5秒后，自动消失。</span><br><span class="line">             * 分析：</span><br><span class="line">             *   1. 使用定时器来完成。setTimeout (执行一次定时器)</span><br><span class="line">             *   2. 分析发现JQuery的显示和隐藏动画效果其实就是控制display</span><br><span class="line">             *   3. 使用  show/hide方法来完成广告的显示</span><br><span class="line">             */</span><br><span class="line"><span class="actionscript">            <span class="comment">//入口函数，在页面加载完成之后，定义定时器，调用这两个方法</span></span></span><br><span class="line"><span class="javascript">            $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//定义定时器，调用adShow方法 3秒后执行一次</span></span></span><br><span class="line">                setTimeout(adShow,3000);</span><br><span class="line"><span class="actionscript">                <span class="comment">//定义定时器，调用adHide方法，8秒后执行一次</span></span></span><br><span class="line">                setTimeout(adHide,8000);</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="actionscript">            <span class="comment">//显示广告</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">adShow</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//获取广告div，调用显示方法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#ad"</span>).show(<span class="string">"slow"</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">//隐藏广告</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">adHide</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//获取广告div，调用隐藏方法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#ad"</span>).hide(<span class="string">"slow"</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 整体的DIV --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 广告DIV --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ad"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"width:100%"</span> <span class="attr">src</span>=<span class="string">"../img/adv.jpg"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 下方正文部分 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">                正文部分</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="12-4-2-抽奖"><a href="#12-4-2-抽奖" class="headerlink" title="12.4.2 抽奖"></a>12.4.2 抽奖</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>jquery案例之抽奖<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">'javascript'</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            /**</span><br><span class="line">             * 分析：</span><br><span class="line">             * 1. 给开始按钮绑定单击事件</span><br><span class="line">             *  1.1 定义循环定时器</span><br><span class="line">             *  1.2 切换小相框的src属性</span><br><span class="line">             *    * 定义数组，存放图片资源路径</span><br><span class="line">             *    * 生成随机数。数组索引</span><br><span class="line">             * 2. 给结束按钮绑定单击事件</span><br><span class="line">             *  2.1 停止定时器</span><br><span class="line">             *  2.2 给大相框设置src属性</span><br><span class="line">             */</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> imgs = [<span class="string">"../img/man00.jpg"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"../img/man01.jpg"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"../img/man02.jpg"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"../img/man03.jpg"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"../img/man04.jpg"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"../img/man05.jpg"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"../img/man06.jpg"</span>,</span></span><br><span class="line">                       ];</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> startId;<span class="comment">//开始定时器的id</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> index;<span class="comment">//随机角标</span></span></span><br><span class="line"><span class="javascript">            $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//处理按钮是否可以使用的效果</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#startID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#stopID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//1. 给开始按钮绑定单击事件</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#startID"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 1.1 定义循环定时器 20毫秒执行一次</span></span></span><br><span class="line"><span class="actionscript">                    startId = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//处理按钮是否可以使用的效果</span></span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"#startID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"#stopID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//1.2生成随机角标 0-6</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//0.000--0.999 --&gt; * 7 --&gt; 0.0-----6.9999</span></span></span><br><span class="line"><span class="javascript">                        index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">7</span>);</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//1.3设置小相框的src属性</span></span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"#img1ID"</span>).prop(<span class="string">"src"</span>,imgs[index]);</span></span><br><span class="line">                    &#125;,20);</span><br><span class="line">                &#125;);</span><br><span class="line"><span class="actionscript">                <span class="comment">//2. 给结束按钮绑定单击事件</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#stopID"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//处理按钮是否可以使用的效果</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#startID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#stopID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 1.1 停止定时器</span></span></span><br><span class="line">                    clearInterval(startId);</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 1.2 给大相框设置src属性</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#img2ID"</span>).prop(<span class="string">"src"</span>,imgs[index]).hide();</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//显示1秒之后</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#img2ID"</span>).show(<span class="number">1000</span>);</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 小像框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border-style:dotted;width:160px;height:100px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img1ID"</span> <span class="attr">src</span>=<span class="string">"../img/man00.jpg"</span>             <span class="attr">style</span>=<span class="string">"width:160px;height:100px"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 大像框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">             <span class="attr">style</span>=<span class="string">"border-style:double;width:800px;height:500px;position:absolute;left:500px;top:10px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img2ID"</span> <span class="attr">src</span>=<span class="string">"../img/man00.jpg"</span> <span class="attr">width</span>=<span class="string">"800px"</span> <span class="attr">height</span>=<span class="string">"500px"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开始按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">               <span class="attr">id</span>=<span class="string">"startID"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">type</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">value</span>=<span class="string">"点击开始"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">style</span>=<span class="string">"width:150px;height:150px;font-size:22px"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 停止按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">               <span class="attr">id</span>=<span class="string">"stopID"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">type</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">value</span>=<span class="string">"点击停止"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">style</span>=<span class="string">"width:150px;height:150px;font-size:22px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="插件：增强JQuery的功能"><a href="#插件：增强JQuery的功能" class="headerlink" title="插件：增强JQuery的功能"></a>插件：增强JQuery的功能</h2><ol><li><strong><code>$.fn.extend(object)</code></strong><ul><li>增强通过Jquery获取的对象的功能  <code>$(&quot;#id&quot;)</code></li></ul></li><li><strong><code>$.extend(object)</code></strong><ul><li>增强JQeury对象自身的功能 <code>$/jQuery</code></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      本节展示使用JQuery的两个案例
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="java" scheme="https://blog.foreversfj.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第四部分 第十二章 3.JQuery 高级</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-Java/JavaWeb/12_3%20JQuery%20%E9%AB%98%E7%BA%A7.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-Java/JavaWeb/12_3%20JQuery%20%E9%AB%98%E7%BA%A7.html</id>
    <published>2019-08-27T03:12:53.000Z</published>
    <updated>2019-09-05T15:24:31.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-3-JQuery-高级"><a href="#12-3-JQuery-高级" class="headerlink" title="12.3 JQuery 高级"></a>12.3 JQuery 高级</h1><h2 id="12-3-1-动画"><a href="#12-3-1-动画" class="headerlink" title="12.3.1 动画"></a>12.3.1 动画</h2><h3 id="三种方式显示和隐藏元素"><a href="#三种方式显示和隐藏元素" class="headerlink" title="三种方式显示和隐藏元素"></a>三种方式显示和隐藏元素</h3><ul><li><p>默认显示和隐藏方式</p><ul><li><strong><code>show([speed,[easing],[fn]])</code></strong></li><li><strong><code>hide([speed,[easing],[fn]])</code></strong></li><li><strong><code>toggle([speed],[easing],[fn])</code></strong></li></ul></li><li><p>滑动显示和隐藏方式</p><ul><li><strong><code>slideDown([speed],[easing],[fn])</code></strong></li><li><strong><code>slideUp([speed,[easing],[fn]])</code></strong></li><li><strong><code>slideToggle([speed],[easing],[fn])</code></strong></li></ul></li><li><p>淡入淡出显示和隐藏方式</p><ul><li><strong><code>fadeIn([speed],[easing],[fn])</code></strong></li><li><strong><code>fadeOut([speed],[easing],[fn])</code></strong></li><li><strong><code>fadeToggle([speed,[easing],[fn]])</code></strong></li></ul><blockquote><ol><li><strong><code>speed</code></strong>：动画的速度。三个预定义的值(“<code>slow</code>“，”<code>normal</code>“，”<code>fast</code>“)或表示动画时长的毫秒数值(如：1000)</li><li><strong><code>easing</code></strong>：用来指定切换效果，默认是”<code>swing</code>“，可用参数”<code>linear</code>“<ul><li><strong><code>swing</code></strong>：动画执行时效果是 先慢，中间快，最后又慢</li><li><strong><code>linear</code></strong>：动画执行时速度是匀速的</li></ul></li><li><strong><code>fn</code></strong>：在动画完成时执行的函数，每个元素执行一次。</li></ol></blockquote></li></ul><h2 id="12-3-2-遍历"><a href="#12-3-2-遍历" class="headerlink" title="12.3.2 遍历"></a>12.3.2 遍历</h2><h3 id="js的遍历方式"><a href="#js的遍历方式" class="headerlink" title="js的遍历方式"></a>js的遍历方式</h3><ul><li>for(初始化值;循环结束条件;步长)</li></ul><h3 id="jq的遍历方式"><a href="#jq的遍历方式" class="headerlink" title="jq的遍历方式"></a>jq的遍历方式</h3><ul><li><p><strong><code>jq对象.each(callback)</code></strong></p><ul><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jquery对象.each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong><code>index</code></strong>：就是元素在集合中的索引</li><li><strong><code>element</code></strong>：就是集合中的每一个元素对象</li><li><strong><code>this</code></strong>：集合中的每一个元素对象</li></ul></li><li><p>回调函数返回值：</p><ul><li><strong><code>true</code></strong>：如果当前function返回为false，则结束循环(break)。</li><li><strong><code>false</code></strong>：如果当前function返回为true，则结束本次循环，继续下次循环(continue)</li></ul></li></ul></li><li><p><strong><code>$.each(object, [callback])</code></strong></p></li><li><p><strong><code>for..of</code></strong>：jquery 3.0 版本之后提供的方式</p><ul><li>for(元素对象 of 容器对象)</li></ul></li></ul><h2 id="12-3-3-事件绑定"><a href="#12-3-3-事件绑定" class="headerlink" title="12.3.3 事件绑定"></a>12.3.3 事件绑定</h2><ol><li><p>jquery标准的绑定方式</p><ul><li><code>jq对象.事件方法(回调函数)</code>；</li><li>注：如果调用事件方法，不传递回调函数，则会触发浏览器默认行为。<ul><li><code>表单对象.submit()</code>；//让表单提交</li></ul></li></ul></li><li><p>on绑定事件/off解除绑定</p><ul><li><code>jq对象.on(&quot;事件名称&quot;,回调函数)</code></li><li><code>jq对象.off(&quot;事件名称&quot;)</code><ul><li>如果off方法不传递任何参数，则将组件上的所有事件全部解绑</li></ul></li></ul></li><li><p>事件切换：<code>toggle</code></p><ul><li><p><strong><code>jq对象.toggle(fn1,fn2...)</code></strong></p><ul><li>当单击jq对象对应的组件后，会执行fn1.第二次点击会执行fn2…..</li></ul></li><li><p>注意：1.9版本<code>toggle()</code>方法删除,<code>jQuery Migrate</code>（迁移）插件可以恢复此功能。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-migrate-1.0.0.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      本节简述JQuery的三种普遍应用方法
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="java" scheme="https://blog.foreversfj.com/tags/java/"/>
    
      <category term="JQuery" scheme="https://blog.foreversfj.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>第四部分 第十二章 2.DOM操作</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-Java/JavaWeb/12_2%20DOM%E6%93%8D%E4%BD%9C.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-Java/JavaWeb/12_2%20DOM%E6%93%8D%E4%BD%9C.html</id>
    <published>2019-08-27T02:12:01.000Z</published>
    <updated>2019-09-05T15:22:12.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-2-DOM操作"><a href="#12-2-DOM操作" class="headerlink" title="12.2 DOM操作"></a>12.2 DOM操作</h1><h2 id="12-2-1-内容操作"><a href="#12-2-1-内容操作" class="headerlink" title="12.2.1  内容操作"></a>12.2.1  内容操作</h2><ul><li><p><strong><code>html()</code></strong>：获取/设置元素的标签体内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">font</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>  --&gt; <span class="tag">&lt;<span class="name">font</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>text()</code></strong>：获取/设置元素的标签体纯文本内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">font</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> --&gt; 内容</span><br></pre></td></tr></table></figure></li><li><p><strong><code>val()</code></strong>： 获取/设置元素的value属性值</p></li></ul><h2 id="12-2-2-属性操作"><a href="#12-2-2-属性操作" class="headerlink" title="12.2.2 属性操作"></a>12.2.2 属性操作</h2><ul><li>通用属性操作<ul><li><strong><code>attr()</code></strong>：获取/设置元素的属性</li><li><strong><code>removeAttr()</code></strong>：删除属性</li><li><strong><code>prop()</code></strong>：获取/设置元素的属性</li><li><strong><code>removeProp()</code></strong>：删除属性<blockquote><p><code>attr</code>和<code>prop</code>区别？<br>&emsp;&emsp;1、如果操作的是元素的固有属性，则建议使用prop<br>&emsp;&emsp;2、如果操作的是元素自定义的属性，则建议使用attr</p></blockquote></li></ul></li><li>对class属性操作<ul><li><strong><code>addClass()</code></strong>：添加class属性值</li><li><strong><code>removeClass()</code></strong>：删除class属性值</li><li><strong><code>toggleClass()</code></strong>：切换class属性<blockquote><p><strong><code>toggleClass(&quot;one&quot;)：</code></strong><br>&emsp;&emsp;判断如果元素对象上存在<code>class=&quot;one&quot;</code>，则将属性值one删除掉。  如果元素对象上不存在<code>class=&quot;one&quot;</code>，则添加</p></blockquote></li><li>**<code>css()</code></li></ul></li></ul><h2 id="12-2-3-CRUD操作"><a href="#12-2-3-CRUD操作" class="headerlink" title="12.2.3 CRUD操作"></a>12.2.3 CRUD操作</h2><ul><li><strong><code>append()</code></strong>：父元素将子元素追加到末尾<ul><li><strong><code>对象1.append(对象2)</code></strong>：将对象2添加到对象1元素内部，并且在末尾</li></ul></li><li><strong><code>prepend()</code></strong>：父元素将子元素追加到开头<ul><li><strong><code>对象1.prepend(对象2)</code></strong>：将对象2添加到对象1元素内部，并且在开头</li></ul></li><li>**<code>appendTo()</code><ul><li><strong><code>对象1.appendTo(对象2)</code></strong>：将对象1添加到对象2内部，并且在末尾</li></ul></li><li><strong><code>prependTo()</code></strong><ul><li><strong><code>对象1.prependTo(对象2)</code></strong>：将对象1添加到对象2内部，并且在开头</li></ul></li><li><strong><code>after()</code></strong>：添加元素到元素后边<ul><li><strong><code>对象1.after(对象2)</code></strong>： 将对象2添加到对象1后边。对象1和对象2是兄弟关系</li></ul></li><li><strong><code>before()</code></strong>：添加元素到元素前边<ul><li><strong><code>对象1.before(对象2)</code></strong>： 将对象2添加到对象1前边。对象1和对象2是兄弟关系</li></ul></li><li><strong><code>insertAfter()</code></strong><ul><li><strong><code>对象1.insertAfter(对象2)</code></strong>：将对象2添加到对象1后边。对象1和对象2是兄弟关系</li></ul></li><li><strong><code>insertBefore()</code></strong><ul><li><strong><code>对象1.insertBefore(对象2)</code></strong>： 将对象2添加到对象1前边。对象1和对象2是兄弟关系</li></ul></li><li><strong><code>remove()</code></strong>：移除元素<ul><li><strong><code>对象.remove()</code></strong>：将对象删除掉</li></ul></li><li><strong><code>empty()</code></strong>：清空元素的所有后代元素。<ul><li><strong><code>对象.empty()</code></strong>：将对象的后代元素全部清空，但是保留当前对象以及其属性节点</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      使用JQuery内置的DOM操作，对html内容进行文本操作
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="java" scheme="https://blog.foreversfj.com/tags/java/"/>
    
      <category term="JQuery" scheme="https://blog.foreversfj.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>第四部分 第十二章 1.JQuery 基础</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-Java/JavaWeb/12_1%20JQuery%20%E5%9F%BA%E7%A1%80.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-Java/JavaWeb/12_1%20JQuery%20%E5%9F%BA%E7%A1%80.html</id>
    <published>2019-08-27T01:31:21.000Z</published>
    <updated>2019-09-05T15:20:14.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-1-JQuery-基础"><a href="#12-1-JQuery-基础" class="headerlink" title="12.1 JQuery 基础"></a>12.1 JQuery 基础</h1><h2 id="12-1-1-概念及入门"><a href="#12-1-1-概念及入门" class="headerlink" title="12.1.1 概念及入门"></a>12.1.1 概念及入门</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>一个JavaScript框架。简化JS开发</strong></p><p>&emsp;&emsp;jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优    化HTML文档操作、事件处理、动画设计和Ajax交互。<br>&emsp;&emsp;<strong>JavaScript框架：</strong>本质上就是一些js文件，封装了js的原生代码而已</p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li><p>下载JQuery，目前jQuery有三个大版本：</p><ul><li><strong><code>1.x</code></strong>：兼容ie678,使用最为广泛的，官方只做BUG维护，功能不再新增。因此一般项目来说，使用1.x版本就可以了。目前最终版本为：1.12.4 (2016年5月20日)。</li><li><strong><code>2.x</code></strong>：不兼容ie678，很少有人使用，官方只做BUG维护，功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x。最终版本：2.2.4 (2016年5月20日)。</li><li><strong><code>3.x</code></strong>：不兼容ie678，只支持最新的浏览器。除非特殊要求，一般不会使用3.x版本的，很多老的jQuery插件不支持这个版本。目前该版本是官方主要更新维护的版本。</li></ul><blockquote><p><strong><code>jquery-xxx.js</code> 与<code>jquery-xxx.min.js</code>区别：</strong><br>&emsp;&emsp;1、<strong><code>jquery-xxx.js</code></strong>：开发版本。给程序员看的，有良好的缩进和注释。体积大一些<br>&emsp;&emsp;2、<strong><code>jquery-xxx.min.js</code></strong>：生产版本。程序中使用，没有缩进。体积小一些。程序加载更快</p></blockquote></li><li><p>导入JQuery的js文件：导入min.js文件</p></li><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = $(<span class="string">"#div1"</span>);</span><br><span class="line">alert(div1.html());</span><br></pre></td></tr></table></figure></li></ol><h4 id="JQuery对象和JS对象区别与转换"><a href="#JQuery对象和JS对象区别与转换" class="headerlink" title="JQuery对象和JS对象区别与转换"></a>JQuery对象和JS对象区别与转换</h4><ol><li>JQuery对象在操作时，更加方便。</li><li>JQuery对象和js对象方法不通用的.</li><li>两者相互转换<blockquote><p>jq ===&gt; js：<code>jq对象[索引]</code>或者<code>jq对象.get(索引)</code><br>js ===&gt; jq：<code>$(js对象)</code></p></blockquote></li></ol><h2 id="12-1-2-选择器"><a href="#12-1-2-选择器" class="headerlink" title="12.1.2 选择器"></a>12.1.2 选择器</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li><strong>选择器：</strong>筛选具有相似特征的元素(标签)</li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ol><li><p>事件绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取b1按钮</span></span><br><span class="line">$(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"abc"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>入口函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>window.onload</code>  和 <code>$(function)</code>区别</strong><br>&emsp;&emsp;1、<strong><code>window.onload</code></strong> 只能定义一次，如果定义多次，后边的会将前边的覆盖掉<br>&emsp;&emsp;2、<strong><code>$(function)</code></strong> 可以定义多次的。</p></blockquote></li><li><p>样式控制：css方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $("#div1").css("background-color","red");</span></span><br><span class="line">$(<span class="string">"#div1"</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"pink"</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="①-基本选择器"><a href="#①-基本选择器" class="headerlink" title="① 基本选择器"></a>① 基本选择器</h4><ul><li>标签选择器（元素选择器）<ul><li>语法：<code>$(&quot;html标签名&quot;)</code>获得所有匹配标签名称的元素</li></ul></li><li>id选择器 <ul><li>语法：<code>$(&quot;#id的属性值&quot;)</code>获得与指定id属性值匹配的元素</li></ul></li><li>类选择器<ul><li>语法：<code>$(&quot;.class的属性值&quot;)</code>获得与指定的class属性值匹配的元素</li></ul></li><li>并集选择器<ul><li>语法：<code>$(&quot;选择器1,选择器2....&quot;)</code>获取多个选择器选中的所有元素</li></ul></li></ul><h4 id="②-层级选择器"><a href="#②-层级选择器" class="headerlink" title="② 层级选择器"></a>② 层级选择器</h4><ul><li>后代选择器<ul><li>语法：<code>$(&quot;A B &quot;)</code>选择A元素内部的所有B元素</li></ul></li><li>子选择器<ul><li>语法：<code>$(&quot;A &gt; B&quot;)</code>选择A元素内部的所有B子元素</li></ul></li></ul><h4 id="③-属性选择器"><a href="#③-属性选择器" class="headerlink" title="③ 属性选择器"></a>③ 属性选择器</h4><ul><li>属性名称选择器<ul><li>语法：<code>$(&quot;A[属性名]&quot;)</code>包含指定属性的选择器</li></ul></li><li>属性选择器<ul><li>语法：<code>$(&quot;A[属性名=&#39;值&#39;]&quot;)</code>包含指定属性等于指定值的选择器</li></ul></li><li>复合属性选择器<ul><li>语法：<code>$(&quot;A[属性名=&#39;值&#39;][]...&quot;)</code>包含多个属性条件的选择器</li></ul></li></ul><h4 id="④-过滤选择器"><a href="#④-过滤选择器" class="headerlink" title="④ 过滤选择器"></a>④ 过滤选择器</h4><ul><li>首元素选择器<ul><li>语法：<code>:first</code>获得选择的元素中的第一个元素</li></ul></li><li>尾元素选择器<ul><li>语法：<code>:last</code>获得选择的元素中的最后一个元素</li></ul></li><li>非元素选择器<ul><li>语法：<code>:not(selector)</code>不包括指定内容的元素</li></ul></li><li>偶数选择器<ul><li>语法：<code>:even</code>偶数，从 0 开始计数</li></ul></li><li>奇数选择器<ul><li>语法：<code>:odd</code>奇数，从 0 开始计数</li></ul></li><li>等于索引选择器<ul><li>语法：<code>:eq(index)</code>指定索引元素</li></ul></li><li>大于索引选择器<ul><li>语法：<code>:gt(index)</code>大于指定索引元素</li></ul></li><li>小于索引选择器<ul><li>语法：<code>:lt(index)</code>小于指定索引元素</li></ul></li><li>标题选择器<ul><li>语法：<code>:header</code>获得标题（h1~h6）元素，固定写法</li></ul></li></ul><h4 id="⑤-表单过滤选择器"><a href="#⑤-表单过滤选择器" class="headerlink" title="⑤ 表单过滤选择器"></a>⑤ 表单过滤选择器</h4><ul><li>可用元素选择器 <ul><li>语法：<code>:enabled</code>获得可用元素</li></ul></li><li>不可用元素选择器<ul><li>语法：<code>:disabled</code>获得不可用元素</li></ul></li><li>选中选择器 <ul><li>语法：<code>:checked</code>获得单选/复选框选中的元素</li></ul></li><li>选中选择器 <ul><li>语法：<code>:selected</code>获得下拉框选中的元素</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="java" scheme="https://blog.foreversfj.com/tags/java/"/>
    
      <category term="JQuery" scheme="https://blog.foreversfj.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>第四部分 第十一章 4.Session</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-Java/JavaWeb/11_4%20Session.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-Java/JavaWeb/11_4%20Session.html</id>
    <published>2019-08-27T00:28:37.000Z</published>
    <updated>2019-09-05T15:15:30.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-4-Session"><a href="#11-4-Session" class="headerlink" title="11.4 Session"></a>11.4 Session</h1><h2 id="11-4-1-入门"><a href="#11-4-1-入门" class="headerlink" title="11.4.1 入门"></a>11.4.1 入门</h2><ol><li><p><strong>概念</strong>：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。<code>HttpSession</code></p></li><li><p><strong>快速入门</strong>：</p><ol><li><p>获取<code>HttpSession</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br></pre></td></tr></table></figure></li><li><p>使用<code>HttpSession</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">getAttribute</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, Object value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="11-4-2-细节"><a href="#11-4-2-细节" class="headerlink" title="11.4.2 细节"></a>11.4.2 细节</h2><ol><li><p>当客户端关闭后，服务器不关闭，两次获取session是否为同一个？</p><ul><li><p>默认情况下。不是。</p></li><li><p>如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>,session.getId());</span><br><span class="line">c.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">response.addCookie(c);</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>客户端不关闭，服务器关闭后，两次获取的session是同一个吗？</p><ul><li><p>不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作</p><ul><li><p>session的钝化：</p><blockquote><p>在服务器正常关闭之前，将session对象系列化到硬盘上</p></blockquote></li><li><p>session的活化：</p><blockquote><p>在服务器启动后，将session文件转化为内存中的session对象即可。</p></blockquote></li></ul></li></ul></li><li><p>session什么时候被销毁？</p><ul><li><p>服务器关闭</p></li><li><p>session对象调用<code>invalidate()</code>。</p></li><li><p>session默认失效时间 30分钟<br>选择性配置修改    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190905/9KAX6tQcbhSV.png!blog" alt=""></p><h2 id="11-4-3-session的特点"><a href="#11-4-3-session的特点" class="headerlink" title="11.4.3 session的特点"></a>11.4.3 session的特点</h2><ol><li>session用于存储一次会话的多次请求的数据，存在服务器端<ol start="2"><li>session可以存储任意类型，任意大小的数据</li></ol></li></ol><ul><li><strong>session与Cookie的区别：</strong><ol><li>session存储数据在服务器端，Cookie在客户端</li><li>session没有数据大小限制，Cookie有</li><li>session数据安全，Cookie相对于不安全</li></ol></li></ul><h2 id="案例：验证码"><a href="#案例：验证码" class="headerlink" title="案例：验证码"></a><em>案例：验证码</em></h2><p>案例需求：</p><ol><li>访问带有验证码的登录页面login.jsp</li><li>用户输入用户名，密码以及验证码。<ul><li>如果用户名和密码输入有误，跳转登录页面，提示:用户名或密码错误</li><li>如果验证码输入有误，跳转登录页面，提示：验证码错误</li><li>如果全部输入正确，则跳转到主页success.jsp，显示：用户名,欢迎您</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      Session是服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="java" scheme="https://blog.foreversfj.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第四部分 第十一章 3.JSP：入门学习</title>
    <link href="https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-26-Java/JavaWeb/11_3%20JSP.html"/>
    <id>https://blog.foreversfj.com/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-26-Java/JavaWeb/11_3%20JSP.html</id>
    <published>2019-08-26T12:18:50.000Z</published>
    <updated>2019-09-05T15:13:26.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-3-JSP：入门学习"><a href="#11-3-JSP：入门学习" class="headerlink" title="11.3 JSP：入门学习"></a>11.3 JSP：入门学习</h1><h2 id="11-3-1-概念"><a href="#11-3-1-概念" class="headerlink" title="11.3.1 概念"></a>11.3.1 概念</h2><ul><li><i>Java Server Pages</i>： java服务器端页面<ul><li>可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码</li><li>用于简化书写！！！</li></ul></li></ul><h2 id="11-3-2-原理"><a href="#11-3-2-原理" class="headerlink" title="11.3.2 原理"></a>11.3.2 原理</h2><ul><li>JSP本质上就是一个Servlet</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190905/U7DOKinnVn8N.png!blog" alt=""></p><ul><li>JSP的脚本：JSP定义Java代码的方式<ol><li><strong><code>&lt;%  代码 %&gt;</code></strong>：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。</li><li><strong><code>&lt;%! 代码 %&gt;</code></strong>：定义的java代码，在jsp转换后的java类的成员位置。</li><li><strong><code>&lt;%= 代码 %&gt;</code></strong>：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。</li></ol></li><li>JSP的内置对象<ul><li>在jsp页面中不需要获取和创建，可以直接使用的对象</li><li>jsp一共有9个内置对象。<ul><li><strong><code>request</code></strong></li><li><strong><code>response</code></strong></li><li><strong><code>out</code></strong>：字符输出流对象。可以将数据输出到页面上。和<code>response.getWriter()</code>类似<blockquote><p><strong><code>response.getWriter()</code>和<code>out.write()</code>的区别：</strong></p><ul><li>在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。</li><li><strong><code>response.getWriter()</code></strong>数据输出永远在<code>out.write()</code>之前 </li></ul></blockquote></li></ul></li></ul></li></ul><h2 id="案例-改造Cookie案例"><a href="#案例-改造Cookie案例" class="headerlink" title="案例:改造Cookie案例"></a><em>案例:改造Cookie案例</em></h2><p><img src="//cdn.foreversfj.com/image/blog/20190905/7RSn947JJjYn.png!blog" alt=""></p>]]></content>
    
    <summary type="html">
    
      本节介绍JSP的入门学习内容
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://blog.foreversfj.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="java" scheme="https://blog.foreversfj.com/tags/java/"/>
    
  </entry>
  
</feed>
