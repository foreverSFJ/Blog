<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第5章 Maven总结</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/05_Maven%E6%80%BB%E7%BB%93.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/05_Maven%E6%80%BB%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<h1 id="第5章-Maven总结"><a href="#第5章-Maven总结" class="headerlink" title="第5章 Maven总结"></a>第5章 Maven总结</h1><h2 id="5-1-Maven仓库"><a href="#5-1-Maven仓库" class="headerlink" title="5.1 Maven仓库"></a>5.1 Maven仓库</h2><p>1、Maven仓库的类型有哪些？</p><p>2、Maven工程查找仓库的流程是什么？</p><p>3、本地仓库如何配置？</p><h2 id="5-2-常用的Maven命令"><a href="#5-2-常用的Maven命令" class="headerlink" title="5.2 常用的Maven命令"></a>5.2 常用的Maven命令</h2><p>常用的Maven命令包括：</p><ul><li><p>compile：编译</p></li><li><p>clean：清理</p></li><li><p>test：测试</p></li><li><p>package：打包</p></li><li><p>install：安装</p></li></ul><h2 id="5-3-坐标定义"><a href="#5-3-坐标定义" class="headerlink" title="5.3 坐标定义"></a>5.3 坐标定义</h2><p>在pom.xml中定义坐标，内容包括：groupId、artifactId、version，详细内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--项目名称，定义为组织名+项目名，类似包名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模块名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-first<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当前项目版本号，snapshot为快照版本即非正式版本，release为正式发布版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>打包类型<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-4-pom基本配置"><a href="#5-4-pom基本配置" class="headerlink" title="5.4 pom基本配置"></a>5.4 pom基本配置</h2><p>pom.xml是Maven项目的核心配置文件，位于每个工程的根目录，基本配置如下：</p><p><code>&lt;project &gt;</code> ：文件的根节点 . </p><p><code>&lt;modelversion &gt;</code>： pom.xml使用的对象模型版本</p><p><code>&lt;groupId &gt;</code>：项目名称，一般写项目的域名</p><p><code>&lt;artifactId &gt;</code>：模块名称，子项目名或模块名称</p><p><code>&lt;version &gt;</code> ：产品的版本号 .</p><p><code>&lt;packaging &gt;</code>：打包类型，一般有jar、war、pom 等 </p><p><code>&lt;name &gt;</code>：项目的显示名，常用于 Maven 生成的文档。 </p><p><code>&lt;description &gt;</code> ：项目描述，常用于 Maven 生成的文档</p><p><code>&lt;dependencies&gt;</code>：项目依赖构件配置，配置项目依赖构件的坐标</p><p><code>&lt;build&gt;</code>：项目构建配置，配置编译、运行插件等。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第4章 maven工程运行调试</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/04_Maven%E5%B7%A5%E7%A8%8B%E7%9A%84%E8%BF%90%E8%A1%8C%E8%B0%83%E8%AF%95.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/04_Maven%E5%B7%A5%E7%A8%8B%E7%9A%84%E8%BF%90%E8%A1%8C%E8%B0%83%E8%AF%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="第4章-maven工程运行调试"><a href="#第4章-maven工程运行调试" class="headerlink" title="第4章 maven工程运行调试"></a>第4章 maven工程运行调试</h1><h2 id="4-1-端口占用处理"><a href="#4-1-端口占用处理" class="headerlink" title="4.1 端口占用处理"></a>4.1 端口占用处理</h2><p>重新执行<code>tomcat:run</code>命令重启工程，重启之前需手动停止 tomcat，否则报下边的错误：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/vkUB4o26BAAc.jpg!blog" alt=""></p><h2 id="4-2-断点调试"><a href="#4-2-断点调试" class="headerlink" title="4.2 断点调试"></a>4.2 断点调试</h2><p>点击如图所示选项</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/OkkU6rGunWui.jpg!blog" alt=""></p><p>在弹出框中点击如图加号按钮找到maven选项</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/97wtSXG7RbgB.jpg!blog" alt=""></p><p>在弹出窗口中填写如下信息</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/v7aGXeFPPgj7.jpg!blog" alt=""></p><p>完成后先Apply再OK结束配置后，可以在主界面找到我们刚才配置的操作名称。</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/3prLSaeGqNqb.jpg!blog" alt=""></p><p>如上图红框选中的两个按钮，左侧是正常启动，右侧是debug启动。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第3章 第二节 idea开发maven项目</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/03_2_Maven%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/03_2_Maven%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
      
        <content type="html"><![CDATA[<h1 id="第3章-Maven常用命令"><a href="#第3章-Maven常用命令" class="headerlink" title="第3章 Maven常用命令"></a>第3章 Maven常用命令</h1><h2 id="3-4-idea开发maven项目"><a href="#3-4-idea开发maven项目" class="headerlink" title="3.4 idea开发maven项目"></a>3.4 idea开发maven项目</h2><h3 id="3-4-1-idea的maven配置"><a href="#3-4-1-idea的maven配置" class="headerlink" title="3.4.1 idea的maven配置"></a>3.4.1 idea的maven配置</h3><p><strong>配置maven</strong>：</p><p>打开→File→Settings配置maven</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/ejb99w4pNzMy.png!blog" alt=""></p><p>依据图片指示，选择本地maven安装目录，指定maven安装目录下conf文件夹中settings配置文件。</p><h3 id="3-4-2-创建一个maven的web工程"><a href="#3-4-2-创建一个maven的web工程" class="headerlink" title="3.4.2 创建一个maven的web工程"></a>3.4.2 创建一个maven的web工程</h3><ol><li><p>打开idea，选择创建一个新工程</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/pOaj7TDNkyGO.png!blog" alt=""></p></li><li><p>选择 idea 提供好的 maven 的web 工程模板 </p><p><img src="//cdn.foreversfj.com/image/blog/20200517/ncJfS0azBbOx.png!blog" alt=""></p></li><li><p>点击 Next 填写项目信息 </p><p><img src="//cdn.foreversfj.com/image/blog/20200517/g0blHtpn1SQF.png!blog" alt=""></p></li><li><p>点击Next，此处不做改动。</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/Tuvak2l30qTG.jpg!blog" alt=""></p></li><li><p>点击Next选择项目所在目录</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/l10j0JH0rnXD.jpg!blog" alt=""></p></li><li><p>点击Finish后开始创建工程，耐心等待，直到出现如下界面。</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/rWHek1fbGCat.jpg!blog" alt=""></p></li><li><p>手动添加<code>src/main/java</code>目录，如下图右键main文件夹→New→Directory</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/pF7K6tamzlva.jpg!blog" alt=""></p></li><li><p>创建一个新的文件夹命名为java</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/bL0gXIcVKPOr.jpg!blog" alt=""></p></li><li><p>点击OK后，在新的文件夹java上右键→Make Directory as→Sources Root</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/xOdbXql4JtAu.jpg!blog" alt=""></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第3章 第二节 maven项目搭建Web构架</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/03_3_Maven%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/03_3_Maven%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
      
        <content type="html"><![CDATA[<h1 id="第3章-Maven常用命令"><a href="#第3章-Maven常用命令" class="headerlink" title="第3章 Maven常用命令"></a>第3章 Maven常用命令</h1><h2 id="3-5-搭建Web构架"><a href="#3-5-搭建Web构架" class="headerlink" title="3.5 搭建Web构架"></a>3.5 搭建Web构架</h2><h3 id="3-5-1-创建一个Servlet"><a href="#3-5-1-创建一个Servlet" class="headerlink" title="3.5.1 创建一个Servlet"></a>3.5.1 创建一个Servlet</h3><p><code>src/java/main</code>创建了一个Servlet，但报错</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/vmFL9CzttfFq.jpg!blog" alt=""></p><p>要解决问题，就是要将<code>servlet-api-xxx.jar</code>包放进来，作为maven工程应当添加servlet的坐标，从而导入它的jar</p><h3 id="3-5-2-在pom-xml文件添加坐标"><a href="#3-5-2-在pom-xml文件添加坐标" class="headerlink" title="3.5.2 在pom.xml文件添加坐标"></a>3.5.2 在pom.xml文件添加坐标</h3><p>直接打开<code>hello_maven</code>工程的<code>pom.xml</code>文件，再添加坐标</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/1kCgzDwPQmP2.jpg!blog" alt=""></p><p>添加jar包的坐标时，还可以指定这个jar包将来的作用范围。</p><p>每个maven工程都需要定义本工程的坐标，坐标是maven对jar包的身份定义，比如：入门程序的坐标定义如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--项目名称，定义为组织名+项目名，类似包名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模块名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello_maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当前项目版本号，snapshot为快照版本即非正式版本，release为正式发布版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span> &gt;</span>打包类型<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 打包类型：</span></span><br><span class="line"><span class="comment">jar：执行package会打成jar包</span></span><br><span class="line"><span class="comment">war：执行package会打成war包</span></span><br><span class="line"><span class="comment">pom ：用于maven工程的继承，通常父工程设置为pom --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-3-坐标的来源方式"><a href="#3-5-3-坐标的来源方式" class="headerlink" title="3.5.3 坐标的来源方式"></a>3.5.3 坐标的来源方式</h3><p>添加依赖需要指定依赖jar包的坐标，但是很多情况我们是不知道jar包的的坐标，可以通过如下方式查询：</p><ul><li><p><strong>从互联网搜索：</strong></p><ul><li><a href="http://search.maven.org/" target="_blank" rel="noopener">http://search.maven.org/</a></li><li><a href="http://mvnrepository.com/" target="_blank" rel="noopener">http://mvnrepository.com/</a></li></ul><p>网站搜索示例：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/Tg18pSltSjTe.jpg!blog" alt=""></p><p><img src="//cdn.foreversfj.com/image/blog/20200517/2m3PGbHmT3qM.jpg!blog" alt=""></p></li></ul><h3 id="3-5-4-依赖范围"><a href="#3-5-4-依赖范围" class="headerlink" title="3.5.4 依赖范围"></a>3.5.4 依赖范围</h3><p>A依赖B，需要在A的<code>pom.xml</code>文件中添加B的坐标，添加坐标时需要指定依赖范围，依赖范围包括：</p><ul><li><p><strong>compile：</strong>编译范围，指A在编译时依赖B，此范围为默认依赖范围。编译范围的依赖会用在编译、测试、运行，由于运行时需要所以编译范围的依赖会被打包。</p></li><li><p><strong>provided：</strong>provided依赖只有在当JDK或者一个容器已提供该依赖之后才使用， provided依赖在编译和测试时需要，在运行时不需要，比如：servlet api被tomcat容器提供。</p></li><li><p><strong>runtime：</strong>runtime依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如：jdbc的驱动包。由于运行时需要所以runtime范围的依赖会被打包。</p></li><li><p><strong>test：</strong>test范围依赖 在编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用，比如：junit。由于运行时不需要所以test范围依赖不会被打包。</p></li><li><p><strong>system</strong>：system范围依赖与provided类似，但是你必须显式的提供一个对于本地系统中JAR文件的路径，需要指定systemPath磁盘路径，system依赖不推荐使用。</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/v4yJnnH4KRxw.jpg!blog" alt=""></p></li></ul><p>在maven-web工程中测试各各scop。</p><p><strong>测试总结：</strong></p><ul><li>默认引入 的jar包 ——- compile 【默认范围 可以不写】（编译、测试、运行 都有效 ）</li><li>servlet-api 、jsp-api ——- provided （编译、测试 有效， 运行时无效 防止和tomcat下jar冲突）</li><li>jdbc驱动jar包 —- runtime （测试、运行 有效 ）</li><li>junit —– test （测试有效）</li></ul><p>依赖范围由强到弱的顺序是：<strong>compile&gt;provided&gt;runtime&gt;test</strong></p><h3 id="3-5-5-项目中添加的坐标"><a href="#3-5-5-项目中添加的坐标" class="headerlink" title="3.5.5 项目中添加的坐标"></a>3.5.5 项目中添加的坐标</h3><p><img src="//cdn.foreversfj.com/image/blog/20200517/574WJOC4w7qv.jpg!blog" alt=""></p><h3 id="3-5-6-设置jdk编译版本"><a href="#3-5-6-设置jdk编译版本" class="headerlink" title="3.5.6 设置jdk编译版本"></a>3.5.6 设置jdk编译版本</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-7-编写servlet"><a href="#3-5-7-编写servlet" class="headerlink" title="3.5.7 编写servlet"></a>3.5.7 编写servlet</h3><p>在<code>src/main/java</code>中创建ServletTest</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/NCb0SwQ5xHkj.jpg!blog" alt=""></p><p>内容如下：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/bb09gFWJHEIe.jpg!blog" alt=""></p><h3 id="3-5-8-编写jsp"><a href="#3-5-8-编写jsp" class="headerlink" title="3.5.8 编写jsp"></a>3.5.8 编写jsp</h3><p><img src="//cdn.foreversfj.com/image/blog/20200517/kumyavwMXozJ.jpg!blog" alt=""></p><h3 id="3-5-9-在web-xml中配置servlet访问路径"><a href="#3-5-9-在web-xml中配置servlet访问路径" class="headerlink" title="3.5.9 在web.xml中配置servlet访问路径"></a>3.5.9 在web.xml中配置servlet访问路径</h3><p><img src="//cdn.foreversfj.com/image/blog/20200517/06VpaRl0eKv2.jpg!blog" alt=""></p><h3 id="3-5-10-添加tomcat7插件"><a href="#3-5-10-添加tomcat7插件" class="headerlink" title="3.5.10 添加tomcat7插件"></a>3.5.10 添加tomcat7插件</h3><p>在pom文件中添加如下内容</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/NaTY43jl8v3D.jpg!blog" alt=""></p><p>此时点击idea最右侧Maven Projects，</p><p>就可以看到我们新添加的tomcat7插件</p><p>双击tomcat7插件下tomcat7:run命令直接运行项目</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/2oh117eAHdu3.jpg!blog" alt=""></p><p>也可以直接点击如图按钮，手动输入tomc7:run命令运行项目</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/Xfzvrrk6nac7.jpg!blog" alt=""></p><p>点击后弹出如下图窗口</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/8YeRrzsq8hQN.jpg!blog" alt=""></p><h3 id="3-5-11-运行结果"><a href="#3-5-11-运行结果" class="headerlink" title="3.5.11 运行结果"></a>3.5.11 运行结果</h3><p><img src="//cdn.foreversfj.com/image/blog/20200517/LIfFb80cCSxk.jpg!blog" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第3章 第一节 Maven常用命令</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/03_1_Maven%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/03_1_Maven%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
      
        <content type="html"><![CDATA[<h1 id="第3章-Maven常用命令"><a href="#第3章-Maven常用命令" class="headerlink" title="第3章 Maven常用命令"></a>第3章 Maven常用命令</h1><h2 id="3-1-基础命令"><a href="#3-1-基础命令" class="headerlink" title="3.1 基础命令"></a>3.1 基础命令</h2><h3 id="3-1-1-compile"><a href="#3-1-1-compile" class="headerlink" title="3.1.1 compile"></a>3.1.1 compile</h3><p>compile是maven工程的编译命令，作用是将src/main/java下的文件编译为class文件输出到target目录下。</p><p>cmd进入命令状态，执行mvn compile，如下图提示成功：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/1m6rvM3QttnH.png!blogw" alt=""></p><p>查看 target 目录，class 文件已生成，编译完成。 </p><p><img src="//cdn.foreversfj.com/image/blog/20200517/w229C9VcGl0u.png!blog" alt=""></p><h3 id="3-1-2-test"><a href="#3-1-2-test" class="headerlink" title="3.1.2 test"></a>3.1.2 test</h3><p>test 是 maven 工程的测试命令  <code>mvn test</code>，会执行 <code>src/test/java</code> 下的单元测试类。 </p><p>cmd 执行<code>mvn test</code>执行 <code>src/test/java</code>下单元测试类，下图为测试结果，运行 1 个测试用例，全部成功。</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/zdDGcw9iRKad.png!blog" alt=""></p><h3 id="3-1-3-clean"><a href="#3-1-3-clean" class="headerlink" title="3.1.3 clean"></a>3.1.3 clean</h3><p>clean是maven工程的清理命令，执行 <code>clean</code>会删除<code>target</code>目录及内容。</p><h3 id="3-1-4-package"><a href="#3-1-4-package" class="headerlink" title="3.1.4 package"></a>3.1.4 package</h3><p>package是maven工程的打包命令，对于java工程执行package打成jar包，对于web工程打成war包。</p><h3 id="3-1-5-install"><a href="#3-1-5-install" class="headerlink" title="3.1.5 install"></a>3.1.5 install</h3><p>install是maven工程的安装命令，执行install将maven打成jar包或war包发布到本地仓库。</p><p>从运行结果中，可以看出：</p><p><strong>当后面的命令执行时，前面的操作过程也都会自动。</strong></p><h2 id="3-2-Maven指令的生命周期"><a href="#3-2-Maven指令的生命周期" class="headerlink" title="3.2 Maven指令的生命周期"></a>3.2 Maven指令的生命周期</h2><p>maven对项目构建过程分为三套相互独立的生命周期，请注意这里说的是“三套”，而且“相互独立”，这三套生命周期分别是：</p><p><strong>Clean Lifecycle</strong> 在进行真正的构建之前进行一些清理工作。</p><p><strong>Default Lifecycle</strong> 构建的核心部分，编译，测试，打包，部署等等。</p><p><strong>Site Lifecycle</strong> 生成项目报告，站点，发布站点。</p><h2 id="3-3-maven的概念模型"><a href="#3-3-maven的概念模型" class="headerlink" title="3.3 maven的概念模型"></a>3.3 maven的概念模型</h2><p>Maven包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/BufzmTgRimWR.png!blog" alt=""></p><ul><li><p>项目对象模型 (Project Object Model)</p><p>一个maven工程都有一个pom.xml文件，通过pom.xml文件定义项目的坐标、项目依赖、项目信息、插件目标等。</p></li><li><p>依赖管理系统(Dependency Management System)</p><p>通过maven的依赖管理对项目所依赖的jar 包进行统一管理。</p><p>比如：项目依赖<code>junit4.9</code>，通过在<code>pom.xml</code>中定义<code>junit4.9</code>的依赖，即使用<code>junit4.9</code>，如下所示是<code>junit4.9</code>的依赖定义：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此项目运行使用junit，所以此项目依赖junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit的项目名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit的模块名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖范围：单元测试时使用junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>一个项目生命周期(Project Lifecycle)</p><p>使用maven完成项目的构建，项目构建包括：清理、编译、测试、部署等过程，maven将这些过程规范为一个生命周期，如下所示是生命周期的各各阶段：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/H3wflCNCSHro.png!blog" alt=""></p><p>maven通过执行一些简单命令即可实现上边生命周期的各各过程，比如执行mvn compile执行编译、执行mvn clean执行清理。</p></li><li><p>一组标准集合</p><p>maven将整个项目管理过程定义一组标准，比如：通过maven构建工程有标准的目录结构，有标准的生命周期阶段、依赖管理有标准的坐标定义等。</p></li><li><p>插件(plugin)目标(goal)</p><p>maven 管理项目生命周期过程都是基于插件完成的。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第2章 第三节 Maven工程的认识</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/02_3_Maven%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/02_3_Maven%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="第2章-Maven的使用"><a href="#第2章-Maven的使用" class="headerlink" title="第2章 Maven的使用"></a>第2章 Maven的使用</h1><h2 id="2-3-Maven工程的认识"><a href="#2-3-Maven工程的认识" class="headerlink" title="2.3 Maven工程的认识"></a>2.3 Maven工程的认识</h2><h3 id="2-3-1-Maven工程的目录结构"><a href="#2-3-1-Maven工程的目录结构" class="headerlink" title="2.3.1 Maven工程的目录结构"></a>2.3.1 Maven工程的目录结构</h3><p><img src="//cdn.foreversfj.com/image/blog/20200517/dq1MUjv6FbJ2.png!blog" alt=""></p><p>作为一个maven工程，它的src目录和pom.xml是必备的。</p><p>进入src目录后，我们发现它里面的目录结构如下：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/aabYL9g2adwT.png!blog" alt=""></p><p><strong><code>src/main/java</code></strong> —— 存放项目的.java文件</p><p><strong><code>src/main/resources</code></strong> —— 存放项目资源文件，如spring, hibernate配置文件</p><p><strong><code>src/test/java</code></strong> —— 存放所有单元测试.java文件，如JUnit测试类</p><p><strong><code>src/test/resources</code></strong> —— 测试资源文件</p><p><strong><code>target</code></strong> —— 项目输出位置，编译后的class文件会输出到此目录</p><p><strong><code>pom.xml</code></strong>——maven项目核心配置文件</p><blockquote><p>注意：如果是普通的java项目，那么就没有webapp目录。</p></blockquote><h3 id="2-3-2-Maven工程的运行"><a href="#2-3-2-Maven工程的运行" class="headerlink" title="2.3.2 Maven工程的运行"></a>2.3.2 Maven工程的运行</h3><p>进入maven工程目录（当前目录有<code>pom.xml</code>文件），运行<code>tomcat:run</code>命令。</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/HdSVL4K2vB2u.png!blog" alt=""></p><p>根据上边的提示信息，通过浏览器访问：<a href="http://localhost:8080/maven-helloworld/" target="_blank" rel="noopener">http://localhost:8080/maven-helloworld/</a></p><p><img src="//cdn.foreversfj.com/image/blog/20200517/5Yiux7V91roC.png!blog" alt=""></p><h3 id="2-3-3-问题处理"><a href="#2-3-3-问题处理" class="headerlink" title="2.3.3 问题处理"></a>2.3.3 问题处理</h3><p>如果本地仓库配置错误会报下边的错误</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/eruuy2QPeQde.png!blog" alt=""></p><p><strong>分析：</strong></p><p>maven工程运行先从本地仓库找jar包，本地仓库没有再从中央仓库找，上边提示downloading…<br>表示 从中央仓库下载jar，由于本地没有联网，报错。</p><p><strong>解决：</strong></p><p>在maven安装目录的conf/setting.xml文件中配置本地仓库，参考上一节。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第2章 第一节 Maven的安装</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/02_1_Maven%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/02_1_Maven%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="第2章-Maven的使用"><a href="#第2章-Maven的使用" class="headerlink" title="第2章 Maven的使用"></a>第2章 Maven的使用</h1><h2 id="2-1-Maven的安装"><a href="#2-1-Maven的安装" class="headerlink" title="2.1 Maven的安装"></a>2.1 Maven的安装</h2><h3 id="2-1-1-Maven软件的下载"><a href="#2-1-1-Maven软件的下载" class="headerlink" title="2.1.1 Maven软件的下载"></a>2.1.1 Maven软件的下载</h3><p>为了使用Maven管理工具，我们首先要到官网去下载它的安装软件。通过百度搜索“Maven“如下：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/KGP0at1pYOOE.png!blog" alt=""></p><p>点击<code>Download</code>链接，就可以直接进入到<code>Maven</code>软件的下载页面：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/9Tqpc7Y2qGN3.png!blog" alt=""></p><p>目前最新版是apache-maven-3.5.3版本，我们当时使用的是apache-maven-3.5.2版本，大家也可以下载最新版本。</p><p>Apache-maven-3.5.2下载地址：<a href="http://archive.apache.org/dist/maven/maven-3/" target="_blank" rel="noopener">http://archive.apache.org/dist/maven/maven-3/</a></p><p>下载后的版本如下：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/fzziX8i8o7Kc.png!blog" alt=""></p><h3 id="2-1-2-Maven软件的安装"><a href="#2-1-2-Maven软件的安装" class="headerlink" title="2.1.2 Maven软件的安装"></a>2.1.2 Maven软件的安装</h3><p>Maven下载后，将Maven解压到一个没有中文没有空格的路径下，比如<code>D:\software\maven</code>下面。</p><p>解压后目录结构如下：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/QJsCBF6cKcKz.png!blog" alt=""></p><p><strong><code>bin</code></strong>：存放了maven的命令，比如我们前面用到的<code>mvn tomcat:run</code></p><p><strong><code>boot</code></strong>：存放了一些maven本身的引导程序，如类加载器等</p><p><strong><code>conf</code></strong>：存放了maven的一些配置文件，如<code>setting.xml</code>文件</p><p><strong><code>lib</code></strong>：存放了maven本身运行所需的一些jar包</p><p>至此我们的maven软件就可以使用了，前提是你的电脑上之前已经安装并配置好了JDK。</p><h3 id="2-1-3-JDK的准备及统一"><a href="#2-1-3-JDK的准备及统一" class="headerlink" title="2.1.3 JDK的准备及统一"></a>2.1.3 JDK的准备及统一</h3><ol><li><p>JDK环境:</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/cxWtOUV9TR9p.png!blog" alt=""></p></li></ol><h3 id="2-1-4-Maven及JDK配置"><a href="#2-1-4-Maven及JDK配置" class="headerlink" title="2.1.4 Maven及JDK配置"></a>2.1.4 Maven及JDK配置</h3><p>电脑上需安装java环境，安装JDK1.7 + 版本 （将JAVA_HOME/bin 配置环境变量path ），我们使用的是JDK8相关版本</p><p>配置 MAVEN_HOME ，变量值就是你的maven安装 的路径（bin目录之前一级目录）</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/CqP0dI2suBXp.png!blog" alt=""></p><p>上面配置了我们的Maven软件，注意这个目录就是之前你解压maven的压缩文件包在的的目录，最好不要有中文和空格。</p><p>再次检查JDK的安装目录，如下图：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/DgogTuAHWXYx.png!blog" alt=""></p><h3 id="2-1-5-Maven软件版本测试"><a href="#2-1-5-Maven软件版本测试" class="headerlink" title="2.1.5 Maven软件版本测试"></a>2.1.5 Maven软件版本测试</h3><p>通过 mvn -v命令检查 maven是否安装成功，看到maven的版本为3.5.2及java版本为1.8即为安装成功。</p><p>找开cmd命令，输入<code>mvn –v</code>命令，如下图：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/O2SN4wHNS8Kd.png!blog" alt=""></p><p>我们发现maven的版本，及jdk的版本符合要求，这样我们的maven软件安装就成功了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第2章 第二节 Maven仓库</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/02_2_Maven%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/02_2_Maven%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="第2章-Maven的使用"><a href="#第2章-Maven的使用" class="headerlink" title="第2章 Maven的使用"></a>第2章 Maven的使用</h1><h2 id="2-2-Maven仓库"><a href="#2-2-Maven仓库" class="headerlink" title="2.2 Maven仓库"></a>2.2 Maven仓库</h2><h3 id="2-2-1-Maven仓库的分类"><a href="#2-2-1-Maven仓库的分类" class="headerlink" title="2.2.1 Maven仓库的分类"></a>2.2.1 Maven仓库的分类</h3><p>maven的工作需要从仓库下载一些jar包，如下图所示，本地的项目A、项目B等都会通过maven软件从远程仓库（可以理解为互联网上的仓库）下载jar包并存在本地仓库，本地仓库 就是本地文件夹，当第二次需要此jar包时则不再从远程仓库下载，因为本地仓库已经存在了，可以将本地仓库理解为缓存，有了本地仓库就不用每次从远程仓库下载了。</p><p>下图描述了maven中仓库的类型：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/CfyueE4VFSL0.png!blog" alt=""></p><ul><li><p>本地仓库 ：用来存储从远程仓库或中央仓库下载的插件和jar包，项目使用一些插件或jar包，优先从本地仓库查找</p><p>默认本地仓库位置在 <code>${user.dir}/.m2/repository</code>，<code>${user.dir}</code>表示windows用户目录。</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/VdQGL1ncnNgn.png!blog" alt=""></p></li><li><p>远程仓库：如果本地需要插件或者jar包，本地仓库没有，默认去远程仓库下载。</p><p>远程仓库可以在互联网内也可以在局域网内。</p></li><li><p>中央仓库 ：在maven软件中内置一个远程仓库<a href="http://repo1.maven.org/maven2" target="_blank" rel="noopener">地址</a> ，它是中央仓库，服务于整个互联网，它是由Maven团队自己维护，里面存储了非常全的jar包，它包含了世界上大部分流行的开源项目构件。</p></li></ul><h3 id="2-2-2-Maven本地仓库的配置"><a href="#2-2-2-Maven本地仓库的配置" class="headerlink" title="2.2.2 Maven本地仓库的配置"></a>2.2.2 Maven本地仓库的配置</h3><p>如果在无网的状态下学习，需要有事先准备的本地仓库，将 仓库文件“repository.rar”解压至自己的电脑上，如解压在D:\repository目录下（可以放在没有中文及空格的目录下）。</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/UAes3e0qcDN6.png!blog" alt=""></p><p>在MAVE_HOME/conf/settings.xml文件中配置本地仓库位置（maven的安装目录下）：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/BNQJyxs9Wea9.png!blog" alt=""></p><p>打开settings.xml文件，配置如下：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/IhIfGzkqosE1.png!blog" alt=""></p><h3 id="2-2-3-全局setting与用户setting"><a href="#2-2-3-全局setting与用户setting" class="headerlink" title="2.2.3 全局setting与用户setting"></a>2.2.3 全局setting与用户setting</h3><p>maven仓库地址、私服等配置信息需要在<code>setting.xml</code>文件中配置，分为全局配置和用户配置。</p><p>在maven安装目录下的有<code>conf/setting.xml</code>文件，此<code>setting.xml</code>文件用于maven的所有project项目，它作为maven的全局配置。</p><p>如需要个性配置则需要在用户配置中设置，用户配置的<code>setting.xml</code>文件默认的位置在：<code>${user.dir} /.m2/settings.xml</code>目录中,<code>${user.dir}</code>指windows 中的用户目录。</p><p>maven会先找用户配置，如果找到则以用户配置文件为准，否则使用全局配置文件。</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/AMxSvVjYacCM.png!blog" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第1章 Maven介绍</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/01_Maven%E4%BB%8B%E7%BB%8D.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2020-05-17-/Maven/01_Maven%E4%BB%8B%E7%BB%8D.html</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-Maven介绍"><a href="#第1章-Maven介绍" class="headerlink" title="第1章 Maven介绍"></a>第1章 Maven介绍</h1><h2 id="1-1-什么是Maven"><a href="#1-1-什么是Maven" class="headerlink" title="1.1 什么是Maven"></a>1.1 什么是Maven</h2><h3 id="1-1-1-什么是Maven"><a href="#1-1-1-什么是Maven" class="headerlink" title="1.1.1 什么是Maven"></a>1.1.1 什么是Maven</h3><p>Maven的正确发音是[ˈmevən]，而不是“马瘟”以及其他什么瘟。Maven在美国是一个口语化的词语，代表专家、内行的意思。</p><p>一个对Maven比较正式的定义是这么说的：Maven是一个项目管理工具，它包含了一个项目对象模型 (<strong>POM：Project Object Model</strong>)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。</p><h3 id="1-1-1-Maven能解决什么问题"><a href="#1-1-1-Maven能解决什么问题" class="headerlink" title="1.1.1 Maven能解决什么问题"></a>1.1.1 Maven能解决什么问题</h3><p>可以用更通俗的方式来说明。我们知道，项目开发不仅仅是写写代码而已，期间会伴随着各种必不可少的事情要做，下面列举几个感受一下：</p><p>1、我们需要引用各种jar包，尤其是比较大的工程，引用的jar包往往有几十个乃至上百个， 每用到一种jar包，都需要手动引入工程目录，而且经常遇到各种让人抓狂的jar包冲突，版本冲突。</p><p>2、我们辛辛苦苦写好了Java文件，可是只懂0和1的白痴电脑却完全读不懂，需要将它编译成二进制字节码。好歹现在这项工作可以由各种集成开发工具帮我们完成，Eclipse、IDEA等都可以将代码即时编译。当然，如果你嫌生命漫长，何不铺张，也可以用记事本来敲代码，然后用javac命令一个个地去编译，逗电脑玩。</p><p>3、世界上没有不存在bug的代码，计算机喜欢bug就和人们总是喜欢美女帅哥一样。为了追求美为了减少bug，因此写完了代码，我们还要写一些单元测试，然后一个个的运行来检验代码质量。</p><p>4、再优雅的代码也是要出来卖的。我们后面还需要把代码与各种配置文件、资源整合到一起，定型打包，如果是web项目，还需要将之发布到服务器，供人蹂躏。</p><p>试想，如果现在有一种工具，可以把你从上面的繁琐工作中解放出来，能帮你构建工程，管理jar包，编译代码，还能帮你自动运行单元测试，打包，生成报表，甚至能帮你部署项目，生成Web站点，你会心动吗？Maven就可以解决上面所提到的这些问题。</p><h3 id="1-1-3-Maven的优势举例"><a href="#1-1-3-Maven的优势举例" class="headerlink" title="1.1.3 Maven的优势举例"></a>1.1.3 Maven的优势举例</h3><p>前面我们通过Web阶段项目，要能够将项目运行起来，就必须将该项目所依赖的一些jar包添加到工程中，否则项目就不能运行。试想如果具有相同架构的项目有十个，那么我们就需要将这一份jar包复制到十个不同的工程中。我们一起来看一个CRM项目的工程大小。</p><p>使用传统Web项目构建的CRM项目如下：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/na6ka6BeKifn.png!blog" alt=""></p><p>原因主要是因为上面的WEB程序要运行，我们必须将项目运行所需的Jar包复制到工程目录中，从而导致了工程很大。</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/gnQFi3pSIHXc.png!blog" alt=""></p><blockquote><p>小结：可以初步推断它里面一定没有jar 包，继续思考，没有jar包的项目怎么可能运行呢？</p></blockquote><h2 id="1-2-Maven的两个精典作用"><a href="#1-2-Maven的两个精典作用" class="headerlink" title="1.2 Maven的两个精典作用"></a>1.2 Maven的两个精典作用</h2><h3 id="1-2-1-Maven的依赖管理"><a href="#1-2-1-Maven的依赖管理" class="headerlink" title="1.2.1 Maven的依赖管理"></a>1.2.1 Maven的依赖管理</h3><p>Maven的一个核心特性就是依赖管理。当我们涉及到多模块的项目（包含成百个模块或者子项目），管理依赖就变成一项困难的任务。Maven展示出了它对处理这种情形的高度控制。</p><p>传统的WEB项目中，我们必须将工程所依赖的jar包复制到工程中，导致了工程的变得很大。那么maven工程是如何使得工程变得很少呢？</p><p>分析如下：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/Bis3JaFPmfiB.png!blog" alt=""></p><p>通过分析发现：maven工程中不直接将jar包导入到工程中，而是通过在pom.xml文件中添加所需jar包的坐标，这样就很好的避免了jar直接引入进来，在需要用到jar包的时候，只要查找pom.xml文件，再通过pom.xml文件中的坐标，到一个专门用于”存放jar包的仓库”(maven仓库)中根据坐标从而找到这些jar包，再把这些jar包拿去运行。</p><p>那么问题来了</p><p>第一：”存放jar包的仓库”长什么样？</p><p>第二：通过读取pom.xml 文件中的坐标，再到仓库中找到jar包，会不会很慢？从而导致这种方式不可行！</p><p>第一个问题：存放jar包的仓库长什么样，这一点我们后期会分析仓库的分类，也会带大家去看我们的本地的仓库长什么样。</p><p>第二个问题：通过pom.xml文件配置要引入的jar包的坐标，再读取坐标并到仓库中加载jar包，这样我们就可以直接使用jar包了，为了解决这个过程中速度慢的问题，maven中也有索引的概念，通过建立索引，可以大大提高加载jar包的速度，使得我们认为jar包基本跟放在本地的工程文件中再读取出来的速度是一样的。这个过程就好比我们查阅字典时，为了能够加快查找到内容，书前面的目录就好比是索引，有了这个目录我们就可以方便找到内容了，一样的在maven仓库中有了索引我们就可以认为可以快速找到jar包。</p><h3 id="1-2-2-项目的一键构建"><a href="#1-2-2-项目的一键构建" class="headerlink" title="1.2.2 项目的一键构建"></a>1.2.2 项目的一键构建</h3><p>我们的项目，往往都要经历编译、测试、运行、打包、安装 ，部署等一系列过程。</p><p><strong>什么是构建？</strong></p><p>指的是项目从编译、测试、运行、打包、安装 ，部署整个过程都交给maven进行管理，这个过程称为构建。</p><p><strong>一键构建</strong>：指的是整个构建过程，使用maven一个命令可以轻松完成整个工作。</p><p>Maven规范化构建流程如下：</p><p><img src="//cdn.foreversfj.com/image/blog/20200517/eTwr6nSlMB3R.png!blog" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章 第4节 自定义Mybatis的设计模式说明</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/03_04%20%E8%87%AA%E5%AE%9A%E4%B9%89Mybatis%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%B4%E6%98%8E.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/03_04%20%E8%87%AA%E5%AE%9A%E4%B9%89Mybatis%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%B4%E6%98%8E.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-5-自定义Mybatis的设计模式"><a href="#3-5-自定义Mybatis的设计模式" class="headerlink" title="3.5 自定义Mybatis的设计模式"></a>3.5 自定义Mybatis的设计模式</h1><h2 id="3-5-1-工厂模式（SqlSessionFactory）"><a href="#3-5-1-工厂模式（SqlSessionFactory）" class="headerlink" title="3.5.1 工厂模式（SqlSessionFactory）"></a>3.5.1 工厂模式（SqlSessionFactory）</h2><p><img src="//cdn.foreversfj.com/image/blog/20200517/G3VBzy41TXHg.jpg!blog" alt=""></p><p>工厂模式的原理如下图：</p><img src="//cdn.foreversfj.com/image/blog/20200517/DgJJOPHptI1J.jpg!blog" style="zoom:80%;" /><h2 id="3-5-2-代理模式-MapperProxyFactory"><a href="#3-5-2-代理模式-MapperProxyFactory" class="headerlink" title="3.5.2 代理模式(MapperProxyFactory)"></a>3.5.2 代理模式(MapperProxyFactory)</h2><p><img src="//cdn.foreversfj.com/image/blog/20200517/68eGrUVgVvxM.jpg!blog" alt=""></p><p>代理模式分为静态和动态代理。静态代理，我们通常都很熟悉。有一个写好的代理类，实现与要代理的类的一个共同的接口，目的是为了约束也为了安全。具体不再多说。</p><p>这里主要想说的是关于动态代理。我们知道静态代理若想代理多个类，实现扩展功能，那么它必须具有多个代理类分别取代理不同的实现类。这样做的后果是造成太多的代码冗余。那么我们会思考如果做，才能既满足需求，又没有太多的冗余代码呢？——————动态代理。通过前面的课程我们已经学过了基于JDK的动态代理实现方式，今天我们就会使用JDK动态代理方式来编写MapperProxyFactory类。 </p><p>动态代理模型图：</p><img src="//cdn.foreversfj.com/image/blog/20200517/K4pX5IvsGJL8.jpg!blog" style="zoom:80%;" /><h2 id="3-5-3-构建者模式-SqlSessionFactoryBuilder"><a href="#3-5-3-构建者模式-SqlSessionFactoryBuilder" class="headerlink" title="3.5.3 构建者模式(SqlSessionFactoryBuilder)"></a>3.5.3 构建者模式(SqlSessionFactoryBuilder)</h2><p>首先我们一起来学习构建者模式，通过百度百科如下：</p><img src="//cdn.foreversfj.com/image/blog/20200517/beXxCJBvHFhm.jpg!blog" style="zoom:80%;" /><p>具体设计模式的模型图如下：</p><img src="//cdn.foreversfj.com/image/blog/20200517/BSQQpopsllXT.jpg!blog" style="zoom:80%;" /><p>从图中我们可以看出，创建者模式由四部分组成。</p><p><strong>抽象创建者角色：</strong>给出一个抽象接口，以规范产品对象的各个组成成分的建造。一般而言，此接口独立于应用程序的商业逻辑。模式中直接创建产品对象的是具体创建者角色。</p><p>具体创建者必须实现这个接口的两种方法：</p><ul><li>一是建造方法，比如图中的buildPart1和buildPart2方法；</li><li>另一种是结果返回方法，即图中的getProduct方法。</li></ul><p>一般来说，产品所包含的零件数目与建造方法的数目相符。换言之，有多少零件，就有多少相应的建造方法。 </p><p><strong>具体创建者角色：</strong>他们在应用程序中负责创建产品的实例。这个角色要完成的任务包括：</p><p>1、实现抽象创建者所声明的抽象方法，给出一步一步的完成产品创建实例的操作。</p><p>2、在创建完成后，提供产品的实例。 </p><p><strong>导演者角色：</strong>这个类调用具体创建者角色以创建产品对象。但是导演者并没有产品类的具体知识，真正拥有产品类的具体知识的是具体创建者角色。 </p><p><strong>产品角色：</strong>产品便是建造中的复杂对象。一般说来，一个系统中会有多于一个的产品类，而且这些产品类并不一定有共同的接口，而完全可以使不相关联的。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章 第3节 基于注解方式定义Mybatis框架</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/03_03%20%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%AE%9A%E4%B9%89.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/03_03%20%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%AE%9A%E4%B9%89.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-4-基于注解方式定义Mybatis框架"><a href="#3-4-基于注解方式定义Mybatis框架" class="headerlink" title="3.4 基于注解方式定义Mybatis框架"></a>3.4 基于注解方式定义Mybatis框架</h1><h2 id="3-4-1-自定义-Select注解"><a href="#3-4-1-自定义-Select注解" class="headerlink" title="3.4.1 自定义@Select注解"></a>3.4.1 自定义@Select注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: Select&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: 自定义查询注解&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt; </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) </span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD) </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Select &#123; <span class="function">String <span class="title">value</span><span class="params">()</span></span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-2-修改持久层接口"><a href="#3-4-2-修改持久层接口" class="headerlink" title="3.4.2 修改持久层接口"></a>3.4.2 修改持久层接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: IUserDao&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: 用户的持久层操作&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt; </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123; </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>) </span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-3-修改SqlMapConfig-xml"><a href="#3-4-3-修改SqlMapConfig-xml" class="headerlink" title="3.4.3 修改SqlMapConfig.xml"></a>3.4.3 修改SqlMapConfig.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 配置mybatis的环境 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql的环境 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置连接数据库的信息：用的是数据源(连接池) --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ee50"</span>/&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span>/&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 告知mybatis映射配置的位置 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.itheima.dao.IUserDao"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章 第2节 基于XML的自定义mybatis框架</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/03_02%20%E5%9F%BA%E4%BA%8EXML%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/03_02%20%E5%9F%BA%E4%BA%8EXML%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-3-基于XML的自定义mybatis框架"><a href="#3-3-基于XML的自定义mybatis框架" class="headerlink" title="3.3 基于XML的自定义mybatis框架"></a>3.3 基于XML的自定义mybatis框架</h1><h2 id="3-3-1-编写持久层接口和IUserDao-xml"><a href="#3-3-1-编写持久层接口和IUserDao-xml" class="headerlink" title="3.3.1 编写持久层接口和IUserDao.xml"></a>3.3.1 编写持久层接口和IUserDao.xml</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: IUserDao&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: 用户的持久层操作&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123; </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 查询所有用户 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.dao.IUserDao"</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 配置查询所有操作 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.domain.User"</span>&gt;</span> </span><br><span class="line">        select * from user </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： 此处我们使用的也是mybatis的配置文件，所以也要把约束删除了</p></blockquote><h2 id="3-3-2-编写构建者类"><a href="#3-3-2-编写构建者类" class="headerlink" title="3.3.2 编写构建者类"></a>3.3.2 编写构建者类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: SqlSessionFactoryBuilder&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: 用于构建SqlSessionFactory的&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionFactoryBuilder</span> </span>&#123; </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的流，实现对SqlSessionFactory的创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 它就是SqlMapConfig.xml的配置以及里面包含的IUserDao.xml的配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream in)</span> </span>&#123; </span><br><span class="line">        DefaultSqlSessionFactory factory = <span class="keyword">new</span> DefaultSqlSessionFactory(); </span><br><span class="line">        <span class="comment">//给factory中config赋值 </span></span><br><span class="line">        factory.setConfig(in); </span><br><span class="line">        <span class="keyword">return</span> factory; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-3-编写SqlSessionFactory接口和实现类"><a href="#3-3-3-编写SqlSessionFactory接口和实现类" class="headerlink" title="3.3.3 编写SqlSessionFactory接口和实现类"></a>3.3.3 编写SqlSessionFactory接口和实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: SqlSessionFactory&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: SqlSessionFactory的接口&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlSessionFactory</span> </span>&#123; </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 创建一个新的SqlSession对象 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function">SqlSession <span class="title">openSession</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: DefaultSqlSessionFactory&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description:SqlSessionFactory的默认实现 &lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt; </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSessionFactory</span> <span class="keyword">implements</span> <span class="title">SqlSessionFactory</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> InputStream config = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfig</span><span class="params">(InputStream config)</span> </span>&#123; <span class="keyword">this</span>.config = config; &#125;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSession <span class="title">openSession</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        DefaultSqlSession session = <span class="keyword">new</span> DefaultSqlSession();</span><br><span class="line">        <span class="comment">//调用工具类解析xml文件 </span></span><br><span class="line">        XMLConfigBuilder.loadConfiguration(session, config); </span><br><span class="line">        <span class="keyword">return</span> session; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-4-编写SqlSession接口和实现类"><a href="#3-3-4-编写SqlSession接口和实现类" class="headerlink" title="3.3.4 编写SqlSession接口和实现类"></a>3.3.4 编写SqlSession接口和实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: SqlSession&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: 操作数据库的核心对象&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlSession</span> </span>&#123; </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Dao接口的代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> daoClass </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; daoClass)</span></span>; </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: DefaultSqlSession&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: SqlSession的具体实现&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt; </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSession</span> <span class="keyword">implements</span> <span class="title">SqlSession</span> </span>&#123; </span><br><span class="line">    <span class="comment">//核心配置对象 </span></span><br><span class="line">    <span class="keyword">private</span> Configuration cfg; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCfg</span><span class="params">(Configuration cfg)</span> </span>&#123; <span class="keyword">this</span>.cfg = cfg; &#125; </span><br><span class="line">    <span class="comment">//连接对象 </span></span><br><span class="line">    <span class="keyword">private</span> Connection conn; </span><br><span class="line">    <span class="comment">//调用DataSourceUtils工具类获取连接 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            conn = DataSourceUtil.getDataSource(cfg).getConnection(); </span><br><span class="line">            <span class="keyword">return</span> conn; </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 动态代理：</span></span><br><span class="line"><span class="comment">     * 涉及的类：Proxy </span></span><br><span class="line"><span class="comment">     * 使用的方法：newProxyInstance </span></span><br><span class="line"><span class="comment">     * 方法的参数： </span></span><br><span class="line"><span class="comment">     * ClassLoader：和被代理对象使用相同的类加载器,通常都是固定的 </span></span><br><span class="line"><span class="comment">     * Class[]：代理对象和被代理对象要求有相同的行为。（具有相同的方法） </span></span><br><span class="line"><span class="comment">     * InvocationHandler：如何代理。需要我们自己提供的增强部分的代码 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; daoClass)</span> </span>&#123; </span><br><span class="line">        conn = getConn();</span><br><span class="line">        System.out.println(conn); </span><br><span class="line">        T daoProxy = (T) Proxy.newProxyInstance(daoClass.getClassLoader(),<span class="keyword">new</span> Class[] &#123;daoClass&#125;, <span class="keyword">new</span> MapperProxyFactory(cfg.getMappers(),conn)); </span><br><span class="line">        <span class="keyword">return</span> daoProxy;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//释放资源 </span></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            System.out.println(conn); </span><br><span class="line">            conn.close(); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询所有方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement)</span></span>&#123;</span><br><span class="line">        Mapper mapper = cfg.getMappers().get(statement); </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Executor().selectList(mapper,conn); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-5-编写用于创建Dao接口代理对象的类"><a href="#3-3-5-编写用于创建Dao接口代理对象的类" class="headerlink" title="3.3.5 编写用于创建Dao接口代理对象的类"></a>3.3.5 编写用于创建Dao接口代理对象的类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: MapperProxyFactory&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: 用于创建代理对象是增强方法&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxyFactory</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Mapper&gt; mappers; </span><br><span class="line">    <span class="keyword">private</span> Connection conn; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MapperProxyFactory</span><span class="params">(Map&lt;String, Mapper&gt; mappers,Connection conn)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.mappers = mappers; </span><br><span class="line">        <span class="keyword">this</span>.conn = conn; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对当前正在执行的方法进行增强 </span></span><br><span class="line"><span class="comment">     * 取出当前执行的方法名称</span></span><br><span class="line"><span class="comment">     * 取出当前执行的方法所在类 </span></span><br><span class="line"><span class="comment">     * 拼接成key </span></span><br><span class="line"><span class="comment">     * 去Map中获取Value（Mapper) </span></span><br><span class="line"><span class="comment">     * 使用工具类Executor的selectList方法</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//1.取出方法名 </span></span><br><span class="line">        String methodName = method.getName(); </span><br><span class="line">        <span class="comment">//2.取出方法所在类名 </span></span><br><span class="line">        String className = method.getDeclaringClass().getName(); </span><br><span class="line">        <span class="comment">//3.拼接成Key </span></span><br><span class="line">        String key = className+<span class="string">"."</span>+methodName; </span><br><span class="line">        <span class="comment">//4.使用key取出mapper </span></span><br><span class="line">        Mapper mapper = mappers.get(key); </span><br><span class="line">        <span class="keyword">if</span>(mapper == <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"传入的参数有误，无法获取执行的必要条件"</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.创建Executor对象</span></span><br><span class="line">        Executor executor = <span class="keyword">new</span> Executor();<span class="keyword">return</span> executor.selectList(mapper, conn);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-6-运行测试类"><a href="#3-3-6-运行测试类" class="headerlink" title="3.3.6 运行测试类"></a>3.3.6 运行测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: MybatisTest&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: 测试mybatis的环境&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件 </span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>); </span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactory的构建者对象</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        <span class="comment">//3.使用构建者创建工厂对象SqlSessionFactory </span></span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//4.使用SqlSessionFactory生产SqlSession对象 </span></span><br><span class="line">        SqlSession session = factory.openSession(); </span><br><span class="line">        <span class="comment">//5.使用SqlSession创建dao接口的代理对象 </span></span><br><span class="line">        IUserDao userDao = session.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">        <span class="comment">//6.使用代理对象执行查询所有方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findAll(); </span><br><span class="line">        <span class="keyword">for</span>(User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//7.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章 第1节 自定义Mybatis框架</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/03_01%20%E8%87%AA%E5%AE%9A%E4%B9%89Mybatis%E6%A1%86%E6%9E%B6.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/03_01%20%E8%87%AA%E5%AE%9A%E4%B9%89Mybatis%E6%A1%86%E6%9E%B6.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-1-自定义Mybatis框架的分析"><a href="#3-1-自定义Mybatis框架的分析" class="headerlink" title="3.1 自定义Mybatis框架的分析"></a>3.1 自定义Mybatis框架的分析</h1><h2 id="3-1-1-涉及知识点介绍"><a href="#3-1-1-涉及知识点介绍" class="headerlink" title="3.1.1 涉及知识点介绍"></a>3.1.1 涉及知识点介绍</h2><p>本章我们将使用前面所学的基础知识来构建一个属于自己的持久层框架，将会涉及到的一些知识点：工厂模式（Factory工厂模式）、构造者模式（Builder模式）、代理模式，反射，自定义注解，注解的反射，xml解析，数据库元数据，元数据的反射等。</p><h2 id="3-1-2-分析流程"><a href="#3-1-2-分析流程" class="headerlink" title="3.1.2 分析流程"></a>3.1.2 分析流程</h2><p><img src="//cdn.foreversfj.com/image/blog/20200517/bJxkQ3aKO6mQ.jpg!blog" alt=""></p><h1 id="3-2-前期准备"><a href="#3-2-前期准备" class="headerlink" title="3.2 前期准备"></a>3.2 前期准备</h1><h2 id="3-2-1-创建Maven工程"><a href="#3-2-1-创建Maven工程" class="headerlink" title="3.2.1 创建Maven工程"></a>3.2.1 创建Maven工程</h2><p>创建mybatis02的工程，工程信息如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Groupid</span>:<span class="string">com.itheima</span></span><br><span class="line"><span class="attr">ArtifactId</span>:<span class="string">mybatis02</span></span><br><span class="line"><span class="attr">Packing</span>:<span class="string">jar</span></span><br></pre></td></tr></table></figure><h2 id="3-2-2-引入相关坐标"><a href="#3-2-2-引入相关坐标" class="headerlink" title="3.2.2 引入相关坐标"></a>3.2.2 引入相关坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志坐标 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 解析xml的dom4j --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql驱动 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- dom4j的依赖包jaxen --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-3-引入工具类到项目中"><a href="#3-2-3-引入工具类到项目中" class="headerlink" title="3.2.3 引入工具类到项目中"></a>3.2.3 引入工具类到项目中</h2><p>由于该部分代码过长，请<a href="https://cdn.foreversfj.com/java/blogXMLConfigbuilder.java" target="_blank" rel="noopener">转见</a>，使用UTF-8编码浏览</p><h2 id="3-2-4-编写SqlMapConfig-xml"><a href="#3-2-4-编写SqlMapConfig-xml" class="headerlink" title="3.2.4 编写SqlMapConfig.xml"></a>3.2.4 编写SqlMapConfig.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///eesy"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： 此处我们直接使用的是mybatis的配置文件，但是由于我们没有使用mybatis的jar包，所以要把配置文件的约束删掉否则会报错（如果电脑能接入互联网，不删也行）</p></blockquote><h2 id="3-2-5-编写读取配置文件类"><a href="#3-2-5-编写读取配置文件类" class="headerlink" title="3.2.5 编写读取配置文件类"></a>3.2.5 编写读取配置文件类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: Resources&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: 用于读取配置文件的类&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resources</span> </span>&#123; </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 用于加载xml文件，并且得到一个流对象 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xmlPath </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     * 在实际开发中读取配置文件: </span></span><br><span class="line"><span class="comment">     * 第一：使用类加载器。但是有要求：a文件不能过大。 b文件必须在类路径下(classpath) </span></span><br><span class="line"><span class="comment">     * 第二：使用ServletContext的getRealPath() </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">getResourceAsStream</span><span class="params">(String xmlPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Resources<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>().<span class="title">getResourceAsStream</span>(<span class="title">xmlPath</span>)</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-6-编写Mapper类"><a href="#3-2-6-编写Mapper类" class="headerlink" title="3.2.6 编写Mapper类"></a>3.2.6 编写Mapper类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: Mapper&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: 用于封装查询时的必要信息：要执行的SQL语句和实体类的全限定类名&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt; </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mapper</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String queryString;<span class="comment">//sql</span></span><br><span class="line">    <span class="keyword">private</span> String resultType;<span class="comment">//结果类型的全限定类名</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getQueryString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> queryString; &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQueryString</span><span class="params">(String queryString)</span> </span>&#123; <span class="keyword">this</span>.queryString = queryString; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResultType</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> resultType;  &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResultType</span><span class="params">(String resultType)</span> </span>&#123; <span class="keyword">this</span>.resultType = resultType; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-7-编写Configuration配置类"><a href="#3-2-7-编写Configuration配置类" class="headerlink" title="3.2.7 编写Configuration配置类"></a>3.2.7 编写Configuration配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 核心配置类 </span></span><br><span class="line"><span class="comment"> * 1.数据库信息</span></span><br><span class="line"><span class="comment"> * 2.sql的map集合 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String username; <span class="comment">//用户名 </span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String url;<span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> String driver;<span class="comment">//驱动 </span></span><br><span class="line">    <span class="comment">//map集合 Map&lt;唯一标识，Mapper&gt; 用于保存映射文件中的sql标识及sql语句 </span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Mapper&gt; mappers; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> username;  &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123; <span class="keyword">this</span>.username = username;  &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> password; &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123; <span class="keyword">this</span>.password = password; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> url; &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123; <span class="keyword">this</span>.url = url; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDriver</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> driver; &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriver</span><span class="params">(String driver)</span> </span>&#123; <span class="keyword">this</span>.driver = driver; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Mapper&gt; <span class="title">getMappers</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> mappers; &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMappers</span><span class="params">(Map&lt;String, Mapper&gt; mappers)</span> </span>&#123; <span class="keyword">this</span>.mappers = mappers; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-8-编写User实体类"><a href="#3-2-8-编写User实体类" class="headerlink" title="3.2.8 编写User实体类"></a>3.2.8 编写User实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; </span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">// 用户姓名 </span></span><br><span class="line">    <span class="keyword">private</span> String sex;<span class="comment">// 性别 </span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">// 生日 </span></span><br><span class="line">    <span class="keyword">private</span> String address;<span class="comment">// 地址</span></span><br><span class="line">    <span class="comment">//省略getter与setter </span></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", sex="</span> + sex </span><br><span class="line">            + <span class="string">", birthday="</span> + birthday + <span class="string">", address="</span> + address + <span class="string">"]"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章 Mybatis入门 第3节 基于注解的Mybatis使用</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/02_03%20%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84Mybatis%E4%BD%BF%E7%94%A8.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/02_03%20%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84Mybatis%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-3-基于注解的Mybatis使用"><a href="#2-3-基于注解的Mybatis使用" class="headerlink" title="2.3 基于注解的Mybatis使用"></a>2.3 基于注解的Mybatis使用</h1><h2 id="2-3-1-在持久层接口中添加注解"><a href="#2-3-1-在持久层接口中添加注解" class="headerlink" title="2.3.1 在持久层接口中添加注解"></a>2.3.1 在持久层接口中添加注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: IUserDao&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: 用户的持久层操作&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt; </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123; </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 查询所有用户 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>) </span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-2-修改SqlMapConfig-xml"><a href="#2-3-2-修改SqlMapConfig-xml" class="headerlink" title="2.3.2 修改SqlMapConfig.xml"></a>2.3.2 修改SqlMapConfig.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告知mybatis映射配置的位置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.itheima.dao.IUserDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-3-注意事项："><a href="#2-3-3-注意事项：" class="headerlink" title="2.3.3 注意事项："></a>2.3.3 注意事项：</h2><p>在使用基于注解的Mybatis配置时，请移除xml的映射配置（IUserDao.xml）。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章 Mybatis入门 第2节 搭建Mybatis开发环境</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/02_02%20%E6%90%AD%E5%BB%BAMybatis%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/02_02%20%E6%90%AD%E5%BB%BAMybatis%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-2-搭建Mybatis开发环境"><a href="#2-2-搭建Mybatis开发环境" class="headerlink" title="2.2 搭建Mybatis开发环境"></a>2.2 搭建Mybatis开发环境</h1><h2 id="2-2-1-创建maven工程"><a href="#2-2-1-创建maven工程" class="headerlink" title="2.2.1 创建maven工程"></a>2.2.1 创建maven工程</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建mybatis01的工程，工程信息如下：</span></span><br><span class="line"><span class="attr">Groupid</span>:<span class="string">com.ithiema</span></span><br><span class="line"><span class="attr">ArtifactId</span>:<span class="string">mybatis01</span></span><br><span class="line"><span class="attr">Packing</span>:<span class="string">jar</span></span><br></pre></td></tr></table></figure><h2 id="2-2-2-添加Mybatis3-4-5的坐标"><a href="#2-2-2-添加Mybatis3-4-5的坐标" class="headerlink" title="2.2.2 添加Mybatis3.4.5的坐标"></a>2.2.2 添加Mybatis3.4.5的坐标</h2><p>在pom.xml文件中添加Mybatis3.4.5的坐标，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-3-编写User实体类"><a href="#2-2-3-编写User实体类" class="headerlink" title="2.2.3 编写User实体类"></a>2.2.3 编写User实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> username; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123; <span class="keyword">this</span>.username = username; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> birthday; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123; <span class="keyword">this</span>.birthday = birthday; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> sex; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123; <span class="keyword">this</span>.sex = sex; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> address; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123; <span class="keyword">this</span>.address = address; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> + <span class="string">"id="</span> + id + <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">            <span class="string">", birthday="</span> + birthday + <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">            <span class="string">", address='"</span> + address + <span class="string">'\''</span> + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-4-编写持久层接口IUserDao"><a href="#2-2-4-编写持久层接口IUserDao" class="headerlink" title="2.2.4 编写持久层接口IUserDao"></a>2.2.4 编写持久层接口IUserDao</h2><ul><li><code>IUserDao</code>接口就是我们的持久层接口（也可以写成<code>UserDao</code>或者<code>UserMapper</code>），具体代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-5-编写dao接口的映射文件"><a href="#2-2-5-编写dao接口的映射文件" class="headerlink" title="2.2.5 编写dao接口的映射文件"></a>2.2.5 编写dao接口的映射文件</h2><h3 id="IUserDao-xml要求："><a href="#IUserDao-xml要求：" class="headerlink" title="IUserDao.xml要求："></a>IUserDao.xml要求：</h3><ul><li><strong>创建位置</strong>：必须和持久层接口在相同的包中。</li><li><strong>名称</strong>：必须以持久层接口名称命名文件名，扩展名是.xml</li></ul><img src="//cdn.foreversfj.com/image/blog/20190908/bsYt5cMdaY8Y.png!blog"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.dao.IUserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-6-编写映射配置文件"><a href="#2-2-6-编写映射配置文件" class="headerlink" title="2.2.6 编写映射配置文件"></a>2.2.6 编写映射配置文件</h2><p><strong><code>SqlMapConfig.xml</code></strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis的主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源（连接池） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置连接数据库的4个基本信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/eesy_mybatis"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/itheima/dao/IUserDao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-7-编写测试类"><a href="#2-2-7-编写测试类" class="headerlink" title="2.2.7 编写测试类"></a>2.2.7 编写测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入门案例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3.使用工厂生产SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">        IUserDao userDao = session.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//5.使用代理对象执行方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-2-8-环境搭建的注意事项"><a href="#2-2-8-环境搭建的注意事项" class="headerlink" title="2.2.8 环境搭建的注意事项"></a>2.2.8 环境搭建的注意事项</h1><ol><li><p>创建<code>IUserDao.xml</code>和<code>IUserDao.java</code>时名称是为了与之前的知识保持一致。在Mybatis中它把持久层的操作接口名称和映射文件也叫作：Mapper</p><p>所以：<code>IUserDao</code>和<code>IUserMapper</code>是一样的</p></li><li><p>在idea中创建目录的时候，它和包是不一样的</p><p>包在创建时，<code>com.itheima.dao</code>是<strong>三级结构</strong></p><p>目录在创建时，<code>com.itheima.dao</code>是<strong>一级结构</strong></p></li><li><p>Mybatis的映射文件位置必须和dao接口的包结构保持一致</p></li><li><p>映射配置文件的mapper标签namespace属性的取值必须是dao接口的全限定类名</p></li><li><p>映射配置文件的操作配置（select），属性id的取值必须是dao接口的方法名</p><blockquote><p>当我们遵从了3、4、5点之后，在开发中就无须在写dao的实现类</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章 Mybatis入门 第1节 Mybatis安装</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/02_01%20%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/02_01%20%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-1-Mybatis框架开发的准备"><a href="#2-1-Mybatis框架开发的准备" class="headerlink" title="2.1 Mybatis框架开发的准备"></a>2.1 Mybatis框架开发的准备</h1><h2 id="2-1-1-中文官网下载Mybatis框架"><a href="#2-1-1-中文官网下载Mybatis框架" class="headerlink" title="2.1.1 中文官网下载Mybatis框架"></a>2.1.1 中文官网下载Mybatis框架</h2><ul><li><p>浏览器输入<a href="http://www.mybatis.cn/" target="_blank" rel="noopener">http://www.mybatis.cn/</a>可以直接进入MyBatis的中文官网</p><img src="//cdn.foreversfj.com/image/blog/20190908/BnEBg7Gps1wx.png!blog"></li><li><p>点击mybatis jar下载，可以选择选择的版本</p><img src="//cdn.foreversfj.com/image/blog/20190908/tV928EQivfBC.png!blog"><ul><li>第一个链接是直接转到百度网盘下载</li><li>第二个是转到GitHub从仓库下载</li><li>第三个是从百度云下载</li></ul></li></ul><h2 id="2-1-2-英文官网下载Mybatis框架"><a href="#2-1-2-英文官网下载Mybatis框架" class="headerlink" title="2.1.2 英文官网下载Mybatis框架"></a>2.1.2 英文官网下载Mybatis框架</h2><ul><li><p>点击<a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">这里</a>可以直接进入MyBatis的英文官网</p><p><img src="//cdn.foreversfj.com/image/blog/20190908/cLtITSFKqALa.png!blog" alt=""></p></li><li><p>选择语言，进入中文版本的开发文档。</p><p><img src="//cdn.foreversfj.com/image/blog/20190908/Rb1RJ3uPKude.png" alt=""></p><ul><li><p>可以看到熟悉的中文开发文档了。</p><img src="//cdn.foreversfj.com/image/blog/20190908/70mlgVVDB1wa.png!blog"></li><li><p>在“入门”中进入MyBatis的GitHub下载仓库</p><img src="//cdn.foreversfj.com/image/blog/20190908/wwybjmttff6z.png!blog"></li><li><p>在<code>Assets</code>中选择自己需要的版本，下载源码</p><img src="//cdn.foreversfj.com/image/blog/20190908/dPUhida8l4MQ.png!blog"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 框架概述 第2节 JDBC编程的分析</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/01_02%20JDBC%E7%BC%96%E7%A8%8B%E7%9A%84%E5%88%86%E6%9E%90.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/01_02%20JDBC%E7%BC%96%E7%A8%8B%E7%9A%84%E5%88%86%E6%9E%90.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-2-JDBC编程的分析"><a href="#1-2-JDBC编程的分析" class="headerlink" title="1.2 JDBC编程的分析"></a>1.2 <code>JDBC</code>编程的分析</h1><h2 id="1-2-1-jdbc程序的回顾"><a href="#1-2-1-jdbc程序的回顾" class="headerlink" title="1.2.1 jdbc程序的回顾"></a>1.2.1 <code>jdbc</code>程序的回顾</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//加载数据库驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//通过驱动管理类获取数据库链接</span></span><br><span class="line">        connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8"</span>,<span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">        <span class="comment">//定义sql语句 ?表示占位符</span></span><br><span class="line">        String sql = <span class="string">"select * from user where username = ?"</span>;</span><br><span class="line">        <span class="comment">//获取预处理statement preparedStatement = connection.prepareStatement(sql);</span></span><br><span class="line">        <span class="comment">//设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值</span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, <span class="string">"王五"</span>);</span><br><span class="line">        <span class="comment">//向数据库发出sql执行查询，查询出结果集 </span></span><br><span class="line">        resultSet = preparedStatement.executeQuery();</span><br><span class="line">        <span class="comment">//遍历查询结果集</span></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123; </span><br><span class="line">            System.out.println(resultSet.getString(<span class="string">"id"</span>)+<span class="string">" "</span>+resultSet.getString(<span class="string">"username"</span>));</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123; </span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123; </span><br><span class="line">            <span class="keyword">try</span> &#123; </span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123; </span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(preparedStatement!=<span class="keyword">null</span>)&#123; </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                preparedStatement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123; </span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123; </span><br><span class="line">            <span class="keyword">try</span> &#123; connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123; </span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-2-jdbc问题分析"><a href="#1-2-2-jdbc问题分析" class="headerlink" title="1.2.2 jdbc问题分析"></a>1.2.2 <code>jdbc</code>问题分析</h2><p>&emsp;&emsp;1、数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题</p><p>&emsp;&emsp;2、<code>Sql</code>语句在代码中硬编码，造成代码不易维护，实际应用<code>sql</code>变化的可能较大，<code>sql</code>变动需要改变<code>java</code>代码。</p><p>&emsp;&emsp;3、使用<code>preparedStatement</code>向占有位符号传参数存在硬编码，因为<code>sql</code>语句的<code>where</code>条件不一定，可能多也可能少，修改<code>sql</code>还要修改代码，系统不易维护。</p><p>&emsp;&emsp;4、对结果集解析存在硬编码（查询列名），<code>sql</code>变化导致解析代码变化，系统不易维护，如果能将数据库记录封装成<code>pojo</code>对象解析比较方便。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 框架概述 第1节 什么是框架</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/01_01%20%E4%BB%80%E4%B9%88%E6%98%AF%E6%A1%86%E6%9E%B6.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-09-08-/Mybatis/01_01%20%E4%BB%80%E4%B9%88%E6%98%AF%E6%A1%86%E6%9E%B6.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-什么是框架"><a href="#1-1-什么是框架" class="headerlink" title="1.1 什么是框架"></a>1.1 什么是框架</h1><h2 id="1-1-1-什么是框架"><a href="#1-1-1-什么是框架" class="headerlink" title="1.1.1 什么是框架"></a>1.1.1 什么是框架</h2><p>&emsp;&emsp;框架（<code>Framework</code>）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法；另一种定义认为，框架是可被应用开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。</p><p>&emsp;&emsp;简而言之，框架其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用别人搭好的舞台，你来做表演。而且，框架一般是成熟的，不断升级的软件。</p><h2 id="1-1-2-框架要解决的问题"><a href="#1-1-2-框架要解决的问题" class="headerlink" title="1.1.2 框架要解决的问题"></a>1.1.2 框架要解决的问题</h2><p>&emsp;&emsp;框架要解决的最重要的一个问题是技术整合的问题，在<code>J2EE</code>的框架中，有着各种各样的技术，不同的软件企业需要从<code>J2EE</code>中选择不同的技术，这就使得软件企业最终的应用依赖于这些技术，技术自身的复杂性和技术的风险性将会直接对应用造成冲击。而应用是软件企业的核心，是竞争力的关键所在，因此应该将应用自身的设计和具体的实现技术解耦。这样，软件企业的研发将集中在应用的设计上，而不是具体的技术实现，技术实现是应用的底层支撑，它不应该直接对应用产生影响。</p><p>&emsp;&emsp;<font color=red>框架一般处在低层应用平台（如J2EE）和高层业务逻辑之间的中间层。</font></p><h2 id="1-1-3-软件开发的分层重要性"><a href="#1-1-3-软件开发的分层重要性" class="headerlink" title="1.1.3 软件开发的分层重要性"></a>1.1.3 软件开发的分层重要性</h2><p>&emsp;&emsp;框架的重要性在于它实现了部分功能，并且能够很好的将低层应用平台和高层业务逻辑进行了缓和。为了实现软件工程中的“高内聚、低耦合”。把问题划分开来各个解决，易于控制，易于延展，易于分配资源。我们常见的<code>MVC</code>软件设计思想就是很好的分层思想。</p><img src="//cdn.foreversfj.com/image/blog/20190908/aJfNPuILTFy4.jpg!blog" style="zoom:80%;" /><p>&emsp;&emsp;通过分层更好的实现了各个部分的职责，在每一层将再细化出不同的框架，分别解决各层关注的问题。</p><h2 id="1-1-4-分层开发下的常见框架"><a href="#1-1-4-分层开发下的常见框架" class="headerlink" title="1.1.4 分层开发下的常见框架"></a>1.1.4 分层开发下的常见框架</h2><p><strong>常见的<code>JavaEE</code>开发框架：</strong></p><ol><li><p><strong>解决数据的持久化问题的框架</strong></p><img src="//cdn.foreversfj.com/image/blog/20190908/g3lALcAjupwk.jpg!blog" style="zoom:80%;" /></li></ol><p>&emsp;&emsp;作为持久层的框架，还有一个封装程度更高的框架就是<code>Hibernate</code>，但这个框架因为各种原因目前在国内的流行程度下降太多，现在公司开发也越来越少使用。目前使用<code>Spring Data</code>来实现数据持久化也是一种趋势。 </p><ol start="2"><li><p><strong>解决WEB层问题的MVC框架</strong></p><img src="//cdn.foreversfj.com/image/blog/20190908/FpMuqWsaF0x7.jpg!blog" style="zoom:80%;" /></li><li><p><strong>解决技术整合问题的框架</strong></p><img src="//cdn.foreversfj.com/image/blog/20190908/HHbImryTaLyS.jpg!blog"></li></ol><h2 id="1-1-5-MyBatis框架概述"><a href="#1-1-5-MyBatis框架概述" class="headerlink" title="1.1.5 MyBatis框架概述"></a>1.1.5 <code>MyBatis</code>框架概述</h2><p>&emsp;&emsp;<code>mybatis</code>是一个优秀的基于<code>java</code>的持久层框架，它内部封装了<code>jdbc</code>，使开发者只需要关注<code>sql</code>语句本身，而不需要花费精力去处理加载驱动、创建连接、创建<code>statement</code>等繁杂的过程。</p><p>&emsp;&emsp;<code>mybatis</code>通过<code>xml</code>或注解的方式将要执行的各种<code>statement</code>配置起来，并通过<code>java</code>对象和<code>statement</code>中<code>sql</code>的动态参数进行映射生成最终执行的<code>sql</code>语句，最后由<code>mybatis</code>框架执行<code>sql</code>并将结果映射为<code>java</code>对象并返回。</p><p>&emsp;&emsp;采用<code>ORM</code>思想解决了实体和数据库映射的问题，对<code>jdbc</code>进行了封装，屏蔽了<code>jdbc api</code>底层访问细节，使我们不用与<code>jdbc api</code>打交道，就可以完成对数据库的持久化操作。</p><p>&emsp;&emsp;为了我们能够更好掌握框架运行的内部过程，并且有更好的体验，下面我们将从自定义<code>Mybatis</code>框架开始来学习框架。此时我们将会体验框架从无到有的过程体验，也能够很好的综合前面阶段所学的基础。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十四章 3.Redis工具</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-/Java/JavaWeb/14_3%20Redis%E5%B7%A5%E5%85%B7.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-/Java/JavaWeb/14_3%20Redis%E5%B7%A5%E5%85%B7.html</url>
      
        <content type="html"><![CDATA[<h1 id="14-3-Redis工具"><a href="#14-3-Redis工具" class="headerlink" title="14.3 Redis工具"></a>14.3 Redis工具</h1><h2 id="14-3-1-持久化"><a href="#14-3-1-持久化" class="headerlink" title="14.3.1 持久化"></a>14.3.1 持久化</h2><ul><li><p>redis是一个内存数据库，当redis服务器重启，或者电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。</p></li><li><p>redis持久化机制：</p><ul><li><p><strong>RDB</strong>：默认方式，不需要进行配置，默认就使用这种机制</p><blockquote><p>在一定的间隔时间中，检测key的变化情况，然后持久化数据</p></blockquote><ol><li>编辑<code>redis.windwos.conf</code>文件<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   after 900 sec (15 min) if at least 1 key changed</span></span><br><span class="line"><span class="attr">save</span> <span class="string">900 1</span></span><br><span class="line"><span class="comment">#   after 300 sec (5 min) if at least 10 keys changed</span></span><br><span class="line"><span class="attr">save</span> <span class="string">300 10</span></span><br><span class="line"><span class="comment">#   after 60 sec if at least 10000 keys changed</span></span><br><span class="line"><span class="attr">save</span> <span class="string">60 10000</span></span><br></pre></td></tr></table></figure></li><li>重新启动redis服务器，并指定配置文件名称<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\JavaWeb\redis\windows<span class="number">-64</span>\redis<span class="number">-2.8</span><span class="number">.9</span>&gt;redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>AOF</strong>：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</p><ol><li>编辑<code>redis.windwos.conf</code>文件<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">appendonly</span> <span class="string">no（关闭aof） --&gt; appendonly yes （开启aof）</span></span><br><span class="line"><span class="comment"># appendfsync always ： 每一次操作都进行持久化</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">everysec ： 每隔一秒进行一次持久化</span></span><br><span class="line"><span class="comment"># appendfsync no     ： 不进行持久化</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><h2 id="14-3-2-Java客户端-Jedis"><a href="#14-3-2-Java客户端-Jedis" class="headerlink" title="14.3.2 Java客户端 Jedis"></a>14.3.2 Java客户端 Jedis</h2><ul><li><strong><code>Jedis</code></strong>： 一款java操作redis数据库的工具.</li></ul><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>下载jedis的jar包</li><li>使用  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>,<span class="number">6379</span>);</span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line">jedis.set(<span class="string">"username"</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure></li></ol><h4 id="Jedis操作各种redis中的数据结构"><a href="#Jedis操作各种redis中的数据结构" class="headerlink" title="Jedis操作各种redis中的数据结构"></a>Jedis操作各种redis中的数据结构</h4><h5 id="●-字符串类型-string"><a href="#●-字符串类型-string" class="headerlink" title="● 字符串类型 string"></a>● 字符串类型 string</h5><ul><li><strong><code>set</code></strong></li><li><strong><code>get</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line"><span class="comment">//如果使用空参构造，默认值 "localhost",6379端口</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">//存储</span></span><br><span class="line">jedis.set(<span class="string">"username"</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line">String username = jedis.get(<span class="string">"username"</span>);</span><br><span class="line">System.out.println(username);</span><br><span class="line"><span class="comment">//可以使用setex()方法存储可以指定过期时间的 key value</span></span><br><span class="line"><span class="comment">//将activecode：hehe键值对存入redis，并且20秒后自动删除该键值对</span></span><br><span class="line">jedis.setex(<span class="string">"activecode"</span>,<span class="number">20</span>,<span class="string">"hehe"</span>);</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><h5 id="●-哈希类型-hash"><a href="#●-哈希类型-hash" class="headerlink" title="● 哈希类型 hash"></a>● 哈希类型 hash</h5><p><strong>map格式</strong>  </p><ul><li><strong><code>hset</code></strong></li><li><strong><code>hget</code></strong></li><li><strong><code>hgetAll</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 "localhost",6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">// 存储hash</span></span><br><span class="line">jedis.hset(<span class="string">"user"</span>,<span class="string">"name"</span>,<span class="string">"lisi"</span>);</span><br><span class="line">jedis.hset(<span class="string">"user"</span>,<span class="string">"age"</span>,<span class="string">"23"</span>);</span><br><span class="line">jedis.hset(<span class="string">"user"</span>,<span class="string">"gender"</span>,<span class="string">"female"</span>);</span><br><span class="line"><span class="comment">// 获取hash</span></span><br><span class="line">String name = jedis.hget(<span class="string">"user"</span>, <span class="string">"name"</span>);</span><br><span class="line">System.out.println(name);</span><br><span class="line"><span class="comment">// 获取hash的所有map中的数据</span></span><br><span class="line">Map&lt;String, String&gt; user = jedis.hgetAll(<span class="string">"user"</span>);</span><br><span class="line"><span class="comment">// keyset</span></span><br><span class="line">Set&lt;String&gt; keySet = user.keySet();</span><br><span class="line"><span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">    <span class="comment">//获取value</span></span><br><span class="line">    String value = user.get(key);</span><br><span class="line">    System.out.println(key + <span class="string">":"</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><h5 id="●-列表类型-list"><a href="#●-列表类型-list" class="headerlink" title="● 列表类型 list"></a>● 列表类型 list</h5><p><strong>linkedlist格式。支持重复元素</strong></p><ul><li><strong><code>lpush / rpush</code></strong></li><li><strong><code>lpop / rpop</code></strong></li><li><strong><code>lrange start end</code></strong>：范围获取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 "localhost",6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">// list 存储</span></span><br><span class="line">jedis.lpush(<span class="string">"mylist"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);<span class="comment">//从左边存</span></span><br><span class="line">jedis.rpush(<span class="string">"mylist"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);<span class="comment">//从右边存</span></span><br><span class="line"><span class="comment">// list 范围获取</span></span><br><span class="line">List&lt;String&gt; mylist = jedis.lrange(<span class="string">"mylist"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(mylist);</span><br><span class="line"><span class="comment">// list 弹出</span></span><br><span class="line">String element1 = jedis.lpop(<span class="string">"mylist"</span>);<span class="comment">//c</span></span><br><span class="line">System.out.println(element1);</span><br><span class="line">String element2 = jedis.rpop(<span class="string">"mylist"</span>);<span class="comment">//c</span></span><br><span class="line">System.out.println(element2);</span><br><span class="line"><span class="comment">// list 范围获取</span></span><br><span class="line">List&lt;String&gt; mylist2 = jedis.lrange(<span class="string">"mylist"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(mylist2);</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><h5 id="●-集合类型-set"><a href="#●-集合类型-set" class="headerlink" title="● 集合类型 set"></a>● 集合类型 set</h5><p><strong>不允许重复元素</strong></p><ul><li><strong><code>sadd</code></strong></li><li><strong><code>smembers</code></strong>：获取所有元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 "localhost",6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">// set 存储</span></span><br><span class="line">jedis.sadd(<span class="string">"myset"</span>,<span class="string">"java"</span>,<span class="string">"php"</span>,<span class="string">"c++"</span>);</span><br><span class="line"><span class="comment">// set 获取</span></span><br><span class="line">Set&lt;String&gt; myset = jedis.smembers(<span class="string">"myset"</span>);</span><br><span class="line">System.out.println(myset);</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><h5 id="●-有序集合类型-sortedset"><a href="#●-有序集合类型-sortedset" class="headerlink" title="● 有序集合类型 sortedset"></a>● 有序集合类型 sortedset</h5><p><strong>不允许重复元素，且元素有顺序</strong></p><ul><li><strong><code>zadd</code></strong></li><li><strong><code>zrange</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 "localhost",6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">// sortedset 存储</span></span><br><span class="line">jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">3</span>,<span class="string">"亚瑟"</span>);</span><br><span class="line">jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">30</span>,<span class="string">"后裔"</span>);</span><br><span class="line">jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">55</span>,<span class="string">"孙悟空"</span>);</span><br><span class="line"><span class="comment">// sortedset 获取</span></span><br><span class="line">Set&lt;String&gt; mysortedset = jedis.zrange(<span class="string">"mysortedset"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(mysortedset);</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><h3 id="jedis连接池：-JedisPool"><a href="#jedis连接池：-JedisPool" class="headerlink" title="jedis连接池： JedisPool"></a>jedis连接池： JedisPool</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li><p>创建JedisPool连接池对象</p></li><li><p>调用方法 getResource()方法获取Jedis连接</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0.创建一个配置对象</span></span><br><span class="line">JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">config.setMaxTotal(<span class="number">50</span>);</span><br><span class="line">config.setMaxIdle(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//1.创建Jedis连接池对象</span></span><br><span class="line">JedisPool jedisPool = <span class="keyword">new</span> JedisPool(config,<span class="string">"localhost"</span>,<span class="number">6379</span>);</span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">Jedis jedis = jedisPool.getResource();</span><br><span class="line"><span class="comment">//3. 使用</span></span><br><span class="line">jedis.set(<span class="string">"hehe"</span>,<span class="string">"heihei"</span>);</span><br><span class="line"><span class="comment">//4. 关闭 归还到连接池中</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure></li></ol><h4 id="连接池工具类"><a href="#连接池工具类" class="headerlink" title="连接池工具类"></a>连接池工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        InputStream is = JedisPoolUtils.class.getClassLoader().getResourceAsStream("jedis.properties");</span><br><span class="line">        <span class="comment">//创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//关联文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pro.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取数据，设置到JedisPoolConfig中</span></span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(Integer.parseInt(pro.getProperty(<span class="string">"maxTotal"</span>)));</span><br><span class="line">        config.setMaxIdle(Integer.parseInt(pro.getProperty(<span class="string">"maxIdle"</span>)));</span><br><span class="line">        <span class="comment">//初始化JedisPool</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(config,pro.getProperty(<span class="string">"host"</span>),Integer.parseInt(pro.getProperty(<span class="string">"port"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取连接方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十四章 2.Redis使用</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-/Java/JavaWeb/14_2%20Redis%E4%BD%BF%E7%94%A8.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-/Java/JavaWeb/14_2%20Redis%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="14-2-Redis使用"><a href="#14-2-Redis使用" class="headerlink" title="14.2 Redis使用"></a>14.2 Redis使用</h1><h2 id="14-2-1-下载安装"><a href="#14-2-1-下载安装" class="headerlink" title="14.2.1 下载安装"></a>14.2.1 下载安装</h2><ul><li>官网：<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a></li><li>中文网：<a href="http://www.redis.net.cn/" target="_blank" rel="noopener">http://www.redis.net.cn/</a></li><li>解压直接可以使用：<ul><li><strong><code>redis.windows.conf</code></strong>：配置文件</li><li><strong><code>redis-cli.exe</code></strong>：redis的客户端</li><li><strong><code>redis-server.exe</code></strong>：redis服务器端</li></ul></li></ul><h2 id="14-2-2-命令操作"><a href="#14-2-2-命令操作" class="headerlink" title="14.2.2 命令操作"></a>14.2.2 命令操作</h2><h3 id="redis的数据结构"><a href="#redis的数据结构" class="headerlink" title="redis的数据结构"></a>redis的数据结构</h3><ul><li><p>redis存储的是：key,value格式的数据，其中key都是字符串，value有5种不同的数据结构</p><ul><li><p>value的数据结构：</p><ol><li>字符串类型 string</li><li>哈希类型 hash ： map格式  </li><li>列表类型 list ： linkedlist格式。支持重复元素</li><li>集合类型 set  ： 不允许重复元素</li><li>有序集合类型 sortedset：不允许重复元素，且元素有顺序</li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190905/V4bhfworbYOy.png!blog" alt=""></p></li></ul></li></ul><h3 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型 string"></a>字符串类型 string</h3><ol><li>存储：<strong><code>set key value</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> username zhangsan</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></li><li>获取：<strong><code>get key</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">get</span> username</span><br><span class="line"><span class="string">"zhangsan"</span></span><br></pre></td></tr></table></figure></li><li>删除：<strong><code>del key</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; del age</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="哈希类型-hash"><a href="#哈希类型-hash" class="headerlink" title="哈希类型 hash"></a>哈希类型 hash</h3><ol><li>存储：<strong><code>hset key field value</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hset myhash username lisi</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hset myhash password <span class="number">123</span></span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li>获取：<ul><li><strong><code>hget key field</code></strong>：获取指定的field对应的值<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hget myhash username</span><br><span class="line"><span class="string">"lisi"</span></span><br></pre></td></tr></table></figure></li><li><strong><code>hgetall key</code></strong>：获取所有的field和value<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hgetall myhash</span><br><span class="line"><span class="number">1</span>) <span class="string">"username"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"password"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"123"</span></span><br></pre></td></tr></table></figure></li></ul></li><li>删除：<strong><code>hdel key field</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hdel myhash username</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="列表类型-list"><a href="#列表类型-list" class="headerlink" title="列表类型 list"></a>列表类型 list</h3><p><b><font color=red>可以添加一个元素到列表的头部（左边）或者尾部（右边）</font></b></p><ul><li><strong>添加：</strong><ul><li><strong><code>lpush key value</code></strong>：将元素加入列表左表</li><li><strong><code>rpush key value</code></strong>：将元素加入列表右边<br><img src="//cdn.foreversfj.com/image/blog/20190905/NcC6MEH0LmFk.png!blog" alt=""><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush myList a</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush myList b</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush myList c</span><br><span class="line">(integer) <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>获取：</strong><ul><li><strong><code>lrange key start end</code></strong>：范围获取<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange myList <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"b"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"a"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"c"</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>删除：</strong><ul><li><strong><code>lpop key</code></strong>： 删除列表最左边的元素，并将元素返回</li><li><strong><code>rpop key</code></strong>： 删除列表最右边的元素，并将元素返回</li></ul></li></ul><h3 id="集合类型-set"><a href="#集合类型-set" class="headerlink" title="集合类型 set"></a>集合类型 set</h3><p><b><font color=red>不允许重复元素</font></b></p><ul><li>存储：<strong><code>sadd key value</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd myset a</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd myset a</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li>获取：<strong><code>smembers key</code></strong>：获取set集合中所有元素<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers myset</span><br><span class="line"><span class="number">1</span>) <span class="string">"a"</span></span><br></pre></td></tr></table></figure></li><li>删除：<strong><code>srem key value</code></strong>：删除set集合中的某个元素    <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; srem myset a</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="有序集合类型-sortedset"><a href="#有序集合类型-sortedset" class="headerlink" title="有序集合类型 sortedset"></a>有序集合类型 sortedset</h3><p><b><font color=red>不允许重复元素，且元素有顺序。</font></b>每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><ul><li>存储：<strong><code>zadd key score value</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd mysort <span class="number">60</span> zhangsan</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd mysort <span class="number">50</span> lisi</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd mysort <span class="number">80</span> wangwu</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li>获取：<strong><code>zrange key start end [withscores]</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange mysort <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"zhangsan"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"wangwu"</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange mysort <span class="number">0</span> <span class="number">-1</span> withscores</span><br><span class="line"><span class="number">1</span>) <span class="string">"zhangsan"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"60"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"wangwu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"80"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">6</span>) <span class="string">"500"</span></span><br></pre></td></tr></table></figure></li><li>删除：<strong><code>zrem key value</code></strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrem mysort lisi</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><ul><li><strong><code>keys *</code></strong>：查询所有的键</li><li><strong><code>type key</code></strong>： 获取键对应的value的类型</li><li><strong><code>del key</code></strong>：删除指定的key value</li></ul><h2 id="14-2-3-一个小练习"><a href="#14-2-3-一个小练习" class="headerlink" title="14.2.3 一个小练习"></a>14.2.3 一个小练习</h2><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><ol><li>提供index.html页面，页面中有一个省份 下拉列表</li><li>当 页面加载完成后 发送ajax请求，加载所有省份</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>使用redis缓存一些不经常发生变化的数据。<ul><li>数据库的数据一旦发生改变，则需要更新缓存。<ul><li>数据库的表执行 增删改的相关操作，需要将redis缓存数据情况，再次存入</li><li>在service对应的增删改方法中，将redis数据删除。</li></ul></li></ul></li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190905/gcyjG7mX1Sjb.png!blog" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十四章 1.Redis</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-/Java/JavaWeb/14_1%20Redis%E5%85%A5%E9%97%A8.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-/Java/JavaWeb/14_1%20Redis%E5%85%A5%E9%97%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="14-1-Redis概念"><a href="#14-1-Redis概念" class="headerlink" title="14.1 Redis概念"></a>14.1 Redis概念</h1><p><strong>redis是一款高性能的NOSQL系列的非关系型数据库</strong></p><h2 id="14-1-1-什么是NOSQL"><a href="#14-1-1-什么是NOSQL" class="headerlink" title="14.1.1 什么是NOSQL"></a>14.1.1 什么是NOSQL</h2><p>&emsp;&emsp;<strong>NoSQL</strong>(<i>NoSQL = Not Only SQL</i>)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。</p><p>&emsp;&emsp;随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p><h3 id="NOSQL和关系型数据库比较"><a href="#NOSQL和关系型数据库比较" class="headerlink" title="NOSQL和关系型数据库比较"></a>NOSQL和关系型数据库比较</h3><ul><li><p><strong>优点：</strong></p><ul><li>成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。</li><li>查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。</li><li>存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。</li><li>扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。</li></ul></li><li><p><strong>缺点：</strong></p><ul><li>维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。</li><li>不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。</li><li>不提供关系型数据库对事务的处理。</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190905/4VPpver90VNr.png!blog" alt=""></p></li></ul><h3 id="非关系型数据库的优势"><a href="#非关系型数据库的优势" class="headerlink" title="非关系型数据库的优势"></a>非关系型数据库的优势</h3><ul><li>性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。</li><li>可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</li></ul><h3 id="关系型数据库的优势"><a href="#关系型数据库的优势" class="headerlink" title="关系型数据库的优势"></a>关系型数据库的优势</h3><ul><li>复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。</li><li>事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&emsp;&emsp;关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，</p><p>&emsp;&emsp;让NoSQL数据库对关系型数据库的不足进行弥补。</p><p>&emsp;&emsp;一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据</p><h2 id="14-1-2-主流的NOSQL产品"><a href="#14-1-2-主流的NOSQL产品" class="headerlink" title="14.1.2 主流的NOSQL产品"></a>14.1.2 主流的NOSQL产品</h2><h3 id="键值-Key-Value-存储数据库"><a href="#键值-Key-Value-存储数据库" class="headerlink" title="键值(Key-Value)存储数据库"></a>键值(Key-Value)存储数据库</h3><ul><li>相关产品： Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB</li><li>典型应用： 内容缓存，主要用于处理大量数据的高访问负载。 </li><li>数据模型： 一系列键值对</li><li>优势： 快速查询</li><li>劣势： 存储的数据缺少结构化</li></ul><h3 id="列存储数据库"><a href="#列存储数据库" class="headerlink" title="列存储数据库"></a>列存储数据库</h3><ul><li>相关产品：Cassandra, HBase, Riak</li><li>典型应用：分布式的文件系统</li><li>数据模型：以列簇式存储，将同一列数据存在一起</li><li>优势：查找速度快，可扩展性强，更容易进行分布式扩展</li><li>劣势：功能相对局限</li></ul><h3 id="文档型数据库"><a href="#文档型数据库" class="headerlink" title="文档型数据库"></a>文档型数据库</h3><ul><li>相关产品：CouchDB、MongoDB</li><li>典型应用：Web应用（与Key-Value类似，Value是结构化的）</li><li>数据模型： 一系列键值对</li><li>优势：数据结构要求不严格</li><li>劣势： 查询性能不高，而且缺乏统一的查询语法</li></ul><h3 id="图形-Graph-数据库"><a href="#图形-Graph-数据库" class="headerlink" title="图形(Graph)数据库"></a>图形(Graph)数据库</h3><ul><li>相关数据库：Neo4J、InfoGrid、Infinite Graph</li><li>典型应用：社交网络</li><li>数据模型：图结构</li><li>优势：利用图结构相关算法。</li><li>劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。</li></ul><h2 id="14-1-3-什么是Redis"><a href="#14-1-3-什么是Redis" class="headerlink" title="14.1.3 什么是Redis"></a>14.1.3 什么是Redis</h2><p>&emsp;&emsp;Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：</p><ul><li>字符串类型 string</li><li>哈希类型 hash</li><li>列表类型 list</li><li>集合类型 set</li><li>有序集合类型 sortedset</li></ul><h3 id="redis的应用场景"><a href="#redis的应用场景" class="headerlink" title="redis的应用场景"></a>redis的应用场景</h3><ul><li>缓存（数据查询、短连接、新闻内容、商品内容等等）</li><li>聊天室的在线好友列表</li><li>任务队列。（秒杀、抢购、12306等等）</li><li>应用排行榜</li><li>网站访问统计</li><li>数据过期处理（可以精确到毫秒</li><li>分布式集群架构中的session分离</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十三章 2.JSON</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-/Java/JavaWeb/13_2%20JSON.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-/Java/JavaWeb/13_2%20JSON.html</url>
      
        <content type="html"><![CDATA[<h1 id="13-2-JSON"><a href="#13-2-JSON" class="headerlink" title="13.2 JSON"></a>13.2 JSON</h1><h2 id="13-2-1-概念"><a href="#13-2-1-概念" class="headerlink" title="13.2.1 概念"></a>13.2.1 概念</h2><p><strong>JavaScript Object Notation</strong>===&gt;JavaScript对象表示法</p><p><img src="//cdn.foreversfj.com/image/blog/20190905/fc5zY4hmRFma.png!blog" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.setName(<span class="string">"张三"</span>);</span><br><span class="line">p.setAge(<span class="number">23</span>);</span><br><span class="line">p.setGender(<span class="string">"男"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="number">23</span>,<span class="string">"gender"</span>:<span class="string">"男"</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>json现在多用于存储和交换文本信息的语法</li><li>进行数据的传输</li><li>JSON 比 XML 更小、更快，更易解析。</li></ul><h2 id="13-2-2-语法"><a href="#13-2-2-语法" class="headerlink" title="13.2.2 语法"></a>13.2.2 语法</h2><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><ul><li>数据在名称/值对中：json数据是由键值对构成的<ul><li>键用引号(单双都行)引起来，也可以不使用引号</li><li>值得取值类型：<ol><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true 或 false）</li><li>数组（在方括号中）<code>{&quot;persons&quot;:[{},{}]}</code></li><li>对象（在花括号中）<code>{&quot;address&quot;:{&quot;province&quot;：&quot;陕西&quot;....}}</code></li><li>null</li></ol></li></ul></li><li>数据由逗号分隔：多个键值对由逗号分隔</li><li>花括号保存对象：使用<code>{}</code>定义json 格式</li><li>方括号保存数组：<code>[]</code></li></ul><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><ol><li>json对象.键名</li><li>json对象[“键名”]</li><li>数组对象[索引]</li><li>遍历  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义基本格式</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="string">'gender'</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> ps = [&#123;<span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="string">"age"</span>: <span class="number">23</span>, <span class="string">"gender"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">          &#123;<span class="string">"name"</span>: <span class="string">"李四"</span>, <span class="string">"age"</span>: <span class="number">24</span>, <span class="string">"gender"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">          &#123;<span class="string">"name"</span>: <span class="string">"王五"</span>, <span class="string">"age"</span>: <span class="number">25</span>, <span class="string">"gender"</span>: <span class="literal">false</span>&#125;];</span><br><span class="line"><span class="comment">//获取person对象中所有的键和值</span></span><br><span class="line"><span class="comment">/** //for in 循环</span></span><br><span class="line"><span class="comment"> * for(var key in person)&#123;</span></span><br><span class="line"><span class="comment"> *   //这样的方式获取不行。因为相当于  person."name"</span></span><br><span class="line"><span class="comment"> *   //alert(key + ":" + person.key);</span></span><br><span class="line"><span class="comment"> *   alert(key+":"+person[key]);</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//获取ps中的所有值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ps.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> p = ps[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> p)&#123;</span><br><span class="line">        alert(key+<span class="string">":"</span>+p[key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="13-2-3-JSON数据和Java对象的相互转换"><a href="#13-2-3-JSON数据和Java对象的相互转换" class="headerlink" title="13.2.3 JSON数据和Java对象的相互转换"></a>13.2.3 JSON数据和Java对象的相互转换</h2><ul><li><strong>JSON解析器：</strong><ul><li>常见的解析器：<code>Jsonlib</code>，<code>Gson</code>，<code>fastjson</code>，<code>jackson</code></li></ul></li></ul><ol><li><p><strong>JSON转为Java对象</strong></p><ol><li>导入jackson的相关jar包</li><li>创建Jackson核心对象 ObjectMapper</li><li>调用ObjectMapper的相关方法进行转换<ol><li>readValue(json字符串数据,Class)</li></ol></li></ol></li><li><p><strong>Java对象转换JSON</strong></p><ol><li><p>使用步骤：</p><ul><li>导入jackson的相关jar包</li><li>创建Jackson核心对象 ObjectMapper</li><li>调用ObjectMapper的相关方法进行转换</li></ul><ol><li><p><strong>转换方法：</strong></p><ul><li><strong><code>writeValue(参数1，obj)</code></strong><blockquote><p>参数1：</p><ul><li><strong><code>File</code></strong>：将obj对象转换为JSON字符串，并保存到指定的文件中</li><li><strong><code>Writer</code></strong>：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中</li><li><strong><code>OutputStream</code></strong>：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中</li></ul></blockquote></li><li><strong><code>writeValueAsString(obj)</code></strong>：将对象转为json字符串</li></ul></li><li><p><strong>注解：</strong></p><ul><li><p><strong><code>@JsonIgnore</code></strong>：排除属性。</p></li><li><p><strong><code>@JsonFormat</code></strong>：属性值得格式化</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><strong>复杂java对象转换</strong></p><ul><li><strong><code>List</code></strong>：数组</li><li><strong><code>Map</code></strong>：对象格式一致</li></ul></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十三章 1.AJAX</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-/Java/JavaWeb/13_1%20AJAX.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-28-/Java/JavaWeb/13_1%20AJAX.html</url>
      
        <content type="html"><![CDATA[<h1 id="13-1-AJAX"><a href="#13-1-AJAX" class="headerlink" title="13.1 AJAX"></a>13.1 AJAX</h1><h2 id="13-1-1-概念"><a href="#13-1-1-概念" class="headerlink" title="13.1.1 概念"></a>13.1.1 概念</h2><p><strong>ASynchronous JavaScript And XML</strong>===&gt;异步的JavaScript和XML</p><p><strong>异步和同步</strong>：客户端和服务器端相互通信的基础上</p><p><img src="//cdn.foreversfj.com/image/blog/20190905/AXpIP1AovaFe.png!blog" alt=""></p><ul><li>客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。</li><li>客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</li></ul><p>&emsp;&emsp;<strong>Ajax</strong>是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p><p>&emsp;&emsp;通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><p>&emsp;&emsp;传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。</p><p>&emsp;&emsp;提升用户的体验</p><h2 id="13-1-2-实现方式"><a href="#13-1-2-实现方式" class="headerlink" title="13.1.2 实现方式"></a>13.1.2 实现方式</h2><h3 id="原生的JS实现方式"><a href="#原生的JS实现方式" class="headerlink" title="原生的JS实现方式"></a>原生的JS实现方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建核心对象</span></span><br><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">&#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">// code for IE6, IE5</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. 建立连接</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数：</span></span><br><span class="line"><span class="comment"> *  1. 请求方式：GET、POST</span></span><br><span class="line"><span class="comment"> *    * get方式，请求参数在URL后边拼接。send方法为空参</span></span><br><span class="line"><span class="comment"> *    * post方式，请求参数在send方法中定义</span></span><br><span class="line"><span class="comment"> *  2. 请求的URL：</span></span><br><span class="line"><span class="comment"> *  3. 同步或异步请求：true（异步）或 false（同步）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"ajaxServlet?username=tom"</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//3.发送请求</span></span><br><span class="line">xmlhttp.send();</span><br><span class="line"><span class="comment">//4.接受并处理来自服务器的响应结果</span></span><br><span class="line"><span class="comment">//获取方式 ：xmlhttp.responseText</span></span><br><span class="line"><span class="comment">//什么时候获取？当服务器响应成功后再获取</span></span><br><span class="line"><span class="comment">//当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。</span></span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断readyState就绪状态是否为4，判断status响应状态码是否为200</span></span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取服务器的响应结果</span></span><br><span class="line">        <span class="keyword">var</span> responseText = xmlhttp.responseText;</span><br><span class="line">        alert(responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JQeury实现方式"><a href="#JQeury实现方式" class="headerlink" title="JQeury实现方式"></a>JQeury实现方式</h3><h4 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax()"></a><code>$.ajax()</code></h4><ul><li><strong>语法</strong>：<code>$.ajax({键值对})</code>;</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用$.ajax()发送异步请求</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">"ajaxServlet1111"</span> , <span class="comment">// 请求路径</span></span><br><span class="line">    type:<span class="string">"POST"</span> , <span class="comment">//请求方式</span></span><br><span class="line">    <span class="comment">//data: "username=jack&amp;age=23",//请求参数</span></span><br><span class="line">    data:&#123;<span class="string">"username"</span>:<span class="string">"jack"</span>,<span class="string">"age"</span>:<span class="number">23</span>&#125;,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        alert(data);</span><br><span class="line">    &#125;,<span class="comment">//响应成功后的回调函数</span></span><br><span class="line">    error:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"出错啦..."</span>)</span><br><span class="line">    &#125;,<span class="comment">//表示如果请求响应出现错误，会执行的回调函数</span></span><br><span class="line">    dataType:<span class="string">"text"</span><span class="comment">//设置接受到的响应数据的格式</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="get-：发送get请求"><a href="#get-：发送get请求" class="headerlink" title="$.get()：发送get请求"></a><code>$.get()</code>：发送get请求</h4><ul><li><strong>语法</strong>：<code>$.get(url, [data], [callback], [type])</code></li><li><strong>参数</strong>：<ul><li><strong><code>url</code></strong>：请求路径</li><li><strong><code>data</code></strong>：请求参数</li><li><strong><code>callback</code></strong>：回调函数</li><li><strong><code>type</code></strong>：响应结果的类型</li></ul></li></ul><h4 id="post-：发送post请求"><a href="#post-：发送post请求" class="headerlink" title="$.post()：发送post请求"></a><code>$.post()</code>：发送post请求</h4><ul><li><strong>语法</strong>：<code>$.post(url, [data], [callback], [type])</code></li><li><strong>参数</strong>：<ul><li><strong><code>url</code></strong>：请求路径</li><li><strong><code>data</code></strong>：请求参数</li><li><strong><code>callback</code></strong>：回调函数</li><li><strong><code>type</code></strong>：响应结果的类型</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十二章 4.案例</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-/Java/JavaWeb/12_4%20JQuery%E6%A1%88%E4%BE%8B.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-/Java/JavaWeb/12_4%20JQuery%E6%A1%88%E4%BE%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="12-4-案例"><a href="#12-4-案例" class="headerlink" title="12.4 案例"></a>12.4 案例</h1><h2 id="12-4-1-广告显示和隐藏"><a href="#12-4-1-广告显示和隐藏" class="headerlink" title="12.4.1 广告显示和隐藏"></a>12.4.1 广告显示和隐藏</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>广告的自动显示与隐藏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#content</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">height</span>:<span class="number">500px</span>;<span class="attribute">background</span>:<span class="number">#999</span>&#125;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入jquery--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">            /**</span><br><span class="line">             * 需求：</span><br><span class="line">             *   1. 当页面加载完，3秒后。自动显示广告</span><br><span class="line">             *   2. 广告显示5秒后，自动消失。</span><br><span class="line">             * 分析：</span><br><span class="line">             *   1. 使用定时器来完成。setTimeout (执行一次定时器)</span><br><span class="line">             *   2. 分析发现JQuery的显示和隐藏动画效果其实就是控制display</span><br><span class="line">             *   3. 使用  show/hide方法来完成广告的显示</span><br><span class="line">             */</span><br><span class="line"><span class="actionscript">            <span class="comment">//入口函数，在页面加载完成之后，定义定时器，调用这两个方法</span></span></span><br><span class="line"><span class="javascript">            $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//定义定时器，调用adShow方法 3秒后执行一次</span></span></span><br><span class="line">                setTimeout(adShow,3000);</span><br><span class="line"><span class="actionscript">                <span class="comment">//定义定时器，调用adHide方法，8秒后执行一次</span></span></span><br><span class="line">                setTimeout(adHide,8000);</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="actionscript">            <span class="comment">//显示广告</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">adShow</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//获取广告div，调用显示方法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#ad"</span>).show(<span class="string">"slow"</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">//隐藏广告</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">adHide</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//获取广告div，调用隐藏方法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#ad"</span>).hide(<span class="string">"slow"</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 整体的DIV --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 广告DIV --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ad"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"width:100%"</span> <span class="attr">src</span>=<span class="string">"../img/adv.jpg!blog"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 下方正文部分 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">                正文部分</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="12-4-2-抽奖"><a href="#12-4-2-抽奖" class="headerlink" title="12.4.2 抽奖"></a>12.4.2 抽奖</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>jquery案例之抽奖<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">'javascript'</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            /**</span><br><span class="line">             * 分析：</span><br><span class="line">             * 1. 给开始按钮绑定单击事件</span><br><span class="line">             *  1.1 定义循环定时器</span><br><span class="line">             *  1.2 切换小相框的src属性</span><br><span class="line">             *    * 定义数组，存放图片资源路径</span><br><span class="line">             *    * 生成随机数。数组索引</span><br><span class="line">             * 2. 给结束按钮绑定单击事件</span><br><span class="line">             *  2.1 停止定时器</span><br><span class="line">             *  2.2 给大相框设置src属性</span><br><span class="line">             */</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> imgs = [<span class="string">"../img/man00.jpg!blog"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"../img/man01.jpg!blog"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"../img/man02.jpg!blog"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"../img/man03.jpg!blog"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"../img/man04.jpg!blog"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"../img/man05.jpg!blog"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"../img/man06.jpg!blog"</span>,</span></span><br><span class="line">                       ];</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> startId;<span class="comment">//开始定时器的id</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> index;<span class="comment">//随机角标</span></span></span><br><span class="line"><span class="javascript">            $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//处理按钮是否可以使用的效果</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#startID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#stopID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//1. 给开始按钮绑定单击事件</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#startID"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 1.1 定义循环定时器 20毫秒执行一次</span></span></span><br><span class="line"><span class="actionscript">                    startId = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//处理按钮是否可以使用的效果</span></span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"#startID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"#stopID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//1.2生成随机角标 0-6</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//0.000--0.999 --&gt; * 7 --&gt; 0.0-----6.9999</span></span></span><br><span class="line"><span class="javascript">                        index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">7</span>);</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//1.3设置小相框的src属性</span></span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"#img1ID"</span>).prop(<span class="string">"src"</span>,imgs[index]);</span></span><br><span class="line">                    &#125;,20);</span><br><span class="line">                &#125;);</span><br><span class="line"><span class="actionscript">                <span class="comment">//2. 给结束按钮绑定单击事件</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#stopID"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//处理按钮是否可以使用的效果</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#startID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#stopID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 1.1 停止定时器</span></span></span><br><span class="line">                    clearInterval(startId);</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 1.2 给大相框设置src属性</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#img2ID"</span>).prop(<span class="string">"src"</span>,imgs[index]).hide();</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//显示1秒之后</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#img2ID"</span>).show(<span class="number">1000</span>);</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 小像框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border-style:dotted;width:160px;height:100px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img1ID"</span> <span class="attr">src</span>=<span class="string">"../img/man00.jpg!blog"</span>             <span class="attr">style</span>=<span class="string">"width:160px;height:100px"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 大像框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">             <span class="attr">style</span>=<span class="string">"border-style:double;width:800px;height:500px;position:absolute;left:500px;top:10px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img2ID"</span> <span class="attr">src</span>=<span class="string">"../img/man00.jpg!blog"</span> <span class="attr">width</span>=<span class="string">"800px"</span> <span class="attr">height</span>=<span class="string">"500px"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开始按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">               <span class="attr">id</span>=<span class="string">"startID"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">type</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">value</span>=<span class="string">"点击开始"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">style</span>=<span class="string">"width:150px;height:150px;font-size:22px"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 停止按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">               <span class="attr">id</span>=<span class="string">"stopID"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">type</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">value</span>=<span class="string">"点击停止"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">style</span>=<span class="string">"width:150px;height:150px;font-size:22px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="插件：增强JQuery的功能"><a href="#插件：增强JQuery的功能" class="headerlink" title="插件：增强JQuery的功能"></a>插件：增强JQuery的功能</h2><ol><li><strong><code>$.fn.extend(object)</code></strong><ul><li>增强通过Jquery获取的对象的功能  <code>$(&quot;#id&quot;)</code></li></ul></li><li><strong><code>$.extend(object)</code></strong><ul><li>增强JQeury对象自身的功能 <code>$/jQuery</code></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十二章 3.JQuery 高级</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-/Java/JavaWeb/12_3%20JQuery%20%E9%AB%98%E7%BA%A7.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-/Java/JavaWeb/12_3%20JQuery%20%E9%AB%98%E7%BA%A7.html</url>
      
        <content type="html"><![CDATA[<h1 id="12-3-JQuery-高级"><a href="#12-3-JQuery-高级" class="headerlink" title="12.3 JQuery 高级"></a>12.3 JQuery 高级</h1><h2 id="12-3-1-动画"><a href="#12-3-1-动画" class="headerlink" title="12.3.1 动画"></a>12.3.1 动画</h2><h3 id="三种方式显示和隐藏元素"><a href="#三种方式显示和隐藏元素" class="headerlink" title="三种方式显示和隐藏元素"></a>三种方式显示和隐藏元素</h3><ul><li><p>默认显示和隐藏方式</p><ul><li><strong><code>show([speed,[easing],[fn]])</code></strong></li><li><strong><code>hide([speed,[easing],[fn]])</code></strong></li><li><strong><code>toggle([speed],[easing],[fn])</code></strong></li></ul></li><li><p>滑动显示和隐藏方式</p><ul><li><strong><code>slideDown([speed],[easing],[fn])</code></strong></li><li><strong><code>slideUp([speed,[easing],[fn]])</code></strong></li><li><strong><code>slideToggle([speed],[easing],[fn])</code></strong></li></ul></li><li><p>淡入淡出显示和隐藏方式</p><ul><li><strong><code>fadeIn([speed],[easing],[fn])</code></strong></li><li><strong><code>fadeOut([speed],[easing],[fn])</code></strong></li><li><strong><code>fadeToggle([speed,[easing],[fn]])</code></strong></li></ul><blockquote><ol><li><strong><code>speed</code></strong>：动画的速度。三个预定义的值(“<code>slow</code>“，”<code>normal</code>“，”<code>fast</code>“)或表示动画时长的毫秒数值(如：1000)</li><li><strong><code>easing</code></strong>：用来指定切换效果，默认是”<code>swing</code>“，可用参数”<code>linear</code>“<ul><li><strong><code>swing</code></strong>：动画执行时效果是 先慢，中间快，最后又慢</li><li><strong><code>linear</code></strong>：动画执行时速度是匀速的</li></ul></li><li><strong><code>fn</code></strong>：在动画完成时执行的函数，每个元素执行一次。</li></ol></blockquote></li></ul><h2 id="12-3-2-遍历"><a href="#12-3-2-遍历" class="headerlink" title="12.3.2 遍历"></a>12.3.2 遍历</h2><h3 id="js的遍历方式"><a href="#js的遍历方式" class="headerlink" title="js的遍历方式"></a>js的遍历方式</h3><ul><li>for(初始化值;循环结束条件;步长)</li></ul><h3 id="jq的遍历方式"><a href="#jq的遍历方式" class="headerlink" title="jq的遍历方式"></a>jq的遍历方式</h3><ul><li><p><strong><code>jq对象.each(callback)</code></strong></p><ul><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jquery对象.each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong><code>index</code></strong>：就是元素在集合中的索引</li><li><strong><code>element</code></strong>：就是集合中的每一个元素对象</li><li><strong><code>this</code></strong>：集合中的每一个元素对象</li></ul></li><li><p>回调函数返回值：</p><ul><li><strong><code>true</code></strong>：如果当前function返回为false，则结束循环(break)。</li><li><strong><code>false</code></strong>：如果当前function返回为true，则结束本次循环，继续下次循环(continue)</li></ul></li></ul></li><li><p><strong><code>$.each(object, [callback])</code></strong></p></li><li><p><strong><code>for..of</code></strong>：jquery 3.0 版本之后提供的方式</p><ul><li>for(元素对象 of 容器对象)</li></ul></li></ul><h2 id="12-3-3-事件绑定"><a href="#12-3-3-事件绑定" class="headerlink" title="12.3.3 事件绑定"></a>12.3.3 事件绑定</h2><ol><li><p>jquery标准的绑定方式</p><ul><li><code>jq对象.事件方法(回调函数)</code>；</li><li>注：如果调用事件方法，不传递回调函数，则会触发浏览器默认行为。<ul><li><code>表单对象.submit()</code>；//让表单提交</li></ul></li></ul></li><li><p>on绑定事件/off解除绑定</p><ul><li><code>jq对象.on(&quot;事件名称&quot;,回调函数)</code></li><li><code>jq对象.off(&quot;事件名称&quot;)</code><ul><li>如果off方法不传递任何参数，则将组件上的所有事件全部解绑</li></ul></li></ul></li><li><p>事件切换：<code>toggle</code></p><ul><li><p><strong><code>jq对象.toggle(fn1,fn2...)</code></strong></p><ul><li>当单击jq对象对应的组件后，会执行fn1.第二次点击会执行fn2…..</li></ul></li><li><p>注意：1.9版本<code>toggle()</code>方法删除,<code>jQuery Migrate</code>（迁移）插件可以恢复此功能。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-migrate-1.0.0.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十二章 2.DOM操作</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-/Java/JavaWeb/12_2%20DOM%E6%93%8D%E4%BD%9C.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-/Java/JavaWeb/12_2%20DOM%E6%93%8D%E4%BD%9C.html</url>
      
        <content type="html"><![CDATA[<h1 id="12-2-DOM操作"><a href="#12-2-DOM操作" class="headerlink" title="12.2 DOM操作"></a>12.2 DOM操作</h1><h2 id="12-2-1-内容操作"><a href="#12-2-1-内容操作" class="headerlink" title="12.2.1  内容操作"></a>12.2.1  内容操作</h2><ul><li><p><strong><code>html()</code></strong>：获取/设置元素的标签体内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">font</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>  --&gt; <span class="tag">&lt;<span class="name">font</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>text()</code></strong>：获取/设置元素的标签体纯文本内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">font</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> --&gt; 内容</span><br></pre></td></tr></table></figure></li><li><p><strong><code>val()</code></strong>： 获取/设置元素的value属性值</p></li></ul><h2 id="12-2-2-属性操作"><a href="#12-2-2-属性操作" class="headerlink" title="12.2.2 属性操作"></a>12.2.2 属性操作</h2><ul><li>通用属性操作<ul><li><strong><code>attr()</code></strong>：获取/设置元素的属性</li><li><strong><code>removeAttr()</code></strong>：删除属性</li><li><strong><code>prop()</code></strong>：获取/设置元素的属性</li><li><strong><code>removeProp()</code></strong>：删除属性<blockquote><p><code>attr</code>和<code>prop</code>区别？<br>&emsp;&emsp;1、如果操作的是元素的固有属性，则建议使用prop<br>&emsp;&emsp;2、如果操作的是元素自定义的属性，则建议使用attr</p></blockquote></li></ul></li><li>对class属性操作<ul><li><strong><code>addClass()</code></strong>：添加class属性值</li><li><strong><code>removeClass()</code></strong>：删除class属性值</li><li><strong><code>toggleClass()</code></strong>：切换class属性<blockquote><p><strong><code>toggleClass(&quot;one&quot;)：</code></strong><br>&emsp;&emsp;判断如果元素对象上存在<code>class=&quot;one&quot;</code>，则将属性值one删除掉。  如果元素对象上不存在<code>class=&quot;one&quot;</code>，则添加</p></blockquote></li><li>**<code>css()</code></li></ul></li></ul><h2 id="12-2-3-CRUD操作"><a href="#12-2-3-CRUD操作" class="headerlink" title="12.2.3 CRUD操作"></a>12.2.3 CRUD操作</h2><ul><li><strong><code>append()</code></strong>：父元素将子元素追加到末尾<ul><li><strong><code>对象1.append(对象2)</code></strong>：将对象2添加到对象1元素内部，并且在末尾</li></ul></li><li><strong><code>prepend()</code></strong>：父元素将子元素追加到开头<ul><li><strong><code>对象1.prepend(对象2)</code></strong>：将对象2添加到对象1元素内部，并且在开头</li></ul></li><li>**<code>appendTo()</code><ul><li><strong><code>对象1.appendTo(对象2)</code></strong>：将对象1添加到对象2内部，并且在末尾</li></ul></li><li><strong><code>prependTo()</code></strong><ul><li><strong><code>对象1.prependTo(对象2)</code></strong>：将对象1添加到对象2内部，并且在开头</li></ul></li><li><strong><code>after()</code></strong>：添加元素到元素后边<ul><li><strong><code>对象1.after(对象2)</code></strong>： 将对象2添加到对象1后边。对象1和对象2是兄弟关系</li></ul></li><li><strong><code>before()</code></strong>：添加元素到元素前边<ul><li><strong><code>对象1.before(对象2)</code></strong>： 将对象2添加到对象1前边。对象1和对象2是兄弟关系</li></ul></li><li><strong><code>insertAfter()</code></strong><ul><li><strong><code>对象1.insertAfter(对象2)</code></strong>：将对象2添加到对象1后边。对象1和对象2是兄弟关系</li></ul></li><li><strong><code>insertBefore()</code></strong><ul><li><strong><code>对象1.insertBefore(对象2)</code></strong>： 将对象2添加到对象1前边。对象1和对象2是兄弟关系</li></ul></li><li><strong><code>remove()</code></strong>：移除元素<ul><li><strong><code>对象.remove()</code></strong>：将对象删除掉</li></ul></li><li><strong><code>empty()</code></strong>：清空元素的所有后代元素。<ul><li><strong><code>对象.empty()</code></strong>：将对象的后代元素全部清空，但是保留当前对象以及其属性节点</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十二章 1.JQuery 基础</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-/Java/JavaWeb/12_1%20JQuery%20%E5%9F%BA%E7%A1%80.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-/Java/JavaWeb/12_1%20JQuery%20%E5%9F%BA%E7%A1%80.html</url>
      
        <content type="html"><![CDATA[<h1 id="12-1-JQuery-基础"><a href="#12-1-JQuery-基础" class="headerlink" title="12.1 JQuery 基础"></a>12.1 JQuery 基础</h1><h2 id="12-1-1-概念及入门"><a href="#12-1-1-概念及入门" class="headerlink" title="12.1.1 概念及入门"></a>12.1.1 概念及入门</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>一个JavaScript框架。简化JS开发</strong></p><p>&emsp;&emsp;jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优    化HTML文档操作、事件处理、动画设计和Ajax交互。<br>&emsp;&emsp;<strong>JavaScript框架：</strong>本质上就是一些js文件，封装了js的原生代码而已</p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li><p>下载JQuery，目前jQuery有三个大版本：</p><ul><li><strong><code>1.x</code></strong>：兼容ie678,使用最为广泛的，官方只做BUG维护，功能不再新增。因此一般项目来说，使用1.x版本就可以了。目前最终版本为：1.12.4 (2016年5月20日)。</li><li><strong><code>2.x</code></strong>：不兼容ie678，很少有人使用，官方只做BUG维护，功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x。最终版本：2.2.4 (2016年5月20日)。</li><li><strong><code>3.x</code></strong>：不兼容ie678，只支持最新的浏览器。除非特殊要求，一般不会使用3.x版本的，很多老的jQuery插件不支持这个版本。目前该版本是官方主要更新维护的版本。</li></ul><blockquote><p><strong><code>jquery-xxx.js</code> 与<code>jquery-xxx.min.js</code>区别：</strong><br>&emsp;&emsp;1、<strong><code>jquery-xxx.js</code></strong>：开发版本。给程序员看的，有良好的缩进和注释。体积大一些<br>&emsp;&emsp;2、<strong><code>jquery-xxx.min.js</code></strong>：生产版本。程序中使用，没有缩进。体积小一些。程序加载更快</p></blockquote></li><li><p>导入JQuery的js文件：导入min.js文件</p></li><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = $(<span class="string">"#div1"</span>);</span><br><span class="line">alert(div1.html());</span><br></pre></td></tr></table></figure></li></ol><h4 id="JQuery对象和JS对象区别与转换"><a href="#JQuery对象和JS对象区别与转换" class="headerlink" title="JQuery对象和JS对象区别与转换"></a>JQuery对象和JS对象区别与转换</h4><ol><li>JQuery对象在操作时，更加方便。</li><li>JQuery对象和js对象方法不通用的.</li><li>两者相互转换<blockquote><p>jq ===&gt; js：<code>jq对象[索引]</code>或者<code>jq对象.get(索引)</code><br>js ===&gt; jq：<code>$(js对象)</code></p></blockquote></li></ol><h2 id="12-1-2-选择器"><a href="#12-1-2-选择器" class="headerlink" title="12.1.2 选择器"></a>12.1.2 选择器</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li><strong>选择器：</strong>筛选具有相似特征的元素(标签)</li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ol><li><p>事件绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取b1按钮</span></span><br><span class="line">$(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"abc"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>入口函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>window.onload</code>  和 <code>$(function)</code>区别</strong><br>&emsp;&emsp;1、<strong><code>window.onload</code></strong> 只能定义一次，如果定义多次，后边的会将前边的覆盖掉<br>&emsp;&emsp;2、<strong><code>$(function)</code></strong> 可以定义多次的。</p></blockquote></li><li><p>样式控制：css方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $("#div1").css("background-color","red");</span></span><br><span class="line">$(<span class="string">"#div1"</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"pink"</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="①-基本选择器"><a href="#①-基本选择器" class="headerlink" title="① 基本选择器"></a>① 基本选择器</h4><ul><li>标签选择器（元素选择器）<ul><li>语法：<code>$(&quot;html标签名&quot;)</code>获得所有匹配标签名称的元素</li></ul></li><li>id选择器 <ul><li>语法：<code>$(&quot;#id的属性值&quot;)</code>获得与指定id属性值匹配的元素</li></ul></li><li>类选择器<ul><li>语法：<code>$(&quot;.class的属性值&quot;)</code>获得与指定的class属性值匹配的元素</li></ul></li><li>并集选择器<ul><li>语法：<code>$(&quot;选择器1,选择器2....&quot;)</code>获取多个选择器选中的所有元素</li></ul></li></ul><h4 id="②-层级选择器"><a href="#②-层级选择器" class="headerlink" title="② 层级选择器"></a>② 层级选择器</h4><ul><li>后代选择器<ul><li>语法：<code>$(&quot;A B &quot;)</code>选择A元素内部的所有B元素</li></ul></li><li>子选择器<ul><li>语法：<code>$(&quot;A &gt; B&quot;)</code>选择A元素内部的所有B子元素</li></ul></li></ul><h4 id="③-属性选择器"><a href="#③-属性选择器" class="headerlink" title="③ 属性选择器"></a>③ 属性选择器</h4><ul><li>属性名称选择器<ul><li>语法：<code>$(&quot;A[属性名]&quot;)</code>包含指定属性的选择器</li></ul></li><li>属性选择器<ul><li>语法：<code>$(&quot;A[属性名=&#39;值&#39;]&quot;)</code>包含指定属性等于指定值的选择器</li></ul></li><li>复合属性选择器<ul><li>语法：<code>$(&quot;A[属性名=&#39;值&#39;][]...&quot;)</code>包含多个属性条件的选择器</li></ul></li></ul><h4 id="④-过滤选择器"><a href="#④-过滤选择器" class="headerlink" title="④ 过滤选择器"></a>④ 过滤选择器</h4><ul><li>首元素选择器<ul><li>语法：<code>:first</code>获得选择的元素中的第一个元素</li></ul></li><li>尾元素选择器<ul><li>语法：<code>:last</code>获得选择的元素中的最后一个元素</li></ul></li><li>非元素选择器<ul><li>语法：<code>:not(selector)</code>不包括指定内容的元素</li></ul></li><li>偶数选择器<ul><li>语法：<code>:even</code>偶数，从 0 开始计数</li></ul></li><li>奇数选择器<ul><li>语法：<code>:odd</code>奇数，从 0 开始计数</li></ul></li><li>等于索引选择器<ul><li>语法：<code>:eq(index)</code>指定索引元素</li></ul></li><li>大于索引选择器<ul><li>语法：<code>:gt(index)</code>大于指定索引元素</li></ul></li><li>小于索引选择器<ul><li>语法：<code>:lt(index)</code>小于指定索引元素</li></ul></li><li>标题选择器<ul><li>语法：<code>:header</code>获得标题（h1~h6）元素，固定写法</li></ul></li></ul><h4 id="⑤-表单过滤选择器"><a href="#⑤-表单过滤选择器" class="headerlink" title="⑤ 表单过滤选择器"></a>⑤ 表单过滤选择器</h4><ul><li>可用元素选择器 <ul><li>语法：<code>:enabled</code>获得可用元素</li></ul></li><li>不可用元素选择器<ul><li>语法：<code>:disabled</code>获得不可用元素</li></ul></li><li>选中选择器 <ul><li>语法：<code>:checked</code>获得单选/复选框选中的元素</li></ul></li><li>选中选择器 <ul><li>语法：<code>:selected</code>获得下拉框选中的元素</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十一章 4.Session</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-/Java/JavaWeb/11_4%20Session.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-27-/Java/JavaWeb/11_4%20Session.html</url>
      
        <content type="html"><![CDATA[<h1 id="11-4-Session"><a href="#11-4-Session" class="headerlink" title="11.4 Session"></a>11.4 Session</h1><h2 id="11-4-1-入门"><a href="#11-4-1-入门" class="headerlink" title="11.4.1 入门"></a>11.4.1 入门</h2><ol><li><p><strong>概念</strong>：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。<code>HttpSession</code></p></li><li><p><strong>快速入门</strong>：</p><ol><li><p>获取<code>HttpSession</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br></pre></td></tr></table></figure></li><li><p>使用<code>HttpSession</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">getAttribute</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, Object value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="11-4-2-细节"><a href="#11-4-2-细节" class="headerlink" title="11.4.2 细节"></a>11.4.2 细节</h2><ol><li><p>当客户端关闭后，服务器不关闭，两次获取session是否为同一个？</p><ul><li><p>默认情况下。不是。</p></li><li><p>如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>,session.getId());</span><br><span class="line">c.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">response.addCookie(c);</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>客户端不关闭，服务器关闭后，两次获取的session是同一个吗？</p><ul><li><p>不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作</p><ul><li><p>session的钝化：</p><blockquote><p>在服务器正常关闭之前，将session对象系列化到硬盘上</p></blockquote></li><li><p>session的活化：</p><blockquote><p>在服务器启动后，将session文件转化为内存中的session对象即可。</p></blockquote></li></ul></li></ul></li><li><p>session什么时候被销毁？</p><ul><li><p>服务器关闭</p></li><li><p>session对象调用<code>invalidate()</code>。</p></li><li><p>session默认失效时间 30分钟<br>选择性配置修改    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190905/9KAX6tQcbhSV.png!blog" alt=""></p><h2 id="11-4-3-session的特点"><a href="#11-4-3-session的特点" class="headerlink" title="11.4.3 session的特点"></a>11.4.3 session的特点</h2><ol><li>session用于存储一次会话的多次请求的数据，存在服务器端<ol start="2"><li>session可以存储任意类型，任意大小的数据</li></ol></li></ol><ul><li><strong>session与Cookie的区别：</strong><ol><li>session存储数据在服务器端，Cookie在客户端</li><li>session没有数据大小限制，Cookie有</li><li>session数据安全，Cookie相对于不安全</li></ol></li></ul><h2 id="案例：验证码"><a href="#案例：验证码" class="headerlink" title="案例：验证码"></a><em>案例：验证码</em></h2><p>案例需求：</p><ol><li>访问带有验证码的登录页面login.jsp</li><li>用户输入用户名，密码以及验证码。<ul><li>如果用户名和密码输入有误，跳转登录页面，提示:用户名或密码错误</li><li>如果验证码输入有误，跳转登录页面，提示：验证码错误</li><li>如果全部输入正确，则跳转到主页success.jsp，显示：用户名,欢迎您</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十一章 3.JSP：入门学习</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-26-/Java/JavaWeb/11_3%20JSP.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-26-/Java/JavaWeb/11_3%20JSP.html</url>
      
        <content type="html"><![CDATA[<h1 id="11-3-JSP：入门学习"><a href="#11-3-JSP：入门学习" class="headerlink" title="11.3 JSP：入门学习"></a>11.3 JSP：入门学习</h1><h2 id="11-3-1-概念"><a href="#11-3-1-概念" class="headerlink" title="11.3.1 概念"></a>11.3.1 概念</h2><ul><li><i>Java Server Pages</i>： java服务器端页面<ul><li>可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码</li><li>用于简化书写！！！</li></ul></li></ul><h2 id="11-3-2-原理"><a href="#11-3-2-原理" class="headerlink" title="11.3.2 原理"></a>11.3.2 原理</h2><ul><li>JSP本质上就是一个Servlet</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190905/U7DOKinnVn8N.png!blog" alt=""></p><ul><li>JSP的脚本：JSP定义Java代码的方式<ol><li><strong><code>&lt;%  代码 %&gt;</code></strong>：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。</li><li><strong><code>&lt;%! 代码 %&gt;</code></strong>：定义的java代码，在jsp转换后的java类的成员位置。</li><li><strong><code>&lt;%= 代码 %&gt;</code></strong>：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。</li></ol></li><li>JSP的内置对象<ul><li>在jsp页面中不需要获取和创建，可以直接使用的对象</li><li>jsp一共有9个内置对象。<ul><li><strong><code>request</code></strong></li><li><strong><code>response</code></strong></li><li><strong><code>out</code></strong>：字符输出流对象。可以将数据输出到页面上。和<code>response.getWriter()</code>类似<blockquote><p><strong><code>response.getWriter()</code>和<code>out.write()</code>的区别：</strong></p><ul><li>在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。</li><li><strong><code>response.getWriter()</code></strong>数据输出永远在<code>out.write()</code>之前 </li></ul></blockquote></li></ul></li></ul></li></ul><h2 id="案例-改造Cookie案例"><a href="#案例-改造Cookie案例" class="headerlink" title="案例:改造Cookie案例"></a><em>案例:改造Cookie案例</em></h2><p><img src="//cdn.foreversfj.com/image/blog/20190905/7RSn947JJjYn.png!blog" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十一章 2.Cookie案例</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-26-/Java/JavaWeb/11_2%20Cookie%E6%A1%88%E4%BE%8B.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-26-/Java/JavaWeb/11_2%20Cookie%E6%A1%88%E4%BE%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="11-2-案例：记住上一次访问时间"><a href="#11-2-案例：记住上一次访问时间" class="headerlink" title="11.2 案例：记住上一次访问时间"></a>11.2 案例：记住上一次访问时间</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ol><li>访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。</li><li>如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串</li></ol><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li><p>可以采用Cookie来完成</p></li><li><p>在服务器中的Servlet判断是否有一个名为lastTime的cookie</p><ol><li>有：不是第一次访问<ol><li>响应数据：<code>欢迎回来，您上次访问时间为:2018年6月10日11:50:20</code></li><li>写回Cookie：<code>lastTime=2018年6月10日11:50:01</code></li></ol></li><li>没有：是第一次访问<ol><li>响应数据：<code>您好，欢迎您首次访问</code></li><li>写回Cookie：<code>lastTime=2018年6月10日11:50:01</code></li></ol></li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190905/eQa3FcegjwOU.png!blog" alt=""></p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.foreversfj.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/cookieTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse </span></span></span><br><span class="line"><span class="function"><span class="params">                          response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置响应的消息体的数据格式以及编码</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取所有Cookie</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//没有cookie为lastTime</span></span><br><span class="line">        <span class="comment">//2.遍历cookie数组</span></span><br><span class="line">        <span class="keyword">if</span>(cookies != <span class="keyword">null</span> &amp;&amp; cookies.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="comment">//3.获取cookie的名称</span></span><br><span class="line">                String name = cookie.getName();</span><br><span class="line">                <span class="comment">//4.判断名称是否是：lastTime</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"lastTime"</span>.equals(name))&#123;</span><br><span class="line">                    <span class="comment">//有该Cookie，不是第一次访问</span></span><br><span class="line">                    flag = <span class="keyword">true</span>;<span class="comment">//有lastTime的cookie</span></span><br><span class="line">                    <span class="comment">//设置Cookie的value</span></span><br><span class="line">                    <span class="comment">//获取当前时间的字符串，重新设置Cookie的值，重新发送cookie</span></span><br><span class="line">                    Date date  = <span class="keyword">new</span> Date();</span><br><span class="line">                    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">                    String str_date = sdf.format(date);</span><br><span class="line">                    System.out.println(<span class="string">"编码前："</span>+str_date);</span><br><span class="line">                    <span class="comment">//URL编码</span></span><br><span class="line">                    str_date = URLEncoder.encode(str_date,<span class="string">"utf-8"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"编码后："</span>+str_date);</span><br><span class="line">                    cookie.setValue(str_date);</span><br><span class="line">                    <span class="comment">//设置cookie的存活时间</span></span><br><span class="line">                    cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>);<span class="comment">//一个月</span></span><br><span class="line">                    response.addCookie(cookie);</span><br><span class="line">                    <span class="comment">//响应数据</span></span><br><span class="line">                    <span class="comment">//获取Cookie的value，时间</span></span><br><span class="line">                    String value = cookie.getValue();</span><br><span class="line">                    System.out.println(<span class="string">"解码前："</span>+value);</span><br><span class="line">                    <span class="comment">//URL解码：</span></span><br><span class="line">                    value = URLDecoder.decode(value,<span class="string">"utf-8"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"解码后："</span>+value);</span><br><span class="line">                    response.getWriter().write(<span class="string">"&lt;h1&gt;欢迎回来，您上次访问时间为:"</span>+value+<span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cookies == <span class="keyword">null</span> || cookies.length == <span class="number">0</span> || flag == <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="comment">//没有，第一次访问</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置Cookie的value</span></span><br><span class="line">            <span class="comment">//获取当前时间的字符串，重新设置Cookie的值，重新发送cookie</span></span><br><span class="line">            Date date  = <span class="keyword">new</span> Date();</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">            String str_date = sdf.format(date);</span><br><span class="line">            System.out.println(<span class="string">"编码前："</span>+str_date);</span><br><span class="line">            <span class="comment">//URL编码</span></span><br><span class="line">            str_date = URLEncoder.encode(str_date,<span class="string">"utf-8"</span>);</span><br><span class="line">            System.out.println(<span class="string">"编码后："</span>+str_date);</span><br><span class="line"></span><br><span class="line">            Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"lastTime"</span>,str_date);</span><br><span class="line">            <span class="comment">//设置cookie的存活时间</span></span><br><span class="line">            cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>);<span class="comment">//一个月</span></span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">            response.getWriter().write(<span class="string">"&lt;h1&gt;您好，欢迎您首次访问&lt;/h1&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse </span></span></span><br><span class="line"><span class="function"><span class="params">                         response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十一章 1.Cookie入门</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-26-/Java/JavaWeb/11_1%20Cookie.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-26-/Java/JavaWeb/11_1%20Cookie.html</url>
      
        <content type="html"><![CDATA[<h1 id="11-1-Cookie入门"><a href="#11-1-Cookie入门" class="headerlink" title="11.1 Cookie入门"></a>11.1 Cookie入门</h1><h2 id="11-1-1-会话技术"><a href="#11-1-1-会话技术" class="headerlink" title="11.1.1 会话技术"></a>11.1.1 会话技术</h2><ol><li><strong>会话</strong>：一次会话中包含多次请求和响应。<ul><li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li></ul></li><li><strong>功能</strong>：在一次会话的范围内的多次请求间，共享数据</li><li><strong>方式</strong>：<ol><li>客户端会话技术：Cookie</li><li>服务器端会话技术：Session</li></ol></li></ol><h2 id="11-1-2-Cookie："><a href="#11-1-2-Cookie：" class="headerlink" title="11.1.2 Cookie："></a>11.1.2 Cookie：</h2><ol><li><p>概念：客户端会话技术，将数据保存到客户端</p></li><li><p>快速入门：</p><ul><li>使用步骤<ol><li>创建Cookie对象，绑定数据<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Cookie(String name, String value)</span><br></pre></td></tr></table></figure></li><li>发送Cookie对象：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.addCookie(Cookie cookie)</span><br></pre></td></tr></table></figure></li><li>获取Cookie，拿到数据<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie[]  request.getCookies()</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>实现原理</p><ul><li>基于响应头<code>set-cookie</code>和请求头<code>cookie</code>实现<br><img src="//cdn.foreversfj.com/image/blog/20190905/P4r5VlynENJP.png!blog" alt=""></li></ul></li></ol><h3 id="Cookie的细节"><a href="#Cookie的细节" class="headerlink" title="Cookie的细节"></a>Cookie的细节</h3><ol><li><p>一次可不可以发送多个cookie?</p><ul><li>可以</li><li>可以创建多个Cookie对象，使用response调用多次<code>addCookie</code>方法发送cookie即可。</li></ul></li><li><p>cookie在浏览器中保存多长时间？</p><ol><li>默认情况下，当浏览器关闭后，Cookie数据被销毁</li><li>持久化存储：<code>setMaxAge(int seconds)</code><blockquote><ol><li>正数：将Cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，时间到后，cookie文件自动失效</li><li>负数：默认值</li><li>零：删除cookie信息</li></ol></blockquote></li></ol></li><li><p>cookie能不能存中文？</p><ul><li><p>在tomcat 8 之前 cookie中不能直接存储中文数据。</p><blockquote><p>需要将中文数据转码—一般采用URL编码(%E3)</p></blockquote></li><li><p>在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析</p></li></ul></li><li><p>cookie共享问题？</p><ol><li>假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？<ul><li>默认情况下cookie不能共享</li><li><strong><code>setPath(String path)</code></strong>：设置cookie的获取范围。默认情况下，设置当前的虚拟目录<blockquote><p>如果要共享，则可以将<code>path</code>设置为<code>&quot;/&quot;</code></p></blockquote></li></ul></li><li>不同的tomcat服务器间cookie共享问题？<ul><li><strong><code>setDomain(String path)</code></strong>：如果设置一级域名相同，那么多个服务器之间cookie可以共享</li></ul></li></ol><blockquote><p><code>setDomain(&quot;.baidu.com&quot;)</code>，那么<code>tieba.baidu.com</code>和<code>news.baidu.com</code>中cookie可以共享</p></blockquote></li></ol><h3 id="Cookie的特点和作用"><a href="#Cookie的特点和作用" class="headerlink" title="Cookie的特点和作用"></a>Cookie的特点和作用</h3><ol><li>cookie存储数据在客户端浏览器</li><li>浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)<ul><li>作用：<ol><li>cookie一般用于存出少量的不太敏感的数据</li><li>在不登录的情况下，完成服务器对客户端的身份识别</li></ol></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十章 4.Response案例——文件下载</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-26-/Java/JavaWeb/10_4%20Response%E6%A1%88%E4%BE%8B.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-26-/Java/JavaWeb/10_4%20Response%E6%A1%88%E4%BE%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-4-Response案例——文件下载"><a href="#10-4-Response案例——文件下载" class="headerlink" title="10.4 Response案例——文件下载"></a>10.4 Response案例——文件下载</h1><h2 id="10-4-1-需求"><a href="#10-4-1-需求" class="headerlink" title="10.4.1 需求"></a>10.4.1 需求</h2><ol><li>页面显示超链接</li><li>点击超链接后弹出下载提示框</li><li>完成图片文件下载</li></ol><h2 id="10-4-2-分析"><a href="#10-4-2-分析" class="headerlink" title="10.4.2 分析"></a>10.4.2 分析</h2><ol><li>超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求</li><li>任何资源都必须弹出下载提示框</li><li>使用响应头设置资源的打开方式：<ul><li><strong><code>content-disposition:attachment;filename=xxx</code></strong></li></ul></li></ol><h2 id="10-4-3-步骤"><a href="#10-4-3-步骤" class="headerlink" title="10.4.3 步骤"></a>10.4.3 步骤</h2><ol><li>定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename</li><li>定义Servlet<ol><li>获取文件名称</li><li>使用字节输入流加载文件进内存</li><li>指定response的响应头： <code>content-disposition:attachment;filename=xxx</code></li><li>将数据写出到response输出流</li></ol></li></ol><h2 id="10-4-4-问题"><a href="#10-4-4-问题" class="headerlink" title="10.4.4 问题"></a>10.4.4 问题</h2><ul><li>中文文件问题<ul><li>解决思路：<ol><li>获取客户端使用的浏览器版本信息</li><li>根据不同的版本信息，设置filename的编码方式不同</li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十章 3.ServletContext对象</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-26-/Java/JavaWeb/10_3%20ServletContext%E5%AF%B9%E8%B1%A1.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-26-/Java/JavaWeb/10_3%20ServletContext%E5%AF%B9%E8%B1%A1.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-3-ServletContext对象"><a href="#10-3-ServletContext对象" class="headerlink" title="10.3 ServletContext对象"></a>10.3 ServletContext对象</h1><h2 id="10-3-1-基本概念"><a href="#10-3-1-基本概念" class="headerlink" title="10.3.1 基本概念"></a>10.3.1 基本概念</h2><ol><li>概念：代表整个web应用，可以和程序的容器(服务器)来通信</li><li>获取：<ol><li>通过request对象获取：<code>request.getServletContext();</code></li><li>通过HttpServlet获取：<code>this.getServletContext();</code></li></ol></li></ol><h2 id="10-3-2-功能"><a href="#10-3-2-功能" class="headerlink" title="10.3.2 功能"></a>10.3.2 功能</h2><ol><li><p><strong>获取MIME类型</strong>：</p><ul><li><strong>MIME类型</strong>：在互联网通信过程中定义的一种文件数据类型</li><li>格式：大类型/小类型，<code>text/html</code>、<code>image/jpeg</code></li><li>获取：<strong><code>String getMimeType(String file)</code></strong></li></ul></li><li><p>域对象：共享数据</p><ul><li><strong><code>setAttribute(String name,Object value)</code></strong></li><li><strong><code>getAttribute(String name)</code></strong></li><li><strong><code>removeAttribute(String name)</code></strong><blockquote><p><strong>ServletContext对象范围</strong>：所有用户所有请求的数据</p></blockquote></li></ul></li><li><p>获取文件的真实(服务器)路径</p><ul><li><p>方法：<strong><code>String getRealPath(String path)</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//web目录下资源访问</span></span><br><span class="line">String b = context.getRealPath(<span class="string">"/b.txt"</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line"><span class="comment">//WEB-INF目录下的资源访问</span></span><br><span class="line">String c = context.getRealPath(<span class="string">"/WEB-INF/c.txt"</span>);</span><br><span class="line">System.out.println(c);</span><br><span class="line"><span class="comment">//src目录下的资源访问</span></span><br><span class="line">String a = context.getRealPath(<span class="string">"/WEB-INF/classes/a.txt"</span>);</span><br><span class="line">System.out.println(a);</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十章 2.Response对象</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-26-/Java/JavaWeb/10_2%20Response%E5%AF%B9%E8%B1%A1.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-26-/Java/JavaWeb/10_2%20Response%E5%AF%B9%E8%B1%A1.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-2-Response对象"><a href="#10-2-Response对象" class="headerlink" title="10.2 Response对象"></a>10.2 Response对象</h1><h2 id="10-2-1-功能"><a href="#10-2-1-功能" class="headerlink" title="10.2.1 功能"></a>10.2.1 功能</h2><p><strong>设置响应消息</strong></p><ul><li><strong>设置响应行</strong><ul><li>格式：<code>HTTP/1.1 200 ok</code></li><li>设置状态码：<code>setStatus(int sc)</code></li></ul></li><li><strong>设置响应头</strong>：<code>setHeader(String name, String value)</code></li><li><strong>设置响应体</strong>：<ul><li>使用步骤：<ol><li>获取输出流</li></ol><ul><li>字符输出流：<code>PrintWriter getWriter()</code></li><li>字节输出流：<code>ServletOutputStream getOutputStream()</code></li></ul><ol start="2"><li>使用输出流，将数据输出到客户端浏览器</li></ol></li></ul></li></ul><h3 id="10-2-2-案例"><a href="#10-2-2-案例" class="headerlink" title="10.2.2 案例"></a>10.2.2 案例</h3><h3 id="完成重定向"><a href="#完成重定向" class="headerlink" title="完成重定向"></a>完成重定向</h3><ul><li><p>重定向：资源跳转的方式</p></li><li><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 设置状态码为302</span></span><br><span class="line">response.setStatus(<span class="number">302</span>);</span><br><span class="line"><span class="comment">//2.设置响应头location</span></span><br><span class="line">response.setHeader(<span class="string">"location"</span>,<span class="string">"/day15/responseDemo2"</span>);</span><br><span class="line"><span class="comment">//简单的重定向方法</span></span><br><span class="line">response.sendRedirect(<span class="string">"/day15/responseDemo2"</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="forward-和-redirect-区别"><a href="#forward-和-redirect-区别" class="headerlink" title="forward 和  redirect 区别"></a>forward 和  redirect 区别</h4><ul><li><strong>重定向的特点</strong>：<code>redirect</code></li></ul><ol><li>地址栏发生变化</li><li>重定向可以访问其他站点(服务器)的资源</li><li>重定向是两次请求。不能使用request对象来共享数据</li></ol><ul><li><strong>转发的特点</strong>：<code>forward</code></li></ul><ol><li>转发地址栏路径不变</li><li>转发只能访问当前服务器下的资源</li><li>转发是一次请求，可以使用request对象来共享数据</li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190905/rPq5c2Jft0rw.png!blog" alt=""></p><h4 id="路径写法"><a href="#路径写法" class="headerlink" title="路径写法"></a>路径写法</h4><ul><li><p>路径分类</p><ul><li><p><strong>相对路径</strong>：通过相对路径不可以确定唯一资源</p><ul><li>如：<code>./index.html</code></li></ul><ul><li>不以 <code>/</code> 开头，以 <code>.</code> 开头路径</li><li>规则：找到当前资源和目标资源之间的相对位置关系<blockquote><ul><li><strong><code>./</code></strong>：当前目录</li><li><strong><code>../</code></strong>：后退一级目录</li></ul></blockquote></li></ul></li><li><p><strong>绝对路径</strong>：通过绝对路径可以确定唯一资源</p><ul><li><p>如：<code>http://localhost/responseDemo2</code>，<code>/responseDemo2</code></p></li><li><p>以/开头的路径</p></li><li><p>规则：判断定义的路径是给谁用的？判断请求将来从哪儿发出</p><blockquote><p>给客户端浏览器使用：需要加虚拟目录(项目的访问路径)</p><ul><li>建议虚拟目录动态获取：<code>request.getContextPath()</code></li><li><code>&lt;a&gt;</code>， <code>&lt;form&gt;</code> 重定向…<br>给服务器使用：不需要加虚拟目录</li><li>转发路径</li></ul></blockquote></li></ul></li></ul></li></ul><h4 id="服务器输出字符数据到浏览器"><a href="#服务器输出字符数据到浏览器" class="headerlink" title="服务器输出字符数据到浏览器"></a>服务器输出字符数据到浏览器</h4><ul><li><p>步骤：</p><ol><li>获取字符输出流</li><li>输出数据</li></ol></li><li><p>注意：</p><ul><li><p>乱码问题：</p><ol><li><p><strong><code>PrintWriter pw = response.getWriter()</code></strong>：获取的流的默认编码是ISO-8859-1</p></li><li><p>设置该流的默认编码</p></li><li><p>告诉浏览器响应体使用的编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单的形式，设置编码，是在获取流之前设置</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br></pre></td></tr></table></figure><p><img src="//cdn.foreversfj.com/image/blog/20190905/xLibI99V7u49.png!blog" alt=""></p></li></ol></li></ul></li></ul><h4 id="服务器输出字节数据到浏览器"><a href="#服务器输出字节数据到浏览器" class="headerlink" title="服务器输出字节数据到浏览器"></a>服务器输出字节数据到浏览器</h4><ul><li>步骤：<ol><li>获取字节输出流</li><li>输出数据</li></ol></li></ul><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><ol><li>本质：图片</li><li>目的：防止恶意表单注册</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第十章 1.HTTP_Response协议</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-26-/Java/JavaWeb/10_1%20HTTP_Response.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-26-/Java/JavaWeb/10_1%20HTTP_Response.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-1HTTP-Response协议"><a href="#10-1HTTP-Response协议" class="headerlink" title="10.1HTTP_Response协议"></a>10.1HTTP_Response协议</h1><h2 id="10-1-1-HTTP协议"><a href="#10-1-1-HTTP协议" class="headerlink" title="10.1.1 HTTP协议"></a>10.1.1 HTTP协议</h2><h3 id="request-amp-response对象原理图解"><a href="#request-amp-response对象原理图解" class="headerlink" title="request&amp;response对象原理图解"></a>request&amp;response对象原理图解</h3><p><img src="//cdn.foreversfj.com/image/blog/20190905/rF5vdrkmLXHt.png!blog" alt=""></p><h3 id="请求消息"><a href="#请求消息" class="headerlink" title="请求消息"></a>请求消息</h3><ul><li><strong>客户端发送给服务器端的数据</strong></li><li>数据格式：<ol><li><strong>请求行</strong></li><li><strong>请求头</strong></li><li><strong>请求空行</strong></li><li><strong>请求体</strong></li></ol></li></ul><h3 id="响应消息"><a href="#响应消息" class="headerlink" title="响应消息"></a>响应消息</h3><ul><li><p><strong>服务器端发送给客户端的数据</strong></p></li><li><p>数据格式：</p><ul><li><p><strong>响应行</strong>：</p><ul><li>组成：协议/版本 响应状态码 状态码描述</li><li>响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。<blockquote><p>状态码都是3位数字<br>分类：</p><ul><li>1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码</li><li>2xx：成功。代表：200</li><li>3xx：重定向。代表：302(重定向)，304(访问缓存)</li><li>4xx：客户端错误。<ul><li>404（请求路径没有对应的资源） </li><li>405：请求方式没有对应的doXxx方法</li></ul></li><li>5xx：服务器端错误。代表：500(服务器内部出现异常)</li></ul></blockquote></li></ul></li><li><p><strong>响应头</strong>：</p><ul><li>格式：<code>头名称： 值</code></li><li>常见的响应头：<ul><li><strong><code>Content-Type</code></strong>：服务器告诉客户端本次响应体数据格式以及编码格式</li><li><strong><code>Content-disposition</code></strong>：服务器告诉客户端以什么格式打开响应体数据<blockquote><ul><li><strong><code>in-line</code></strong>：默认值,在当前页面内打开</li><li><strong><code>attachment;filename=xxx</code></strong>：以附件形式打开响应体。文件下载</li></ul></blockquote></li></ul></li></ul></li><li><p><strong>响应空行</strong></p></li><li><p><strong>响应体</strong>：传输的数据</p></li></ul></li><li><p>响应字符串格式</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html;charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Length</span>: 101</span><br><span class="line"><span class="attribute">Date</span>: Wed, 06 Jun 2018 07:08:42 GMT</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>$Title$<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        hello , response</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第九章 4.案例：用户登录</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/09_4%20Request%E6%A1%88%E4%BE%8B.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/09_4%20Request%E6%A1%88%E4%BE%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-4-案例：用户登录"><a href="#9-4-案例：用户登录" class="headerlink" title="9.4 案例：用户登录"></a>9.4 案例：用户登录</h1><h2 id="9-4-1-需求"><a href="#9-4-1-需求" class="headerlink" title="9.4.1 需求"></a>9.4.1 需求</h2><ul><li><p>用户登录案例需求：</p><ol><li><p>编写login.html登录页面</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username &amp; password 两个输入框</span><br></pre></td></tr></table></figure></li><li><p>使用Druid数据库连接池技术,操作mysql，数据库中user表</p></li><li><p>使用JdbcTemplate技术封装JDBC</p></li><li><p>登录成功跳转到SuccessServlet展示：登录成功！用户名,欢迎您</p></li><li><p>登录失败跳转到FailServlet展示：登录失败，用户名或密码错误</p></li></ol></li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190905/SowObVeETuMO.png!blog" alt=""></p><h2 id="9-4-2-分析"><a href="#9-4-2-分析" class="headerlink" title="9.4.2 分析"></a>9.4.2 分析</h2><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><ol><li><p>创建项目，导入html页面，配置文件，jar包</p></li><li><p>创建数据库环境</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> day14;</span><br><span class="line"><span class="keyword">USE</span> day14;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span>(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    username <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">PASSWORD</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>创建包<code>com.sfj.domain</code>，创建类<code>User</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sfj.domain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户的实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">            <span class="string">"id="</span> + id +</span><br><span class="line">            <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">            <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">            <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建包<code>com.sfj.util</code>，编写工具类<code>JDBCUtils</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> javax.xml.crypto.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类 使用Durid连接池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds ;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载配置文件</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//使用ClassLoader加载配置文件，获取字节输入流</span></span><br><span class="line">            InputStream is = JDBCUtils<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span></span><br><span class="line">                .getResourceAsStream("druid.properties");</span><br><span class="line">            pro.load(is);</span><br><span class="line">            <span class="comment">//2.初始化连接池对象</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接Connection对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建包<code>com.sfj.dao</code>，创建类<code>UserDao</code>，提供<code>login</code>方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.domain.User;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.util.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.dao.DataAccessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作数据库中User表的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明JDBCTemplate对象共用</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginUser 只有用户名和密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> user包含用户全部数据,没有查询到，返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(User loginUser)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.编写sql</span></span><br><span class="line">            String sql = <span class="string">"select * from user where username = ?"</span></span><br><span class="line">                + <span class="string">" and password = ?"</span>;</span><br><span class="line">            <span class="comment">//2.调用query方法</span></span><br><span class="line">            User user = template.queryForObject(sql,</span><br><span class="line">                             <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                             <span class="title">loginUser</span>.<span class="title">getUsername</span>(), </span></span><br><span class="line"><span class="class">                             <span class="title">loginUser</span>.<span class="title">getPassword</span>())</span>;</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DataAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();<span class="comment">//记录日志</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写<code>com.sfj.web.servlet.LoginServlet</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/loginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.设置编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//2.获取请求参数</span></span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">//3.封装user对象</span></span><br><span class="line">        User loginUser = <span class="keyword">new</span> User();</span><br><span class="line">        loginUser.setUsername(username);</span><br><span class="line">        loginUser.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.调用UserDao的login方法</span></span><br><span class="line">        UserDao dao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        User user = dao.login(loginUser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.判断user</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//登录失败</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">"/failServlet"</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            <span class="comment">//存储数据</span></span><br><span class="line">            req.setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">            <span class="comment">//转发</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">"/successServlet"</span>).forward(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写<code>FailServlet</code>和<code>SuccessServlet</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/successServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuccessServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取request域中共享的user对象</span></span><br><span class="line">        User user = (User) request.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//给页面写一句话</span></span><br><span class="line">            <span class="comment">//设置编码</span></span><br><span class="line">            response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">            <span class="comment">//输出</span></span><br><span class="line">            response.getWriter().write(<span class="string">"登录成功！"</span></span><br><span class="line">                                       + user.getUsername()+<span class="string">",欢迎您"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/failServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FailServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//给页面写一句话</span></span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        response.getWriter().write(<span class="string">"登录失败，用户名或密码错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>login.html</code>中form表单的action路径的写法</p><ul><li><strong>虚拟目录+Servlet的资源路径</strong></li></ul></li><li><p><code>BeanUtils</code>工具类，简化数据封装</p><ul><li><p>用于封装<code>JavaBean</code>的</p></li><li><p><strong>JavaBean</strong>：标准的Java类</p><ul><li>要求：<ol><li>类必须被public修饰</li><li>必须提供空参的构造器</li><li>成员变量必须使用private修饰</li><li>提供公共<code>setter</code>和<code>getter</code>方法</li></ol></li><li>功能：封装数据</li></ul></li><li><p>概念：<br>成员变量：<br>属性：<code>setter</code>和<code>getter</code>方法截取后的产物<br>例如：<code>getUsername() --&gt; Username--&gt; username</code></p></li><li><p>方法：</p><ul><li><strong><code>setProperty()</code></strong></li><li><strong><code>getProperty()</code></strong></li><li><strong><code>populate(Object obj , Map map)</code></strong>：将map集合的键值对信息，封装到对应的<code>JavaBean</code>对象中</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第九章 3.Request</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/09_3%20Request.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/09_3%20Request.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-3-Request"><a href="#9-3-Request" class="headerlink" title="9.3 Request"></a>9.3 Request</h1><ol><li><p>request对象和response对象的原理</p><ol><li>request和response对象是由服务器创建的。我们来使用它们</li><li>request对象是来获取请求消息，response对象是来设置响应消息</li></ol></li><li><p>request对象继承体系结构：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ServletRequest -- 接口</span><br><span class="line">        |    继承</span><br><span class="line">    HttpServletRequest    -- 接口</span><br><span class="line">            |    实现</span><br><span class="line">        org.apache.catalina.connector.RequestFacade 类(tomcat)</span><br></pre></td></tr></table></figure></li></ol><h2 id="9-3-1-Request功能"><a href="#9-3-1-Request功能" class="headerlink" title="9.3.1 Request功能"></a>9.3.1 Request功能</h2><h3 id="获取请求消息数据"><a href="#获取请求消息数据" class="headerlink" title="获取请求消息数据"></a>获取请求消息数据</h3><h4 id="获取请求行数据"><a href="#获取请求行数据" class="headerlink" title="获取请求行数据"></a>获取请求行数据</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/day14/demo1?name=zhangsan</span> HTTP/1.1</span><br></pre></td></tr></table></figure><ol><li>获取请求方式 ：GET<ul><li><strong><code>String getMethod()</code></strong></li></ul></li><li>获取虚拟目录：/day14<ul><li><strong><code>String getContextPath()</code></strong></li></ul></li><li>获取Servlet路径: /demo1<ul><li><strong><code>String getServletPath()</code></strong></li></ul></li><li>获取get方式请求参数：name=zhangsan<ul><li><strong><code>String getQueryString()</code></strong></li></ul></li><li>获取请求URI：/day14/demo1<ul><li><strong><code>String getRequestURI()</code></strong>：/day14/demo1</li><li><strong><code>StringBuffer getRequestURL()</code></strong>：<code>http://localhost/day14/demo1</code></li><li><strong><code>URL</code></strong>：统一资源定位符：<code>http://localhost/day14/demo1</code></li><li><strong><code>URI</code></strong>：统一资源标识符：<code>/day14/demo1</code></li></ul></li><li>获取协议及版本：HTTP/1.1<ul><li><strong><code>String getProtocol()</code></strong></li></ul></li><li>获取客户机的IP地址：<ul><li><strong><code>String getRemoteAddr()</code></strong></li></ul></li></ol><h4 id="获取请求头数据"><a href="#获取请求头数据" class="headerlink" title="获取请求头数据"></a>获取请求头数据</h4><ul><li>方法：<ul><li><strong><code>String getHeader(String name)</code></strong>：通过请求头的名称获取请求头的值</li><li><strong><code>Enumeration&lt;String&gt; getHeaderNames()</code></strong>：获取所有的请求头名称</li></ul></li></ul><h4 id="获取请求体数据"><a href="#获取请求体数据" class="headerlink" title="获取请求体数据"></a>获取请求体数据</h4><ul><li>请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</li><li>步骤：<ul><li>获取流对象<ul><li><strong>BufferedReader getReader()</strong>：获取字符输入流，只能操作字符数据</li><li><strong>ServletInputStream getInputStream()</strong>：获取字节输入流，可以操作所有类型数据</li></ul></li><li>再从流对象中拿数据</li></ul></li></ul><h2 id="9-3-2-其他功能"><a href="#9-3-2-其他功能" class="headerlink" title="9.3.2 其他功能"></a>9.3.2 其他功能</h2><ul><li><strong>获取请求参数通用方式</strong>：不论get还是post请求方式都可以使用下列方法来获取请求参数<ol><li><strong><code>String getParameter(String name)</code></strong>：根据参数名称获取参数值    username=zs&amp;password=123</li><li><strong><code>String[] getParameterValues(String name)</code></strong>：根据参数名称获取参数值的数组  hobby=xx&amp;hobby=game</li><li><strong><code>Enumeration&lt;String&gt; getParameterNames()</code></strong>：获取所有请求的参数名称</li><li><strong><code>Map&lt;String,String[]&gt; getParameterMap()</code></strong>：获取所有参数的map集合</li></ol><ul><li>中文乱码问题：<ul><li><strong><code>get方式</code></strong>：tomcat 8 已经将get方式乱码问题解决了</li><li><strong><code>post方式</code></strong>：会乱码</li><li>解决：在获取参数前，设置request的编码：<br/><code>request.setCharacterEncoding(&quot;utf-8&quot;);</code></li></ul></li></ul></li><li><strong>请求转发</strong>：一种在服务器内部的资源跳转方式<ol><li><strong>步骤：</strong><ul><li>通过request对象获取请求转发器对象：<br/><code>RequestDispatcher getRequestDispatcher(String path)</code></li><li>使用RequestDispatcher对象来进行转发：<br/><code>forward(ServletRequest request, ServletResponse response)</code></li></ul></li><li><strong>特点：</strong><ul><li>浏览器地址栏路径不发生变化</li><li>只能转发到当前服务器内部资源中。</li><li>转发是一次请求</li></ul></li><li><strong>共享数据：</strong><ul><li>域对象：一个有作用范围的对象，可以在范围内共享数据</li><li><code>request</code>域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</li><li>方法：<ol><li><strong><code>void setAttribute(String name,Object obj)</code></strong>：存储数据</li><li><strong><code>Object getAttitude(String name)</code></strong>：通过键获取值</li><li><strong><code>void removeAttribute(String name)</code></strong>：通过键移除键值对</li></ol></li></ul></li><li><strong>获取ServletContext：</strong><ul><li><strong><code>ServletContext getServletContext()</code></strong></li></ul></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第九章 2.HTTP_Request</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/09_2%20HTTP_Request.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/09_2%20HTTP_Request.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-2-HTTP-Request"><a href="#9-2-HTTP-Request" class="headerlink" title="9.2 HTTP-Request"></a>9.2 HTTP-Request</h1><h2 id="9-2-1-概念"><a href="#9-2-1-概念" class="headerlink" title="9.2.1 概念"></a>9.2.1 概念</h2><ul><li><strong><code>Hyper Text Transfer Protocol</code></strong>超文本传输协议</li><li><strong>传输协议</strong>：定义了，客户端和服务器端通信时，发送数据的格式</li><li><strong>特点：</strong><ul><li>基于TCP/IP的高级协议<ul><li>默认端口号：80</li><li>基于请求/响应模型的：一次请求对应一次响应</li><li>无状态的：每次请求之间相互独立，不能交互数据</li></ul></li></ul></li><li><strong>历史版本：</strong><ul><li>1.0：每一次请求响应都会建立新的连接</li><li>1.1：复用连接</li></ul></li></ul><h2 id="9-2-2-请求消息数据格式"><a href="#9-2-2-请求消息数据格式" class="headerlink" title="9.2.2 请求消息数据格式"></a>9.2.2 请求消息数据格式</h2><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>请求方式、请求url、请求协议/版本</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/login.html</span>  <span class="string"></span>  <span class="string">HTTP/1.1</span></span><br></pre></td></tr></table></figure><ul><li><strong>请求方式：</strong><br>HTTP协议有7中请求方式，常用的有2种<ul><li><strong>GET：</strong><ol><li>请求参数在请求行中，在url后。</li><li>请求的url长度有限制的</li><li>不太安全</li></ol></li><li><strong>POST：</strong><ol><li>请求参数在请求体中</li><li>请求的url长度没有限制的</li><li>相对安全</li></ol></li></ul></li></ul><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p><strong>客户端浏览器告诉服务器一些信息</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请求头名称: 请求头值</span><br></pre></td></tr></table></figure><ul><li>常见的请求头：<ol><li><code>User-Agent</code>：浏览器告诉服务器，我访问你使用的浏览器版本信息<ul><li>可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li></ul></li><li><code>Referer</code>：<code>http://localhost/login.html</code><ul><li>告诉服务器，我(当前请求)从哪里来？</li><li>作用：<br>&emsp;&emsp;1. 防盗链<br>&emsp;&emsp;2. 统计工作</li></ul></li></ol></li></ul><h3 id="请求空行"><a href="#请求空行" class="headerlink" title="请求空行"></a>请求空行</h3><ul><li>空行，就是用于分割POST请求的请求头，和请求体的。</li></ul><h3 id="请求体-正文-："><a href="#请求体-正文-：" class="headerlink" title="请求体(正文)："></a>请求体(正文)：</h3><ul><li><p>封装POST请求消息的请求参数的</p></li><li><p>字符串格式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/login.html</span>  <span class="string"></span>  <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="string">Host:</span> localhost</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span>: http://localhost/login.html</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"></span><br><span class="line">username=zhangsan</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第九章 1.Servlet</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/09_1%20Servlet.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/09_1%20Servlet.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-1-Servlet"><a href="#9-1-Servlet" class="headerlink" title="9.1 Servlet"></a>9.1 Servlet</h1><p>&emsp;&emsp;Servlet的<code>概念</code>、<code>步骤</code>、<code>执行原理</code>、<code>生命周期</code>、<code>Servlet3.0 注解配置</code>等见<a href="//blog.foreversfj.com/2019/08/23/Java/JavaWeb/08%20Tomcat/">这里</a></p><h2 id="9-1-1-Servlet的体系结构"><a href="#9-1-1-Servlet的体系结构" class="headerlink" title="9.1.1 Servlet的体系结构"></a>9.1.1 Servlet的体系结构</h2><p>Servlet===&gt;接口<br>GenericServlet===&gt;抽象类<br>HttpServlet===&gt;抽象类</p><ul><li><strong><code>GenericServlet</code></strong>：将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象<ul><li>将来定义Servlet类时，可以继承<code>GenericServlet</code>，实现service()方法即可</li></ul></li><li><strong><code>HttpServlet</code></strong>：对http协议的一种封装，简化操作<ul><li>定义类继承HttpServlet</li><li>复写<code>doGet/doPost</code>方法</li></ul></li></ul><h2 id="9-1-2-Servlet相关配置"><a href="#9-1-2-Servlet相关配置" class="headerlink" title="9.1.2 Servlet相关配置"></a>9.1.2 Servlet相关配置</h2><ol><li><strong><code>urlpartten</code></strong>：Servlet访问路径<ol><li>一个Servlet可以定义多个访问路径：<code>@WebServlet({&quot;/d4&quot;,&quot;/dd4&quot;,&quot;/ddd4&quot;})</code></li><li>路径定义规则：<ol><li><strong><code>/xxx</code></strong>：路径匹配</li><li><strong><code>/xxx/xxx</code></strong>：多层路径，目录结构</li><li><strong><code>*.do</code></strong>：扩展名匹配</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第八章 Tomcat</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/08%20Tomcat.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/08%20Tomcat.html</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="8-1-web相关概念"><a href="#8-1-web相关概念" class="headerlink" title="8.1 web相关概念"></a>8.1 web相关概念</h2><h3 id="8-1-1-软件架构"><a href="#8-1-1-软件架构" class="headerlink" title="8.1.1 软件架构"></a>8.1.1 软件架构</h3><ol><li>C/S：客户端/服务器端</li><li>B/S：浏览器/服务器端</li></ol><h3 id="8-1-2-资源分类"><a href="#8-1-2-资源分类" class="headerlink" title="8.1.2 资源分类"></a>8.1.2 资源分类</h3><ol><li><p>静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源.静态资源可以直接被浏览器解析</p><ul><li>如： html,css,JavaScript</li></ul></li><li><p>动态资源:每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器</p><ul><li><p>如：servlet/jsp,php,asp….</p><p><img src="//cdn.foreversfj.com/image/blog/20190905/3F9Q753yFMh5.png!blog" alt=""></p></li></ul></li></ol><h3 id="8-1-3-网络通信三要素"><a href="#8-1-3-网络通信三要素" class="headerlink" title="8.1.3 网络通信三要素"></a>8.1.3 网络通信三要素</h3><ol><li>IP：电子设备(计算机)在网络中的唯一标识。</li><li>端口：应用程序在计算机中的唯一标识。 0~65536</li><li>传输协议：规定了数据传输的规则<ol><li>基础协议：<ol><li>tcp:安全协议，三次握手。 速度稍慢<ol start="2"><li>udp：不安全协议。 速度快</li></ol></li></ol></li></ol></li></ol><h2 id="8-2-web服务器软件："><a href="#8-2-web服务器软件：" class="headerlink" title="8.2 web服务器软件："></a>8.2 web服务器软件：</h2><ul><li><p>服务器：安装了服务器软件的计算机</p></li><li><p>服务器软件：接收用户的请求，处理请求，做出响应</p></li><li><p>web服务器软件：接收用户的请求，处理请求，做出响应。</p><ul><li>在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</li><li>web容器</li></ul></li><li><p>常见的java相关的web服务器软件：</p><ul><li><strong>webLogic</strong>：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li><strong>webSphere</strong>：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li><strong>JBOSS</strong>：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li><strong>Tomcat</strong>：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的。</li></ul></li><li><p>JavaEE：Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范</p></li></ul><h2 id="8-3-Tomcat：web服务器软件"><a href="#8-3-Tomcat：web服务器软件" class="headerlink" title="8.3 Tomcat：web服务器软件"></a>8.3 Tomcat：web服务器软件</h2><ol><li><p><strong>下载</strong>：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></p></li><li><p><strong>安装</strong>：解压压缩包即可。</p><ul><li><p>注意：安装目录建议不要有中文和空格</p></li><li><p>Tomcat目录结构</p><p><img src="//cdn.foreversfj.com/image/blog/20190905/9JH436P7j6ar.png!blog" alt=""></p></li></ul></li><li><p><strong>卸载</strong>：删除目录就行了</p></li><li><p><strong>启动</strong>：</p><ul><li><p><strong>`bin/startup.bat</strong>，双击运行该文件即可</p></li><li><p>访问：浏览器输入：<code>http://localhost:8080</code> 回车访问自己</p></li><li><p>可能遇到的问题</p><ol><li><p>黑窗口一闪而过：</p><ul><li>原因： 没有正确配置JAVA_HOME环境变量</li><li>解决方案：正确配置JAVA_HOME环境变量</li></ul></li><li><p>启动报错：</p><ul><li><p>暴力：找到占用的端口号，并且找到对应的进程，杀死该进程</p></li><li><p>温柔：修改自身的端口号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conf/server.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8888"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8445"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。<br>&emsp;&emsp;好处：在访问时，就不用输入端口号</p></blockquote></li></ol></li></ul></li><li><p><strong>关闭</strong>：</p><ul><li>正常关闭：<ul><li><strong><code>bin/shutdown.bat</code></strong></li><li><strong><code>ctrl+c</code></strong></li></ul></li><li>强制关闭：点击启动窗口的 <code>×</code></li></ul></li><li><p><strong>配置</strong>：</p><ul><li><p>部署项目的方式：</p><ol><li><p>直接将项目放到webapps目录下即可。</p><ul><li>/hello：项目的访问路径–&gt;虚拟目录</li><li>简化部署：将项目打成一个war包，再将war包放置到webapps目录下。</li><li>war包会自动解压缩</li></ul></li><li><p>配置conf/server.xml文件</p><p>在<code>&lt;Host&gt;</code>标签体中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"D:\hello"</span> <span class="attr">path</span>=<span class="string">"/hehe"</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong><code>docBase</code></strong>：项目存放的路径<br><strong><code>path</code></strong>：虚拟目录</p></blockquote></li><li><p>在<code>conf\Catalina\localhost</code>创建任意名称的xml文件。在文件中编写<br><code>&lt;Context docBase=&quot;D:\hello&quot; /&gt;</code></p><ul><li>虚拟目录：xml文件的名称</li></ul></li></ol></li><li><p>静态项目和动态项目：</p><ul><li><p>目录结构</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java动态项目的目录结构：</span><br><span class="line">    -- 项目的根目录</span><br><span class="line">        -- WEB-INF目录：</span><br><span class="line">            -- web.xml：web项目的核心配置文件</span><br><span class="line">            -- classes目录：放置字节码文件的目录</span><br><span class="line">            -- lib目录：放置依赖的jar包</span><br></pre></td></tr></table></figure></li></ul></li><li><p>将Tomcat集成到IDEA中，并且创建JavaEE的项目，部署项目</p></li></ul></li></ol><h2 id="8-4-Servlet：-server-applet"><a href="#8-4-Servlet：-server-applet" class="headerlink" title="8.4 Servlet：  server applet"></a>8.4 Servlet：  server applet</h2><ul><li><p>概念：运行在服务器端的小程序</p><ul><li>Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。<ul><li>将来我们自定义一个类，实现Servlet接口，复写方法。</li></ul></li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190905/tV4Spoc5q8as.png!blog" alt=""></p></li></ul><h3 id="8-4-1-快速入门"><a href="#8-4-1-快速入门" class="headerlink" title="8.4.1 快速入门"></a>8.4.1 快速入门</h3><ul><li><p>创建JavaEE项目</p><ul><li><p>定义一个类，实现Servlet接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>实现接口中的抽象方法</p></li><li><p>配置Servlet</p><p>在web.xml中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="8-4-2-执行原理："><a href="#8-4-2-执行原理：" class="headerlink" title="8.4.2 执行原理："></a>8.4.2 执行原理：</h3><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的<code>&lt;url-pattern&gt;</code>标签体内容。</li><li>如果有，则在找到对应的<code>&lt;servlet-class&gt;</code>全类名</li><li>tomcat会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190905/KwkPD3mFvYrm.png!blog" alt=""></p><h3 id="8-4-3-Servlet中的生命周期方法"><a href="#8-4-3-Servlet中的生命周期方法" class="headerlink" title="8.4.3 Servlet中的生命周期方法"></a>8.4.3 Servlet中的生命周期方法</h3><ol><li><p>被创建：执行init方法，只执行一次</p><ul><li><p>Servlet什么时候被创建？</p><ul><li>默认情况下，第一次被访问时，Servlet被创建</li><li>可以配置执行Servlet的创建时机。</li></ul><blockquote><p>在<code>&lt;servlet&gt;</code>标签下配置</p><ol><li>第一次被访问时，创建<ul><li><strong><code>&lt;load-on-startup&gt;</code></strong>的值为负数</li></ul></li><li>在服务器启动时，创建<ul><li><strong><code>&lt;load-on-startup&gt;</code></strong>的值为0或正整数</li></ul></li></ol></blockquote></li><li><p><code>Servlet</code>的<code>init</code>方法，只执行一次，说明一个<code>Servlet</code>在内存中只存在一个对象，Servlet是单例的</p><ul><li>多个用户同时访问时，可能存在线程安全问题。</li><li>解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值</li></ul></li></ul></li><li><p>提供服务：执行service方法，执行多次</p><ul><li>每次访问Servlet时，Service方法都会被调用一次。</li></ul></li><li><p>被销毁：执行destroy方法，只执行一次</p><ul><li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁</li><li>只有服务器正常关闭时，才会执行destroy方法。</li><li>destroy方法在Servlet被销毁之前执行，一般用于释放资源</li></ul></li></ol><h3 id="8-4-4-Servlet3-0"><a href="#8-4-4-Servlet3-0" class="headerlink" title="8.4.4 Servlet3.0"></a>8.4.4 Servlet3.0</h3><ul><li><p>好处：</p><ul><li>支持注解配置。可以不需要<code>web.xml</code>了。</li></ul></li><li><p>步骤：</p><ol><li><p>创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml</p></li><li><p>定义一个类，实现Servlet接口</p></li><li><p>复写方法</p></li><li><p>在类上使用<code>@WebServlet</code>注解，进行配置</p><ul><li><code>@WebServlet(&quot;资源路径&quot;)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;<span class="comment">//相当于&lt;Servlet-name&gt;</span></span><br><span class="line"></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//代表urlPatterns()属性配置</span></span><br><span class="line"></span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//相当于&lt;url-pattern&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;<span class="comment">//相当于&lt;load-on-startup&gt;</span></span><br><span class="line"></span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">displayName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="8-5-IDEA与tomcat的相关配置"><a href="#8-5-IDEA与tomcat的相关配置" class="headerlink" title="8.5 IDEA与tomcat的相关配置"></a>8.5 IDEA与tomcat的相关配置</h2><ol><li>IDEA会为每一个tomcat部署的项目单独建立一份配置文件<ul><li>查看控制台的log：<br/><code>Using CATALINA_BASE:&quot;Users\SFJ\.IntelliJIdea2018.1\system\tomcat\&quot;</code></li></ul></li><li><code>工作空间项目</code> 和 <code>tomcat部署的web项目</code><ul><li>tomcat真正访问的是“tomcat部署的web项目”，”tomcat部署的web项目”对应着”工作空间项目” 的web目录下的所有资源</li><li>WEB-INF目录下的资源不能被浏览器直接访问。</li></ul></li><li>断点调试：使用”小虫子”启动<code>dubug</code>启动</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第七章 XML</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/07%20XML.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/07%20XML.html</url>
      
        <content type="html"><![CDATA[<h1 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h1><h2 id="6-1-概念"><a href="#6-1-概念" class="headerlink" title="6.1 概念"></a>6.1 概念</h2><ul><li>Extensible Markup Language 可扩展标记语言<ul><li>可扩展：标签都是自定义的。 <code>&lt;user&gt;  &lt;student&gt;</code></li></ul></li><li>功能——存储数据<ol><li>配置文件</li><li>在网络中传输</li></ol></li><li>xml与html的区别<ol><li>xml标签都是自定义的，html标签是预定义。</li><li>xml的语法严格，html语法松散</li><li>xml是存储数据的，html是展示数据</li></ol></li><li>w3c:万维网联盟</li></ul><h2 id="6-2-语法"><a href="#6-2-语法" class="headerlink" title="6.2 语法"></a>6.2 语法</h2><h3 id="6-2-1-基本语法："><a href="#6-2-1-基本语法：" class="headerlink" title="6.2.1 基本语法："></a>6.2.1 基本语法：</h3><ol><li>xml文档的后缀名 .xml</li><li>xml第一行必须定义为文档声明</li><li>xml文档中有且仅有一个根标签</li><li>属性值必须使用引号(单双都可)引起来</li><li>标签必须正确关闭</li><li>xml标签名称区分大小写</li></ol><h3 id="6-2-2-快速入门"><a href="#6-2-2-快速入门" class="headerlink" title="6.2.2 快速入门"></a>6.2.2 快速入门</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">'1'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">'2'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>lisi<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>24<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>female<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-3-组成部分："><a href="#6-2-3-组成部分：" class="headerlink" title="6.2.3 组成部分："></a>6.2.3 组成部分：</h3><ul><li><p>文档声明</p><ol><li>格式：<code>&lt;?xml 属性列表 ?&gt;</code></li><li>属性列表：<ul><li><code>version</code>：版本号，必须的属性</li><li><code>encoding</code>：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1</li><li><code>standalone</code>：是否独立<ul><li>取值：<ol><li><code>yes</code>：不依赖其他文件</li><li><code>no</code>：依赖其他文件</li></ol></li></ul></li></ul></li></ol></li><li><p>指令(了解)：结合css的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/css" href="a.css" ?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>标签：标签名称自定义的</p><ul><li>规则：<ol><li>名称可以包含字母、数字以及其他的字符 </li><li>名称不能以数字或者标点符号开始 </li><li>名称不能以字母 xml（或者 XML、Xml 等等）开始 </li><li>名称不能包含空格 </li></ol></li></ul></li><li><p>属性：——id属性值唯一</p></li><li><p>文本：</p><ul><li>CDATA区：在该区域中的数据会被原样展示</li><li>格式：  <code>&lt;![CDATA[ 数据 ]]&gt;</code></li></ul></li></ul><h3 id="6-2-4-约束"><a href="#6-2-4-约束" class="headerlink" title="6.2.4 约束"></a>6.2.4 约束</h3><ul><li><p><strong>规定xml文档的书写规则</strong></p></li><li><p>作为框架的使用者(程序员)：</p><ol><li>能够在xml中引入约束文档</li><li>能够简单的读懂约束文档</li></ol></li><li><p>分类</p><ol><li>DTD：一种简单的约束技术</li><li>Schema：一种复杂的约束技术</li></ol></li><li><p><strong>DTD</strong></p><ul><li>引入dtd文档到xml文档中<ul><li>内部dtd：将约束规则定义在xml文档中</li><li>外部dtd：将约束的规则定义在外部的dtd文件中<ul><li>本地：<code>&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件的位置&quot;&gt;</code></li><li>网络：<code>&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名字&quot; &quot;dtd文件的位置URL&quot;&gt;</code></li></ul></li></ul></li></ul></li><li><p><strong>Schema</strong></p><ul><li><p>引入：</p><ol><li><p>填写xml文档的根元素</p></li><li><p>引入xsi前缀.<code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</code></p></li><li><p>引入xsd文件命名空间.<br/><code>xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;</code></p></li><li><p>为每一个xsd约束声明一个前缀,作为标识 <code>xmlns=&quot;http://www.itcast.cn/xml&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">students</span>   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns</span>=<span class="string">"http://www.itcast.cn/xml"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.itcast.cn/xml  student.xsd"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><h2 id="6-3-解析"><a href="#6-3-解析" class="headerlink" title="6.3 解析"></a>6.3 解析</h2><ul><li><strong>操作xml文档，将文档中的数据读取到内存中</strong></li><li><strong>操作xml文档</strong><ol><li>解析(读取)：将文档中的数据读取到内存中</li><li>写入：将内存中的数据保存到xml文档中。持久化的存储</li></ol></li><li><strong>解析xml的方式</strong><ol><li><strong>DOM</strong>：将标记语言文档一次性加载进内存，在内存中形成一颗dom树<ul><li>优点：操作方便，可以对文档进行CRUD的所有操作</li><li>缺点：占内存</li></ul></li><li><strong>SAX</strong>：逐行读取，基于事件驱动的。<ul><li>优点：不占内存。</li><li>缺点：只能读取，不能增删改</li></ul></li></ol></li></ul><h3 id="6-3-1-xml常见的解析器："><a href="#6-3-1-xml常见的解析器：" class="headerlink" title="6.3.1 xml常见的解析器："></a>6.3.1 xml常见的解析器：</h3><ul><li><strong>JAXP</strong>：sun公司提供的解析器，支持dom和sax两种思想</li><li><strong>DOM4J</strong>：一款非常优秀的解析器</li><li><strong>Jsoup</strong>：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li><li><strong>PULL</strong>：Android操作系统内置的解析器，sax方式的。</li></ul><h4 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h4><p>jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p><ul><li><p><strong>快速入门：</strong></p><ol><li>导入jar包</li><li>获取Document对象</li><li>获取对应的标签Element对象</li><li>获取数据</li></ol></li><li><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.1获取student.xml的path</span></span><br><span class="line">String path = JsoupDemo1.class.getClassLoader().getResource("student.xml").getPath();</span><br><span class="line"><span class="comment">//2.2解析xml文档，加载文档进内存，获取dom树---&gt;Document</span></span><br><span class="line">Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">//3.获取元素对象 Element</span></span><br><span class="line">Elements elements = document.getElementsByTag(<span class="string">"name"</span>);</span><br><span class="line">System.out.println(elements.size());</span><br><span class="line"><span class="comment">//3.1获取第一个name的Element对象</span></span><br><span class="line">Element element = elements.get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//3.2获取数据</span></span><br><span class="line">String name = element.text();</span><br><span class="line">System.out.println(name);</span><br></pre></td></tr></table></figure></li></ul><h4 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h4><ol><li><strong>Jsoup：工具类，可以解析html或xml文档，返回Document</strong></li></ol><ul><li><p>parse：解析html或xml文档，返回Document</p><ul><li><strong><code>parse(File in, String charsetName)</code></strong>：解析xml或html文件的。</li><li><strong><code>parse(String html)</code></strong>：解析xml或html字符串</li><li><strong><code>parse(URL url, int timeoutMillis)</code></strong>：通过网络路径获取指定的html或xml的文档对象</li></ul></li></ul><ol start="2"><li><strong>Document：文档对象。代表内存中的dom树</strong></li></ol><ul><li>获取Element对象<ul><li><strong><code>getElementById(String id)</code></strong>：根据id属性值获取唯一的element对象</li><li><strong><code>getElementsByTag(String tagName)</code></strong>：根据标签名称获取元素对象集合</li><li><strong><code>getElementsByAttribute(String key)</code></strong>：根据属性名称获取元素对象集合</li><li><strong><code>getElementsByAttributeValue(String key, String value)</code></strong>：根据对应的属性名和属性值获取元素对象集合</li></ul></li></ul><ol start="3"><li><strong>Elements：元素Element对象的集合。可以当做<code>ArrayList&lt;Element&gt;</code>来使用</strong></li><li><strong>Element：元素对象</strong><ul><li>获取子元素对象<ol><li><strong><code>getElementById(String id)</code></strong>：根据id属性值获取唯一的element对象</li><li><strong><code>getElementsByTag(String tagName)</code></strong>：根据标签名称获取元素对象集合</li><li><strong><code>getElementsByAttribute(String key)</code></strong>：根据属性名称获取元素对象集合</li><li><strong><code>getElementsByAttributeValue(String key, String value)</code></strong>：根据对应的属性名和属性值获取元素对象集合</li></ol></li><li>获取属性值<ol><li><strong><code>String attr(String key)</code></strong>：根据属性名称获取属性值</li></ol></li><li>获取文本内容<ol><li><strong><code>String text()</code></strong>：获取文本内容</li><li><strong><code>String html()</code></strong>：获取标签体的所有内容(包括字标签的字符串内容)</li></ol></li></ul></li><li><strong>Node：节点对象</strong><ul><li>是Document和Element的父类</li></ul></li></ol><h4 id="快捷查询方式"><a href="#快捷查询方式" class="headerlink" title="快捷查询方式"></a>快捷查询方式</h4><ol><li><p><strong><code>selector</code></strong>：选择器</p><ul><li>使用的方法：<code>Elements    select(String cssQuery)</code><ul><li>语法：参考Selector类中定义的语法</li></ul></li></ul></li><li><p><strong><code>XPath</code></strong>：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言</p><ul><li>使用Jsoup的Xpath需要额外导入jar包。</li><li>查询w3cshool参考手册，使用xpath的语法完成查询</li></ul></li><li><p>代码</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取student.xml的path</span></span><br><span class="line">String path = JsoupDemo6.class.getClassLoader().getResource("student.xml").getPath();</span><br><span class="line"><span class="comment">//2.获取Document对象</span></span><br><span class="line">Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">//3.根据document对象，创建JXDocument对象</span></span><br><span class="line">JXDocument jxDocument = <span class="keyword">new</span> JXDocument(document);</span><br><span class="line"><span class="comment">//4.结合xpath语法查询</span></span><br><span class="line"><span class="comment">//4.1查询所有student标签</span></span><br><span class="line">List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">"//student"</span>);</span><br><span class="line"><span class="keyword">for</span> (JXNode jxNode : jxNodes) &#123;</span><br><span class="line">    System.out.println(jxNode);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line"><span class="comment">//4.2查询所有student标签下的name标签</span></span><br><span class="line">List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(<span class="string">"//student/name"</span>);</span><br><span class="line"><span class="keyword">for</span> (JXNode jxNode : jxNodes2) &#123;</span><br><span class="line">    System.out.println(jxNode);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line"><span class="comment">//4.3查询student标签下带有id属性的name标签</span></span><br><span class="line">List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(<span class="string">"//student/name[@id]"</span>);</span><br><span class="line"><span class="keyword">for</span> (JXNode jxNode : jxNodes3) &#123;</span><br><span class="line">    System.out.println(jxNode);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line"><span class="comment">//4.4查询student标签下带有id属性的name标签 并且id属性值为itcast</span></span><br><span class="line">List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(<span class="string">"//student/name[@id='itcast']"</span>);</span><br><span class="line"><span class="keyword">for</span> (JXNode jxNode : jxNodes4) &#123;</span><br><span class="line">    System.out.println(jxNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第六章 Bootstrap</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/06%20Bootstrap.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/06%20Bootstrap.html</url>
      
        <content type="html"><![CDATA[<h1 id="6-Bootstrap"><a href="#6-Bootstrap" class="headerlink" title="6. Bootstrap"></a>6. Bootstrap</h1><h2 id="6-1-概念"><a href="#6-1-概念" class="headerlink" title="6.1. 概念"></a>6.1. 概念</h2><ul><li>一个前端开发的框架，Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。<ul><li><strong>框架：</strong>一个半成品软件，开发人员可以在框架基础上，在进行开发，简化编码。</li><li><strong>好处</strong><ol><li>定义了很多的css样式和js插件。我们开发人员直接可以使用这些样式和插件得到丰富的页面效果。</li><li>响应式布局——同一套页面可以兼容不同分辨率的设备。</li></ol></li></ul></li></ul><h2 id="6-2-快速入门"><a href="#6-2-快速入门" class="headerlink" title="6.2. 快速入门"></a>6.2. 快速入门</h2><ol><li>下载Bootstrap</li><li>在项目中将这三个文件夹复制</li><li>创建html页面，引入必要的资源文件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap HelloWorld<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jQuery(Bootstrap的所有JavaScript插件都依赖jQuery，所以必须放在前边)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载Bootstrap的所有JavaScript插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-3-响应式布局"><a href="#6-3-响应式布局" class="headerlink" title="6.3. 响应式布局"></a>6.3. 响应式布局</h2><ul><li>同一套页面可以兼容不同分辨率的设备。</li><li>实现：依赖于栅格系统：将一行平均分成12个格子，可以指定元素占几个格子</li><li>步骤：<ol><li><strong>定义容器</strong>。相当于之前的table<ul><li>容器分类：<ol><li><strong><code>container</code></strong>：两边留白</li><li><strong><code>container-fluid</code></strong>：每一种设备都是100%宽度</li></ol></li></ul></li><li><strong>定义行</strong>。相当于之前的tr   样式：row</li><li><strong>定义元素</strong>。指定该元素在不同的设备上，所占的格子数目。样式：<code>col-设备代号-格子数目</code><ul><li>设备代号：<ol><li><strong><code>xs</code></strong>：超小屏幕 手机 (&lt;768px)：col-xs-12</li><li><strong><code>sm</code></strong>：小屏幕 平板 (≥768px)</li><li><strong><code>md</code></strong>：中等屏幕 桌面显示器 (≥992px)</li><li><strong><code>lg</code></strong>：大屏幕 大桌面显示器 (≥1200px)</li></ol></li></ul></li><li><strong>注意：</strong><ul><li>一行中如果格子数目超过12，则超出部分自动换行。</li><li>栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备。</li><li>如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素沾满一整行。</li></ul></li></ol></li></ul><h2 id="6-4-CSS样式和JS插件"><a href="#6-4-CSS样式和JS插件" class="headerlink" title="6.4. CSS样式和JS插件"></a>6.4. CSS样式和JS插件</h2><ol><li>全局CSS样式：</li></ol><ul><li>按钮：<code>class=&quot;btn btn-default&quot;</code><ul><li>图片：<ul><li><code>class=&quot;img-responsive&quot;</code>**：图片在任意尺寸都占100%</li><li>图片形状<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-rounded"</span>&gt;</span>：方形</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-circle"</span>&gt;</span> ： 圆形</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-thumbnail"</span>&gt;</span> ：相框</span><br></pre></td></tr></table></figure></li></ul></li><li>表格<ul><li><strong><code>table</code></strong></li><li><strong><code>table-bordered</code></strong></li><li><strong><code>table-hover</code></strong></li></ul></li><li>表单<ul><li>给表单项添加：<code>class=&quot;form-control&quot;</code></li></ul></li></ul></li></ul><ol start="2"><li>组件：<ul><li>导航条</li><li>分页条</li></ul></li><li>插件：<ul><li>轮播图</li></ul></li></ol><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第四章 2.JavaScript高级入门</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/05_2%20JavaScript%E9%AB%98%E7%BA%A7%E5%85%A5%E9%97%A8.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/05_2%20JavaScript%E9%AB%98%E7%BA%A7%E5%85%A5%E9%97%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="5-2-JavaScript高级入门"><a href="#5-2-JavaScript高级入门" class="headerlink" title="5.2 JavaScript高级入门"></a>5.2 JavaScript高级入门</h1><h2 id="5-2-1-DOM入门"><a href="#5-2-1-DOM入门" class="headerlink" title="5.2.1 DOM入门"></a>5.2.1 DOM入门</h2><ul><li>功能：控制html文档的内容</li><li>获取页面标签(元素)对象：Element<ul><li><strong><code>document.getElementById(&quot;id值&quot;)</code></strong>:通过元素的id获取元素对象</li></ul></li><li>操作Element对象：<ol><li>修改属性值：<ol><li>明确获取的对象是哪一个？</li><li>查看API文档，找其中有哪些属性可以设置</li></ol></li><li>修改标签体内容：<ul><li>属性：<code>innerHTML</code></li></ul><ol><li>获取元素对象</li><li>使用<code>innerHTML</code>属性修改标签体内容</li></ol></li></ol></li></ul><h2 id="5-2-2-事件入门"><a href="#5-2-2-事件入门" class="headerlink" title="5.2.2 事件入门"></a>5.2.2 事件入门</h2><ul><li><p>功能： 某些组件被执行了某些操作后，触发某些代码的执行。</p><ul><li>造句：  <code>xxx被xxx,我就xxx</code><ul><li>我方水晶被摧毁后，我就责备对友。</li><li>敌方水晶被摧毁后，我就夸奖自己。</li></ul></li></ul></li><li><p>如何绑定事件</p><ul><li>直接在html标签上，指定事件的属性(操作)，属性值就是js代码</li><li>事件：<code>onclick</code>— 单击事件</li><li>通过js获取元素对象，指定事件属性，设置一个函数</li></ul></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"light"</span> <span class="attr">src</span>=<span class="string">"img/off.gif"</span>  <span class="attr">onclick</span>=<span class="string">"fun();"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"light2"</span> <span class="attr">src</span>=<span class="string">"img/off.gif"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">'我被点了'</span>);</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">'我又被点了'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">'咋老点我？'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//1.获取light2对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> light2 = <span class="built_in">document</span>.getElementById(<span class="string">"light2"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//2.绑定事件</span></span></span><br><span class="line">        light2.onclick = fun2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="5-2-3-BOM入门"><a href="#5-2-3-BOM入门" class="headerlink" title="5.2.3 BOM入门"></a>5.2.3 BOM入门</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><code>Browser Object Model</code>浏览器对象模型</p><ul><li>将浏览器的各个组成部分封装成对象。</li></ul><h3 id="组成："><a href="#组成：" class="headerlink" title="组成："></a>组成：</h3><ul><li><strong><code>Window</code></strong>：窗口对象</li><li><strong><code>Navigator</code></strong>：浏览器对象</li><li><strong><code>Screen</code></strong>：显示器屏幕对象</li><li><strong><code>History</code></strong>：历史记录对象</li><li><strong><code>Location</code></strong>：地址栏对象</li></ul><h3 id="Window：窗口对象"><a href="#Window：窗口对象" class="headerlink" title="Window：窗口对象"></a>Window：窗口对象</h3><ul><li><p><strong>创建</strong></p></li><li><p><strong>方法</strong></p><ol><li><strong>与弹出框有关的方法</strong><ul><li><strong><code>alert()</code></strong>：显示带有一段消息和一个确认按钮的警告框。</li><li><strong><code>confirm()</code></strong>：显示带有一段消息以及确认按钮和取消按钮的对话框。<ol><li>如果用户点击确定按钮，则方法返回true</li><li>如果用户点击取消按钮，则方法返回false</li></ol></li><li><strong><code>prompt()</code></strong>：显示可提示用户输入的对话框。<ol><li>返回值：获取用户输入的值</li></ol></li></ul></li><li><strong>与打开关闭有关的方法</strong><ul><li><strong><code>close()</code></strong>：关闭浏览器窗口。<ol><li>谁调用我 ，我关谁</li></ol></li><li><strong><code>open()</code></strong>：打开一个新的浏览器窗口<ol><li>返回新的Window对象</li></ol></li></ul></li><li><strong>与定时器有关的方式</strong><ul><li><strong><code>setTimeout()</code></strong>：在指定的毫秒数后调用函数或计算表达式。<ol><li>参数：<ul><li>js代码或者方法对象</li><li>毫秒值</li></ul></li><li>返回值：唯一标识，用于取消定时器</li></ol></li><li><strong><code>clearTimeout()</code></strong>：取消由 setTimeout() 方法设置的 timeout。</li><li><strong><code>setInterval()</code></strong>：按照指定的周期（以毫秒计）来调用函数或计算表达式。</li><li><strong><code>clearInterval()</code></strong>：取消由 setInterval() 设置的 timeout。</li></ul></li></ol></li><li><p><strong>属性：</strong></p><ul><li><strong>获取其他BOM对象：</strong><ol><li>history</li><li>location</li><li>Navigator</li><li>Screen:</li></ol></li><li><strong>获取DOM对象——document</strong></li></ul></li><li><p><strong>特点</strong></p><ul><li>Window对象不需要创建可以直接使用 window使用。<code>window.方法名();</code></li><li>window引用可以省略。 <code>方法名();</code></li></ul></li></ul><h3 id="Location：地址栏对象"><a href="#Location：地址栏对象" class="headerlink" title="Location：地址栏对象"></a>Location：地址栏对象</h3><ul><li><p><strong>创建(获取)：</strong></p><ul><li><strong><code>window.location</code></strong></li><li><strong><code>location</code></strong></li></ul></li><li><p><strong>方法：</strong></p><ul><li><strong><code>reload()</code></strong>：重新加载当前文档。刷新</li></ul></li><li><p><strong>属性</strong></p><ul><li><strong><code>href</code></strong>：设置或返回完整的 URL。</li></ul></li></ul><h3 id="History：历史记录对象"><a href="#History：历史记录对象" class="headerlink" title="History：历史记录对象"></a>History：历史记录对象</h3><ul><li><p><strong>创建(获取)：</strong></p><ul><li><strong><code>window.history</code></strong></li><li><strong><code>history</code></strong></li></ul></li><li><p><strong>方法：</strong></p><ul><li><strong><code>back()</code></strong>：加载 history 列表中的前一个 URL。</li><li><strong><code>forward()</code></strong>：加载 history 列表中的下一个 URL。</li><li><strong><code>go(参数)</code></strong>：加载 history 列表中的某个具体页面。<ul><li>参数：<ol><li>正数：前进几个历史记录</li><li>负数：后退几个历史记录</li></ol></li></ul></li></ul></li><li><p><strong>属性：</strong></p><ul><li><strong><code>length</code></strong>：返回当前窗口历史列表中的 URL 数量。</li></ul></li></ul><h2 id="5-2-4-DOM入门"><a href="#5-2-4-DOM入门" class="headerlink" title="5.2.4 DOM入门"></a>5.2.4 DOM入门</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li><strong><code>Document Object Model</code></strong>文档对象模型</li><li>将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作</li></ul><h3 id="W3C-DOM-标准"><a href="#W3C-DOM-标准" class="headerlink" title="W3C DOM 标准"></a>W3C DOM 标准</h3><p><strong>被分为 3 个不同的部分：</strong></p><ul><li><code>核心 DOM</code>—— 针对任何结构化文档的标准模型<ol><li><code>Document</code>**：文档对象</li><li><code>Element</code>**：元素对象</li><li><code>Attribute</code>**：属性对象</li><li><code>Text</code>**：文本对象</li><li><code>Comment</code>**：注释对象</li><li><code>Node</code>**：节点对象，其他5个的父对象</li></ol></li><li>**<code>XML DOM</code> - 针对 XML 文档的标准模型</li><li>**<code>HTML DOM</code>- 针对 HTML 文档的标准模型</li></ul><h4 id="核心DOM模型"><a href="#核心DOM模型" class="headerlink" title="核心DOM模型"></a>核心DOM模型</h4><ul><li><strong><code>Document</code></strong>：文档对象<ul><li>创建(获取)：在html dom模型中可以使用window对象来获取<ol><li><code>window.document</code></li><li><code>document</code></li></ol></li><li>方法：<ol><li>获取Element对象：<ul><li><strong><code>getElementById()</code></strong>： 根据id属性值获取元素对象。id属性值一般唯一</li><li><strong><code>getElementsByTagName()</code></strong>：根据元素名称获取元素对象们。返回值是一个数组</li><li><strong><code>getElementsByClassName()</code></strong>：根据Class属性值获取元素对象们。返回值是一个数组</li><li><strong><code>getElementsByName()</code></strong>：根据name属性值获取元素对象们。返回值是一个数组</li></ul></li><li>创建其他DOM对象：<ul><li><strong><code>createAttribute(name)</code></strong></li><li><strong><code>createComment()</code></strong></li><li><strong><code>createElement()</code></strong></li><li><strong><code>createTextNode()</code></strong></li></ul></li><li>属性</li></ol></li></ul></li><li><strong><code>Element</code></strong>：元素对象<ul><li>获取/创建：通过document来获取和创建</li><li>方法：<ol><li><strong><code>removeAttribute()</code></strong>：删除属性</li><li><strong><code>setAttribute()</code></strong>：设置属性</li></ol></li></ul></li><li><strong><code>Node</code></strong>：节点对象，其他5个的父对象**<ul><li>特点：所有dom对象都可以被认为是一个节点</li><li>方法：<ul><li><strong><code>CRUD dom树：</code></strong><br>&emsp;&emsp;1、<strong><code>appendChild()</code></strong>：向节点的子节点列表的结尾添加新的子节点。<br>&emsp;&emsp;2、<strong><code>removeChild()</code></strong>：删除（并返回）当前节点的指定子节点。<br>&emsp;&emsp;3、<strong><code>replaceChild()</code></strong>：用新节点替换一个子节点。</li></ul></li><li>属性：<ul><li><strong><code>parentNode</code></strong>返回节点的父节点。</li></ul></li></ul></li></ul><h4 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h4><ol><li><p>标签体的设置和获取：innerHTML</p></li><li><p>使用html元素对象的属性</p></li><li><p>控制元素样式</p><ol><li><p>使用元素的style属性来设置，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改样式方式1</span></span><br><span class="line">div1.style.border = <span class="string">"1px solid red"</span>;</span><br><span class="line">div1.style.width = <span class="string">"200px"</span>;</span><br><span class="line"><span class="comment">//font-size--&gt; fontSize</span></span><br><span class="line">div1.style.fontSize = <span class="string">"20px"</span>;</span><br></pre></td></tr></table></figure></li><li><p>提前定义好类选择器的样式，通过元素的className属性来设置其class属性值。</p></li></ol></li></ol><h2 id="5-2-5-事件监听机制"><a href="#5-2-5-事件监听机制" class="headerlink" title="5.2.5 事件监听机制"></a>5.2.5 事件监听机制</h2><ul><li><p>概念：某些组件被执行了某些操作后，触发某些代码的执行。    </p><ul><li>事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了</li><li>事件源：组件。如： 按钮 文本输入框…</li><li>监听器：代码。</li><li>注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。</li></ul></li><li><p>常见的事件</p><ul><li><strong>点击事件</strong><ol><li><strong><code>onclick</code></strong>：单击事件</li><li><strong><code>ondblclick</code></strong>：双击事件</li></ol></li><li><strong>焦点事件</strong><ol><li><strong><code>onblur</code></strong>：失去焦点</li><li><strong><code>onfocus</code></strong>：元素获得焦点。</li></ol></li><li><strong>加载事件</strong><ol><li><strong><code>onload</code></strong>：一张页面或一幅图像完成加载。</li></ol></li><li><strong>鼠标事件</strong><ol><li><strong><code>onmousedown</code></strong>：鼠标按钮被按下。</li><li><strong><code>onmouseup</code></strong>：鼠标按键被松开。</li><li><strong><code>onmousemove</code></strong>：鼠标被移动。</li><li><strong><code>onmouseover</code></strong>：鼠标移到某元素之上。</li><li><strong><code>onmouseout</code></strong>：鼠标从某元素移开。</li></ol></li><li><strong>键盘事件</strong><ol><li><strong><code>onkeydown</code></strong>：某个键盘按键被按下。    </li><li><strong><code>onkeyup</code></strong>：某个键盘按键被松开。</li><li><strong><code>onkeypress</code></strong>：某个键盘按键被按下并松开。</li></ol></li><li><strong>选择和改变</strong><ol><li><strong><code>onchange</code></strong>：域的内容被改变。</li><li><strong><code>onselect</code></strong>：文本被选中。</li></ol></li><li><strong>表单事件</strong><ol><li><strong><code>onsubmit</code></strong>：确认按钮被点击。</li><li><strong><code>onreset</code></strong>：重置按钮被点击。</li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第五章 1.JavaScript基础</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/05_1%20JavaScript%E5%9F%BA%E7%A1%80.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/05_1%20JavaScript%E5%9F%BA%E7%A1%80.html</url>
      
        <content type="html"><![CDATA[<h1 id="5-1-JavaScript基础"><a href="#5-1-JavaScript基础" class="headerlink" title="5.1 JavaScript基础"></a>5.1 JavaScript基础</h1><h2 id="5-1-1-概念"><a href="#5-1-1-概念" class="headerlink" title="5.1.1 概念"></a>5.1.1 概念</h2><p>一门客户端脚本语言</p><ul><li>运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎</li><li>脚本语言：不需要编译，直接就可以被浏览器解析执行了</li><li>功能：<ul><li>可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。</li></ul></li></ul><h2 id="5-1-2-JavaScript发展史："><a href="#5-1-2-JavaScript发展史：" class="headerlink" title="5.1.2 JavaScript发展史："></a>5.1.2 JavaScript发展史：</h2><ol><li>1992年，Nombase公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为 ： C–    ，后来更名为：ScriptEase</li><li>1995年，Netscape(网景)公司，开发了一门客户端脚本语言：LiveScript。后来，请来SUN公司的专家，修改LiveScript，命名为JavaScript</li><li>1996年，微软抄袭JavaScript开发出JScript语言</li><li>1997年，ECMA(欧洲计算机制造商协会)，制定出客户端脚本语言的标准：ECMAScript，就是统一了所有客户端脚本语言的编码方式。</li></ol><ul><li>JavaScript = <code>ECMAScript</code>+ <code>JavaScript</code>自己特有的东西(BOM+DOM)</li></ul><h2 id="5-1-3-ECMAScript：客户端脚本语言的标准"><a href="#5-1-3-ECMAScript：客户端脚本语言的标准" class="headerlink" title="5.1.3 ECMAScript：客户端脚本语言的标准"></a>5.1.3 ECMAScript：客户端脚本语言的标准</h2><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h3><ul><li><p><strong>与html结合方式</strong></p><ol><li>内部JS<ul><li>定义<code>&lt;script&gt;</code>，标签体内容就是js代码</li></ul></li><li>外部JS<ul><li>定义<code>&lt;script&gt;</code>，通过src属性引入外部的js文件<blockquote><p>注意：<br>&emsp;&emsp;1、<code>&lt;script&gt;</code>可以定义在html页面的任何地方。但是定义的位置会影响执行顺序。<br>&emsp;&emsp;2、<code>&lt;script&gt;</code>可以定义多个。</p></blockquote></li></ul></li></ol></li><li><p><strong>注释</strong></p><ol><li>单行注释：<code>//注释内容</code></li><li>多行注释：<code>/*注释内容*/</code></li></ol></li><li><p><strong>数据类型</strong></p><ul><li>原始数据类型(基本数据类型)：<ul><li><strong><code>number</code></strong>：数字。 整数/小数/NaN(not a number 一个不是数字的数字类型)</li><li><strong><code>string</code></strong>：字符串。 字符串  “abc” “a” ‘abc’</li><li><strong><code>boolean</code></strong>：true和false</li><li><strong><code>null</code></strong>：一个对象为空的占位符</li><li><strong><code>undefined</code></strong>：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined</li></ul></li><li>引用数据类型：对象</li></ul></li><li><p><strong>变量</strong></p><ul><li>变量：一小块存储数据的内存空间</li><li>Java语言是强类型语言，而JavaScript是弱类型语言。<ul><li>强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据</li><li>弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。</li><li>语法：<br>&emsp;&emsp;<code>var 变量名 = 初始化值;</code></li><li><code>typeof</code>运算符：获取变量的类型。<blockquote><p>注：<code>null</code>运算后得到的是<code>object</code></p></blockquote></li></ul></li></ul></li><li><p><strong>运算符</strong><br><strong>1.一元运算符：只有一个运算数的运算符——【<code>++</code>，<code>--</code> ， <code>+-</code>(正负号)】</strong></p><ul><li><strong><code>++</code>、<code>--</code></strong>：自增(自减)<ul><li><code>++(--) 在前</code>，先自增(自减)，再运算</li><li><code>++(--) 在后</code>，先运算，再自增(自减)</li><li><code>+(-)</code>：正负号<blockquote><p><strong>注意：</strong><br>&emsp;&emsp;在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算数进行类型转换<br><strong>其他类型转number：</strong><br>&emsp;&emsp;1、<strong>string转number</strong>：按照字面值转换。如果字面值不是数字，则转为NaN（不是数字的数字）<br>&emsp;&emsp;2、<strong>boolean转number</strong>：true转为1，false转为0</p></blockquote></li></ul></li></ul><p><strong>2. 算数运算符【<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、 <code>%</code> …】</strong></p><p><strong>3. 赋值运算符【<code>=</code> <code>+=</code> <code>-+</code>….】</strong></p><p><strong>4. 比较运算符【<code>&gt;</code>、 <code>&lt;</code> 、<code>&gt;=</code>、<code>&lt;=</code>、 <code>==</code> 、<code>===</code>(全等于)】</strong></p><ul><li>比较方式<ul><li>类型相同：直接比较</li></ul><ol><li>字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。</li></ol><ul><li>类型不同：先进行类型转换，再比较</li></ul><ol start="2"><li><code>===</code>：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false</li></ol></li></ul><p><strong>5. 逻辑运算符【? : 表达式】</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> c = a &gt; b ? <span class="number">1</span>:<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>   <strong>语法：</strong></p><ul><li>表达式? 值1:值2;<ul><li>判断表达式的值，如果是true则取值1，如果是false则取值2；</li></ul></li></ul><p><strong>6. 流程控制语句：</strong></p><ol><li>if…else…</li><li>switch:<ul><li>在java中，switch语句可以接受的数据类型： byte int shor char,枚举(1.5) ,String(1.7)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(变量):    </span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>: 操作<span class="number">1</span>；</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>: 操作<span class="number">2</span>；</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">3</span>: 操作<span class="number">3</span>；</span><br><span class="line">    <span class="keyword">default</span> : 操作</span><br></pre></td></tr></table></figure></li><li>在JS中,switch语句可以接受任意的原始数据类型</li></ul></li><li>while</li><li>do…while</li><li>for</li></ol><p><strong>7. JS特殊语法：</strong></p><ol><li>语句以;结尾，如果一行只有一条语句则 ;可以省略 (不建议)</li><li>变量的定义使用var关键字，也可以不使用<ul><li>用： 定义的变量是局部变量</li><li>不用：定义的变量是全局变量(不建议)</li></ul></li></ol><p><strong>8. 练习：99乘法表</strong></p></li></ul><h3 id="2-基本对象"><a href="#2-基本对象" class="headerlink" title="2. 基本对象"></a>2. 基本对象</h3><ol><li><p><strong>Function：函数(方法)对象</strong></p><ol><li><p>创建：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>(形式参数列表,方法体);  <span class="comment">//忘掉吧</span></span><br></pre></td></tr></table></figure>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 方法名称(<span class="params">形式参数列表</span>)</span>&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 方法名 = <span class="function"><span class="keyword">function</span>(<span class="params">形式参数列表</span>)</span>&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>方法：</p></li><li><p>属性：</p><ul><li><code>length</code>：代表形参的个数</li></ul></li><li><p>特点：</p><ul><li>方法定义是，形参的类型不用写,返回值类型也不写。</li><li>方法是一个对象，如果定义名称相同的方法，会覆盖</li><li>在JS中，方法的调用只与方法的名称有关，和参数列表无关</li><li>在方法声明中有一个隐藏的内置对象（数组），arguments,封装所有的实际参数</li></ul></li><li><p>调用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法名称(实际参数列表);</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p><strong>Array:数组对象</strong></p><ol><li><p>创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(元素列表);</span><br><span class="line"><span class="number">2.</span> <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(默认长度);</span><br><span class="line"><span class="number">3.</span> <span class="keyword">var</span> arr = [元素列表];</span><br></pre></td></tr></table></figure></li><li><p>方法</p><ul><li><strong><code>join(参数)</code></strong>：将数组中的元素按照指定的分隔符拼接为字符串</li><li><strong><code>push()</code></strong>：向数组的末尾添加一个或更多元素，并返回新的长度。</li></ul></li><li><p>属性</p><ul><li>length:数组的长度</li></ul></li><li><p>特点：</p><ul><li>JS中，数组元素的类型可变的。</li><li>JS中，数组长度可变的。</li></ul></li></ol></li><li><p><strong>Boolean</strong></p></li><li><p><strong>Date：日期对象</strong></p><ol><li><p>创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure></li><li><p>方法：</p><ul><li><strong><code>toLocaleString()</code></strong>：返回当前date对象对应的时间本地字符串格式</li><li><strong><code>getTime()</code></strong>：获取毫秒值。返回当前如期对象描述的时间到1970年1月1日零点的毫秒值差</li></ul></li></ol></li><li><p><strong>Math：数学对象</strong></p><ol><li><p>创建：</p><ul><li>特点：Math对象不用创建，直接使用。  Math.方法名();</li></ul></li><li><p>方法：</p><ul><li><strong><code>random()</code></strong>：返回 0 ~ 1 之间的随机数。 含0不含1</li><li><strong><code>ceil(x)</code></strong>：对数进行上舍入。</li><li><strong><code>floor(x)</code></strong>：对数进行下舍入。</li><li><strong><code>round(x)</code></strong>：把数四舍五入为最接近的整数。</li></ul></li><li><p>属性：PI</p></li></ol></li><li><p><strong>Number</strong></p></li><li><p><strong>String</strong></p></li><li><p><strong>RegExp：正则表达式对象</strong></p><ul><li><p><strong>正则表达式</strong>：定义字符串的组成规则。</p><ol><li>单个字符:<code>[]</code>——如：<code>[a] [ab] [a-zA-Z0-9_]</code>_<ul><li>特殊符号代表特殊含义的单个字符:<ol><li><strong><code>\d</code></strong>：单个数字字符<code>[0-9]</code></li><li><strong><code>\w</code></strong>：单个单词字符<code>[a-zA-Z0-9_]</code></li></ol></li></ul></li><li>量词符号：<ul><li><strong><code>?</code></strong>：表示出现0次或1次</li><li><strong><code>*</code></strong>：表示出现0次或多次</li><li><strong><code>+</code></strong>：出现1次或多次</li><li>**<code>{m,n}</code>:表示 m&lt;= 数量 &lt;= n<ol><li><code>m</code>如果缺省： <strong><code>{,n}</code></strong>：最多n次</li><li><code>n</code>如果缺省：<strong><code>{m,}</code></strong>：最少m次</li></ol></li></ul></li><li>开始结束符号<ul><li><strong><code>^</code></strong>：开始</li><li><strong><code>$</code></strong>：结束</li></ul></li></ol></li><li><p><strong>正则对象</strong>：</p><ol><li><p>创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"正则表达式"</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/正则表达式/</span>;</span><br></pre></td></tr></table></figure></li><li><p>方法</p><ul><li>test(参数):验证指定的字符串是否符合正则定义的规范</li></ul></li></ol></li></ul></li><li><p><strong>Global</strong></p><ul><li><strong>特点</strong>：全局对象，这个Global中封装的方法不需要对象就可以直接调用。  方法名();</li><li><strong>方法</strong>：<ol><li><strong><code>encodeURI()</code></strong>：url编码</li><li><strong><code>decodeURI()</code></strong>：url解码</li><li><strong><code>encodeURIComponent()</code></strong>：url编码,编码的字符更多</li><li><strong><code>decodeURIComponent()</code></strong>：url解码</li><li><strong><code>parseInt()</code></strong>：将字符串转为数字<ul><li>逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number</li></ul></li><li><strong><code>isNaN()</code></strong>：判断一个值是否是NaN<ul><li>NaN六亲不认，连自己都不认。NaN参与的==比较全部问false</li></ul></li><li><strong><code>eval()</code></strong>：讲 JavaScript 字符串，并把它作为脚本代码来执行。</li></ol></li><li>URL编码</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第四章 HTML表单标签+CSS</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/04_3%20HTML%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE+CSS.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/04_3%20HTML%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE+CSS.html</url>
      
        <content type="html"><![CDATA[<h1 id="4-1-HTML标签"><a href="#4-1-HTML标签" class="headerlink" title="4.1 HTML标签"></a>4.1 HTML标签</h1><h2 id="4-1-1-表单标签"><a href="#4-1-1-表单标签" class="headerlink" title="4.1.1 表单标签"></a>4.1.1 表单标签</h2><ul><li>概念：用于采集用户输入的数据的。用于和服务器进行交互。</li></ul><h3 id="from标签"><a href="#from标签" class="headerlink" title="from标签"></a>from标签</h3><ul><li><p><strong>form：</strong>用于定义表单的。可以定义一个范围，范围代表采集用户数据的范围</p></li><li><p><strong>属性：</strong></p><ul><li><strong>action：</strong>指定提交数据的URL<ul><li><strong>method：</strong>指定提交方式<ul><li>分类：一共7种，2种比较常用<br>&emsp;&emsp;1、<strong>get：</strong><br>&emsp;&emsp;&emsp;1)、请求参数会在地址栏中显示。会封装到请求行中。<br>&emsp;&emsp;&emsp;2)、请求参数大小是有限制的。<br>&emsp;&emsp;&emsp;3)、不太安全。<br>&emsp;&emsp;2、<strong>post：</strong><br>&emsp;&emsp;&emsp;1)、请求参数不会再地址栏中显示。会封装在请求体中。<br>&emsp;&emsp;&emsp;2)、请求参数的大小没有限制。<br>&emsp;&emsp;&emsp;3)、较为安全。</li></ul></li></ul></li></ul></li><li><p><strong>表单项中的数据要想被提交：必须指定其name属性</strong></p></li></ul><h3 id="表单项标签"><a href="#表单项标签" class="headerlink" title="表单项标签"></a>表单项标签</h3><ul><li><strong>input：</strong>可以通过<code>type</code>属性值，改变元素展示的样式</li><li><strong>type 属性：</strong><ul><li><strong>text：</strong>文本输入框，默认值<br>&emsp;&emsp;==&gt;<strong><code>placeholder</code></strong>：指定输入框的提示信息，当输入框的内容发生变化，会自动清空提示信息</li><li><strong>password</strong>：密码输入框</li><li><strong>radio</strong>：单选框<ul><li><strong>注意：</strong><br>&emsp;&emsp;1、要想让多个单选框实现单选的效果，则多个单选框的name属性值必须一样。<br>&emsp;&emsp;2、一般会给每一个单选框提供value属性，指定其被选中后提交的值<br>&emsp;&emsp;3、<code>checked</code>属性，可以指定默认值</li></ul></li><li><strong>checkbox</strong>：复选框<ul><li>注意：<br>&emsp;&emsp;1、一般会给每一个单选框提供value属性，指定其被选中后提交的值<br>&emsp;&emsp;2、<code>checked</code>属性，可以指定默认值</li></ul></li><li><strong>file</strong>：文件选择框</li><li><strong>hidden</strong>：隐藏域，用于提交一些信息。</li><li><strong>按钮</strong>：<ul><li><code>submit</code>：提交按钮。可以提交表单</li><li><code>button</code>：普通按钮</li></ul></li><li><strong>image</strong>：图片提交按钮<ul><li>src属性指定图片的路径    </li></ul></li><li><strong>label</strong>：指定输入项的文字描述信息<ul><li>注意：<ul><li>label的for属性一般会和 input 的 id属性值 对应。如果对应了，则点击label区域，会让input输入框获取焦点。</li></ul></li></ul></li><li><strong>select</strong>： 下拉列表<ul><li>子元素：option，指定列表项</li></ul></li><li><strong>textarea</strong>：文本域<ul><li><code>cols</code>：指定列数，每一行有多少个字符</li><li><code>rows</code>：默认多少行。</li></ul></li></ul></li></ul><h1 id="4-2-CSS：页面美化和布局控制"><a href="#4-2-CSS：页面美化和布局控制" class="headerlink" title="4.2 CSS：页面美化和布局控制"></a>4.2 CSS：页面美化和布局控制</h1><h2 id="4-2-1-概念和好处"><a href="#4-2-1-概念和好处" class="headerlink" title="4.2.1 概念和好处"></a>4.2.1 概念和好处</h2><ol><li><strong>概念</strong>： Cascading Style Sheets 层叠样式表<ul><li>层叠：多个样式可以作用在同一个html的元素上，同时生效</li></ul></li><li><strong>好处</strong>：<ol><li>功能强大</li><li>将内容展示和样式控制分离.<ul><li>降低耦合度。解耦</li><li>让分工协作更容易</li><li>提高开发效率</li></ul></li></ol></li></ol><h2 id="4-2-2-CSS的使用"><a href="#4-2-2-CSS的使用" class="headerlink" title="4.2.2 CSS的使用"></a>4.2.2 CSS的使用</h2><ul><li><strong>CSS与html结合方式</strong></li></ul><ol><li><p><strong>内联样式</strong></p><ul><li>在标签内使用style属性指定css代码，如：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color:red;"</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>内部样式</strong></p><ul><li>在head标签内，定义style标签，style标签的标签体内容就是css代码。如：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>外部样式</strong></p><ul><li><p>定义css资源文件。</p></li><li><p>在head标签内，定义link标签，引入外部的资源文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/a.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em><code>a.css</code>文件：</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p><strong>注意：</strong><br>以上1,2,3种方式中，css作用范围越来越大<br>&emsp;&emsp;2、1方式不常用，后期常用2、3<br>&emsp;&emsp;2、3种格式可以写为：<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="keyword">@import</span> <span class="string">"css/a.css"</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="4-2-3-css语法"><a href="#4-2-3-css语法" class="headerlink" title="4.2.3 css语法"></a>4.2.3 css语法</h2><ul><li>格式： <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    属性名1:属性值1;</span><br><span class="line">    属性名2:属性值2;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>选择器：筛选具有相似特征的元素</li><li>注意：<ul><li>每一对属性需要使用<code>；</code>隔开，最后一对属性可以不加；</li></ul></li></ul><h2 id="4-2-4-选择器："><a href="#4-2-4-选择器：" class="headerlink" title="4.2.4 选择器："></a>4.2.4 选择器：</h2><p><strong>筛选具有相似特征的元素</strong></p><ul><li>分类：<ol><li>基础选择器<ol><li>id选择器：选择具体的id属性值的元素.建议在一个html页面中id值唯一<ul><li>语法：<code>#id属性值{}</code></li></ul></li><li>元素选择器：选择具有相同标签名称的元素<ul><li>语法：<code>标签名称{}</code></li><li>注意：id选择器优先级高于元素选择器</li></ul></li><li>类选择器：选择具有相同的class属性值的元素。<ul><li>语法：<code>.class属性值{}</code></li><li>注意：类选择器选择器优先级高于元素选择器</li></ul></li></ol></li><li>扩展选择器：<ol><li>选择所有元素：<ul><li>语法：<code>*{}</code></li></ul></li><li>并集选择器：<ul><li>语法：<code>选择器1,选择器2{}</code></li></ul></li><li>子选择器：筛选选择器1元素下的选择器2元素<ul><li>语法：  <code>选择器1 选择器2{}</code></li></ul></li><li>父选择器：筛选选择器2的父元素选择器1<ul><li>语法：  <code>选择器1 &gt; 选择器2{}</code></li></ul></li><li>属性选择器：选择元素名称，属性名=属性值的元素<ul><li>语法：  <code>元素名称[属性名=&quot;属性值&quot;]{}</code></li></ul></li><li>伪类选择器：选择一些元素具有的状态<ul><li>语法： <code>元素:状态{}</code></li><li>如：<code>&lt;a&gt;</code><ul><li>状态：<ol><li><strong><code>link</code></strong>：初始化的状态</li><li><strong><code>visited</code></strong>：被访问过的状态</li><li><strong><code>active</code></strong>：正在访问状态</li><li><strong><code>hover</code></strong>：鼠标悬浮状态</li></ol></li></ul></li></ul></li></ol></li></ol></li></ul><h2 id="4-2-5-属性"><a href="#4-2-5-属性" class="headerlink" title="4.2.5 属性"></a>4.2.5 属性</h2><ol><li><strong>字体、文本</strong><ul><li><code>font-size</code>：字体大小<ul><li><code>color</code>：文本颜色</li><li><code>text-align</code>：对其方式</li><li><code>line-height</code>：行高 </li></ul></li></ul></li><li><strong>背景</strong><ul><li><code>background</code>：</li></ul></li><li><strong>边框</strong><ul><li><code>border</code>：设置边框，符合属性</li></ul></li><li><strong>尺寸</strong><ul><li><code>width</code>：宽度</li><li><code>height</code>：高度</li></ul></li><li><strong>盒子模型：控制布局</strong><ul><li><code>margin</code>：外边距</li><li><code>padding</code>：内边距<ul><li>默认情况下内边距会影响整个盒子的大小</li><li><code>box-sizing: border-box;</code>设置盒子的属性，让width和height就是最终盒子的大小</li></ul></li><li><code>float</code>：浮动<ul><li><code>left</code></li><li><code>right</code></li></ul></li></ul></li></ol><h1 id="4-3-案例"><a href="#4-3-案例" class="headerlink" title="4.3 案例"></a>4.3 案例</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">            *&#123;</span><br><span class="line">                margin: 0px;</span><br><span class="line">                padding: 0px;</span><br><span class="line">                box-sizing: border-box;</span><br><span class="line">            &#125;</span><br><span class="line">            body&#123;</span><br><span class="line">                background: url("img/register_bg.png") no-repeat center;</span><br><span class="line">                padding-top: 25px;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-class">.rg_layout</span>&#123;</span></span><br><span class="line">                width: 900px;</span><br><span class="line">                height: 500px;</span><br><span class="line"><span class="css">                <span class="selector-tag">border</span>: 8<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#EEEEEE</span>;</span></span><br><span class="line">                background-color: white;</span><br><span class="line"><span class="css">                <span class="comment">/*让div水平居中*/</span></span></span><br><span class="line">                margin: auto;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-class">.rg_left</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="comment">/*border: 1px solid red;*/</span></span></span><br><span class="line">                float: left;</span><br><span class="line">                margin: 15px;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.rg_left</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>:<span class="selector-id">#FFD026</span>;</span></span><br><span class="line">                font-size: 20px;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-class">.rg_left</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>:<span class="selector-id">#A6A6A6</span>;</span></span><br><span class="line">                font-size: 20px;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-class">.rg_center</span>&#123;</span></span><br><span class="line">                float: left;</span><br><span class="line"><span class="css">                <span class="comment">/* border: 1px solid red;*/</span></span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-class">.rg_right</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="comment">/*border: 1px solid red;*/</span></span></span><br><span class="line">                float: right;</span><br><span class="line">                margin: 15px;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-class">.rg_right</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span>&#123;</span></span><br><span class="line">                font-size: 15px;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.rg_right</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span><span class="selector-pseudo">:pink</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-class">.td_left</span>&#123;</span></span><br><span class="line">                width: 100px;</span><br><span class="line">                text-align: right;</span><br><span class="line">                height: 45px;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.td_right</span>&#123;</span></span><br><span class="line">                padding-left: 50px ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-id">#username</span>,<span class="selector-id">#password</span>,<span class="selector-id">#email</span>,<span class="selector-id">#name</span>,<span class="selector-id">#tel</span>,<span class="selector-id">#birthday</span>,<span class="selector-id">#checkcode</span>&#123;</span></span><br><span class="line">                width: 251px;</span><br><span class="line">                height: 32px;</span><br><span class="line"><span class="css">                <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#A6A6A6</span> ;</span></span><br><span class="line"><span class="css">                <span class="comment">/*设置边框圆角*/</span></span></span><br><span class="line">                border-radius: 5px;</span><br><span class="line">                padding-left: 10px;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#checkcode</span>&#123;</span></span><br><span class="line">                width: 110px;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-id">#img_check</span>&#123;</span></span><br><span class="line">                height: 32px;</span><br><span class="line">                vertical-align: middle;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-id">#btn_sub</span>&#123;</span></span><br><span class="line">                width: 150px;</span><br><span class="line">                height: 40px;</span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#FFD026</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#FFD026</span> ;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rg_layout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rg_left"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>新用户注册<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>USER REGISTER<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rg_center"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rg_form"</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--定义表单 form--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_left"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_right"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> </span></span><br><span class="line"><span class="tag">                                      <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_left"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_right"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> </span></span><br><span class="line"><span class="tag">                                           <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_left"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_right"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> </span></span><br><span class="line"><span class="tag">                                           <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"请输入邮箱"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_left"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_right"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">                                           <span class="attr">placeholder</span>=<span class="string">"请输入姓名"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_left"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"tel"</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_right"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"tel"</span> <span class="attr">id</span>=<span class="string">"tel"</span> </span></span><br><span class="line"><span class="tag">                                           <span class="attr">placeholder</span>=<span class="string">"请输入手机号"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_left"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_right"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> </span></span><br><span class="line"><span class="tag">                                           <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span> 男</span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> </span></span><br><span class="line"><span class="tag">                                           <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span> 女</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_left"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"birthday"</span>&gt;</span>出生日期<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_right"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"birthday"</span> </span></span><br><span class="line"><span class="tag">                                       <span class="attr">id</span>=<span class="string">"birthday"</span> <span class="attr">placeholder</span>=<span class="string">"请输入出生日期"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_left"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkcode"</span> &gt;</span>验证码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_right"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"checkcode"</span> </span></span><br><span class="line"><span class="tag">                                       <span class="attr">id</span>=<span class="string">"checkcode"</span> <span class="attr">placeholder</span>=<span class="string">"请输入验证码"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img_check"</span> </span></span><br><span class="line"><span class="tag">                                         <span class="attr">src</span>=<span class="string">"img/verify_code.jpg!blog"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"btn_sub"</span> </span></span><br><span class="line"><span class="tag">                                           <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rg_right"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>已有账号?<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>立即登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第四章 2.HTML标签</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/04_2%20HTML%E6%A0%87%E7%AD%BE.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/04_2%20HTML%E6%A0%87%E7%AD%BE.html</url>
      
        <content type="html"><![CDATA[<h1 id="4-2-HTML标签"><a href="#4-2-HTML标签" class="headerlink" title="4.2 HTML标签"></a>4.2 HTML标签</h1><ul><li>概念：是最基础的网页开发语言</li><li><strong><code>Hyper Text Markup Language</code></strong>：超文本标记语言<ul><li>超文本：<ul><li>超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本.</li></ul></li><li>标记语言：<ul><li>由标签构成的语言。&lt;标签名称&gt; 如 html，xml</li><li>标记语言不是编程语言</li></ul></li></ul></li></ul><h2 id="4-2-1-快速入门"><a href="#4-2-1-快速入门" class="headerlink" title="4.2.1 快速入门"></a>4.2.1 快速入门</h2><ul><li><p><strong>语法：</strong><br>1、html文档后缀名 .html 或者 .htm<br>2、标签分为<br>&emsp;&emsp;1、围堵标签：有开始标签和结束标签。如 <code>&lt;html&gt; &lt;/html&gt;</code><br>&emsp;&emsp;2、自闭和标签：开始标签和结束标签在一起。如<code>&lt;br/&gt;</code><br>3、标签可以嵌套：<br>&emsp;&emsp;需要正确嵌套，不能你中有我，我中有你<br>&emsp;&emsp;错误：<code>&lt;a&gt;&lt;b&gt;&lt;/a&gt;&lt;/b&gt;</code><br>&emsp;&emsp;正确：<code>&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;</code><br>4、在开始标签中可以定义属性。属性是由键值对构成，值需要用引号(单双都可)引起来<br>5、html的标签不区分大小写，但是建议使用小写。</p></li><li><p><strong>代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">FONT</span> <span class="attr">color</span>=<span class="string">'red'</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">'green'</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-2-2-标签学习"><a href="#4-2-2-标签学习" class="headerlink" title="4.2.2 标签学习"></a>4.2.2 标签学习</h2><ol><li><strong>文件标签：构成html最基本的标签</strong><ul><li><strong>html</strong>：html文档的根标签</li><li><strong>head</strong>：头标签。用于指定html文档的一些属性。引入外部的资源</li><li><strong>title</strong>：标题标签。</li><li><strong>body</strong>：体标签</li><li><strong><code>&lt;!DOCTYPE html&gt;</code></strong>：html5中定义该文档是html文档</li></ul></li><li><strong>文本标签：和文本有关的标签</strong><ul><li>注释：`<!-- 注释内容 -->``</li><li><strong><code>&lt;h1&gt; to &lt;h1&gt;</code></strong>：标题标签<ul><li><strong><code>h1~h6</code></strong>：字体大小逐渐递减</li></ul></li><li><strong><code>&lt;p&gt;</code></strong>：段落标签</li><li><strong><code>&lt;br&gt;</code></strong>：换行标签</li><li><strong><code>&lt;hr&gt;</code></strong>：展示一条水平线<ul><li>属性：<ul><li><code>color</code>：颜色</li><li><code>width</code>：宽度</li><li><code>size</code>：高度<ul><li><code>align</code>：对其方式</li><li><code>center</code>：居中</li><li><code>left</code>：左对齐</li><li><code>right</code>：右对齐</li></ul></li></ul></li></ul></li><li><strong><code>&lt;b&gt;</code></strong>：字体加粗</li><li><strong><code>&lt;i&gt;</code></strong>：字体斜体</li><li><strong><code>&lt;font&gt;</code></strong>：字体标签</li><li><strong><code>&lt;center&gt;</code></strong>：文本居中<ul><li>属性：<ul><li><code>color</code>：颜色</li><li><code>size</code>：大小</li><li><code>face</code>：字体</li></ul></li></ul></li><li>属性定义：<ul><li><code>color</code>：<ul><li>英文单词：red，green，blue</li><li><code>rgb</code>(值1，值2，值3)：值的范围：0~255  如  rgb(0,0,255)</li><li>#值1值2值3：值的范围：00~FF之间。如： #FF00FF</li></ul></li><li>width：<ul><li>数值：width=’20’ ,数值的单位，默认是 px(像素)</li><li>数值%：占比相对于父元素的比例</li></ul></li></ul></li></ul></li><li><strong>图片标签：</strong><ul><li>img：展示图片<ul><li>属性：<ul><li><strong><code>src</code></strong>：指定图片的位置</li></ul></li></ul></li></ul></li><li><strong>列表标签：</strong><ul><li>有序列表：<ul><li>ol：</li><li>li：</li></ul></li><li>无序列表：<ul><li>ul：</li><li>li：</li></ul></li></ul></li><li><strong>链接标签：</strong><ul><li>a：定义一个超链接<ul><li>属性：<ul><li><code>href</code>：指定访问资源的URL(统一资源定位符)</li><li><code>target</code>：指定打开资源的方式<ul><li><code>_self</code>：默认值，在当前页面打开</li><li><code>_blank</code>：在空白页面打开</li></ul></li></ul></li></ul></li></ul></li><li><strong>div和span：</strong><ul><li>div：每一个div占满一整行。块级标签</li><li>span：文本信息在一行展示，行内标签 内联标签</li></ul></li><li><strong>语义化标签</strong>：html5中为了提高程序的可读性，提供了一些标签。<ul><li><strong><code>&lt;header&gt;</code></strong>：页眉</li><li><strong><code>&lt;footer&gt;</code></strong>：页脚</li></ul></li><li><strong>表格标签：</strong><ul><li><strong>table：定义表格</strong><ul><li><strong><code>width</code></strong>：宽度</li><li><strong><code>border</code></strong>：边框</li><li><strong><code>cellpadding</code></strong>：定义内容和单元格的距离</li><li><strong><code>cellspacing</code></strong>：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条、</li><li><strong><code>bgcolor</code></strong>：背景色</li><li><strong><code>align</code></strong>：对齐方式</li></ul></li><li><strong>tr：定义行</strong><ul><li><strong><code>bgcolor</code></strong>：背景色</li><li><strong><code>align</code></strong>：对齐方式</li></ul></li><li><strong>td：定义单元格</strong><ul><li><strong><code>colspan</code></strong>：合并列</li><li><strong><code>rowspan</code></strong>：合并行</li></ul></li><li><strong>th：定义表头单元格</strong><ul><li><strong><code>&lt;caption&gt;</code></strong>：表格标题</li><li><strong><code>&lt;thead&gt;</code></strong>：表示表格的头部分</li><li><strong><code>&lt;tbody&gt;</code></strong>：表示表格的体部分</li><li><strong><code>&lt;tfoot&gt;</code></strong>：表示表格的脚部分</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第四章 1. web概念概述</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/04_1%20web%E6%A6%82%E5%BF%B5%E6%A6%82%E8%BF%B0.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-23-/Java/JavaWeb/04_1%20web%E6%A6%82%E5%BF%B5%E6%A6%82%E8%BF%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="4-1-web概念概述"><a href="#4-1-web概念概述" class="headerlink" title="4.1 web概念概述"></a>4.1 web概念概述</h1><ul><li><strong>JavaWeb</strong>：使用Java语言开发基于互联网的项目</li></ul><h2 id="4-1-1-软件架构："><a href="#4-1-1-软件架构：" class="headerlink" title="4.1.1 软件架构："></a>4.1.1 软件架构：</h2><ul><li><p>C/S: Client/Server 客户端/服务器端</p><ul><li>在用户本地有一个客户端程序，在远程有一个服务器端程序</li><li>如：QQ，迅雷…</li><li>优点：<br>1、用户体验好</li><li>缺点：<br>1、开发、安装，部署，维护 麻烦</li></ul></li><li><p>B/S: Browser/Server 浏览器/服务器端</p><ul><li>只需要一个浏览器，用户通过不同的网址(URL)，客户访问不同的服务器端程序</li><li>优点：<br>1、开发、安装，部署，维护 简单</li><li>缺点：<br>1、如果应用过大，用户的体验可能会受到影响<br>2、对硬件要求过高</li></ul></li></ul><h2 id="4-1-2-B-S架构详解"><a href="#4-1-2-B-S架构详解" class="headerlink" title="4.1.2 B/S架构详解"></a>4.1.2 B/S架构详解</h2><ul><li><p>资源分类：</p><ol><li>静态资源：<ul><li>使用静态网页开发技术发布的资源。</li><li>特点：<br>1、所有用户访问，得到的结果是一样的。<br>2、如：文本，图片，音频、视频, HTML,CSS,JavaScript</li><li>如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器。浏览器中内置了静态资源的解析引擎，可以展示静态资源</li></ul></li><li>动态资源：<ul><li>使用动态网页及时发布的资源。</li><li>特点：<br> 1、所有用户访问，得到的结果可能不一样。<br> 2、如：jsp/servlet,php,asp…<br> 3、如果用户请求的是动态资源，那么服务器会执行动态资源，转换为静态资源，再发送给浏览器</li></ul></li></ol></li><li><p>静态资源：</p><ul><li>HTML：用于搭建基础网页，展示页面的内容</li><li>CSS：用于美化页面，布局页面</li><li>JavaScript：控制页面的元素，让页面有一些动态的效果</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第三章 4.Spring JDBC</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/03_4%20Spring%20JDBC.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/03_4%20Spring%20JDBC.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-4-Spring-JDBC"><a href="#3-4-Spring-JDBC" class="headerlink" title="3.4 Spring JDBC"></a>3.4 Spring JDBC</h1><p>&emsp;&emsp;Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</p><h2 id="3-4-1-步骤："><a href="#3-4-1-步骤：" class="headerlink" title="3.4.1 步骤："></a>3.4.1 步骤：</h2><ol><li>导入jar包</li><li>创建<code>JdbcTemplate</code>对象。依赖于数据源<code>DataSource</code><ul><li><strong><code>JdbcTemplate template = new JdbcTemplate(ds);</code></strong></li></ul></li><li>调用JdbcTemplate的方法来完成CRUD的操作<ul><li><strong><code>update()</code></strong>：执行DML语句。增、删、改语句</li><li><strong><code>queryForMap()</code></strong>：查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个<code>map</code>集合<ul><li>注意：这个方法查询的结果集长度只能是1</li></ul></li><li><strong><code>queryForList()</code></strong>：查询结果将结果集封装为list集合<ul><li>注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</li></ul></li><li><strong><code>query()</code></strong>：查询结果，将结果封装为JavaBean对象<ul><li>query的参数：<code>RowMapper</code><br> 1、一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装<br> 2、<strong><code>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</code></strong></li></ul></li><li><strong><code>queryForObject</code></strong>：查询结果，将结果封装为对象<ul><li>一般用于聚合函数的查询</li></ul></li></ul></li></ol><h2 id="3-4-2-练习："><a href="#3-4-2-练习：" class="headerlink" title="3.4.2 练习："></a>3.4.2 练习：</h2><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><ol><li>修改1号数据的 salary 为 10000</li><li>添加一条记录</li><li>删除刚才添加的记录</li><li>查询id为1的记录，将其封装为Map集合</li><li>查询所有记录，将其封装为List</li><li>查询所有记录，将其封装为Emp对象的List集合</li><li>查询总记录数</li></ol><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.domain.Emp;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Junit单元测试，可以让方法独立执行</span></span><br><span class="line">    <span class="comment">//1. 获取JDBCTemplate对象</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 修改1号数据的 salary 为 10000</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//2. 定义sql</span></span><br><span class="line">        String sql = <span class="string">"update emp set salary = 10000 where id = 1001"</span>;</span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2. 添加一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into emp(id,ename,dept_id) values(?,?,?)"</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">1015</span>, <span class="string">"郭靖"</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.删除刚才添加的记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from emp where id = ?"</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">1015</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4.查询id为1001的记录，将其封装为Map集合</span></span><br><span class="line"><span class="comment">     * 注意：这个方法查询的结果集长度只能是1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from emp where id = ? or id = ?"</span>;</span><br><span class="line">        Map&lt;String, Object&gt; map = template.queryForMap(sql, <span class="number">1001</span>,<span class="number">1002</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">//&#123;id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20&#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5. 查询所有记录，将其封装为List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from emp"</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);</span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; stringObjectMap : list) &#123;</span><br><span class="line">            System.out.println(stringObjectMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from emp"</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> RowMapper&lt;Emp&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Emp <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                String ename = rs.getString(<span class="string">"ename"</span>);</span><br><span class="line">                <span class="keyword">int</span> job_id = rs.getInt(<span class="string">"job_id"</span>);</span><br><span class="line">                <span class="keyword">int</span> mgr = rs.getInt(<span class="string">"mgr"</span>);</span><br><span class="line">                Date joindate = rs.getDate(<span class="string">"joindate"</span>);</span><br><span class="line">                <span class="keyword">double</span> salary = rs.getDouble(<span class="string">"salary"</span>);</span><br><span class="line">                <span class="keyword">double</span> bonus = rs.getDouble(<span class="string">"bonus"</span>);</span><br><span class="line">                <span class="keyword">int</span> dept_id = rs.getInt(<span class="string">"dept_id"</span>);</span><br><span class="line"></span><br><span class="line">                emp.setId(id);</span><br><span class="line">                emp.setEname(ename);</span><br><span class="line">                emp.setJob_id(job_id);</span><br><span class="line">                emp.setMgr(mgr);</span><br><span class="line">                emp.setJoindate(joindate);</span><br><span class="line">                emp.setSalary(salary);</span><br><span class="line">                emp.setBonus(bonus);</span><br><span class="line">                emp.setDept_id(dept_id);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> emp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6_2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from emp"</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template</span><br><span class="line">            .query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Emp&gt;(Emp<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 7. 查询总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select count(id) from emp"</span>;</span><br><span class="line">        Long total = template.queryForObject(sql, Long<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第三章 3 数据库连接池</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/03_3%20%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/03_3%20%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-3-数据库连接池"><a href="#3-3-数据库连接池" class="headerlink" title="3.3 数据库连接池"></a>3.3 数据库连接池</h1><h2 id="3-3-1-概念"><a href="#3-3-1-概念" class="headerlink" title="3.3.1 概念"></a>3.3.1 概念</h2><p>&emsp;&emsp;其实就是一个容器(集合)，存放数据库连接的容器。</p><p>&emsp;&emsp;当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ol><li>节约资源</li><li>用户访问高效</li></ol><h2 id="3-3-2-实现"><a href="#3-3-2-实现" class="headerlink" title="3.3.2 实现"></a>3.3.2 实现</h2><ul><li>标准接口：<code>DataSource</code>===&gt;<code>javax.sql</code>包下的</li></ul><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><ul><li>获取连接：<code>getConnection()</code></li><li>归还连接：<code>Connection.close()</code>。如果连接对象<code>Connection</code>是从连接池中获取的，那么调用<code>Connection.close()</code>方法，则不会再关闭连接了。而是归还连接</li></ul><p>一般我们不去实现它，有数据库厂商来实现</p><ul><li><strong><code>C3P0</code></strong>：数据库连接池技术</li><li><strong><code>Druid</code></strong>：数据库连接池实现技术，由阿里巴巴提供的</li></ul><h2 id="3-3-3-C3P0：数据库连接池技术"><a href="#3-3-3-C3P0：数据库连接池技术" class="headerlink" title="3.3.3 C3P0：数据库连接池技术"></a>3.3.3 C3P0：数据库连接池技术</h2><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li><p>导入jar包 (两个) <code>c3p0-0.9.5.2.jar</code>、<code>mchange-commons-java-0.2.12.jar</code>，</p><ul><li>不要忘记导入数据库驱动jar包</li></ul></li><li><p>定义配置文件：</p><ul><li>名称：<code>c3p0.properties</code>或者<code>c3p0-config.xml</code></li><li>路径：直接将文件放在src目录下即可。</li></ul></li><li><p>创建核心对象——数据库连接池对象<code>ComboPooledDataSource</code></p></li><li><p>获取连接：<code>getConnection</code></p></li></ol><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建数据库连接池对象</span></span><br><span class="line">DataSource ds  = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"><span class="comment">//2. 获取连接对象</span></span><br><span class="line">Connection conn = ds.getConnection();</span><br></pre></td></tr></table></figure><h2 id="3-3-4-Druid：数据库连接池实现技术，由阿里巴巴提供的"><a href="#3-3-4-Druid：数据库连接池实现技术，由阿里巴巴提供的" class="headerlink" title="3.3.4 Druid：数据库连接池实现技术，由阿里巴巴提供的"></a>3.3.4 Druid：数据库连接池实现技术，由阿里巴巴提供的</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>导入jar包 <code>druid-1.0.9.jar</code></li><li>定义配置文件：<ul><li>是properties形式的</li><li>可以叫任意名称，可以放在任意目录下</li></ul></li><li>加载配置文件。Properties</li><li>获取数据库连接池对象：通过工厂来来获取  <code>DruidDataSourceFactory</code></li><li>获取连接：<code>getConnection</code></li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.加载配置文件</span></span><br><span class="line">Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream("druid.properties");</span><br><span class="line">pro.load(is);</span><br><span class="line"><span class="comment">//4.获取连接池对象</span></span><br><span class="line">DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"><span class="comment">//5.获取连接</span></span><br><span class="line">Connection conn = ds.getConnection();</span><br></pre></td></tr></table></figure><h3 id="定义工具类"><a href="#定义工具类" class="headerlink" title="定义工具类"></a>定义工具类</h3><ol><li>定义一个类 JDBCUtils</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法<ol><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池的方法</li></ol></li></ol><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.定义成员变量 DataSource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds ;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载配置文件</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            pro.load(JDBCUtils<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span></span><br><span class="line">                     .getResourceAsStream("druid.properties"));</span><br><span class="line">            <span class="comment">//2.获取DataSource</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*if(stmt != null)&#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                stmt.close();</span></span><br><span class="line"><span class="comment">            &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        if(conn != null)&#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                conn.close();//归还连接</span></span><br><span class="line"><span class="comment">            &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        close(<span class="keyword">null</span>,stmt,conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs , Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();<span class="comment">//归还连接</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第三章 2.JDBCUtils</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/03_2%20JDBCUtils.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/03_2%20JDBCUtils.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-2-JDBCUtils"><a href="#3-2-JDBCUtils" class="headerlink" title="3.2 JDBCUtils"></a>3.2 JDBCUtils</h1><h2 id="3-2-1-JDBCUtils概述"><a href="#3-2-1-JDBCUtils概述" class="headerlink" title="3.2.1 JDBCUtils概述"></a>3.2.1 JDBCUtils概述</h2><ul><li><p>目的：简化书写</p></li><li><p>分析：</p><ol><li><p>注册驱动也抽取</p></li><li><p>抽取一个方法获取连接对象</p><ul><li>需求：不想传递参数（麻烦），还得保证工具类的通用性。</li><li>解决：配置文件<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.properties</span></span><br><span class="line">    <span class="attr">url</span>=<span class="string"></span></span><br><span class="line">    <span class="attr">user</span>=<span class="string"></span></span><br><span class="line">    <span class="attr">password</span>=<span class="string"></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>抽取一个方法释放资源</p></li></ol></li><li><p>代码实现：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取资源文件，获取值。</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 创建Properties集合类。</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取src路径下的文件的方式---&gt;ClassLoader 类加载器</span></span><br><span class="line">            ClassLoader classLoader = JDBCUtils<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">            URL res  = classLoader.getResource(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">            String path = res.getPath();</span><br><span class="line">            <span class="comment">//D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties</span></span><br><span class="line">            System.out.println(path);</span><br><span class="line">            <span class="comment">//2. 加载文件</span></span><br><span class="line">            <span class="comment">/** pro.load(new FileReader("</span></span><br><span class="line"><span class="comment">               * D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties"));</span></span><br><span class="line"><span class="comment">               */</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line">            <span class="comment">//3. 获取数据，赋值</span></span><br><span class="line">            url = pro.getProperty(<span class="string">"url"</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">"user"</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">"password"</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">            <span class="comment">//4. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取连接</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs,Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-2-练习："><a href="#3-2-2-练习：" class="headerlink" title="3.2.2 练习："></a>3.2.2 练习：</h2><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><ol><li>通过键盘录入用户名和密码</li><li>判断用户是否登录成功<ul><li><strong><code>select * from user where username = &quot;&quot; and password = &quot;&quot;;</code></strong></li><li>如果这个sql有查询结果，则成功，反之，则失败</li></ul></li></ol><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li><p>创建数据库表 user</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span>(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    username <span class="built_in">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    <span class="keyword">PASSWORD</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span> <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'zhangsan'</span>,<span class="string">'123'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span> <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'lisi'</span>,<span class="string">'234'</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.键盘录入，接受用户名和密码</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入用户名："</span>);</span><br><span class="line">        String username = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入密码："</span>);</span><br><span class="line">        String password = sc.nextLine();</span><br><span class="line">        <span class="comment">//2.调用方法</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">new</span> JDBCDemo9().login(username, password);</span><br><span class="line">        <span class="comment">//3.判断结果，输出不同语句</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            System.out.println(<span class="string">"登录成功！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"用户名或密码错误！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String username ,String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="keyword">null</span> || password == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//连接数据库判断是否登录成功</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt =  <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn =  JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            String sql = <span class="string">"select * from user where username = '"</span></span><br><span class="line">                + username + <span class="string">"' and password = '"</span> + password+<span class="string">"' "</span>;</span><br><span class="line">            <span class="comment">//3.获取执行sql的对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//4.执行查询</span></span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">//5.判断</span></span><br><span class="line">            <span class="comment">/* if(rs.next())&#123;//如果有下一行，则返回true</span></span><br><span class="line"><span class="comment">                                return true;</span></span><br><span class="line"><span class="comment">                            &#125;else&#123;</span></span><br><span class="line"><span class="comment">                                return false;</span></span><br><span class="line"><span class="comment">                            &#125;*/</span></span><br><span class="line">            <span class="keyword">return</span> rs.next();<span class="comment">//如果有下一行，则返回true</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(rs,stmt,conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="3-2-3-JDBC控制事务："><a href="#3-2-3-JDBC控制事务：" class="headerlink" title="3.2.3 JDBC控制事务："></a>3.2.3 JDBC控制事务：</h2><ol><li><p>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</p></li><li><p>操作：</p><ol><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ol></li><li><p>使用Connection对象来管理事务</p><ul><li>开启事务：<strong><code>setAutoCommit(boolean autoCommit)</code></strong>：调用该方法设置参数为false，即开启事务<ul><li>在执行sql之前开启事务</li></ul></li><li>提交事务：<code>commit()</code><ul><li>当所有sql都执行完提交事务</li></ul></li><li>回滚事务：<code>rollback()</code><ul><li>在catch中回滚事务</li></ul></li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt1 = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取连接</span></span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            <span class="comment">//2.1 张三 - 500</span></span><br><span class="line">            String sql1 = <span class="string">"update account set balance = balance - ? "</span></span><br><span class="line">                           + <span class="string">"where id = ?"</span>;</span><br><span class="line">            <span class="comment">//2.2 李四 + 500</span></span><br><span class="line">            String sql2 = <span class="string">"update account set balance = balance + ? "</span></span><br><span class="line">                           + <span class="string">"where id = ?"</span>;</span><br><span class="line">            <span class="comment">//3.获取执行sql对象</span></span><br><span class="line">            pstmt1 = conn.prepareStatement(sql1);</span><br><span class="line">            pstmt2 = conn.prepareStatement(sql2);</span><br><span class="line">            <span class="comment">//4. 设置参数</span></span><br><span class="line">            pstmt1.setDouble(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">            pstmt1.setInt(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            pstmt2.setDouble(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">            pstmt2.setInt(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//5.执行sql</span></span><br><span class="line">            pstmt1.executeUpdate();</span><br><span class="line">            <span class="comment">// 手动制造异常</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            pstmt2.executeUpdate();</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//事务回滚</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    conn.rollback();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(pstmt1,conn);</span><br><span class="line">            JDBCUtils.close(pstmt2,<span class="keyword">null</span>);</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第三章 1.JDBC</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/03_1%20JDBC.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/03_1%20JDBC.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-1-JDBC"><a href="#3-1-JDBC" class="headerlink" title="3.1 JDBC"></a>3.1 JDBC</h1><h2 id="3-1-1-概念"><a href="#3-1-1-概念" class="headerlink" title="3.1.1 概念"></a>3.1.1 概念</h2><ul><li><p><strong>概念：</strong><code>Java DataBase Connectivity</code>  即Java 数据库连接， Java语言操作数据库</p></li><li><p><strong>JDBC本质：</strong>其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</p></li></ul><h2 id="3-1-2-快速入门"><a href="#3-1-2-快速入门" class="headerlink" title="3.1.2 快速入门"></a>3.1.2 快速入门</h2><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>导入驱动jar包：<code>mysql-connector-java-5.1.37-bin.jar</code><ol><li>复制<code>mysql-connector-java-5.1.37-bin.jar</code>到项目的<code>libs</code>目录下</li><li>右键===&gt;<code>Add As Library</code></li></ol></li><li>注册驱动</li><li>获取数据库连接对象 <code>Connection</code></li><li>定义sql</li><li>获取执行sql语句的对象 <code>Statement</code></li><li>执行sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ol><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 导入驱动jar包</span></span><br><span class="line"><span class="comment">//2.注册驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//3.获取数据库连接对象</span></span><br><span class="line">Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db3"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line"><span class="comment">//4.定义sql语句</span></span><br><span class="line">String sql = <span class="string">"update account set balance = 500 where id = 1"</span>;</span><br><span class="line"><span class="comment">//5.获取执行sql的对象 Statement</span></span><br><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line"><span class="comment">//6.执行sql</span></span><br><span class="line"><span class="keyword">int</span> count = stmt.executeUpdate(sql);</span><br><span class="line"><span class="comment">//7.处理结果</span></span><br><span class="line">System.out.println(count);</span><br><span class="line"><span class="comment">//8.释放资源</span></span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><h2 id="3-1-3-详解各个对象"><a href="#3-1-3-详解各个对象" class="headerlink" title="3.1.3 详解各个对象"></a>3.1.3 详解各个对象</h2><h3 id="3-1-3-1-DriverManager："><a href="#3-1-3-1-DriverManager：" class="headerlink" title="3.1.3.1 DriverManager："></a>3.1.3.1 DriverManager：</h3><p><strong>驱动管理对象</strong></p><ol><li><p><strong>注册驱动</strong>：告诉程序该使用哪一个数据库驱动jar</p><ul><li><strong><code>static void registerDriver(Driver driver)</code></strong>：注册与给定的驱动程序 DriverManager </li></ul><p><strong>写代码使用：</strong><code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code></p><ul><li><p>通过查看源码发现：在<code>com.mysql.jdbc.Driver</code>类中存在静态代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        java.sql.DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException E) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't register driver!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：<br>&emsp;&emsp;mysql5之后的驱动jar包可以省略注册驱动的步骤。</p></blockquote></li><li><p><strong>获取数据库连接：</strong></p><ul><li><p><strong>方法</strong>：</p><p><code>static Connection getConnection(String url, String user, String password)</code></p></li><li><p><strong>参数：</strong></p><ol><li>url：指定连接的路径<ul><li>语法：<code>jdbc:mysql://ip地址(域名):端口号/数据库名称</code></li><li>例子：<code>jdbc:mysql://localhost:3306/db3</code></li><li>细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：<code>jdbc:mysql:///数据库名称</code></li></ul></li><li>user：用户名</li><li>password：密码 </li></ol></li></ul></li></ol><h3 id="3-1-3-2-Connection："><a href="#3-1-3-2-Connection：" class="headerlink" title="3.1.3.2 Connection："></a>3.1.3.2 Connection：</h3><p><strong>数据库连接对象</strong></p><ol><li>获取执行sql 的对象<ul><li><strong><code>Statement createStatement()</code></strong></li><li><strong><code>PreparedStatement prepareStatement(String sql)</code></strong></li></ul></li><li>管理事务：<ul><li>开启事务：<code>setAutoCommit(boolean autoCommit)</code>：调用该方法设置参数为<code>false</code>，即开启事务</li><li>提交事务：<code>commit()</code></li><li>回滚事务：<code>rollback()</code></li></ul></li></ol><h3 id="3-1-3-3-Statement："><a href="#3-1-3-3-Statement：" class="headerlink" title="3.1.3.3 Statement："></a>3.1.3.3 Statement：</h3><p><strong>执行sql的对象</strong></p><h4 id="执行sql"><a href="#执行sql" class="headerlink" title="执行sql"></a>执行sql</h4><ul><li><p><strong><code>boolean execute(String sql)</code></strong>：可以执行任意的sql 了解 </p></li><li><p><strong><code>int executeUpdate(String sql)</code></strong>：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句</p><ul><li>返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</li></ul></li><li><p><strong><code>ResultSet executeQuery(String sql)</code></strong>：执行DQL（select)语句</p></li></ul><h4 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h4><ul><li>account表 添加一条记录</li><li>account表 修改记录</li><li>account表 删除一条记录</li></ul><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//1. 注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    <span class="comment">//2. 定义sql</span></span><br><span class="line">    String sql = <span class="string">"insert into account values(null,'王五',3000)"</span>;</span><br><span class="line">    <span class="comment">//3.获取Connection对象</span></span><br><span class="line">    conn = DriverManager.getConnection(<span class="string">"jdbc:mysql:///db3"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">//4.获取执行sql的对象 Statement</span></span><br><span class="line">    stmt = conn.createStatement();</span><br><span class="line">    <span class="comment">//5.执行sql</span></span><br><span class="line">    <span class="keyword">int</span> count = stmt.executeUpdate(sql);<span class="comment">//影响的行数</span></span><br><span class="line">    <span class="comment">//6.处理结果</span></span><br><span class="line">    System.out.println(count);</span><br><span class="line">    <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加成功！"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加失败！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//stmt.close();</span></span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    <span class="comment">//避免空指针异常</span></span><br><span class="line">    <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-3-4-ResultSet："><a href="#3-1-3-4-ResultSet：" class="headerlink" title="3.1.3.4 ResultSet："></a>3.1.3.4 ResultSet：</h3><p><strong>结果集对象, 封装查询结果</strong></p><ul><li><strong><code>boolean next()</code></strong>：游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true</li><li><strong><code>getXxx(参数)</code></strong>：获取数据<ul><li>Xxx：代表数据类型如：<code>int getInt()</code>，<code>String getString()</code></li><li>参数：<ol><li>int：代表列的编号,从1开始，如：<code>getString(1)</code></li><li>String：代表列名称。如：<code>getDouble(&quot;balance&quot;)</code><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4></li></ol></li></ul></li></ul><ul><li><p>使用步骤：</p><ol><li>游标向下移动一行</li><li>判断是否有数据</li><li>获取数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环判断游标是否是最后一行末尾。</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    <span class="comment">//6.2 获取数据</span></span><br><span class="line">    <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">    String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">    <span class="keyword">double</span> balance = rs.getDouble(<span class="number">3</span>);</span><br><span class="line">    System.out.println(id + <span class="string">"---"</span> + name + <span class="string">"---"</span> + balance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="练习：-1"><a href="#练习：-1" class="headerlink" title="练习："></a>练习：</h4><ul><li>定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。</li></ul><ol><li>定义<code>Emp</code>类</li><li>定义方法 <code>public List&lt;Emp&gt; findAll(){}</code></li><li>实现方法<code>select * from emp;</code></li></ol><h3 id="3-1-3-5-PreparedStatement："><a href="#3-1-3-5-PreparedStatement：" class="headerlink" title="3.1.3.5. PreparedStatement："></a>3.1.3.5. PreparedStatement：</h3><p><strong>执行sql的对象</strong></p><ol><li><p>SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题</p><ol><li>输入用户随便，输入密码：<code>a&#39; or &#39;a&#39; = &#39;a</code></li><li><code>sql：select * from user where username = &#39;fhdsjkf&#39; and password = &#39;a&#39; or</code><br/><code>&#39;a&#39; = &#39;a&#39;</code></li></ol></li><li><p>解决sql注入问题：使用<code>PreparedStatement</code>对象来解决</p></li><li><p>预编译的SQL：参数使用<code>?</code>作为占位符</p></li><li><p>步骤：</p><ol><li>导入驱动jar包 <code>mysql-connector-java-5.1.37-bin.jar</code></li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql<ul><li>注意：sql的参数使用？作为占位符。<br/>如：<code>select * from user where username = ? and password = ?;</code></li></ul></li><li>获取执行sql语句的对象<br/><code>PreparedStatement  Connection.prepareStatement(String sql)</code></li><li>给<code>？</code>赋值：<ul><li>方法：<code>setXxx(参数1,参数2)</code></li><li>参数1：<code>？</code>的位置编号 从1开始</li><li>参数2：<code>？</code>的值</li></ul></li><li>执行sql，接受返回结果，不需要传递sql语句</li><li>处理结果</li><li>释放资源</li></ol></li><li><p>注意：后期都会使用<code>PreparedStatement</code>来完成增删改查的所有操作</p><ol><li>可以防止SQL注入</li><li>效率更高</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第二章 9.DCL</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_9%20DCL.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_9%20DCL.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-9-DCL用户管理"><a href="#2-9-DCL用户管理" class="headerlink" title="2.9 DCL用户管理"></a>2.9 DCL用户管理</h1><h2 id="2-9-1-管理用户"><a href="#2-9-1-管理用户" class="headerlink" title="2.9.1 管理用户"></a>2.9.1 管理用户</h2><ol><li><p>添加用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'密码'</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--方法一</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">USER</span> <span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">'新密码'</span>) <span class="keyword">WHERE</span> <span class="keyword">USER</span> = <span class="string">'用户名'</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">USER</span> <span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">'abc'</span>) <span class="keyword">WHERE</span> <span class="keyword">USER</span> = <span class="string">'lisi'</span>;</span><br><span class="line"><span class="comment">--方法二</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'新密码'</span>);</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'123'</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>mysql中忘记了root用户的密码？</strong></p><ol><li>cmd – &gt; net stop mysql 停止mysql服务<ul><li>需要管理员运行该cmd</li></ul></li><li>使用无验证方式启动mysql服务： mysqld –skip-grant-tables</li><li>打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功</li><li>use mysql;</li><li>update user set password = password(‘你的新密码’) where user = ‘root’;</li><li>关闭两个窗口</li><li>打开任务管理器，手动结束mysqld.exe 的进程</li><li>启动mysql服务</li><li>使用新密码登录。</li></ol></blockquote></li><li><p>查询用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 切换到mysql数据库</span></span><br><span class="line"><span class="keyword">USE</span> myql;</span><br><span class="line"><span class="comment">-- 2. 查询user表</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USER</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-9-2-权限管理"><a href="#2-9-2-权限管理" class="headerlink" title="2.9.2 权限管理"></a>2.9.2 权限管理</h2><ul><li>通配符： <code>%</code>表示可以在任意主机使用用户登录数据库</li></ul><ol><li><p>查询权限：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="string">'lisi'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure></li><li><p>授予权限：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 授予权限</span></span><br><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br><span class="line"><span class="comment">-- 给张三用户授予所有权限，在任意数据库任意表上</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'zhangsan'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure></li><li><p>撤销权限：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 撤销权限：</span></span><br><span class="line"><span class="keyword">revoke</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">from</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">UPDATE</span> <span class="keyword">ON</span> db3.<span class="string">`account`</span> <span class="keyword">FROM</span> <span class="string">'lisi'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第二章 8.MySQL事务</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_8%20MySQL%E4%BA%8B%E5%8A%A1.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_8%20MySQL%E4%BA%8B%E5%8A%A1.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-8-MySQL事务"><a href="#2-8-MySQL事务" class="headerlink" title="2.8 MySQL事务"></a>2.8 MySQL事务</h1><h2 id="2-8-1-事务基本介绍"><a href="#2-8-1-事务基本介绍" class="headerlink" title="2.8.1 事务基本介绍"></a>2.8.1 事务基本介绍</h2><ol><li><p>概念：</p><ul><li>如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</li></ul></li><li><p>操作：</p><ol><li>开启事务： start transaction;</li><li>回滚：rollback;</li><li>提交：commit;</li></ol></li><li><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">account</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">    balance <span class="keyword">DOUBLE</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span> (<span class="keyword">NAME</span>, balance) <span class="keyword">VALUES</span> (<span class="string">'zhangsan'</span>, <span class="number">1000</span>), (<span class="string">'lisi'</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">account</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> balance = <span class="number">1000</span>;</span><br><span class="line"><span class="comment">-- 张三给李四转账 500 元</span></span><br><span class="line"><span class="comment">-- 0. 开启事务</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="comment">-- 1. 张三账户 -500</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> balance = balance - <span class="number">500</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="comment">-- 2. 李四账户 +500</span></span><br><span class="line"><span class="comment">-- 出错了...</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> balance = balance + <span class="number">500</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'lisi'</span>;</span><br><span class="line"><span class="comment">-- 发现执行没有问题，提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 发现出问题了，回滚事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure></li><li><p>MySQL数据库中事务默认自动提交</p><ul><li>事务提交的两种方式：<ul><li>自动提交：<ul><li>mysql就是自动提交的</li><li>一条DML(增删改)语句会自动提交一次事务。</li></ul></li><li>手动提交：<ul><li>Oracle 数据库默认是手动提交事务</li><li>需要先开启事务，再提交</li></ul></li></ul></li><li>修改事务的默认提交方式：<ul><li>查看事务的默认提交方式：<code>SELECT @@autocommit;</code> – 1 代表自动提交  0 代表手动提交</li><li>修改默认提交方式： <code>set @@autocommit = 0</code>;</li></ul></li></ul></li></ol><h2 id="2-8-2-事务的特征"><a href="#2-8-2-事务的特征" class="headerlink" title="2.8.2 事务的特征"></a>2.8.2 事务的特征</h2><ol><li>原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。</li><li>持久性：当事务提交或回滚后，数据库会持久化的保存数据。</li><li>隔离性：多个事务之间。相互独立。</li><li>一致性：事务操作前后，数据总量不变</li></ol><h2 id="2-8-3-事务的隔离级别"><a href="#2-8-3-事务的隔离级别" class="headerlink" title="2.8.3 事务的隔离级别"></a>2.8.3 事务的隔离级别</h2><h3 id="2-8-3-1-概念"><a href="#2-8-3-1-概念" class="headerlink" title="2.8.3.1 概念"></a>2.8.3.1 概念</h3><p>多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</p><h3 id="2-8-3-2-存在问题"><a href="#2-8-3-2-存在问题" class="headerlink" title="2.8.3.2 存在问题"></a>2.8.3.2 存在问题</h3><ol><li>脏读：一个事务，读取到另一个事务中没有提交的数据</li><li>不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样。</li><li>幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。</li></ol><h3 id="2-8-3-3-隔离级别"><a href="#2-8-3-3-隔离级别" class="headerlink" title="2.8.3.3 隔离级别"></a>2.8.3.3 隔离级别</h3><ol><li><code>read uncommitted</code>：读未提交<ul><li>产生的问题：脏读、不可重复读、幻读</li></ul></li><li><code>read committed</code>：读已提交 （Oracle）<ul><li>产生的问题：不可重复读、幻读</li></ul></li><li><code>repeatable read</code>：可重复读 （MySQL默认）<ul><li>产生的问题：幻读</li></ul></li><li><code>serializable</code>：串行化<ul><li>可以解决所有的问题</li></ul></li></ol><ul><li>注意：隔离级别从小到大安全性越来越高，但是效率越来越低</li><li>数据库查询隔离级别：<ul><li><code>select @@tx_isolation;</code></li></ul></li><li>数据库设置隔离级别：<ul><li><code>set global transaction isolation level</code> 级别字符串;</li></ul></li></ul><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> uncommitted;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="comment">-- 转账操作</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> balance = balance - <span class="number">500</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> balance = balance + <span class="number">500</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第二章 7.MySQL多表操作</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_7%20MySQL%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_7%20MySQL%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-7-MySQL多表操作"><a href="#2-7-MySQL多表操作" class="headerlink" title="2.7 MySQL多表操作"></a>2.7 MySQL多表操作</h1><h2 id="2-7-1-查询语法"><a href="#2-7-1-查询语法" class="headerlink" title="2.7.1 查询语法"></a>2.7.1 查询语法</h2><ul><li><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    列名列表</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    表名列表</span><br><span class="line">where....</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>准备sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建部门表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept (<span class="keyword">NAME</span>) <span class="keyword">VALUES</span> (<span class="string">'开发部'</span>),(<span class="string">'市场部'</span>),(<span class="string">'财务部'</span>);</span><br><span class="line"><span class="comment"># 创建员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">    gender <span class="built_in">CHAR</span>(<span class="number">1</span>), <span class="comment">-- 性别</span></span><br><span class="line">    salary <span class="keyword">DOUBLE</span>, <span class="comment">-- 工资</span></span><br><span class="line">    join_date <span class="built_in">DATE</span>, <span class="comment">-- 入职日期</span></span><br><span class="line">    dept_id <span class="built_in">INT</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (dept_id) <span class="keyword">REFERENCES</span> dept(<span class="keyword">id</span>) <span class="comment">-- 外键，关联部门表(部门表的主键)</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(<span class="keyword">NAME</span>,gender,salary,join_date,dept_id) <span class="keyword">VALUES</span>(<span class="string">'孙悟空'</span>,<span class="string">'男'</span>,<span class="number">7200</span>,<span class="string">'2013-02-24'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(<span class="keyword">NAME</span>,gender,salary,join_date,dept_id) <span class="keyword">VALUES</span>(<span class="string">'猪八戒'</span>,<span class="string">'男'</span>,<span class="number">3600</span>,<span class="string">'2010-12-02'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(<span class="keyword">NAME</span>,gender,salary,join_date,dept_id) <span class="keyword">VALUES</span>(<span class="string">'唐僧'</span>,<span class="string">'男'</span>,<span class="number">9000</span>,<span class="string">'2008-08-08'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(<span class="keyword">NAME</span>,gender,salary,join_date,dept_id) <span class="keyword">VALUES</span>(<span class="string">'白骨精'</span>,<span class="string">'女'</span>,<span class="number">5000</span>,<span class="string">'2015-10-07'</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(<span class="keyword">NAME</span>,gender,salary,join_date,dept_id) <span class="keyword">VALUES</span>(<span class="string">'蜘蛛精'</span>,<span class="string">'女'</span>,<span class="number">4500</span>,<span class="string">'2011-03-14'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>笛卡尔积：</p><ul><li>有两个集合A,B .取这两个集合的所有组成情况。</li><li>要完成多表查询，需要消除无用的数据</li></ul></li></ul><h2 id="2-7-2-多表查询的分类"><a href="#2-7-2-多表查询的分类" class="headerlink" title="2.7.2 多表查询的分类"></a>2.7.2 多表查询的分类</h2><h3 id="2-7-2-1-内连接查询："><a href="#2-7-2-1-内连接查询：" class="headerlink" title="2.7.2.1 内连接查询："></a>2.7.2.1 内连接查询：</h3><ul><li><p>隐式内连接：使用where条件消除无用数据</p><ul><li><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有员工信息和对应的部门信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp,dept <span class="keyword">WHERE</span> emp.<span class="string">`dept_id`</span> = dept.<span class="string">`id`</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工表的名称，性别。部门表的名称</span></span><br><span class="line"><span class="keyword">SELECT</span> emp.name,emp.gender,dept.name <span class="keyword">FROM</span> emp,dept <span class="keyword">WHERE</span> emp.<span class="string">`dept_id`</span> = dept.<span class="string">`id`</span>;</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t1.name, <span class="comment">-- 员工表的姓名</span></span><br><span class="line">    t1.gender,<span class="comment">-- 员工表的性别</span></span><br><span class="line">    t2.name <span class="comment">-- 部门表的名称</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    emp t1,</span><br><span class="line">    dept t2</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    t1.<span class="string">`dept_id`</span> = t2.<span class="string">`id`</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>显式内连接：</p><ul><li><p>语法： select 字段列表 from 表名1 [inner] join 表名2 on 条件</p></li><li><p>例如：</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* SELECT * FROM emp INNER JOIN dept ON emp.`dept_id` = dept.`id`;</span><br><span class="line">* SELECT * FROM emp JOIN dept ON emp.`dept_id` = dept.`id`;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>内连接查询：</p><ol><li>从哪些表中查询数据</li><li>条件是什么</li><li>查询哪些字段</li></ol></li></ul><h3 id="2-7-2-2-外链接查询："><a href="#2-7-2-2-外链接查询：" class="headerlink" title="2.7.2.2 外链接查询："></a>2.7.2.2 外链接查询：</h3><ol><li><p>左外连接：</p><ul><li><p>语法：select 字段列表 from 表1 left [outer] join 表2 on 条件；</p></li><li><p>查询的是左表所有数据以及其交集部分。</p></li><li><p>例子：</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</span></span><br><span class="line"><span class="keyword">SELECT</span> t1.*,t2.<span class="string">`name`</span> <span class="keyword">FROM</span> emp t1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept t2 <span class="keyword">ON</span> t1.<span class="string">`dept_id`</span> = t2.<span class="string">`id`</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>右外连接：</p><ul><li><p>语法：select 字段列表 from 表1 right [outer] join 表2 on 条件；</p></li><li><p>查询的是右表所有数据以及其交集部分。</p></li><li><p>例子：</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dept t2 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> emp t1 <span class="keyword">ON</span> t1.<span class="string">`dept_id`</span> = t2.<span class="string">`id`</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="2-7-2-3-子查询："><a href="#2-7-2-3-子查询：" class="headerlink" title="2.7.2.3 子查询："></a>2.7.2.3 子查询：</h3><ul><li><p>概念：查询中嵌套查询，称嵌套查询为子查询。</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询工资最高的员工信息</span></span><br><span class="line"><span class="comment">-- 1 查询最高的工资是多少 9000</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 2 查询员工信息，并且工资等于9000的</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.<span class="string">`salary`</span> = <span class="number">9000</span>;</span><br><span class="line"><span class="comment">-- 一条sql就完成这个操作。子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.<span class="string">`salary`</span> = (<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> emp);s</span><br></pre></td></tr></table></figure></li><li><p>子查询不同情况</p><ol><li><p>子查询的结果是单行单列的：</p><ul><li><p>子查询可以作为条件，使用运算符去判断。 运算符： &gt; &gt;= &lt; &lt;= =</p></li><li><p>– 查询员工工资小于平均工资的人</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.salary &lt; (<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) <span class="keyword">FROM</span> emp);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>子查询的结果是多行单列的：</p><ul><li><p>子查询可以作为条件，使用运算符in来判断</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询'财务部'和'市场部'所有的员工信息</span></span><br><span class="line"> <span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'财务部'</span> <span class="keyword">OR</span> <span class="keyword">NAME</span> = <span class="string">'市场部'</span>;</span><br><span class="line"> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_id = <span class="number">3</span> <span class="keyword">OR</span> dept_id = <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'财务部'</span> <span class="keyword">OR</span> <span class="keyword">NAME</span> = <span class="string">'市场部'</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>子查询的结果是多行多列的：</p><ul><li><p>子查询可以作为一张虚拟表参与查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</span></span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dept t1 ,(<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.<span class="string">`join_date`</span> &gt; <span class="string">'2011-11-11'</span>) t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.id = t2.dept_id;</span><br><span class="line"><span class="comment">-- 普通内连接</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp t1,dept t2 <span class="keyword">WHERE</span> t1.<span class="string">`dept_id`</span> = t2.<span class="string">`id`</span> <span class="keyword">AND</span> t1.<span class="string">`join_date`</span> &gt;  <span class="string">'2011-11-11'</span></span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><h2 id="2-7-3-多表查询练习"><a href="#2-7-3-多表查询练习" class="headerlink" title="2.7.3 多表查询练习"></a>2.7.3 多表查询练习</h2><ul><li>多表准备</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 部门表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> PRIMARY <span class="keyword">KEY</span>, <span class="comment">-- 部门id</span></span><br><span class="line">    dname <span class="built_in">VARCHAR</span>(<span class="number">50</span>), <span class="comment">-- 部门名称</span></span><br><span class="line">    loc <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="comment">-- 部门所在地</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加4个部门</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(<span class="keyword">id</span>,dname,loc) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">10</span>,<span class="string">'教研部'</span>,<span class="string">'北京'</span>),</span><br><span class="line">(<span class="number">20</span>,<span class="string">'学工部'</span>,<span class="string">'上海'</span>),</span><br><span class="line">(<span class="number">30</span>,<span class="string">'销售部'</span>,<span class="string">'广州'</span>),</span><br><span class="line">(<span class="number">40</span>,<span class="string">'财务部'</span>,<span class="string">'深圳'</span>);</span><br><span class="line"><span class="comment">-- 职务表，职务名称，职务描述</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> job (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    jname <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    description <span class="built_in">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加4个职务</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> job (<span class="keyword">id</span>, jname, description) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'董事长'</span>, <span class="string">'管理整个公司，接单'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'经理'</span>, <span class="string">'管理部门员工'</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'销售员'</span>, <span class="string">'向客人推销产品'</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'文员'</span>, <span class="string">'使用办公软件'</span>);</span><br><span class="line"><span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>, <span class="comment">-- 员工id</span></span><br><span class="line">    ename <span class="built_in">VARCHAR</span>(<span class="number">50</span>), <span class="comment">-- 员工姓名</span></span><br><span class="line">    job_id <span class="built_in">INT</span>, <span class="comment">-- 职务id</span></span><br><span class="line">    mgr <span class="built_in">INT</span> , <span class="comment">-- 上级领导</span></span><br><span class="line">    joindate <span class="built_in">DATE</span>, <span class="comment">-- 入职日期</span></span><br><span class="line">    salary <span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>), <span class="comment">-- 工资</span></span><br><span class="line">    bonus <span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>), <span class="comment">-- 奖金</span></span><br><span class="line">    dept_id <span class="built_in">INT</span>, <span class="comment">-- 所在部门编号</span></span><br><span class="line">    <span class="keyword">CONSTRAINT</span> emp_jobid_ref_job_id_fk <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (job_id) <span class="keyword">REFERENCES</span> job (<span class="keyword">id</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> emp_deptid_ref_dept_id_fk <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (dept_id) <span class="keyword">REFERENCES</span> dept (<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加员工</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(<span class="keyword">id</span>,ename,job_id,mgr,joindate,salary,bonus,dept_id) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1001</span>,<span class="string">'孙悟空'</span>,<span class="number">4</span>,<span class="number">1004</span>,<span class="string">'2000-12-17'</span>,<span class="string">'8000.00'</span>,<span class="literal">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1002</span>,<span class="string">'卢俊义'</span>,<span class="number">3</span>,<span class="number">1006</span>,<span class="string">'2001-02-20'</span>,<span class="string">'16000.00'</span>,<span class="string">'3000.00'</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1003</span>,<span class="string">'林冲'</span>,<span class="number">3</span>,<span class="number">1006</span>,<span class="string">'2001-02-22'</span>,<span class="string">'12500.00'</span>,<span class="string">'5000.00'</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1004</span>,<span class="string">'唐僧'</span>,<span class="number">2</span>,<span class="number">1009</span>,<span class="string">'2001-04-02'</span>,<span class="string">'29750.00'</span>,<span class="literal">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1005</span>,<span class="string">'李逵'</span>,<span class="number">4</span>,<span class="number">1006</span>,<span class="string">'2001-09-28'</span>,<span class="string">'12500.00'</span>,<span class="string">'14000.00'</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1006</span>,<span class="string">'宋江'</span>,<span class="number">2</span>,<span class="number">1009</span>,<span class="string">'2001-05-01'</span>,<span class="string">'28500.00'</span>,<span class="literal">NULL</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1007</span>,<span class="string">'刘备'</span>,<span class="number">2</span>,<span class="number">1009</span>,<span class="string">'2001-09-01'</span>,<span class="string">'24500.00'</span>,<span class="literal">NULL</span>,<span class="number">10</span>),</span><br><span class="line">(<span class="number">1008</span>,<span class="string">'猪八戒'</span>,<span class="number">4</span>,<span class="number">1004</span>,<span class="string">'2007-04-19'</span>,<span class="string">'30000.00'</span>,<span class="literal">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1009</span>,<span class="string">'罗贯中'</span>,<span class="number">1</span>,<span class="literal">NULL</span>,<span class="string">'2001-11-17'</span>,<span class="string">'50000.00'</span>,<span class="literal">NULL</span>,<span class="number">10</span>),</span><br><span class="line">(<span class="number">1010</span>,<span class="string">'吴用'</span>,<span class="number">3</span>,<span class="number">1006</span>,<span class="string">'2001-09-08'</span>,<span class="string">'15000.00'</span>,<span class="string">'0.00'</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1011</span>,<span class="string">'沙僧'</span>,<span class="number">4</span>,<span class="number">1004</span>,<span class="string">'2007-05-23'</span>,<span class="string">'11000.00'</span>,<span class="literal">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1012</span>,<span class="string">'李逵'</span>,<span class="number">4</span>,<span class="number">1006</span>,<span class="string">'2001-12-03'</span>,<span class="string">'9500.00'</span>,<span class="literal">NULL</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1013</span>,<span class="string">'小白龙'</span>,<span class="number">4</span>,<span class="number">1004</span>,<span class="string">'2001-12-03'</span>,<span class="string">'30000.00'</span>,<span class="literal">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1014</span>,<span class="string">'关羽'</span>,<span class="number">4</span>,<span class="number">1007</span>,<span class="string">'2002-01-23'</span>,<span class="string">'13000.00'</span>,<span class="literal">NULL</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">-- 工资等级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> salarygrade (</span><br><span class="line">    grade <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,   <span class="comment">-- 级别</span></span><br><span class="line">    losalary <span class="built_in">INT</span>,  <span class="comment">-- 最低工资</span></span><br><span class="line">    hisalary <span class="built_in">INT</span> <span class="comment">-- 最高工资</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加5个工资等级</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salarygrade(grade,losalary,hisalary) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>,<span class="number">7000</span>,<span class="number">12000</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="number">12010</span>,<span class="number">14000</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="number">14010</span>,<span class="number">20000</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="number">20010</span>,<span class="number">30000</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="number">30010</span>,<span class="number">99990</span>);</span><br></pre></td></tr></table></figure><ul><li>需求：</li></ul><ol><li><p>查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*分析：</span></span><br><span class="line"><span class="comment">1.员工编号，员工姓名，工资，需要查询emp表  职务名称，职务描述 需要查询job表</span></span><br><span class="line"><span class="comment">2.查询条件 emp.job_id = job.id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t1.<span class="string">`id`</span>, <span class="comment">-- 员工编号</span></span><br><span class="line">    t1.<span class="string">`ename`</span>, <span class="comment">-- 员工姓名</span></span><br><span class="line">    t1.<span class="string">`salary`</span>,<span class="comment">-- 工资</span></span><br><span class="line">    t2.<span class="string">`jname`</span>, <span class="comment">-- 职务名称</span></span><br><span class="line">    t2.<span class="string">`description`</span> <span class="comment">-- 职务描述</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    emp t1, job t2</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    t1.<span class="string">`job_id`</span> = t2.<span class="string">`id`</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*分析：</span></span><br><span class="line"><span class="comment">1. 员工编号，员工姓名，工资 emp  职务名称，职务描述 job  部门名称，部门位置 dept</span></span><br><span class="line"><span class="comment">2. 条件： emp.job_id = job.id and emp.dept_id = dept.id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t1.<span class="string">`id`</span>, <span class="comment">-- 员工编号</span></span><br><span class="line">    t1.<span class="string">`ename`</span>, <span class="comment">-- 员工姓名</span></span><br><span class="line">    t1.<span class="string">`salary`</span>,<span class="comment">-- 工资</span></span><br><span class="line">    t2.<span class="string">`jname`</span>, <span class="comment">-- 职务名称</span></span><br><span class="line">    t2.<span class="string">`description`</span>, <span class="comment">-- 职务描述</span></span><br><span class="line">    t3.<span class="string">`dname`</span>, <span class="comment">-- 部门名称</span></span><br><span class="line">    t3.<span class="string">`loc`</span> <span class="comment">-- 部门位置</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    emp t1, job t2,dept t3</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    t1.<span class="string">`job_id`</span> = t2.<span class="string">`id`</span> <span class="keyword">AND</span> t1.<span class="string">`dept_id`</span> = t3.<span class="string">`id`</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询员工姓名，工资，工资等级</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*分析：</span></span><br><span class="line"><span class="comment">1.员工姓名，工资 emp  工资等级 salarygrade</span></span><br><span class="line"><span class="comment">2.条件 emp.salary &gt;= salarygrade.losalary and emp.salary &lt;= salarygrade.hisalary</span></span><br><span class="line"><span class="comment">emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t1.ename ,</span><br><span class="line">    t1.<span class="string">`salary`</span>,</span><br><span class="line">    t2.*</span><br><span class="line"><span class="keyword">FROM</span> emp t1, salarygrade t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.<span class="string">`salary`</span> <span class="keyword">BETWEEN</span> t2.<span class="string">`losalary`</span> <span class="keyword">AND</span> t2.<span class="string">`hisalary`</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*分析：</span></span><br><span class="line"><span class="comment">1. 员工姓名，工资 emp ， 职务名称，职务描述 job 部门名称，部门位置，dept  工资等级 salarygrade</span></span><br><span class="line"><span class="comment">2. 条件： emp.job_id = job.id and emp.dept_id = dept.id and emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t1.<span class="string">`ename`</span>,</span><br><span class="line">    t1.<span class="string">`salary`</span>,</span><br><span class="line">    t2.<span class="string">`jname`</span>,</span><br><span class="line">    t2.<span class="string">`description`</span>,</span><br><span class="line">    t3.<span class="string">`dname`</span>,</span><br><span class="line">    t3.<span class="string">`loc`</span>,</span><br><span class="line">    t4.<span class="string">`grade`</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    emp t1,job t2,dept t3,salarygrade t4</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    t1.<span class="string">`job_id`</span> = t2.<span class="string">`id`</span> </span><br><span class="line">    <span class="keyword">AND</span> t1.<span class="string">`dept_id`</span> = t3.<span class="string">`id`</span></span><br><span class="line">    <span class="keyword">AND</span> t1.<span class="string">`salary`</span> <span class="keyword">BETWEEN</span> t4.<span class="string">`losalary`</span> <span class="keyword">AND</span> t4.<span class="string">`hisalary`</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询出部门编号、部门名称、部门位置、部门人数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*分析：</span></span><br><span class="line"><span class="comment">1.部门编号、部门名称、部门位置 dept 表。 部门人数 emp表</span></span><br><span class="line"><span class="comment">2.使用分组查询。按照emp.dept_id完成分组，查询count(id)</span></span><br><span class="line"><span class="comment">3.使用子查询将第2步的查询结果和dept表进行关联查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t1.<span class="string">`id`</span>,t1.<span class="string">`dname`</span>,t1.<span class="string">`loc`</span> , t2.total</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    dept t1,</span><br><span class="line">    (<span class="keyword">SELECT</span></span><br><span class="line">        dept_id,<span class="keyword">COUNT</span>(<span class="keyword">id</span>) total</span><br><span class="line">    <span class="keyword">FROM</span> </span><br><span class="line">        emp</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> dept_id) t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.<span class="string">`id`</span> = t2.dept_id;</span><br></pre></td></tr></table></figure></li><li><p>查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*分析：</span></span><br><span class="line"><span class="comment">1.姓名 emp， 直接上级的姓名 emp</span></span><br><span class="line"><span class="comment">* emp表的id 和 mgr 是自关联</span></span><br><span class="line"><span class="comment">2.条件 emp.id = emp.mgr</span></span><br><span class="line"><span class="comment">3.查询左表的所有数据，和 交集数据</span></span><br><span class="line"><span class="comment">* 使用左外连接查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">select</span></span><br><span class="line"><span class="comment">t1.ename,</span></span><br><span class="line"><span class="comment">t1.mgr,</span></span><br><span class="line"><span class="comment">t2.`id`,</span></span><br><span class="line"><span class="comment">t2.ename</span></span><br><span class="line"><span class="comment">from emp t1, emp t2</span></span><br><span class="line"><span class="comment">where t1.mgr = t2.`id`;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t1.ename,</span><br><span class="line">    t1.mgr,</span><br><span class="line">    t2.<span class="string">`id`</span>,</span><br><span class="line">    t2.<span class="string">`ename`</span></span><br><span class="line"><span class="keyword">FROM</span> emp t1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> emp t2</span><br><span class="line"><span class="keyword">ON</span> t1.<span class="string">`mgr`</span> = t2.<span class="string">`id`</span>;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第二章 6.数据库的设计</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_6%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_6%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-6-数据库的设计"><a href="#2-6-数据库的设计" class="headerlink" title="2.6 数据库的设计"></a>2.6 数据库的设计</h1><h2 id="2-6-1-多表之间的关系"><a href="#2-6-1-多表之间的关系" class="headerlink" title="2.6.1 多表之间的关系"></a>2.6.1 多表之间的关系</h2><h3 id="2-6-1-1-分类"><a href="#2-6-1-1-分类" class="headerlink" title="2.6.1.1 分类"></a>2.6.1.1 分类</h3><ol><li>一对一(了解)：<ul><li>如：人和身份证</li><li>分析：一个人只有一个身份证，一个身份证只能对应一个人</li></ul></li><li>一对多(多对一)：<ul><li>如：部门和员工</li><li>分析：一个部门有多个员工，一个员工只能对应一个部门</li></ul></li><li>多对多：<ul><li>如：学生和课程</li><li>分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</li></ul></li></ol><h3 id="2-6-1-2-实现关系"><a href="#2-6-1-2-实现关系" class="headerlink" title="2.6.1.2 实现关系"></a>2.6.1.2 实现关系</h3><ol><li>一对多(多对一)：<ul><li>如：部门和员工</li><li>实现方式：在多的一方建立外键，指向一的一方的主键。</li></ul></li><li>多对多：<ul><li>如：学生和课程</li><li>实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</li></ul></li><li>一对一(了解)：<ul><li>如：人和身份证</li><li>实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。</li></ul></li></ol><h3 id="2-6-1-3-案例"><a href="#2-6-1-3-案例" class="headerlink" title="2.6.1.3 案例"></a>2.6.1.3 案例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建旅游线路分类表 tab_category</span></span><br><span class="line"><span class="comment">-- cid 旅游线路分类主键，自动增长</span></span><br><span class="line"><span class="comment">-- cname 旅游线路分类名称非空，唯一，字符串 100</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_category (</span><br><span class="line">    cid <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    cname <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建旅游线路表 tab_route</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">rid 旅游线路主键，自动增长</span></span><br><span class="line"><span class="comment">rname 旅游线路名称非空，唯一，字符串 100</span></span><br><span class="line"><span class="comment">price 价格</span></span><br><span class="line"><span class="comment">rdate 上架时间，日期类型</span></span><br><span class="line"><span class="comment">cid 外键，所属分类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_route(</span><br><span class="line">    rid <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    rname <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    price <span class="keyword">DOUBLE</span>,</span><br><span class="line">    rdate <span class="built_in">DATE</span>,</span><br><span class="line">    cid <span class="built_in">INT</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (cid) <span class="keyword">REFERENCES</span> tab_category(cid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*创建用户表 tab_user</span></span><br><span class="line"><span class="comment">uid 用户主键，自增长</span></span><br><span class="line"><span class="comment">username 用户名长度 100，唯一，非空</span></span><br><span class="line"><span class="comment">password 密码长度 30，非空</span></span><br><span class="line"><span class="comment">name 真实姓名长度 100</span></span><br><span class="line"><span class="comment">birthday 生日</span></span><br><span class="line"><span class="comment">sex 性别，定长字符串 1</span></span><br><span class="line"><span class="comment">telephone 手机号，字符串 11</span></span><br><span class="line"><span class="comment">email 邮箱，字符串长度 100</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_user (</span><br><span class="line">    uid <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    username <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">PASSWORD</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    birthday <span class="built_in">DATE</span>,</span><br><span class="line">    sex <span class="built_in">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">'男'</span>,</span><br><span class="line">    telephone <span class="built_in">VARCHAR</span>(<span class="number">11</span>),</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建收藏表 tab_favorite</span></span><br><span class="line"><span class="comment">rid 旅游线路 id，外键</span></span><br><span class="line"><span class="comment">date 收藏时间</span></span><br><span class="line"><span class="comment">uid 用户 id，外键</span></span><br><span class="line"><span class="comment">rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_favorite (</span><br><span class="line">    rid <span class="built_in">INT</span>, <span class="comment">-- 线路id</span></span><br><span class="line">    <span class="built_in">DATE</span> DATETIME,</span><br><span class="line">    uid <span class="built_in">INT</span>, <span class="comment">-- 用户id</span></span><br><span class="line">    <span class="comment">-- 创建复合主键</span></span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(rid,uid), <span class="comment">-- 联合主键</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (rid) <span class="keyword">REFERENCES</span> tab_route(rid),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(uid) <span class="keyword">REFERENCES</span> tab_user(uid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="2-6-2-数据库设计的范式"><a href="#2-6-2-数据库设计的范式" class="headerlink" title="2.6.2 数据库设计的范式"></a>2.6.2 数据库设计的范式</h2><ul><li>概念：设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求</li></ul><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。</p><p>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。</p><ul><li>分类：</li></ul><ol><li><p>第一范式（1NF）：每一列都是不可分割的原子数据项</p></li><li><p>第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖）</p><ul><li>几个概念：<ol><li>函数依赖：A–&gt;B，如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A<br> 例如：学号–&gt;姓名。  （学号，课程名称） –&gt; 分数</li><li>完全函数依赖：A–&gt;B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。<br> 例如：（学号，课程名称） –&gt; 分数</li><li>部分函数依赖：A–&gt;B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。<br> 例如：（学号，课程名称） – &gt; 姓名</li><li>传递函数依赖：A–&gt;B, B – &gt;C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A<br> 例如：学号–&gt;系名，系名–&gt;系主任</li><li>码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码<br> 例如：该表中码为：（学号，课程名称）<ul><li>主属性：码属性组中的所有属性</li><li>非主属性：除过码属性组的属性</li></ul></li></ol></li></ul></li><li><p>第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第二章 5.SQL约束</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_5%20SQL%E7%BA%A6%E6%9D%9F.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_5%20SQL%E7%BA%A6%E6%9D%9F.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-5-SQL约束"><a href="#2-5-SQL约束" class="headerlink" title="2.5 SQL约束"></a>2.5 SQL约束</h1><h2 id="2-5-1-分类"><a href="#2-5-1-分类" class="headerlink" title="2.5.1 分类"></a>2.5.1 分类</h2><ol><li>主键约束：primary key</li><li>非空约束：not null</li><li>唯一约束：unique</li><li>外键约束：foreign key</li></ol><h2 id="2-5-2-非空约束"><a href="#2-5-2-非空约束" class="headerlink" title="2.5.2 非空约束"></a>2.5.2 非空约束</h2><p>非空约束：<code>not null</code>，值不能为null</p><ul><li><p>创建表时添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">    <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="comment">-- name为非空</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>创建表完后，添加非空约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除name的非空约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-5-3-唯一约束"><a href="#2-5-3-唯一约束" class="headerlink" title="2.5.3 唯一约束"></a>2.5.3 唯一约束</h2><p><code>unique</code>，值不能重复</p><ol><li><p>创建表时，添加唯一约束</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">    phone_number <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span> <span class="comment">-- 添加了唯一约束</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>注意mysql中，唯一约束限定的列的值可以有多个null</li></ul></li></ol><ol start="2"><li><p>删除唯一约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">DROP</span> <span class="keyword">INDEX</span> phone_number;</span><br></pre></td></tr></table></figure></li><li><p>在创建表后，添加唯一约束</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> phone_number <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-5-4-主键约束"><a href="#2-5-4-主键约束" class="headerlink" title="2.5.4 主键约束"></a>2.5.4 主键约束</h2><p>键约束：<code>primary key</code>。</p><ul><li><p>注意：</p><ul><li>含义：非空且唯一</li><li>一张表只能有一个字段为主键</li><li>主键就是表中记录的唯一标识</li></ul></li><li><p>在创建表时，添加主键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,<span class="comment">-- 给id添加主键约束</span></span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>删除主键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 错误 alter table stu modify id int ;</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span><br></pre></td></tr></table></figure></li><li><p>创建完表后，添加主键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>;</span><br></pre></td></tr></table></figure></li><li><p>自动增长：</p><ol><li><p>概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长</p></li><li><p>在创建表时，添加主键约束，并且完成主键自增长</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,<span class="comment">-- 给id添加主键约束</span></span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>删除自动增长</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> <span class="keyword">id</span> <span class="built_in">INT</span>;</span><br></pre></td></tr></table></figure></li><li><p>添加自动增长</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> <span class="keyword">id</span> <span class="built_in">INT</span> AUTO_INCREMENT;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="2-5-5-外键约束"><a href="#2-5-5-外键约束" class="headerlink" title="2.5.5 外键约束"></a>2.5.5 外键约束</h2><p><code>foreign key</code>，让表于表产生关系，从而保证数据的正确性。</p><ol><li><p>在创建表时，可以添加外键</p><ul><li><p>语法：</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    ....</span><br><span class="line">    外键列</span><br><span class="line">   <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> <span class="keyword">key</span> (外键列名称) <span class="keyword">references</span> 主表名称(主表列名称)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除外键</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> 外键名称;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建表之后，添加外键</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (外键字段名称) <span class="keyword">REFERENCES</span> 主表名称(主表列名称);</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>级联操作</p><ol><li><p>添加级联操作</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 </span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (外键字段名称) <span class="keyword">REFERENCES</span> 主表名称(主表列名称) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span>  ;</span><br></pre></td></tr></table></figure></li><li><p>分类：</p><ol><li>级联更新：ON UPDATE CASCADE </li><li>级联删除：ON DELETE CASCADE </li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第二章 4.DQL</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_4%20DQL.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_4%20DQL.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-4-查询语句"><a href="#2-4-查询语句" class="headerlink" title="2.4 查询语句"></a>2.4 查询语句</h1><h2 id="2-4-1-排序查询"><a href="#2-4-1-排序查询" class="headerlink" title="2.4.1 排序查询"></a>2.4.1 排序查询</h2><ul><li>语法：order by 子句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">order by 排序字段1 排序方式1, 排序字段2 排序方式2...</span><br></pre></td></tr></table></figure><ul><li><p>排序方式：</p><ul><li>ASC：升序，默认的。</li><li>DESC：降序。</li></ul></li><li><p>注意：</p><ul><li>如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</li></ul></li></ul><h2 id="2-4-2-聚合函数"><a href="#2-4-2-聚合函数" class="headerlink" title="2.4.2 聚合函数"></a>2.4.2 聚合函数</h2><p>将一列数据作为一个整体，进行纵向的计算。</p><ol><li>count：计算个数<ol><li>一般选择非空的列：主键</li><li>count(*)</li></ol></li><li>max：计算最大值</li><li>min：计算最小值</li><li>sum：计算和</li><li>avg：计算平均值</li></ol><ul><li>注意：聚合函数的计算，排除null值。<br>  解决方案：<pre><code>1. 选择不包含非空的列进行计算 2. IFNULL函数</code></pre></li></ul><h2 id="2-4-3-分组查询"><a href="#2-4-3-分组查询" class="headerlink" title="2.4.3 分组查询"></a>2.4.3 分组查询</h2><ol><li>语法：group by 分组字段；</li><li>注意：<ol><li>分组之后查询的字段：分组字段、聚合函数</li><li>where 和 having 的区别？<ol><li>where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来</li><li>where 后不可以跟聚合函数，having可以进行聚合函数的判断。</li></ol></li></ol></li></ol><p>– 按照性别分组。分别查询男、女同学的平均分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex , <span class="keyword">AVG</span>(math) <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br></pre></td></tr></table></figure><p>– 按照性别分组。分别查询男、女同学的平均分,人数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex , <span class="keyword">AVG</span>(math),<span class="keyword">COUNT</span>(<span class="keyword">id</span>) <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br></pre></td></tr></table></figure><p>–  按照性别分组。分别查询男、女同学的平均分，人数 要求：分数低于70分的人，不参与分组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex , <span class="keyword">AVG</span>(math),<span class="keyword">COUNT</span>(<span class="keyword">id</span>) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math &gt; <span class="number">70</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br></pre></td></tr></table></figure><p>–  按照性别分组。分别查询男、女同学的平均分,人数 </p><p>要求：分数低于70分的人，不参与分组，分组之后。人数要大于2个人</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex , <span class="keyword">AVG</span>(math),<span class="keyword">COUNT</span>(<span class="keyword">id</span>) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math &gt; <span class="number">70</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">id</span>) &gt; <span class="number">2</span>;</span><br><span class="line"><span class="keyword">SELECT</span> sex , <span class="keyword">AVG</span>(math),<span class="keyword">COUNT</span>(<span class="keyword">id</span>) 人数 <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math &gt; <span class="number">70</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="keyword">HAVING</span> 人数 &gt; <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="2-4-4-分页查询"><a href="#2-4-4-分页查询" class="headerlink" title="2.4.4 分页查询"></a>2.4.4 分页查询</h2><ol><li><p>语法：limit 开始的索引,每页查询的条数;</p></li><li><p>公式：开始的索引 = （当前的页码 - 1） * 每页显示的条数<br> – 每页显示3条记录 </p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">3</span>; <span class="comment">-- 第1页</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">LIMIT</span> <span class="number">3</span>,<span class="number">3</span>; <span class="comment">-- 第2页</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">LIMIT</span> <span class="number">6</span>,<span class="number">3</span>; <span class="comment">-- 第3页</span></span><br></pre></td></tr></table></figure></li><li><p>limit 是一个MySQL”方言”</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第二章 3.DML与DQL</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_3%20DQL%E4%B8%8EDML.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_3%20DQL%E4%B8%8EDML.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-3-DML"><a href="#2-3-DML" class="headerlink" title="2.3 DML"></a>2.3 DML</h1><h2 id="2-3-1-添加数据："><a href="#2-3-1-添加数据：" class="headerlink" title="2.3.1 添加数据："></a>2.3.1 添加数据：</h2><ul><li><p>语法：</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名<span class="number">1</span>,列名<span class="number">2</span>,...列名n) <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,...值n);</span><br></pre></td></tr></table></figure></li><li><p>注意：</p><ol><li>列名和值要一一对应。</li><li>如果表名后，不定义列名，则默认给所有列添加值<br> insert into 表名 values(值1,值2,…值n);</li><li>除了数字类型，其他类型需要使用引号(单双都可以)引起来</li></ol></li></ul><h2 id="2-3-2-删除数据："><a href="#2-3-2-删除数据：" class="headerlink" title="2.3.2 删除数据："></a>2.3.2 删除数据：</h2><ul><li><p>语法：</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件]</span><br></pre></td></tr></table></figure></li><li><p>注意：</p><ol><li>如果不加条件，则删除表中所有记录。</li><li>如果要删除所有记录<ol><li>delete from 表名; – 不推荐使用。有多少条记录就会执行多少次删除操作</li><li>TRUNCATE TABLE 表名; – 推荐使用，效率更高 先删除表，然后再创建一张一样的表。</li></ol></li></ol></li></ul><h2 id="2-3-3-修改数据："><a href="#2-3-3-修改数据：" class="headerlink" title="2.3.3 修改数据："></a>2.3.3 修改数据：</h2><ul><li>语法：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列名<span class="number">1</span> = 值<span class="number">1</span>, 列名<span class="number">2</span> = 值<span class="number">2</span>,... [<span class="keyword">where</span> 条件];</span><br></pre></td></tr></table></figure><ul><li><p>注意：</p><ol><li>如果不加任何条件，则会将表中所有记录全部修改。</li></ol></li></ul><h1 id="2-4-DQL"><a href="#2-4-DQL" class="headerlink" title="2.4 DQL"></a>2.4 DQL</h1><h2 id="2-4-1-语法"><a href="#2-4-1-语法" class="headerlink" title="2.4.1 语法"></a>2.4.1 语法</h2><p><strong>查询表中的数据</strong></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><p>select<br>            字段列表<br>        from<br>            表名列表<br>        where<br>            条件列表<br>        group by<br>            分组字段<br>        having<br>            分组之后的条件<br>        order by<br>            排序<br>        limit<br>            分页限定</p><h2 id="2-4-2-基础查询"><a href="#2-4-2-基础查询" class="headerlink" title="2.4.2 基础查询"></a>2.4.2 基础查询</h2><ol><li><p>多个字段的查询</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名<span class="number">1</span>，字段名<span class="number">2.</span>.. <span class="keyword">from</span> 表名；</span><br></pre></td></tr></table></figure><ul><li>注意：<ul><li>如果查询所有字段，则可以使用*来替代字段列表。</li></ul></li></ul></li><li><p>去除重复：</p><ul><li>distinct</li></ul></li><li><p>计算列</p><ul><li>一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）</li><li>ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null<ul><li>表达式1：哪个字段需要判断是否为null</li><li>如果该字段为null后的替换值。</li></ul></li></ul></li><li><p>起别名：</p><ul><li>as：as也可以省略</li></ul></li></ol><h2 id="2-4-3-条件查询"><a href="#2-4-3-条件查询" class="headerlink" title="2.4.3 条件查询"></a>2.4.3 条件查询</h2><ol><li>where子句后跟条件4</li><li>运算符<ul><li>&gt; 、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt;</li><li>BETWEEN…AND  </li><li>IN( 集合) </li><li>LIKE：模糊查询<ul><li>占位符：<ul><li>_:单个任意字符</li><li>%：多个任意字符</li></ul></li></ul></li><li>IS NULL  </li><li>and  或 &amp;&amp;</li><li>or  或 || </li><li>not  或 !</li></ul></li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>– 查询年龄大于20岁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age &gt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age &gt;= <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>– 查询年龄等于20岁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>– 查询年龄不等于20岁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age != <span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age &lt;&gt; <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>– 查询年龄大于等于20 小于等于30</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age &gt;= <span class="number">20</span> &amp;&amp;  age &lt;=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age &gt;= <span class="number">20</span> <span class="keyword">AND</span>  age &lt;=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p>– 查询年龄22岁，18岁，25岁的信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age = <span class="number">22</span> <span class="keyword">OR</span> age = <span class="number">18</span> <span class="keyword">OR</span> age = <span class="number">25</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="keyword">IN</span> (<span class="number">22</span>,<span class="number">18</span>,<span class="number">25</span>);</span><br></pre></td></tr></table></figure><p>– 查询英语成绩为null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english = <span class="literal">NULL</span>; </span><br><span class="line"><span class="comment">-- 上句是不对的。在MySQL中null值不能使用 = （!=） 判断</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>– 查询英语成绩不为null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english  <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>– 查询姓马的有哪些？ like</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'马%'</span>;</span><br></pre></td></tr></table></figure><p>– 查询姓名第二个字是化的人</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">"_化%"</span>;</span><br></pre></td></tr></table></figure><p>– 查询姓名是3个字的人</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'___'</span>;</span><br></pre></td></tr></table></figure><p>– 查询姓名中包含德的人</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'%德%'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第二章 2.SQL与DDL</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_2%20SQL%E4%B8%8EDDL.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_2%20SQL%E4%B8%8EDDL.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-2-SQL"><a href="#2-2-SQL" class="headerlink" title="2.2 SQL"></a>2.2 SQL</h1><h2 id="2-2-1-什么是SQL？"><a href="#2-2-1-什么是SQL？" class="headerlink" title="2.2.1 什么是SQL？"></a>2.2.1 什么是SQL？</h2><p>Structured Query Language：结构化查询语言</p><p>其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。</p><h2 id="2-2-2-SQL通用语法"><a href="#2-2-2-SQL通用语法" class="headerlink" title="2.2.2 SQL通用语法"></a>2.2.2 SQL通用语法</h2><ol><li>SQL 语句可以单行或多行书写，以分号结尾。</li><li>可使用空格和缩进来增强语句的可读性。</li><li>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</li><li>3 种注释<ul><li>单行注释: – 注释内容 或 # 注释内容(mysql 特有) </li><li>多行注释: /* 注释 */</li></ul></li></ol><h2 id="2-2-3-SQL分类"><a href="#2-2-3-SQL分类" class="headerlink" title="2.2.3 SQL分类"></a>2.2.3 SQL分类</h2><p>1) DDL(Data Definition Language)数据定义语言<br>&emsp;&emsp;&emsp;用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等</p><p>2) DML(Data Manipulation Language)数据操作语言<br>&emsp;&emsp;&emsp;用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</p><p>3) DQL(Data Query Language)数据查询语言<br>&emsp;&emsp;&emsp;用来查询数据库中表的记录(数据)。关键字：select, where 等</p><p>4) DCL(Data Control Language)数据控制语言(了解)<br>&emsp;&emsp;&emsp;用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</p><h1 id="2-3-DDL"><a href="#2-3-DDL" class="headerlink" title="2.3 DDL"></a>2.3 DDL</h1><h2 id="2-3-1-操作数据库：CRUD"><a href="#2-3-1-操作数据库：CRUD" class="headerlink" title="2.3.1 操作数据库：CRUD"></a>2.3.1 操作数据库：CRUD</h2><h3 id="C-Create-创建"><a href="#C-Create-创建" class="headerlink" title="C(Create):创建"></a>C(Create):创建</h3><ul><li>创建数据库：<pre><code>* create database 数据库名称;</code></pre></li><li>创建数据库，判断不存在，再创建：<ul><li>create database if not exists 数据库名称;</li></ul></li><li>创建数据库，并指定字符集<ul><li>create database 数据库名称 character set 字符集名;</li></ul></li><li>练习： 创建db4数据库，判断是否存在，并制定字符集为gbk<ul><li>create database if not exists db4 character set gbk;</li></ul></li></ul><h3 id="R-Retrieve-：查询"><a href="#R-Retrieve-：查询" class="headerlink" title="R(Retrieve)：查询"></a>R(Retrieve)：查询</h3><ul><li>查询所有数据库的名称:<pre><code>* show databases;</code></pre></li><li>查询某个数据库的字符集:查询某个数据库的创建语句<ul><li>show create database 数据库名称;</li></ul></li></ul><h3 id="U-Update-修改"><a href="#U-Update-修改" class="headerlink" title="U(Update):修改"></a>U(Update):修改</h3><ul><li>修改数据库的字符集<pre><code>* alter database 数据库名称 character set 字符集名称;</code></pre></li></ul><h3 id="D-Delete-删除"><a href="#D-Delete-删除" class="headerlink" title="D(Delete):删除"></a>D(Delete):删除</h3><ul><li>删除数据库<pre><code>* drop database 数据库名称;</code></pre></li><li>判断数据库存在，存在再删除<ul><li>drop database if exists 数据库名称;</li></ul></li></ul><h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><ul><li>查询当前正在使用的数据库名称<pre><code>* select database();</code></pre></li><li>使用数据库<ul><li>use 数据库名称;</li></ul></li></ul><h2 id="2-3-2-操作表"><a href="#2-3-2-操作表" class="headerlink" title="2.3.2 操作表"></a>2.3.2 操作表</h2><h3 id="C-Create-创建-1"><a href="#C-Create-创建-1" class="headerlink" title="C(Create):创建"></a>C(Create):创建</h3><ul><li><p><strong>语法：</strong></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    列名<span class="number">1</span> 数据类型<span class="number">1</span>,</span><br><span class="line">    列名<span class="number">2</span> 数据类型<span class="number">2</span>,</span><br><span class="line">    ....</span><br><span class="line">    列名n 数据类型n</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>注意：最后一列，不需要加逗号<code>,</code></p></li><li><p>数据库类型：</p><ol><li><p>int：整数类型</p><ul><li>age int,</li></ul></li><li><p>double:小数类型</p><ul><li>score double(5,2)</li></ul></li><li><p>date:日期，只包含年月日，yyyy-MM-dd</p></li><li><p>datetime:日期，包含年月日时分秒     yyyy-MM-dd HH:mm:ss</p></li><li><p>timestamp:时间错类型    包含年月日时分秒     yyyy-MM-dd HH:mm:ss    </p><ul><li>如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</li></ul></li><li><p>varchar：字符串</p><ul><li>name varchar(20):姓名最大20个字符</li><li>zhangsan 8个字符  张三 2个字符</li></ul></li></ol></li><li><p><strong>创建表</strong></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    age <span class="built_in">int</span> ,</span><br><span class="line">    score <span class="keyword">double</span>(<span class="number">4</span>,<span class="number">1</span>),</span><br><span class="line">    birthday <span class="built_in">date</span>,</span><br><span class="line">    insert_time <span class="built_in">timestamp</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><p><strong>复制表：</strong></p><ul><li>create table 表名 like 被复制的表名;          </li></ul></li></ul></li></ul><h3 id="R-Retrieve-：查询-1"><a href="#R-Retrieve-：查询-1" class="headerlink" title="R(Retrieve)：查询"></a>R(Retrieve)：查询</h3><ul><li>查询某个数据库中所有的表名称<ul><li>show tables;</li></ul></li><li>查询表结构<ul><li>desc 表名;</li></ul></li></ul><h3 id="U-Update-修改-1"><a href="#U-Update-修改-1" class="headerlink" title="U(Update):修改"></a>U(Update):修改</h3><ol><li>修改表名<br> alter table 表名 rename to 新的表名;</li><li>修改表的字符集<br> alter table 表名 character set 字符集名称;</li><li>添加一列<br> alter table 表名 add 列名 数据类型;</li><li>修改列名称 类型<br> alter table 表名 change 列名 新列别 新数据类型;<br> alter table 表名 modify 列名 新数据类型;</li><li>删除列<br> alter table 表名 drop 列名;</li></ol><h3 id="D-Delete-删除-1"><a href="#D-Delete-删除-1" class="headerlink" title="D(Delete):删除"></a>D(Delete):删除</h3><ul><li>drop table 表名;</li><li>drop table  if exists 表名 ;</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第二章 1.MySQL基本概念</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_1%20MySQL%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/02_1%20MySQL%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-1-数据库的基本概念"><a href="#2-1-数据库的基本概念" class="headerlink" title="2.1 数据库的基本概念"></a>2.1 数据库的基本概念</h1><ol><li><p>数据库的英文单词： DataBase 简称 ： DB</p></li><li><p>什么数据库？</p><ul><li>用于存储和管理数据的仓库。</li></ul></li><li><p>数据库的特点：</p><ol><li>持久化存储数据的。其实数据库就是一个文件系统</li><li>方便存储和管理数据</li><li>使用了统一的方式操作数据库 – SQL</li></ol></li></ol><h1 id="2-2-MySQL数据库软件"><a href="#2-2-MySQL数据库软件" class="headerlink" title="2.2 MySQL数据库软件"></a>2.2 MySQL数据库软件</h1><ol><li><p>安装</p><ul><li>参见《MySQL基础.pdf》</li></ul></li><li><p>卸载</p><ol><li>去mysql的安装目录找到my.ini文件<ul><li>复制 datadir=”C:/ProgramData/MySQL/MySQL Server 5.5/Data/“</li></ul></li><li>卸载MySQL</li><li>删除C:/ProgramData目录下的MySQL文件夹。</li></ol></li><li><p>配置</p><ul><li><p>MySQL服务启动</p><ol><li>手动。</li><li>cmd–&gt; services.msc 打开服务的窗口</li><li>使用管理员打开cmd<ul><li>net start mysql : 启动mysql的服务</li><li>net stop mysql:关闭mysql服务</li></ul></li></ol></li><li><p>MySQL登录</p><ol><li>mysql -uroot -p密码</li><li>mysql -hip -uroot -p连接目标的密码</li><li>mysql –host=ip –user=root –password=连接目标的密码</li></ol></li><li><p>MySQL退出</p><ol><li>exit</li><li>quit</li></ol></li><li><p>MySQL目录结构</p><ol><li>MySQL安装目录：basedir=”D:/develop/MySQL/“<ul><li>配置文件 my.ini</li></ul></li><li>MySQL数据目录：datadir=”C:/ProgramData/MySQL/MySQL Server 5.5/Data/“<ul><li>几个概念<ul><li>数据库：文件夹</li><li>表：文件</li><li>数据：数据</li></ul></li></ul></li></ol></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第一章 3.注解</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/01_3%20%20%E6%B3%A8%E8%A7%A3.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/01_3%20%20%E6%B3%A8%E8%A7%A3.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-3-注解"><a href="#1-3-注解" class="headerlink" title="1.3 注解"></a>1.3 注解</h1><h2 id="1-3-1-概念："><a href="#1-3-1-概念：" class="headerlink" title="1.3.1 概念："></a>1.3.1 概念：</h2><p>说明程序的。给计算机看的</p><ul><li><strong>注释：</strong>用文字描述程序的。给程序员看的</li><li><strong>定义：</strong>注解（<code>Annotation</code>），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</li><li><strong>概念描述：</strong><ul><li>JDK1.5之后的新特性</li><li>说明程序的</li><li>使用注解：<code>@注解名称</code></li></ul></li></ul><h2 id="1-3-2-作用分类："><a href="#1-3-2-作用分类：" class="headerlink" title="1.3.2 作用分类："></a>1.3.2 作用分类：</h2><p>① 编写文档：通过代码里标识的注解生成文档【生成文档doc文档】</p><p>② 代码分析：通过代码里标识的注解对代码进行分析【使用反射】</p><p>③ 编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</p><h2 id="1-3-3-JDK中预定义的一些注解"><a href="#1-3-3-JDK中预定义的一些注解" class="headerlink" title="1.3.3 JDK中预定义的一些注解"></a>1.3.3 JDK中预定义的一些注解</h2><ul><li><code>@Overrid</code>：检测被该注解标注的方法是否是继承自父类(接口)的</li><li><code>@Deprecated</code>：该注解标注的内容，表示已过时</li><li><code>@SuppressWarnings</code>：压制警告<ul><li>一般传递参数<code>all</code>===&gt;<code>@SuppressWarnings(&quot;all&quot;)</code></li></ul></li></ul><h2 id="1-3-4-自定义注解"><a href="#1-3-4-自定义注解" class="headerlink" title="1.3.4 自定义注解"></a>1.3.4 自定义注解</h2><h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h3><p>元注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称&#123;</span><br><span class="line">    属性列表;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="本质："><a href="#本质：" class="headerlink" title="本质："></a>本质：</h3><ul><li>注解本质上就是一个接口，该接口默认继承Annotation接口<ul><li><strong><code>public interface MyAnno extends java.lang.annotation.Annotation {}</code></strong></li></ul></li></ul><h3 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h3><ul><li>接口中的抽象方法</li></ul><h3 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h3><ol><li><p>属性的返回值类型有下列取值</p><ul><li>基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ul></li><li><p>定义了属性，在使用时需要给属性赋值</p><ul><li>如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。</li><li>如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可。</li><li>数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}可以省略</li></ul></li></ol><h2 id="1-3-5-元注解"><a href="#1-3-5-元注解" class="headerlink" title="1.3.5 元注解"></a>1.3.5 元注解</h2><p><strong>用于描述注解的注解</strong></p><ul><li><strong><code>@Target</code></strong>：描述注解能够作用的位置<ul><li><strong><code>ElementType</code></strong>取值：<ul><li><strong><code>TYPE</code></strong>：可以作用于类上</li><li><strong><code>METHOD</code></strong>：可以作用于方法上</li><li><strong><code>FIELD</code></strong>：可以作用于成员变量上</li></ul></li></ul></li><li><strong><code>@Retention</code></strong>：描述注解被保留的阶段<ul><li><strong><code>@Retention(RetentionPolicy.RUNTIME)</code></strong>：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</li></ul></li><li><strong><code>@Documented</code></strong>：描述注解是否被抽取到api文档中</li><li><strong><code>@Inherited</code></strong>：描述注解是否被子类继承</li></ul><h2 id="1-3-6-注解使用"><a href="#1-3-6-注解使用" class="headerlink" title="1.3.6 注解使用"></a>1.3.6 注解使用</h2><p>在程序使用(解析)注解：获取注解中定义的属性值</p><ol><li><p>获取注解定义的位置的对象  （Class，Method , Field）</p></li><li><p>获取指定的注解</p><ul><li><p><strong><code>getAnnotation(Class)</code></strong>：其实就是在内存中生成了一个该注解接口的子类实现对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProImpl</span> <span class="keyword">implements</span> <span class="title">Pro</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">className</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"cn.itcast.annotation.Demo1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">methodName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"show"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>调用注解中的抽象方法获取配置的属性值</p></li></ol><h2 id="1-3-7-实例"><a href="#1-3-7-实例" class="headerlink" title="1.3.7 实例"></a>1.3.7 实例</h2><ul><li><p>计算器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str = <span class="keyword">null</span>;</span><br><span class="line">        str.toString();</span><br><span class="line">        System.out.println(<span class="string">"1 + 0 ="</span> + (<span class="number">1</span> + <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1 - 0 ="</span> + (<span class="number">1</span> - <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//乘法</span></span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1 * 0 ="</span> + (<span class="number">1</span> * <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//除法</span></span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1 / 0 ="</span> + (<span class="number">1</span> / <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"永无bug..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Check注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Check &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建计算器对象</span></span><br><span class="line">    Calculator c = <span class="keyword">new</span> Calculator();</span><br><span class="line">    <span class="comment">//2.获取字节码文件对象</span></span><br><span class="line">    Class cls = c.getClass();</span><br><span class="line">    <span class="comment">//3.获取所有方法</span></span><br><span class="line">    Method[] methods = cls.getMethods();</span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">0</span>;<span class="comment">//出现异常的次数</span></span><br><span class="line">    BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"bug.txt"</span>));</span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">        <span class="comment">//4.判断方法上是否有Check注解</span></span><br><span class="line">        <span class="keyword">if</span>(method.isAnnotationPresent(Check<span class="class">.<span class="keyword">class</span>))</span>&#123;</span><br><span class="line">            <span class="comment">//5.有，执行</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                method.invoke(c);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">//6.捕获异常</span></span><br><span class="line">                <span class="comment">//记录到文件中</span></span><br><span class="line">                number ++;</span><br><span class="line">                bw.write(method.getName()+ <span class="string">" 方法出异常了"</span>);</span><br><span class="line">                bw.newLine();</span><br><span class="line">                bw.write(<span class="string">"异常的名称:"</span> + e.getCause().getClass().getSimpleName());</span><br><span class="line">                bw.newLine();</span><br><span class="line">                bw.write(<span class="string">"异常的原因:"</span>+e.getCause().getMessage());</span><br><span class="line">                bw.newLine();</span><br><span class="line">                bw.write(<span class="string">"--------------------------"</span>);</span><br><span class="line">                bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bw.write(<span class="string">"本次测试一共出现 "</span>+number+<span class="string">" 次异常"</span>);</span><br><span class="line">    bw.flush();</span><br><span class="line">    bw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第一章 2.反射</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/01_2%20%E5%8F%8D%E5%B0%84.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/01_2%20%E5%8F%8D%E5%B0%84.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-2-反射：框架设计的灵魂"><a href="#1-2-反射：框架设计的灵魂" class="headerlink" title="1.2 反射：框架设计的灵魂"></a>1.2 反射：框架设计的灵魂</h1><ul><li><p>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码</p></li><li><p>反射：将类的各个组成部分封装为其他对象，这就是反射机制</p><ul><li>好处：<ol><li>可以在程序运行过程中，操作这些对象。</li><li>可以解耦，提高程序的可扩展性。</li></ol></li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190825/FgwvoVOyw18X.png!blog" alt=""></p></li></ul><h2 id="1-2-1-Class对象"><a href="#1-2-1-Class对象" class="headerlink" title="1.2.1 Class对象"></a>1.2.1 Class对象</h2><h4 id="1-2-1-1-获取Class对象："><a href="#1-2-1-1-获取Class对象：" class="headerlink" title="1.2.1.1 获取Class对象："></a>1.2.1.1 获取Class对象：</h4><ol><li><strong><code>Class.forName([全类名])</code></strong>：将字节码文件加载进内存，返回Class对象<ul><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li></ul></li><li><strong><code>类名.class</code></strong>：通过类名的属性class获取<ul><li>多用于参数的传递</li></ul></li><li><strong><code>对象.getClass()</code></strong>：getClass()方法在Object类中定义<ul><li>多用于对象的获取字节码的方式</li></ul></li></ol><p><strong>结论：</strong></p><p>&emsp;&emsp;同一个字节码文件(<strong><code>.class</code></strong>)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</p><h4 id="1-2-1-2-Class对象功能："><a href="#1-2-1-2-Class对象功能：" class="headerlink" title="1.2.1.2 Class对象功能："></a>1.2.1.2 Class对象功能：</h4><h5 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h5><ul><li><strong><code>Field[] getFields()</code></strong>：获取所有<code>public</code>修饰的成员变量</li><li><strong><code>Field getField(String name)</code></strong>：获取指定名称的 public修饰的成员变量</li><li><strong><code>Field[] getDeclaredFields()</code></strong>：获取所有的成员变量，不考虑修饰符</li><li><strong><code>Field getDeclaredField(String name)</code></strong></li></ul><h5 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h5><ul><li><strong><code>Constructor&lt;?&gt;[] getConstructors()</code></strong></li><li><strong><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</code></strong></li><li><strong><code>Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)</code></strong></li><li><strong><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></strong></li></ul><h5 id="获取成员方法："><a href="#获取成员方法：" class="headerlink" title="获取成员方法："></a>获取成员方法：</h5><ul><li><strong><code>Method[] getMethods()</code></strong></li><li><strong><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code></strong></li><li><strong><code>Method[] getDeclaredMethods()</code></strong></li><li><strong><code>Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)</code></strong></li></ul><h5 id="获取全类名"><a href="#获取全类名" class="headerlink" title="获取全类名"></a>获取全类名</h5><ul><li><strong><code>String getName()</code></strong></li></ul><h2 id="1-2-2-Field：成员变量"><a href="#1-2-2-Field：成员变量" class="headerlink" title="1.2.2 Field：成员变量"></a>1.2.2 Field：成员变量</h2><p><strong>操作如下：</strong></p><ol><li><p>设置值</p><ul><li><strong><code>void set(Object obj, Object value)</code></strong></li></ul></li><li><p>获取值</p><ul><li><strong><code>get(Object obj)</code></strong></li></ul></li><li><p>忽略访问权限修饰符的安全检查</p><ul><li><strong><code>setAccessible(true)</code></strong>：暴力反射</li></ul></li></ol><h2 id="1-2-3-Constructor-构造方法"><a href="#1-2-3-Constructor-构造方法" class="headerlink" title="1.2.3 Constructor:构造方法"></a>1.2.3 Constructor:构造方法</h2><ul><li>创建对象:<ul><li><strong><code>T newInstance(Object... initargs)</code></strong></li></ul></li><li>如果使用空参数构造方法创建对象，操作可以简化：Class对象的<code>newInstance</code>方法</li></ul><h2 id="1-2-4-Method：方法对象"><a href="#1-2-4-Method：方法对象" class="headerlink" title="1.2.4 Method：方法对象"></a>1.2.4 Method：方法对象</h2><ul><li>执行方法：<ul><li><strong><code>Object invoke(Object obj, Object... args)</code></strong></li></ul></li><li>获取方法名称：</li><li><strong><code>String getName</code></strong>：获取方法名</li></ul><h2 id="1-2-5-案例："><a href="#1-2-5-案例：" class="headerlink" title="1.2.5 案例："></a>1.2.5 案例：</h2><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><p>写一个“框架”，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法</p><h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><ol><li>配置文件</li><li>反射</li></ol><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li><li>在程序中加载读取配置文件</li><li>使用反射技术来加载类文件进内存</li><li>创建对象</li><li>执行方法</li></ol><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载配置文件</span></span><br><span class="line">        <span class="comment">//1.1创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//1.2加载配置文件，转换为一个集合</span></span><br><span class="line">        <span class="comment">//1.2.1获取class目录下的配置文件</span></span><br><span class="line">        ClassLoader classLoader = ReflectTest<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">"pro.properties"</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取配置文件中定义的数据</span></span><br><span class="line">        String className = pro.getProperty(<span class="string">"className"</span>);</span><br><span class="line">        String methodName = pro.getProperty(<span class="string">"methodName"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.加载该类进内存</span></span><br><span class="line">        Class cls = Class.forName(className);</span><br><span class="line">        <span class="comment">//4.创建对象</span></span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line">        <span class="comment">//5.获取方法对象</span></span><br><span class="line">        Method method = cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//6.执行方法</span></span><br><span class="line">        method.invoke(obj);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四部分 第一章 1.Junit单元测试</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/01_1%20Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/JavaWeb/01_1%20Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-Junit单元测试："><a href="#1-1-Junit单元测试：" class="headerlink" title="1. 1 Junit单元测试："></a>1. 1 Junit单元测试：</h1><h2 id="1-1-1-测试分类："><a href="#1-1-1-测试分类：" class="headerlink" title="1.1.1 测试分类："></a>1.1.1 测试分类：</h2><ul><li><p><strong>黑盒测试</strong>：不需要写代码，给输入值，看程序是否能够输出期望的值。</p></li><li><p><strong>白盒测试</strong>：需要写代码的。关注程序具体的执行流程。</p><img src="//cdn.foreversfj.com/image/blog/20190904/rJMAdRGoEy3F.png!blog" style="zoom:70%"/><img src="//cdn.foreversfj.com/image/blog/20190904/loWsoom5JRPu.png!blog" style="zoom:100%"/></li></ul><h2 id="1-1-2-Junit使用：白盒测试"><a href="#1-1-2-Junit使用：白盒测试" class="headerlink" title="1.1.2 Junit使用：白盒测试"></a>1.1.2 Junit使用：白盒测试</h2><h3 id="1-1-2-1-步骤："><a href="#1-1-2-1-步骤：" class="headerlink" title="1.1.2.1 步骤："></a>1.1.2.1 步骤：</h3><ol><li><strong>定义一个测试类(测试用例)</strong></li></ol><ul><li><strong>建议：</strong><ul><li>测试类名：被测试的类名Test===&gt;<code>CalculatorTest</code></li><li>包名：xxx.xxx.xx.test===&gt;<code>cn.itcast.test</code></li></ul></li></ul><ol start="2"><li><strong>定义测试方法：可以独立运行</strong></li></ol><ul><li><strong>建议：</strong><ul><li>方法名：test测试的方法名===&gt;<code>testAdd()</code></li><li>返回值：void</li><li>参数列表：空参</li></ul></li></ul><ol start="3"><li><p><strong>给方法加@Test</strong></p></li><li><p><strong>导入junit依赖环境</strong></p></li></ol><h3 id="1-1-2-2-判定结果："><a href="#1-1-2-2-判定结果：" class="headerlink" title="1.1.2.2 判定结果："></a>1.1.2.2 判定结果：</h3><ul><li>红色：失败</li><li>绿色：成功</li><li>一般我们会使用断言操作来处理结果<ul><li><code>Assert.assertEquals</code>(期望的结果,运算的结果);</li></ul></li></ul><h3 id="1-1-2-3-补充："><a href="#1-1-2-3-补充：" class="headerlink" title="1.1.2.3 补充："></a>1.1.2.3 补充：</h3><ul><li><code>@Before:</code><ul><li>修饰的方法会在测试方法之前被自动执行</li></ul></li><li><code>@After:</code><ul><li>修饰的方法会在测试方法执行之后自动被执行</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第十三章 2.方法引用（二）</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/java_basic/part03/13_2_2%20%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8(%E4%BA%8C).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/java_basic/part03/13_2_2%20%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8(%E4%BA%8C).html</url>
      
        <content type="html"><![CDATA[<h1 id="13-2-方法引用"><a href="#13-2-方法引用" class="headerlink" title="13.2 方法引用"></a>13.2 方法引用</h1><h2 id="13-2-7-通过super引用成员方法"><a href="#13-2-7-通过super引用成员方法" class="headerlink" title="13.2.7 通过super引用成员方法"></a>13.2.7 通过super引用成员方法</h2><p>&emsp;&emsp;如果存在继承关系，当Lambda中需要出现super调用时，也可以使用方法引用进行替代。首先是函数式接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Greetable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后是父类<code>Human</code>的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;最后是子类<code>Man</code>的内容，其中使用了Lambda的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大家好,我是Man!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义方法method,参数传递Greetable接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Greetable g)</span></span>&#123;</span><br><span class="line">        g.greet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用method方法,使用Lambda表达式</span></span><br><span class="line">        method(()‐&gt;&#123;</span><br><span class="line">            <span class="comment">//创建Human对象,调用sayHello方法</span></span><br><span class="line">            <span class="keyword">new</span> Human().sayHello();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//简化Lambda</span></span><br><span class="line">        method(()‐&gt;<span class="keyword">new</span> Human().sayHello());</span><br><span class="line">        <span class="comment">//使用super关键字代替父类对象</span></span><br><span class="line">        method(()‐&gt;<span class="keyword">super</span>.sayHello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;但是如果使用方法引用来调用父类中的<code>sayHello</code>方法会更好，例如另一个子类<code>Woman</code>**：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大家好,我是Man!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义方法method,参数传递Greetable接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Greetable g)</span></span>&#123;</span><br><span class="line">        g.greet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        method(<span class="keyword">super</span>::sayHello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在这个例子中，下面两种写法是等效的：</p><ul><li>Lambda表达式：<code>() -&gt; super.sayHello()</code></li><li>方法引用： <code>super::sayHello</code></li></ul><h2 id="13-2-8-通过this引用成员方法"><a href="#13-2-8-通过this引用成员方法" class="headerlink" title="13.2.8 通过this引用成员方法"></a>13.2.8 通过this引用成员方法</h2><p>&emsp;&emsp;this代表当前对象，如果需要引用的方法就是当前类中的成员方法，那么可以使用“<strong>this<code>::</code>成员方法</strong>”的格式来使用方法引用。首先是简单的函数式接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Richable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个丈夫<code>Husband</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Husband</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">marry</span><span class="params">(Richable lambda)</span> </span>&#123;</span><br><span class="line">        lambda.buy();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beHappy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        marry(() ‐&gt; System.out.println(<span class="string">"买套房子"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;开心方法<code>beHappy</code>调用了结婚方法<code>marry</code>，后者的参数为函数式接口<code>Richable</code>，所以需要一个Lambda表达式。但是如果这个Lambda表达式的内容已经在本类当中存在了，则可以对<code>Husband</code>丈夫类进行修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Husband</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buyHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"买套房子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">marry</span><span class="params">(Richable lambda)</span> </span>&#123;</span><br><span class="line">        lambda.buy();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beHappy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        marry(() ‐&gt; <span class="keyword">this</span>.buyHouse());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果希望取消掉Lambda表达式，用方法引用进行替换，则更好的写法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Husband</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buyHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"买套房子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">marry</span><span class="params">(Richable lambda)</span> </span>&#123;</span><br><span class="line">        lambda.buy();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beHappy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        marry(<span class="keyword">this</span>::buyHouse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，下面两种写法是等效的：</p><ul><li>Lambda表达式： <code>() -&gt; this.buyHouse()</code></li><li>方法引用：<code>this::buyHouse</code></li></ul><h2 id="13-2-9-类的构造器引用"><a href="#13-2-9-类的构造器引用" class="headerlink" title="13.2.9 类的构造器引用"></a>13.2.9 类的构造器引用</h2><p>&emsp;&emsp;由于构造器的名称与类名完全一样，并不固定。所以构造器引用使用 <code>类名称::new</code> 的格式表示。首先是一个简单的<code>Person</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后是用来创建Person 对象的函数式接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">buildPerson</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;要使用这个函数式接口，可以通过Lambda表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09Lambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">(String name, PersonBuilder builder)</span> </span>&#123;</span><br><span class="line">        System.out.println(builder.buildPerson(name).getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        printName(<span class="string">"赵丽颖"</span>, name ‐&gt; <span class="keyword">new</span> Person(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;但是通过构造器引用，有更好的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10ConstructorRef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">(String name, PersonBuilder builder)</span> </span>&#123;</span><br><span class="line">        System.out.println(builder.buildPerson(name).getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        printName(<span class="string">"赵丽颖"</span>, Person::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在这个例子中，下面两种写法是等效的：</p><ul><li>Lambda表达式：<code>name -&gt; new Person(name)</code></li><li>方法引用： <code>Person::new</code></li></ul><h2 id="13-2-10-数组的构造器引用"><a href="#13-2-10-数组的构造器引用" class="headerlink" title="13.2.10 数组的构造器引用"></a>13.2.10 数组的构造器引用</h2><p>&emsp;&emsp;数组也是<code>Object</code>的子类对象，所以同样具有构造器，只是语法稍有不同。如果对应到Lambda的使用场景中时，需要一个函数式接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArrayBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] buildArray(<span class="keyword">int</span> length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在应用该接口的时候，可以通过Lambda表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11ArrayInitRef</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] initArray(<span class="keyword">int</span> length, ArrayBuilder builder) &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.buildArray(length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = initArray(<span class="number">10</span>, length ‐&gt; <span class="keyword">new</span> <span class="keyword">int</span>[length]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;但是更好的写法是使用数组的构造器引用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo12ArrayInitRef</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] initArray(<span class="keyword">int</span> length, ArrayBuilder builder) &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.buildArray(length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = initArray(<span class="number">10</span>, <span class="keyword">int</span>[]::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在这个例子中，下面两种写法是等效的：</p><ul><li>Lambda表达式：<code>length -&gt; new int[length]</code></li><li>方法引用：<code>int[]::new</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第十三章 2.方法引用（一）</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/java_basic/part03/13_2_1%20%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8(%E4%B8%80).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/java_basic/part03/13_2_1%20%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8(%E4%B8%80).html</url>
      
        <content type="html"><![CDATA[<h1 id="13-2-方法引用"><a href="#13-2-方法引用" class="headerlink" title="13.2 方法引用"></a>13.2 方法引用</h1><p>&emsp;&emsp;在使用Lambda表达式的时候，我们实际上传递进去的代码就是一种解决方案：拿什么参数做什么操作。那么考虑一种情况：如果我们在Lambda中所指定的操作方案，已经有地方存在相同方案，那是否还有必要再写重复逻辑？</p><h2 id="13-2-1-冗余的Lambda场景"><a href="#13-2-1-冗余的Lambda场景" class="headerlink" title="13.2.1 冗余的Lambda场景"></a>13.2.1 冗余的Lambda场景</h2><p>&emsp;&emsp;来看一个简单的函数式接口以应用Lambda表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在<code>Printable</code>接口当中唯一的抽象方法<code>print</code>接收一个字符串参数，目的就是为了打印显示它。那么通过Lambda来使用它的代码很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01PrintSimple</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printString</span><span class="params">(Printable data)</span> </span>&#123;</span><br><span class="line">        data.print(<span class="string">"Hello, World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        printString(s ‐&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其中<code>printString</code>方法只管调用<code>Printable</code>接口的<code>print</code>方法，而并不管<code>print</code>方法的具体实现逻辑会将字符串打印到什么地方去。而<code>main</code> 方法通过Lambda表达式指定了函数式接口<code>Printable</code>的具体操作方案为：<strong>拿到String（类型可推导，所以可省略）数据后，在控制台中输出它</strong>。</p><h2 id="13-2-2-问题分析"><a href="#13-2-2-问题分析" class="headerlink" title="13.2.2 问题分析"></a>13.2.2 问题分析</h2><p>&emsp;&emsp;这段代码的问题在于，对字符串进行控制台打印输出的操作方案，明明已经有了现成的实现，那就是<code>System.out</code>对象中的<code>println(String)</code> 方法。既然Lambda希望做的事情就是调用<code>println(String)</code>方法，那何必自己手动调用呢？</p><h2 id="13-2-3-用方法引用改进代码"><a href="#13-2-3-用方法引用改进代码" class="headerlink" title="13.2.3 用方法引用改进代码"></a>13.2.3 用方法引用改进代码</h2><p>&emsp;&emsp;能否省去Lambda的语法格式（尽管它已经相当简洁）呢？只要“引用”过去就好了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02PrintRef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printString</span><span class="params">(Printable data)</span> </span>&#123;</span><br><span class="line">        data.print(<span class="string">"Hello, World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        printString(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;请注意其中的双冒号<code>::</code> 写法，这被称为“方法引用”，而双冒号是一种新的语法。</p><h2 id="13-2-4-方法引用符"><a href="#13-2-4-方法引用符" class="headerlink" title="13.2.4 方法引用符"></a>13.2.4 方法引用符</h2><p>&emsp;&emsp;双冒号<code>::</code> 为引用运算符，而它所在的表达式被称为方法引用。如果Lambda要表达的函数方案已经存在于某个方法的实现中，那么则可以通过双冒号来引用该方法作为Lambda的替代者。</p><h3 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h3><p>&emsp;&emsp;例如上例中， <code>System.out</code> 对象中有一个重载的<code>println(String)</code>方法恰好就是我们所需要的。那么对于<code>printString</code>方法的函数式接口参数，对比下面两种写法，完全等效：</p><ul><li>Lambda表达式写法：<code>s -&gt;</code> <code>System.out.println(s)</code>;</li><li>方法引用写法： <code>System.out::println</code></li></ul><p>&emsp;&emsp;第一种语义是指：拿到参数之后经Lambda之手，继而传递给<code>System.out.println</code> 方法去处理。</p><p>&emsp;&emsp;第二种等效写法的语义是指：直接让<code>System.out</code> 中的<code>println</code>方法来取代Lambda。两种写法的执行效果完全一样，而第二种方法引用的写法复用了已有方案，更加简洁。</p><blockquote><p>注意：<br>&emsp;&emsp;Lambda 中 传递的参数 一定是方法引用中 的那个方法可以接收的类型,否则会抛出异常</p></blockquote><h3 id="推导与省略"><a href="#推导与省略" class="headerlink" title="推导与省略"></a>推导与省略</h3><p>&emsp;&emsp;如果使用Lambda，那么根据“<strong>可推导就是可省略</strong>”的原则，无需指定参数类型，也无需指定的重载形式——它们都将被自动推导。而如果使用方法引用，也是同样可以根据上下文进行推导。</p><p>&emsp;&emsp;函数式接口是Lambda的基础，而方法引用是Lambda的孪生兄弟。</p><p>&emsp;&emsp;下面这段代码将会调用<code>println</code>方法的不同重载形式，将函数式接口改为int类型的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PrintableInteger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> str)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;由于上下文变了之后可以自动推导出唯一对应的匹配重载，所以方法引用没有任何变化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03PrintOverload</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInteger</span><span class="params">(PrintableInteger data)</span> </span>&#123;</span><br><span class="line">        data.print(<span class="number">1024</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        printInteger(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这次方法引用将会自动匹配到println(int) 的重载形式。</p><h2 id="13-2-5-通过对象名引用成员方法"><a href="#13-2-5-通过对象名引用成员方法" class="headerlink" title="13.2.5 通过对象名引用成员方法"></a>13.2.5 通过对象名引用成员方法</h2><p>&emsp;&emsp;这是最常见的一种用法，与上例相同。如果一个类中已经存在了一个成员方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodRefObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUpperCase</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数式接口仍然定义为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;那么当需要使用这个<code>printUpperCase</code>成员方法来替代<code>Printable</code>接口的Lambda的时候，已经具有了<code>MethodRefObject</code>类的对象实例，则可以通过对象名引用成员方法，代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04MethodRef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printString</span><span class="params">(Printable lambda)</span> </span>&#123;</span><br><span class="line">        lambda.print(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MethodRefObject obj = <span class="keyword">new</span> MethodRefObject();</span><br><span class="line">        printString(obj::printUpperCase);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-2-6-通过类名称引用静态方法"><a href="#13-2-6-通过类名称引用静态方法" class="headerlink" title="13.2.6 通过类名称引用静态方法"></a>13.2.6 通过类名称引用静态方法</h2><p>&emsp;&emsp;由于在<code>java.lang.Math</code>类中已经存在了静态方法<code>abs</code>，所以当我们需要通过Lambda来调用该方法时，有两种写法。首先是函数式接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calcable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种写法是使用Lambda表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Lambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> num, Calcable lambda)</span> </span>&#123;</span><br><span class="line">        System.out.println(lambda.calc(num));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method(‐<span class="number">10</span>, n ‐&gt; Math.abs(n));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是使用方法引用的更好写法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06MethodRef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> num, Calcable lambda)</span> </span>&#123;</span><br><span class="line">        System.out.println(lambda.calc(num));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method(‐<span class="number">10</span>, Math::abs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，下面两种写法是等效的：</p><ul><li>Lambda表达式：<code>n -&gt; Math.abs(n)</code></li><li>方法引用： <code>Math::abs</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第十三章 1.Stream流（二）</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/java_basic/part03/13_1_2%20Stream%E6%B5%81(%E4%BA%8C).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/java_basic/part03/13_1_2%20Stream%E6%B5%81(%E4%BA%8C).html</url>
      
        <content type="html"><![CDATA[<h1 id="13-1-Stream流"><a href="#13-1-Stream流" class="headerlink" title="13.1 Stream流"></a>13.1 Stream流</h1><h2 id="13-1-4-常用方法"><a href="#13-1-4-常用方法" class="headerlink" title="13.1.4. 常用方法"></a>13.1.4. 常用方法</h2><img src="//cdn.foreversfj.com/image/blog/20190824/WjhdQMUM8XmD.png!blog" style="zoom:65%"/><p>&emsp;&emsp;流模型的操作很丰富，这里介绍一些常用的API。这些方法可以被分成两种：</p><ul><li><strong>延迟方法</strong>：返回值类型仍然是<code>Stream</code> 接口自身类型的方法，因此支持链式调用。（除了终结方法外，其余方法均为延迟方法。）</li><li><strong>终结方法</strong>：返回值类型不再是<code>Stream</code> 接口自身类型的方法，因此不再支持类似<code>StringBuilder</code> 那样的链式调用。本小节中，终结方法包括<code>count</code> 和<code>forEach</code> 方法。</li></ul><h3 id="13-1-4-1逐一处理：forEach"><a href="#13-1-4-1逐一处理：forEach" class="headerlink" title="13.1.4.1逐一处理：forEach"></a>13.1.4.1逐一处理：forEach</h3><p>&emsp;&emsp;虽然方法名字叫<code>forEach</code> ，但是与for循环中的“for-each”昵称不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</span><br></pre></td></tr></table></figure><p>该方法接收一个<code>Consumer</code>接口函数，会将每一个流元素交给该函数进行处理。</p><h4 id="复习Consumer接口"><a href="#复习Consumer接口" class="headerlink" title="复习Consumer接口"></a>复习Consumer接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.util.function.Consumer&lt;T&gt;接口是一个消费型接口。</span><br><span class="line">Consumer接口中包含抽象方法<span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span>，意为消费一个指定泛型的数据。</span></span><br></pre></td></tr></table></figure><h4 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo12StreamForEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">        stream.forEach(name‐&gt; System.out.println(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-1-4-2过滤：filter"><a href="#13-1-4-2过滤：filter" class="headerlink" title="13.1.4.2过滤：filter"></a>13.1.4.2过滤：filter</h3><p>&emsp;&emsp;可以通过<code>filter</code>方法将一个流转换成另一个子集流。方法签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span></span>;</span><br></pre></td></tr></table></figure><p>该接口接收一个<code>Predicate</code>函数式接口参数（可以是一个Lambda或方法引用）作为筛选条件。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/vF7l4yJnkR5y.png!blog" alt=""></p><h4 id="复习Predicate接口"><a href="#复习Predicate接口" class="headerlink" title="复习Predicate接口"></a>复习Predicate接口</h4><p>&emsp;&emsp;此前我们已经学习过<code>java.util.stream.Predicate</code> 函数式接口，其中唯一的抽象方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;该方法将会产生一个boolean值结果，代表指定的条件是否满足。如果结果为true，那么Stream流的filter 方法将会留用元素；如果结果为false，那么<code>filter</code>方法将会舍弃元素。</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>Stream流中的<code>filter</code>方法基本使用的代码如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07StreamFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">        Stream&lt;String&gt; result = original.filter(s ‐&gt; s.startsWith(<span class="string">"张"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在这里通过Lambda表达式来指定了筛选的条件：必须姓张。</p><h3 id="13-1-4-3-映射：map"><a href="#13-1-4-3-映射：map" class="headerlink" title="13.1.4.3 映射：map"></a>13.1.4.3 映射：map</h3><p>&emsp;&emsp;如果需要将流中的元素映射到另一个流中，可以使用map 方法。方法签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;R&gt; <span class="function">Stream&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends R&gt; mapper)</span></span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;该接口需要一个<code>Function</code> 函数式接口参数，可以将当前流中的T类型数据转换为另一种R类型的流。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/Mye9F56kyYW8.png!blog" alt=""></p><h4 id="复习Function接口"><a href="#复习Function接口" class="headerlink" title="复习Function接口"></a>复习Function接口</h4><p>&emsp;&emsp;此前我们已经学习过<code>java.util.stream.Function</code> 函数式接口，其中唯一的抽象方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这可以将一种T类型转换成为R类型，而这种转换的动作，就称为“映射”。</p><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><p>&emsp;&emsp;Stream流中的<code>map</code> 方法基本使用的代码如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08StreamMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"10"</span>, <span class="string">"12"</span>, <span class="string">"18"</span>);</span><br><span class="line">        Stream&lt;Integer&gt; result = original.map(str‐&gt;Integer.parseInt(str));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这段代码中，<code>map</code>方法的参数通过方法引用，将字符串类型转换成为了int类型（并自动装箱为<code>Integer</code>类对象）。</p><h3 id="13-1-4-4-统计个数：count"><a href="#13-1-4-4-统计个数：count" class="headerlink" title="13.1.4.4 统计个数：count"></a>13.1.4.4 统计个数：count</h3><p>&emsp;&emsp;正如旧集合<code>Collection</code>当中的<code>size</code>方法一样，流提供<code>count</code>方法来数一数其中的元素个数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;该方法返回一个long值代表元素个数（不再像旧集合那样是int值）。基本使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09StreamCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">        Stream&lt;String&gt; result = original.filter(s ‐&gt; s.startsWith(<span class="string">"张"</span>));</span><br><span class="line">        System.out.println(result.count()); <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="取用前几个：limit"><a href="#取用前几个：limit" class="headerlink" title="取用前几个：limit"></a>取用前几个：limit</h4><p><code>limit</code>方法可以对流进行截取，只取用前n个。方法签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">limit</span><span class="params">(<span class="keyword">long</span> maxSize)</span></span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;参数是一个long型，如果集合当前长度大于参数则进行截取；否则不进行操作。基本使用：</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/sOrrVJzsTLgP.png!blog" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10StreamLimit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">        Stream&lt;String&gt; result = original.limit(<span class="number">2</span>);</span><br><span class="line">        System.out.println(result.count()); <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="跳过前几个：skip"><a href="#跳过前几个：skip" class="headerlink" title="跳过前几个：skip"></a>跳过前几个：skip</h4><p>&emsp;&emsp;如果希望跳过前几个元素，可以使用skip 方法获取一个截取之后的新流：</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/CtpE7hfntNjy.png!blog" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11StreamSkip</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">        Stream&lt;String&gt; result = original.skip(<span class="number">2</span>);</span><br><span class="line">        System.out.println(result.count()); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-1-4-5-组合：concat"><a href="#13-1-4-5-组合：concat" class="headerlink" title="13.1.4.5 组合：concat"></a>13.1.4.5 组合：concat</h3><p>&emsp;&emsp;如果有两个流，希望合并成为一个流，那么可以使用<code>Stream</code>接口的静态方法<code>concat</code>**：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">Stream&lt;T&gt; <span class="title">concat</span><span class="params">(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>备注：这是一个静态方法，与<code>java.lang.String</code> 当中的<code>concat</code>方法是不同的。</p></blockquote><p>该方法的基本使用代码如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo12StreamConcat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; streamA = Stream.of(<span class="string">"张无忌"</span>);</span><br><span class="line">        Stream&lt;String&gt; streamB = Stream.of(<span class="string">"张翠山"</span>);</span><br><span class="line">        Stream&lt;String&gt; result = Stream.concat(streamA, streamB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-1-5-练习：集合元素处理（传统方式）"><a href="#13-1-5-练习：集合元素处理（传统方式）" class="headerlink" title="13.1.5 练习：集合元素处理（传统方式）"></a>13.1.5 练习：集合元素处理（传统方式）</h2><h3 id="13-1-5-1-题目"><a href="#13-1-5-1-题目" class="headerlink" title="13.1.5.1 题目"></a>13.1.5.1 题目</h3><p>&emsp;&emsp;现在有两个<code>ArrayList</code>集合存储队伍当中的多个成员姓名，要求使用传统的for循环（或增强for循环）依次进行以下若干操作步骤：</p><ol><li>第一个队伍只要名字为3个字的成员姓名；存储到一个新集合中。</li><li>第一个队伍筛选之后只要前3个人；存储到一个新集合中。</li><li>第二个队伍只要姓张的成员姓名；存储到一个新集合中。</li><li>第二个队伍筛选之后不要前2个人；存储到一个新集合中。</li><li>将两个队伍合并为一个队伍；存储到一个新集合中。</li><li>根据姓名创建<code>Person</code>对象；存储到一个新集合中。</li><li>打印整个队伍的Person对象信息。</li></ol><p>两个队伍（集合）的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoArrayListNames</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        one.add(<span class="string">"迪丽热巴"</span>);</span><br><span class="line">        one.add(<span class="string">"宋远桥"</span>);</span><br><span class="line">        one.add(<span class="string">"苏星河"</span>);</span><br><span class="line">        one.add(<span class="string">"石破天"</span>);</span><br><span class="line">        one.add(<span class="string">"石中玉"</span>);</span><br><span class="line">        one.add(<span class="string">"老子"</span>);</span><br><span class="line">        one.add(<span class="string">"庄子"</span>);</span><br><span class="line">        one.add(<span class="string">"洪七公"</span>);</span><br><span class="line">        <span class="comment">//第二支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        two.add(<span class="string">"古力娜扎"</span>);</span><br><span class="line">        two.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        two.add(<span class="string">"赵丽颖"</span>);</span><br><span class="line">        two.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        two.add(<span class="string">"尼古拉斯赵四"</span>);</span><br><span class="line">        two.add(<span class="string">"张天爱"</span>);</span><br><span class="line">        two.add(<span class="string">"张二狗"</span>);</span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>Person</code>类的代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;name='"</span> + name + <span class="string">"'&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-1-5-2-解答"><a href="#13-1-5-2-解答" class="headerlink" title="13.1.5.2 解答"></a>13.1.5.2 解答</h3><p>既然使用传统的for循环写法，那么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoArrayListNames</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        List&lt;String&gt; two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// 第一个队伍只要名字为3个字的成员姓名；</span></span><br><span class="line">        List&lt;String&gt; oneA = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : one) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.length() == <span class="number">3</span>) &#123;</span><br><span class="line">                oneA.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一个队伍筛选之后只要前3个人；</span></span><br><span class="line">        List&lt;String&gt; oneB = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            oneB.add(oneA.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第二个队伍只要姓张的成员姓名；</span></span><br><span class="line">        List&lt;String&gt; twoA = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : two) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.startsWith(<span class="string">"张"</span>)) &#123;</span><br><span class="line">                twoA.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第二个队伍筛选之后不要前2个人；</span></span><br><span class="line">        List&lt;String&gt; twoB = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; twoA.size(); i++) &#123;</span><br><span class="line">            twoB.add(twoA.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将两个队伍合并为一个队伍；</span></span><br><span class="line">        List&lt;String&gt; totalNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        totalNames.addAll(oneB);</span><br><span class="line">        totalNames.addAll(twoB);</span><br><span class="line">        <span class="comment">// 根据姓名创建Person对象；</span></span><br><span class="line">        List&lt;Person&gt; totalPersonList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : totalNames) &#123;</span><br><span class="line">            totalPersonList.add(<span class="keyword">new</span> Person(name));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印整个队伍的Person对象信息。</span></span><br><span class="line">        <span class="keyword">for</span> (Person person : totalPersonList) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name='宋远桥'&#125;</span><br><span class="line">Person&#123;name='苏星河'&#125;</span><br><span class="line">Person&#123;name='石破天'&#125;</span><br><span class="line">Person&#123;name='张天爱'&#125;</span><br><span class="line">Person&#123;name='张二狗'&#125;</span><br></pre></td></tr></table></figure><h2 id="13-1-6-练习：集合元素处理（Stream方式）"><a href="#13-1-6-练习：集合元素处理（Stream方式）" class="headerlink" title="13.1.6 练习：集合元素处理（Stream方式）"></a>13.1.6 练习：集合元素处理（Stream方式）</h2><h3 id="13-1-6-1-题目"><a href="#13-1-6-1-题目" class="headerlink" title="13.1.6.1 题目"></a>13.1.6.1 题目</h3><p>&emsp;&emsp;将上一题当中的传统for循环写法更换为Stream流式处理方式。两个集合的初始内容不变， Person 类的定义也不变。</p><h3 id="13-1-6-2-解答"><a href="#13-1-6-2-解答" class="headerlink" title="13.1.6.2 解答"></a>13.1.6.2 解答</h3><p>等效的Stream流式处理代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoStreamNames</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        List&lt;String&gt; two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// 第一个队伍只要名字为3个字的成员姓名；</span></span><br><span class="line">        <span class="comment">// 第一个队伍筛选之后只要前3个人；</span></span><br><span class="line">        Stream&lt;String&gt; streamOne = one.stream().filter(s ‐&gt; </span><br><span class="line">                                   s.length() == <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 第二个队伍只要姓张的成员姓名；</span></span><br><span class="line">        <span class="comment">// 第二个队伍筛选之后不要前2个人；</span></span><br><span class="line">        Stream&lt;String&gt; streamTwo = two.stream().filter(s ‐&gt; </span><br><span class="line">                                   s.startsWith(<span class="string">"张"</span>)).skip(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 将两个队伍合并为一个队伍；</span></span><br><span class="line">        <span class="comment">// 根据姓名创建Person对象；</span></span><br><span class="line">        <span class="comment">// 打印整个队伍的Person对象信息。</span></span><br><span class="line">        Stream.concat(streamOne, streamTwo).map(Person::<span class="keyword">new</span>)</span><br><span class="line">                                 .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果完全一样：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name='宋远桥'&#125;</span><br><span class="line">Person&#123;name='苏星河'&#125;</span><br><span class="line">Person&#123;name='石破天'&#125;</span><br><span class="line">Person&#123;name='张天爱'&#125;</span><br><span class="line">Person&#123;name='张二狗'&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第十三章 1.Stream流（一）</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/java_basic/part03/13_1_1%20Stream%E6%B5%81(%E4%B8%80).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/java_basic/part03/13_1_1%20Stream%E6%B5%81(%E4%B8%80).html</url>
      
        <content type="html"><![CDATA[<h1 id="13-1-Stream流"><a href="#13-1-Stream流" class="headerlink" title="13.1 Stream流"></a>13.1 Stream流</h1><p>&emsp;&emsp;说到Stream便容易想到I/O Stream，而实际上，谁规定“流”就一定是“IO流”呢？在Java 8中，得益于Lambda所带来的函数式编程，引入了一个全新的Stream概念，用于解决已有集合类库既有的弊端。</p><h2 id="13-1-1-引言"><a href="#13-1-1-引言" class="headerlink" title="13.1.1 引言"></a>13.1.1 引言</h2><h3 id="传统集合的多步遍历代码"><a href="#传统集合的多步遍历代码" class="headerlink" title="传统集合的多步遍历代码"></a>传统集合的多步遍历代码</h3><p>&emsp;&emsp;几乎所有的集合（如Collection 接口或Map 接口等）都支持直接或间接的遍历操作。而当我们需要对集合中的元素进行操作的时候，除了必需的添加、删除、获取外，最典型的就是集合遍历。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ForEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        list.add(<span class="string">"周芷若"</span>);</span><br><span class="line">        list.add(<span class="string">"赵敏"</span>);</span><br><span class="line">        list.add(<span class="string">"张强"</span>);</span><br><span class="line">        list.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String name : list) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这是一段非常简单的集合遍历操作：对集合中的每一个字符串都进行打印输出操作。</p><h3 id="循环遍历的弊端"><a href="#循环遍历的弊端" class="headerlink" title="循环遍历的弊端"></a>循环遍历的弊端</h3><p>&emsp;&emsp;Java 8的Lambda让我们可以更加专注于<strong>做什么</strong>（What），而不是<strong>怎么做</strong>（How），这点此前已经结合内部类进行了对比说明。现在，我们仔细体会一下上例代码，可以发现：</p><ul><li>for循环的语法就是“<strong>怎么做</strong>”</li><li>for循环的循环体才是“<strong>做什么</strong>”</li></ul><p>&emsp;&emsp;为什么使用循环？因为要进行遍历。但循环是遍历的唯一方式吗？遍历是指每一个元素逐一进行处理，而<strong>并不是从第一个到最后一个顺次处理的循环</strong>。前者是目的，后者是方式。</p><p>&emsp;&emsp;试想一下，如果希望对集合中的元素进行筛选过滤：</p><ol><li>将集合A根据条件一过滤为<strong>子集B</strong>；</li><li>然后再根据条件二过滤为<strong>子集C</strong>。</li></ol><p>&emsp;&emsp;那怎么办？在Java 8之前的做法可能为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02NormalFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        list.add(<span class="string">"周芷若"</span>);</span><br><span class="line">        list.add(<span class="string">"赵敏"</span>);</span><br><span class="line">        list.add(<span class="string">"张强"</span>);</span><br><span class="line">        list.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        List&lt;String&gt; zhangList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.startsWith(<span class="string">"张"</span>)) &#123;</span><br><span class="line">                zhangList.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; shortList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : zhangList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.length() == <span class="number">3</span>) &#123;</span><br><span class="line">                shortList.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String name : shortList) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中含有三个循环，每一个作用不同：</p><ol><li>首先筛选所有姓张的人；</li><li>然后筛选名字有三个字的人；</li><li>最后进行对结果进行打印输出。</li></ol><p>&emsp;&emsp;每当我们需要对集合中的元素进行操作的时候，总是需要进行循环、循环、再循环。这是理所当然的么？<strong>不是</strong>。循环是做事情的方式，而不是目的。另一方面，使用线性循环就意味着只能遍历一次。如果希望再次遍历，只能再使用另一个循环从头开始。</p><p>&emsp;&emsp;那，Lambda的衍生物Stream能给我们带来怎样更加优雅的写法呢？</p><h3 id="Stream的更优写法"><a href="#Stream的更优写法" class="headerlink" title="Stream的更优写法"></a>Stream的更优写法</h3><p>下面来看一下借助Java 8的Stream API，什么才叫优雅：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03StreamFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        list.add(<span class="string">"周芷若"</span>);</span><br><span class="line">        list.add(<span class="string">"赵敏"</span>);</span><br><span class="line">        list.add(<span class="string">"张强"</span>);</span><br><span class="line">        list.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        list.stream()</span><br><span class="line">            .filter(name -&gt; name.startsWith(<span class="string">"张"</span>))</span><br><span class="line">            .filter(name -&gt; name.length() == <span class="number">3</span>)</span><br><span class="line">            .forEach(name -&gt; System.out.println(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;直接阅读代码的字面意思即可完美展示无关逻辑方式的语义：<strong>获取流、过滤姓张、过滤长度为3、逐一打印</strong>。代码中并没有体现使用线性循环或是其他任何算法进行遍历，我们真正要做的事情内容被更好地体现在代码中。</p><h2 id="13-1-2-流式思想概述"><a href="#13-1-2-流式思想概述" class="headerlink" title="13.1.2 流式思想概述"></a>13.1.2 流式思想概述</h2><p><strong>注意：请暂时忘记对传统IO流的固有印象！</strong></p><p>&emsp;&emsp;整体来看，流式思想类似于工厂车间的“生产流水线”。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/VnRSpMMNDH5G.png!blog" alt=""></p><p>&emsp;&emsp;当需要对多个元素进行操作（特别是多步操作）的时候，考虑到性能及便利性，我们应该首先拼好一个“模型”步骤方案，然后再按照方案去执行它。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/AA2jkWtGdJvh.png!blog" alt=""></p><p>&emsp;&emsp;这张图中展示了过滤、映射、跳过、计数等多步操作，这是一种集合元素的处理方案，而方案就是一种“函数模型”。图中的每一个方框都是一个“流”，调用指定的方法，可以从一个流模型转换为另一个流模型。而最右侧的数字3是最终结果。</p><p>&emsp;&emsp;这里的<code>filter</code>、<code>map</code>、<code>skip</code>都是在对函数模型进行操作，集合元素并没有真正被处理。只有当终结方法<code>count</code>执行的时候，整个模型才会按照指定策略执行操作。而这得益于Lambda的延迟执行特性。</p><blockquote><p>备注：<br>&emsp;&emsp;<strong>Stream流</strong>其实是一个集合元素的函数模型，它并不是集合，也不是数据结构，其本身并不存储任何元素（或其地址值）。</p></blockquote><p>&emsp;&emsp;<strong>Stream</strong>（流）是一个来自数据源的元素队列</p><ul><li><p>元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。</p></li><li><p><strong>数据源</strong>：流的来源。 可以是集合，数组 等。</p><p>和以前的Collection操作不同， Stream操作还有两个基础的特征：</p><ul><li><p><strong>Pipelining</strong>：中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格(fluent style)。 这样做可以对操作进行优化， 比如延迟执行(laziness)和短路( short-circuiting)。</p></li><li><p><strong>内部迭代</strong>：以前对集合遍历都是通过Iterator或者增强for的方式, 显式的在集合外部进行迭代， 这叫做外部迭代。 Stream提供了内部迭代的方式，流可以直接调用遍历方法。</p></li></ul></li></ul><p>&emsp;&emsp;当使用一个流的时候，通常包括三个基本步骤：获取一个数据源（source）→ 数据转换→执行操作获取想要的结果，每次转换原有 Stream 对象不改变，返回一个新的 Stream 对象（可以有多次转换），这就允许对其操作可以像链条一样排列，变成一个管道。</p><h2 id="13-1-3-获取流"><a href="#13-1-3-获取流" class="headerlink" title="13.1.3 获取流"></a>13.1.3 获取流</h2><p><code>java.util.stream.Stream&lt;T&gt;</code> 是Java 8新加入的最常用的流接口。（这并不是一个函数式接口。）</p><p>&emsp;&emsp;获取一个流非常简单，有以下几种常用的方式：</p><ul><li><p>所有的<code>Collection</code> 集合都可以通过<code>stream</code> 默认方法获取流；</p></li><li><p><code>Stream</code> 接口的静态方法of 可以获取数组对应的流。</p></li></ul><h3 id="根据Collection获取流"><a href="#根据Collection获取流" class="headerlink" title="根据Collection获取流"></a>根据Collection获取流</h3><p>&emsp;&emsp;首先，<code>java.util.Collection</code>接口中加入了default方法<code>stream</code>用来获取流，所以其所有实现类均可获取流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04GetStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        Stream&lt;String&gt; stream1 = list.stream();</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        Stream&lt;String&gt; stream2 = set.stream();</span><br><span class="line">        Vector&lt;String&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        Stream&lt;String&gt; stream3 = vector.stream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="根据Map获取流"><a href="#根据Map获取流" class="headerlink" title="根据Map获取流"></a>根据Map获取流</h3><p>&emsp;&emsp;<code>java.util.Map</code> 接口不是<code>Collection</code> 的子接口，且其K-V数据结构不符合流元素的单一特征，所以获取对应的流需要分key、value或entry等情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05GetStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        Stream&lt;String&gt; keyStream = map.keySet().stream();</span><br><span class="line">        Stream&lt;String&gt; valueStream = map.values().stream();</span><br><span class="line">        Stream&lt;Map.Entry&lt;String, String&gt;&gt; entryStream = map.entrySet().stream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="根据数组获取流"><a href="#根据数组获取流" class="headerlink" title="根据数组获取流"></a>根据数组获取流</h3><p>&emsp;&emsp;如果使用的不是集合或映射而是数组，由于数组对象不可能添加默认方法，所以<code>Stream</code> 接口中提供了静态方法<code>of</code>，使用很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06GetStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] array = &#123; <span class="string">"张无忌"</span>, <span class="string">"张翠山"</span>, <span class="string">"张三丰"</span>, <span class="string">"张一元"</span> &#125;;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>备注：<code>of</code>方法的参数其实是一个可变参数，所以支持数组。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第十二章 3.常用函数式接口（二）</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/java_basic/part03/12_3_2%20%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3(%E4%BA%8C).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/java_basic/part03/12_3_2%20%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3(%E4%BA%8C).html</url>
      
        <content type="html"><![CDATA[<h1 id="12-3-常用函数式接口"><a href="#12-3-常用函数式接口" class="headerlink" title="12.3 常用函数式接口"></a>12.3 常用函数式接口</h1><h2 id="12-3-5-Predicate接口"><a href="#12-3-5-Predicate接口" class="headerlink" title="12.3.5 Predicate接口"></a>12.3.5 Predicate接口</h2><p>&emsp;&emsp;有时候需要对某种类型的数据进行判断，以得到一个boolean值结果。这时可以使用<code>java.util.function.Predicate&lt;T&gt;</code> 接口。</p><h3 id="抽象方法：test"><a href="#抽象方法：test" class="headerlink" title="抽象方法：test"></a>抽象方法：test</h3><p>&emsp;&emsp;Predicate 接口中包含一个抽象方法：<code>boolean test(T t)</code>。用于条件判断的场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo15PredicateTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Predicate&lt;String&gt; predicate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> veryLong = predicate.test(<span class="string">"HelloWorld"</span>);</span><br><span class="line">        System.out.println(<span class="string">"字符串很长吗："</span> + veryLong);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method(s ‐&gt; s.length() &gt; <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;条件判断的标准是传入的Lambda表达式逻辑，只要字符串长度大于5则认为很长。</p><h3 id="默认方法："><a href="#默认方法：" class="headerlink" title="默认方法："></a>默认方法：</h3><p>&emsp;&emsp;and既然是条件判断，就会存在与、或、非三种常见的逻辑关系。其中将两个Predicate 条件使用“与”逻辑连接起来实现“<strong>并且</strong>”的效果时，可以使用default方法and 。其JDK源码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(other);</span><br><span class="line">    <span class="keyword">return</span> (t) ‐&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果要判断一个字符串既要包含大写“H”，又要包含大写“W”，那么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo16PredicateAnd</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Predicate&lt;String&gt; one, </span></span></span><br><span class="line"><span class="function"><span class="params">                               Predicate&lt;String&gt; two)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isValid = one.and(two).test(<span class="string">"Helloworld"</span>);</span><br><span class="line">        System.out.println(<span class="string">"字符串符合要求吗："</span> + isValid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method(s ‐&gt; s.contains(<span class="string">"H"</span>), s ‐&gt; s.contains(<span class="string">"W"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="默认方法：or"><a href="#默认方法：or" class="headerlink" title="默认方法：or"></a>默认方法：or</h3><p>&emsp;&emsp;与<code>and</code>的“与”类似，默认方法<code>or</code>实现逻辑关系中的“或”。JDK源码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(other);</span><br><span class="line">    <span class="keyword">return</span> (t) ‐&gt; test(t) || other.test(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果希望实现逻辑“字符串包含大写H或者包含大写W”，那么代码只需要将“and”修改为“or”名称即可，其他都不变：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo16PredicateAnd</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Predicate&lt;String&gt; one, </span></span></span><br><span class="line"><span class="function"><span class="params">                               Predicate&lt;String&gt; two)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isValid = one.or(two).test(<span class="string">"Helloworld"</span>);</span><br><span class="line">        System.out.println(<span class="string">"字符串符合要求吗："</span> + isValid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method(s ‐&gt; s.contains(<span class="string">"H"</span>), s ‐&gt; s.contains(<span class="string">"W"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="默认方法：negate"><a href="#默认方法：negate" class="headerlink" title="默认方法：negate"></a>默认方法：negate</h3><p>&emsp;&emsp;“与”、“或”已经了解了，剩下的“非”（取反）也会简单。默认方法<code>negate</code> 的JDK源代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (t) ‐&gt; !test(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从实现中很容易看出，它是执行了test方法之后，对结果boolean值进行“!”取反而已。一定要在<code>test</code> 方法调用之前调用<code>negate</code> 方法，正如<code>and</code>和<code>or</code> 方法一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo17PredicateNegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Predicate&lt;String&gt; predicate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> veryLong = predicate.negate().test(<span class="string">"HelloWorld"</span>);</span><br><span class="line">        System.out.println(<span class="string">"字符串很长吗："</span> + veryLong);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method(s ‐&gt; s.length() &lt; <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-3-6-练习：集合信息筛选"><a href="#12-3-6-练习：集合信息筛选" class="headerlink" title="12.3.6 练习：集合信息筛选"></a>12.3.6 练习：集合信息筛选</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>&emsp;&emsp;数组当中有多条“姓名+性别”的信息如下，请通过<code>Predicate</code> 接口的拼装将符合要求的字符串筛选到集合<code>ArrayList</code> 中，需要同时满足两个条件：</p><ol><li><p>必须为女生；</p></li><li><p>姓名为4个字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoPredicate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] array = &#123; <span class="string">"迪丽热巴,女"</span>, <span class="string">"古力娜扎,女"</span>, </span><br><span class="line">                          <span class="string">"马尔扎哈,男"</span>, <span class="string">"赵丽颖,女"</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoPredicate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] array = &#123; <span class="string">"迪丽热巴,女"</span>, <span class="string">"古力娜扎,女"</span>, </span><br><span class="line">                          <span class="string">"马尔扎哈,男"</span>, <span class="string">"赵丽颖,女"</span> &#125;;</span><br><span class="line">        List&lt;String&gt; list = filter(array,</span><br><span class="line">                                   s ‐&gt; <span class="string">"女"</span>.equals(s.split(<span class="string">","</span>)[<span class="number">1</span>]),</span><br><span class="line">                                   s ‐&gt; s.split(<span class="string">","</span>)[<span class="number">0</span>].length() == <span class="number">4</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">filter</span><span class="params">(String[] array, </span></span></span><br><span class="line"><span class="function"><span class="params">                   Predicate&lt;String&gt; one,Predicate&lt;String&gt; two)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String info : array) &#123;</span><br><span class="line">            <span class="keyword">if</span> (one.and(two).test(info)) &#123;</span><br><span class="line">                list.add(info);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-3-7-Function接口"><a href="#12-3-7-Function接口" class="headerlink" title="12.3.7 Function接口"></a>12.3.7 Function接口</h2><p>&emsp;&emsp;<code>java.util.function.Function&lt;T,R&gt;</code>接口用来根据一个类型的数据得到另一个类型的数据，前者称为前置条件，后者称为后置条件。</p><h3 id="抽象方法：apply"><a href="#抽象方法：apply" class="headerlink" title="抽象方法：apply"></a>抽象方法：apply</h3><p>&emsp;&emsp;<code>Function</code>接口中最主要的抽象方法为：<code>R apply(T t)</code> ，根据类型T的参数获取类型R的结果。</p><p>使用的场景例如：将<code>String</code>类型转换为<code>Integer</code>类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11FunctionApply</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Function&lt;String, Integer&gt; function)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = function.apply(<span class="string">"10"</span>);</span><br><span class="line">        System.out.println(num + <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method(s ‐&gt; Integer.parseInt(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，最好是通过方法引用的写法。</p><h3 id="默认方法：andThen"><a href="#默认方法：andThen" class="headerlink" title="默认方法：andThen"></a>默认方法：andThen</h3><p>&emsp;&emsp;<code>Function</code>接口中有一个默认的<code>andThen</code> 方法，用来进行组合操作。JDK源代码如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;T, V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(after);</span><br><span class="line">    <span class="keyword">return</span> (T t) ‐&gt; after.apply(apply(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;该方法同样用于“先做什么，再做什么”的场景，和<code>Consumer</code>中的<code>andThen</code>差不多：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo12FunctionAndThen</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Function&lt;String, Integer&gt; one, </span></span></span><br><span class="line"><span class="function"><span class="params">                               Function&lt;Integer, Integer&gt; two)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = one.andThen(two).apply(<span class="string">"10"</span>);</span><br><span class="line">        System.out.println(num + <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method(str‐&gt;Integer.parseInt(str)+<span class="number">10</span>, i ‐&gt; i *= <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;第一个操作是将字符串解析成为int数字，第二个操作是乘以10。两个操作通过andThen 按照前后顺序组合到了一起。</p><blockquote><p>请注意，Function的前置条件泛型和后置条件泛型可以相同。</p></blockquote><h2 id="12-3-8-练习：自定义函数模型拼接"><a href="#12-3-8-练习：自定义函数模型拼接" class="headerlink" title="12.3.8 练习：自定义函数模型拼接"></a>12.3.8 练习：自定义函数模型拼接</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>&emsp;&emsp;请使用<code>Function</code> 进行函数模型的拼接，按照顺序需要执行的多个函数操作为：</p><p>String str = “赵丽颖,20”;</p><ol><li>将字符串截取数字年龄部分，得到字符串；</li><li>将上一步的字符串转换成为int类型的数字；</li><li>将上一步的int数字累加100，得到结果int数字。</li></ol><h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"赵丽颖,20"</span>;</span><br><span class="line">        <span class="keyword">int</span> age = getAgeNum(str, s ‐&gt; s.split(<span class="string">","</span>)[<span class="number">1</span>],</span><br><span class="line">                            s ‐&gt;Integer.parseInt(s), n ‐&gt; n += <span class="number">100</span>);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getAgeNum</span><span class="params">(String str, Function&lt;String, String&gt; one, </span></span></span><br><span class="line"><span class="function"><span class="params">                                 Function&lt;String, Integer&gt; two,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Function&lt;Integer, Integer&gt; three)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> one.andThen(two).andThen(three).apply(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第十二章 3.常用函数式接口（一）</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/java_basic/part03/12_3_1%20%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3(%E4%B8%80).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/java_basic/part03/12_3_1%20%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3(%E4%B8%80).html</url>
      
        <content type="html"><![CDATA[<h1 id="12-3-常用函数式接口"><a href="#12-3-常用函数式接口" class="headerlink" title="12.3 常用函数式接口"></a>12.3 常用函数式接口</h1><p>&emsp;&emsp;JDK提供了大量常用的函数式接口以丰富Lambda的典型使用场景，它们主要在<code>java.util.function</code> 包中被提供。下面是最简单的几个接口及使用示例。</p><h2 id="12-3-1-Supplier接口"><a href="#12-3-1-Supplier接口" class="headerlink" title="12.3.1 Supplier接口"></a>12.3.1 Supplier接口</h2><p>&emsp;&emsp;<code>java.util.function.Supplier&lt;T&gt;</code>接口仅包含一个无参的方法：<code>T get()</code>。用来获取一个泛型参数指定类型的对象数据。由于这是一个函数式接口，这也就意味着对应的Lambda表达式需要“<strong>对外提供</strong>”一个符合泛型类型的对象数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08Supplier</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">(Supplier&lt;String&gt; function)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> function.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String msgA = <span class="string">"Hello"</span>;</span><br><span class="line">        String msgB = <span class="string">"World"</span>;</span><br><span class="line">        System.out.println(getString(() ‐&gt; msgA + msgB));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-3-2-练习：求数组元素最大值"><a href="#12-3-2-练习：求数组元素最大值" class="headerlink" title="12.3.2 练习：求数组元素最大值"></a>12.3.2 练习：求数组元素最大值</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>&emsp;&emsp;使用<code>Supplier</code>接口作为方法参数类型，通过Lambda表达式求出int数组中的最大值。提示：接口的泛型请使用<code>java.lang.Integer</code>类。</p><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定一个方法,方法的参数传递Supplier,泛型使用Integer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(Supplier&lt;Integer&gt; sup)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sup.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">52</span>,<span class="number">333</span>,<span class="number">23</span>&#125;;</span><br><span class="line">        <span class="comment">//调用getMax方法,参数传递Lambda</span></span><br><span class="line">        <span class="keyword">int</span> maxNum = getMax(()‐&gt;&#123;</span><br><span class="line">            <span class="comment">//计算数组的最大值</span></span><br><span class="line">            <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;max)&#123;</span><br><span class="line">                    max = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(maxNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-3-3-Consumer接口"><a href="#12-3-3-Consumer接口" class="headerlink" title="12.3.3 Consumer接口"></a>12.3.3 Consumer接口</h2><p>&emsp;&emsp;<code>java.util.function.Consumer&lt;T&gt;</code>接口则正好与Supplier接口相反，它不是生产一个数据，而是<strong>消费</strong>一个数据，其数据类型由泛型决定。</p><h3 id="抽象方法：accept"><a href="#抽象方法：accept" class="headerlink" title="抽象方法：accept"></a>抽象方法：accept</h3><p>&emsp;&emsp;<code>Consumer</code>接口中包含抽象方法<code>void accept(T t)</code>，意为消费一个指定泛型的数据。基本使用如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumeString</span><span class="params">(Consumer&lt;String&gt; function)</span> </span>&#123;</span><br><span class="line">        function.accept(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        consumeString(s ‐&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，更好的写法是使用方法引用。</p><h3 id="默认方法：andThen"><a href="#默认方法：andThen" class="headerlink" title="默认方法：andThen"></a>默认方法：andThen</h3><p>&emsp;&emsp;如果一个方法的参数和返回值全都是<code>Consumer</code> 类型，那么就可以实现效果：消费数据的时候，首先做一个操作，然后再做一个操作，实现组合。而这个方法就是<code>Consumer</code> 接口中的default方法<code>andThen</code> 。下面是JDK的源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title">andThen</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(after);</span><br><span class="line">    <span class="keyword">return</span> (T t) ‐&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>备注：<br>&emsp;&emsp;<code>java.util.Objects</code>的<code>requireNonNull()</code>静态方法将会在参数为null时主动抛出<code>NullPointerException</code>异常。这省去了重复编写if语句和抛出空指针异常的麻烦。</p></blockquote><p>&emsp;&emsp;要想实现组合，需要两个或多个Lambda表达式即可，而<code>andThen</code> 的语义正是“一步接一步”操作。例如两个步骤组合的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10ConsumerAndThen</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumeString</span><span class="params">(Consumer&lt;String&gt; one, Consumer&lt;String&gt; two)</span> </span>&#123;</span><br><span class="line">        one.andThen(two).accept(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        consumeString(</span><br><span class="line">            s ‐&gt; System.out.println(s.toUpperCase()),</span><br><span class="line">            s ‐&gt; System.out.println(s.toLowerCase()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;运行结果将会首先打印完全大写的HELLO，然后打印完全小写的hello。当然，通过链式写法可以实现更多步骤的组合。</p><h2 id="12-3-4-练习：格式化打印信息"><a href="#12-3-4-练习：格式化打印信息" class="headerlink" title="12.3.4 练习：格式化打印信息"></a>12.3.4 练习：格式化打印信息</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>&emsp;&emsp;下面的字符串数组当中存有多条信息，请按照格式“ <code>姓名：XX。性别：XX</code>。”的格式将信息打印出来。要求将打印姓名的动作作为第一个<code>Consumer</code> 接口的Lambda实例，将打印性别的动作作为第二个<code>Consumer</code> 接口的Lambda实例，将两个<code>Consumer</code> 接口按照顺序“拼接”到一起。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String[] array = &#123; <span class="string">"迪丽热巴,女"</span>, <span class="string">"古力娜扎,女"</span>, <span class="string">"马尔扎哈,男"</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] array = &#123; <span class="string">"迪丽热巴,女"</span>, <span class="string">"古力娜扎,女"</span>, <span class="string">"马尔扎哈,男"</span> &#125;;</span><br><span class="line">        printInfo(s ‐&gt; System.out.print(<span class="string">"姓名："</span> + s.split(<span class="string">","</span>)[<span class="number">0</span>]),</span><br><span class="line">                  s ‐&gt; System.out.println(<span class="string">"。性别："</span> </span><br><span class="line">                                          + s.split(<span class="string">","</span>)[<span class="number">1</span>] + <span class="string">"。"</span>), </span><br><span class="line">                  array);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(Consumer&lt;String&gt; one, </span></span></span><br><span class="line"><span class="function"><span class="params">                                  Consumer&lt;String&gt; two, String[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String info : array) &#123;</span><br><span class="line">            one.andThen(two).accept(info); <span class="comment">// 姓名：迪丽热巴。性别：女。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第十二章 2.函数式编程</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/java_basic/part03/12_2%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/java_basic/part03/12_2%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="12-2-函数式编程"><a href="#12-2-函数式编程" class="headerlink" title="12.2 函数式编程"></a>12.2 函数式编程</h1><p>&emsp;&emsp;在兼顾面向对象特性的基础上，Java语言通过Lambda表达式与方法引用等，为开发者打开了函数式编程的大门。</p><h2 id="12-2-1-Lambda的延迟执行"><a href="#12-2-1-Lambda的延迟执行" class="headerlink" title="12.2.1 Lambda的延迟执行"></a>12.2.1 Lambda的延迟执行</h2><p>&emsp;&emsp;有些场景的代码执行后，结果不一定会被使用，从而造成性能浪费。而Lambda表达式是延迟执行的，这正好可以作为解决方案，提升性能。</p><h3 id="性能浪费的日志案例"><a href="#性能浪费的日志案例" class="headerlink" title="性能浪费的日志案例"></a>性能浪费的日志案例</h3><p>&emsp;&emsp;注:日志可以帮助我们快速的定位问题，记录程序运行过程中的情况，以便项目的监控和优化。</p><p>&emsp;&emsp;一种典型的场景就是对参数进行有条件使用，例如对日志消息进行拼接后，在满足条件的情况下进行打印输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Logger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">int</span> level, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (level == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String msgA = <span class="string">"Hello"</span>;</span><br><span class="line">        String msgB = <span class="string">"World"</span>;</span><br><span class="line">        String msgC = <span class="string">"Java"</span>;</span><br><span class="line">        log(<span class="number">1</span>, msgA + msgB + msgC);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这段代码存在问题：无论级别是否满足要求，作为<code>log</code> 方法的第二个参数，三个字符串一定会首先被拼接并传入方法内，然后才会进行级别判断。如果级别不符合要求，那么字符串的拼接操作就白做了，存在性能浪费。</p><blockquote><p><strong>备注：</strong><br>&emsp;&emsp;SLF4J是应用非常广泛的日志框架，它在记录日志时为了解决这种性能浪费的问题，并不推荐首先进行字符串的拼接，而是将字符串的若干部分作为可变参数传入方法中，仅在日志级别满足要求的情况下才会进行字符串拼接。例如：<code>LOGGER.debug(&quot;变量{}取值为{}.&quot;,&quot;os&quot;,&quot;macOS&quot;)</code>，其中的大括号<code>{}</code>为占位符。如果满足日志级别要求，则会将“os”和“macOS”两个字符串依次拼接到大括号的位置；否则不会进行字符串拼接。这也是一种可行解决方案，但Lambda可以做到更好。</p></blockquote><h3 id="体验Lambda的更优写法"><a href="#体验Lambda的更优写法" class="headerlink" title="体验Lambda的更优写法"></a>体验Lambda的更优写法</h3><p>使用Lambda必然需要一个函数式接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">buildMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对<code>log</code> 方法进行改造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02LoggerLambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">int</span> level, MessageBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (level == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(builder.buildMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String msgA = <span class="string">"Hello"</span>;</span><br><span class="line">        String msgB = <span class="string">"World"</span>;</span><br><span class="line">        String msgC = <span class="string">"Java"</span>;</span><br><span class="line">        log(<span class="number">1</span>, () ‐&gt; msgA + msgB + msgC );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&lt;br/&gt;</code>这样一来，只有当级别满足要求的时候，才会进行三个字符串的拼接；否则三个字符串将不会进行拼接。</p><h3 id="证明Lambda的延迟"><a href="#证明Lambda的延迟" class="headerlink" title="证明Lambda的延迟"></a>证明Lambda的延迟</h3><p>下面的代码可以通过结果进行验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03LoggerDelay</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">int</span> level, MessageBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (level == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(builder.buildMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String msgA = <span class="string">"Hello"</span>;</span><br><span class="line">        String msgB = <span class="string">"World"</span>;</span><br><span class="line">        String msgC = <span class="string">"Java"</span>;</span><br><span class="line">        log(<span class="number">2</span>, () ‐&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"Lambda执行！"</span>);</span><br><span class="line">            <span class="keyword">return</span> msgA + msgB + msgC;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从结果中可以看出，在不符合级别要求的情况下，Lambda将不会执行。从而达到节省性能的效果。</p><blockquote><p>扩展：<br>&emsp;&emsp;实际上使用内部类也可以达到同样的效果，只是将代码操作延迟到了另外一个对象当中通过调用方法来完成。而是否调用其所在方法是在条件判断之后才执行的。</p></blockquote><h2 id="12-2-2-使用Lambda作为参数和返回值"><a href="#12-2-2-使用Lambda作为参数和返回值" class="headerlink" title="12.2.2 使用Lambda作为参数和返回值"></a>12.2.2 使用Lambda作为参数和返回值</h2><p>&emsp;&emsp;如果抛开实现原理不说，Java中的Lambda表达式可以被当作是匿名内部类的替代品。如果方法的参数是一个函数式接口类型，那么就可以使用Lambda表达式进行替代。使用Lambda表达式作为方法参数，其实就是使用函数式接口作为方法参数。</p><p>&emsp;&emsp;例如<code>java.lang.Runnable</code>接口就是一个函数式接口，假设有一个<code>startThread</code>方法使用该接口作为参数，那么就可以使用Lambda进行传参。这种情况其实和<code>Thread</code>类的构造方法参数为<code>Runnable</code>没有本质区别。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        startThread(() ‐&gt; System.out.println(<span class="string">"线程任务执行！"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;类似地，如果一个方法的返回值类型是一个函数式接口，那么就可以直接返回一个Lambda表达式。当需要通过一个方法来获取一个<code>java.util.Comparator</code>接口类型的对象作为排序器时,就可以调该方法获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06Comparator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Comparator&lt;String&gt; <span class="title">newComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a, b) ‐&gt; b.length() ‐ a.length();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] array = &#123; <span class="string">"abc"</span>, <span class="string">"ab"</span>, <span class="string">"abcd"</span> &#125;;</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">        Arrays.sort(array, newComparator());</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中直接return一个Lambda表达式即可。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第十二章 1.函数式接口</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/java_basic/part03/12_1%20%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-22-/Java/java_basic/part03/12_1%20%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3.html</url>
      
        <content type="html"><![CDATA[<h1 id="12-1-函数式接口"><a href="#12-1-函数式接口" class="headerlink" title="12.1 函数式接口"></a>12.1 函数式接口</h1><h2 id="12-1-1-概念"><a href="#12-1-1-概念" class="headerlink" title="12.1.1 概念"></a>12.1.1 概念</h2><p>&emsp;&emsp;函数式接口在Java中是指：<strong>有且仅有一个抽象方法的接口</strong>。</p><p>&emsp;&emsp;函数式接口，即适用于函数式编程场景的接口。而Java中的函数式编程体现就是Lambda，所以函数式接口就是可以适用于Lambda使用的接口。只有确保接口中有且仅有一个抽象方法，Java中的Lambda才能顺利地进行推导。</p><blockquote><p>备注：<br>&emsp;&emsp;“语法糖”是指使用更加方便，但是原理不变的代码语法。例如在遍历集合时使用的for-each语法，其实底层的实现原理仍然是迭代器，这便是“语法糖”。从应用层面来讲，Java中的Lambda可以被当做是匿名内部类的“语法糖”，但是二者在原理上是不同的。</p></blockquote><h2 id="12-1-2-格式"><a href="#12-1-2-格式" class="headerlink" title="12.1.2 格式"></a>12.1.2 格式</h2><p>&emsp;&emsp;只要确保接口中有且仅有一个抽象方法即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> 接口名称 </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名称(可选参数信息);</span><br><span class="line">    <span class="comment">// 其他非抽象方法内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;由于接口当中抽象方法的<code>public abstract</code> 是可以省略的，所以定义一个函数式接口很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunctionalInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-1-3-FunctionalInterface注解"><a href="#12-1-3-FunctionalInterface注解" class="headerlink" title="12.1.3 @FunctionalInterface注解"></a>12.1.3 @FunctionalInterface注解</h2><p>&emsp;&emsp;与<code>@Override</code>注解的作用类似，Java 8中专门为函数式接口引入了一个新的注解：<code>@FunctionalInterface</code>。该注解可用于一个接口的定义上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunctionalInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;一旦使用该注解来定义接口，编译器将会强制检查该接口是否确实有且仅有一个抽象方法，否则将会报错。需要注意的是，即使不使用该注解，只要满足函数式接口的定义，这仍然是一个函数式接口，使用起来都一样。</p><h2 id="12-1-4-自定义函数式接口"><a href="#12-1-4-自定义函数式接口" class="headerlink" title="12.1.4 自定义函数式接口"></a>12.1.4 自定义函数式接口</h2><p>&emsp;&emsp;对于刚刚定义好的<code>MyFunctionalInterface</code> 函数式接口，典型使用场景就是作为方法的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09FunctionalInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用自定义的函数式接口作为方法参数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(MyFunctionalInterface inter)</span> </span>&#123;</span><br><span class="line">        inter.myMethod(); <span class="comment">// 调用自定义的函数式接口方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用使用函数式接口的方法</span></span><br><span class="line">        doSomething(() ‐&gt; System.out.println(<span class="string">"Lambda执行啦！"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第十一章 3.综合案例</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/11_3%20%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/11_3%20%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="11-3-综合案例"><a href="#11-3-综合案例" class="headerlink" title="11.3 综合案例"></a>11.3 综合案例</h1><h2 id="11-3-1-文件上传案例"><a href="#11-3-1-文件上传案例" class="headerlink" title="11.3.1 文件上传案例"></a>11.3.1 文件上传案例</h2><h3 id="文件上传分析图解"><a href="#文件上传分析图解" class="headerlink" title="文件上传分析图解"></a>文件上传分析图解</h3><ol><li><p>【客户端】输入流，从硬盘读取文件数据到程序中。</p></li><li><p>【客户端】输出流，写出文件数据到服务端。</p></li><li><p>【服务端】输入流，读取文件数据到服务端程序。</p></li><li><p>【服务端】输出流，写出文件数据到服务器硬盘中。</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/0kutCGq2LCb3.png!blog" alt=""></p></li></ol><h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><h4 id="服务端实现："><a href="#服务端实现：" class="headerlink" title="服务端实现："></a>服务端实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器 启动..... "</span>);</span><br><span class="line">        <span class="comment">// 1. 创建服务端ServerSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 2. 建立连接</span></span><br><span class="line">        Socket accept = serverSocket.accept();</span><br><span class="line">        <span class="comment">// 3. 创建流对象</span></span><br><span class="line">        <span class="comment">// 3.1 获取输入流,读取文件数据</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(accept.getInputStream());</span><br><span class="line">        <span class="comment">// 3.2 创建输出流,保存到本地 .</span></span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"copy.jpg!blog"</span>));</span><br><span class="line">        <span class="comment">// 4. 读写数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(b)) != ‐<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 关闭 资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        accept.close();</span><br><span class="line">        System.out.println(<span class="string">"文件上传已保存"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端实现："><a href="#客户端实现：" class="headerlink" title="客户端实现："></a>客户端实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUPload_Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建流对象</span></span><br><span class="line">        <span class="comment">// 1.1 创建输入流,读取本地文件</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.jpg!blog"</span>));</span><br><span class="line">        <span class="comment">// 1.2 创建输出流,写到服务端</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line">        <span class="comment">//2.写出数据.</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span> ];</span><br><span class="line">        <span class="keyword">int</span> len ;</span><br><span class="line">        <span class="keyword">while</span> (( len = bis.read(b))!=‐<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">            bos.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"文件发送完毕"</span>);</span><br><span class="line">        <span class="comment">// 3.释放资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        System.out.println(<span class="string">"文件上传完毕 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传优化分析"><a href="#文件上传优化分析" class="headerlink" title="文件上传优化分析"></a>文件上传优化分析</h3><ol><li><p><strong>文件名称写死的问题</strong></p><p>&emsp;&emsp;服务端，保存文件的名称如果写死，那么最终导致服务器硬盘，只会保留一个文件，建议使用系统时间优化，保证文件名称唯一，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fis = <span class="keyword">new</span> FileOutputStream(System.currentTimeMillis()+<span class="string">".jpg!blog"</span>) <span class="comment">// 文件名称</span></span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fis);</span><br></pre></td></tr></table></figure></li><li><p><strong>循环接收的问题</strong></p><p>&emsp;&emsp;服务端，指保存一个文件就关闭了，之后的用户无法再上传，这是不符合实际的，使用循环改进，可以不断的接收不同用户的文件，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每次接收新的连接,创建一个Socket</span></span><br><span class="line"><span class="keyword">while</span>（<span class="keyword">true</span>）&#123;</span><br><span class="line">    Socket accept = serverSocket.accept();</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>效率问题</strong></p><p>&emsp;&emsp;服务端，在接收大文件时，可能耗费几秒钟的时间，此时不能接收其他用户上传，所以，使用多线程技术优化，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>（<span class="keyword">true</span>）&#123;</span><br><span class="line">    Socket accept = serverSocket.accept();</span><br><span class="line">    <span class="comment">// accept 交给子线程处理.</span></span><br><span class="line">    <span class="keyword">new</span> Thread(() ‐&gt; &#123;</span><br><span class="line">        ......</span><br><span class="line">            InputStream bis = accept.getInputStream();</span><br><span class="line">        ......</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="优化实现"><a href="#优化实现" class="headerlink" title="优化实现"></a>优化实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器 启动..... "</span>);</span><br><span class="line">        <span class="comment">// 1. 创建服务端ServerSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 2. 循环接收,建立连接</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket accept = serverSocket.accept();</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            3. socket对象交给子线程处理,进行读写操作</span></span><br><span class="line"><span class="comment">            Runnable接口中,只有一个run方法,使用lambda表达式简化格式</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">new</span> Thread(() ‐&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> (</span><br><span class="line">                    <span class="comment">//3.1 获取输入流对象</span></span><br><span class="line">                    BufferedInputStream bis = </span><br><span class="line">                        <span class="keyword">new</span> BufferedInputStream(accept.getInputStream());</span><br><span class="line">                    <span class="comment">//3.2 创建输出流对象, 保存到本地 .</span></span><br><span class="line">                    FileOutputStream fis = </span><br><span class="line">                        <span class="keyword">new</span> FileOutputStream(System.currentTimeMillis() + <span class="string">".jpg!blog"</span>);</span><br><span class="line">                    BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fis);) &#123;</span><br><span class="line">                    <span class="comment">// 3.3 读写数据</span></span><br><span class="line">                    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = bis.read(b)) != ‐<span class="number">1</span>) &#123;</span><br><span class="line">                        bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//4. 关闭 资源</span></span><br><span class="line">                    bos.close();</span><br><span class="line">                    bis.close();</span><br><span class="line">                    accept.close();</span><br><span class="line">                    System.out.println(<span class="string">"文件上传已保存"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="信息回写分析图解"><a href="#信息回写分析图解" class="headerlink" title="信息回写分析图解"></a>信息回写分析图解</h3><p>前四步与基本文件上传一致.</p><ol start="5"><li><p>【服务端】获取输出流，回写数据。</p></li><li><p>【客户端】获取输入流，解析回写数据。</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/2728uBNTJVfs.png!blog" alt=""></p></li></ol><h4 id="回写实现"><a href="#回写实现" class="headerlink" title="回写实现"></a>回写实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器 启动..... "</span>);</span><br><span class="line">        <span class="comment">// 1. 创建服务端ServerSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 2. 循环接收,建立连接</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket accept = serverSocket.accept();</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            3. socket对象交给子线程处理,进行读写操作</span></span><br><span class="line"><span class="comment">            Runnable接口中,只有一个run方法,使用lambda表达式简化格式</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">new</span> Thread(() ‐&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> (</span><br><span class="line">                    <span class="comment">//3.1 获取输入流对象</span></span><br><span class="line">                    BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(accept.getInputStream());</span><br><span class="line">                    <span class="comment">//3.2 创建输出流对象, 保存到本地 .</span></span><br><span class="line">                    FileOutputStream fis = <span class="keyword">new</span> FileOutputStream(System.currentTimeMillis() + <span class="string">".jpg!blog"</span>);</span><br><span class="line">                    BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fis);</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="comment">// 3.3 读写数据</span></span><br><span class="line">                    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = bis.read(b)) != ‐<span class="number">1</span>) &#123;</span><br><span class="line">                        bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 4.=======信息回写===========================</span></span><br><span class="line">                    System.out.println(<span class="string">"back ........"</span>);</span><br><span class="line">                    OutputStream out = accept.getOutputStream();</span><br><span class="line">                    out.write(<span class="string">"上传成功"</span>.getBytes());</span><br><span class="line">                    out.close();</span><br><span class="line">                    <span class="comment">//================================</span></span><br><span class="line">                    <span class="comment">//5. 关闭 资源</span></span><br><span class="line">                    bos.close();</span><br><span class="line">                    bis.close();</span><br><span class="line">                    accept.close();</span><br><span class="line">                    System.out.println(<span class="string">"文件上传已保存"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端实现：-1"><a href="#客户端实现：-1" class="headerlink" title="客户端实现："></a>客户端实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建流对象</span></span><br><span class="line">        <span class="comment">// 1.1 创建输入流,读取本地文件</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.jpg!blog"</span>));</span><br><span class="line">        <span class="comment">// 1.2 创建输出流,写到服务端</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line">        <span class="comment">//2.写出数据.</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span> ];</span><br><span class="line">        <span class="keyword">int</span> len ;</span><br><span class="line">        <span class="keyword">while</span> (( len = bis.read(b))!=‐<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭输出流,通知服务端,写出数据完毕</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        System.out.println(<span class="string">"文件发送完毕"</span>);</span><br><span class="line">        <span class="comment">// 3. =====解析回写============</span></span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] back = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">        in.read(back);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(back));</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="comment">// ============================</span></span><br><span class="line">        <span class="comment">// 4.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-3-2-模拟B-S服务器"><a href="#11-3-2-模拟B-S服务器" class="headerlink" title="11.3.2 模拟B\S服务器"></a>11.3.2 模拟B\S服务器</h2><p>&emsp;&emsp;模拟网站服务器，使用浏览器访问自己编写的服务端程序，查看网页效果。</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li><p>准备页面数据，web文件夹。</p><p>复制到我们Module中，比如复制到day08中</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/2VkLGzrYHmfs.png!blog" alt=""></p></li><li><p>我们模拟服务器端，ServerSocket类监听端口，使用浏览器访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8000</span>);</span><br><span class="line">    Socket socket = server.accept();</span><br><span class="line">    InputStream in = socket.getInputStream();</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len = in.read(bytes);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">    socket.close();</span><br><span class="line">    server.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="//cdn.foreversfj.com/image/blog/20190824/c07DRWjkWVrj.png!blog" alt=""></p></li><li><p>服务器程序中字节输入流可以读取到浏览器发来的请求信息</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/CXqC4kwtnkue.png!blog" alt=""></p></li></ol><p>&emsp;&emsp;GET/web/index.html HTTP/1.1是浏览器的请求消息。/web/index.html为浏览器想要请求的服务器端的资源,使用字符串切割方式获取到请求的资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换流,读取浏览器请求第一行</span></span><br><span class="line">BufferedReader readWb = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">String requst = readWb.readLine();</span><br><span class="line"><span class="comment">//取出请求资源的路径</span></span><br><span class="line">String[] strArr = requst.split(<span class="string">" "</span>);</span><br><span class="line"><span class="comment">//去掉web前面的/</span></span><br><span class="line">String path = strArr[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">System.out.println(path);</span><br></pre></td></tr></table></figure><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><h4 id="服务端实现：-1"><a href="#服务端实现：-1" class="headerlink" title="服务端实现："></a>服务端实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务端 启动 , 等待连接 .... "</span>);</span><br><span class="line">        <span class="comment">// 创建ServerSocket 对象</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line">        <span class="comment">// 转换流读取浏览器的请求消息</span></span><br><span class="line">        BufferedReader readWb = <span class="keyword">new</span></span><br><span class="line">            BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">        String requst = readWb.readLine();</span><br><span class="line">        <span class="comment">// 取出请求资源的路径</span></span><br><span class="line">        String[] strArr = requst.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="comment">// 去掉web前面的/</span></span><br><span class="line">        String path = strArr[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 读取客户端请求的资源文件</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes= <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span> ;</span><br><span class="line">        <span class="comment">// 字节输出流,将文件写会客户端</span></span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 写入HTTP协议响应头,固定写法</span></span><br><span class="line">        out.write(<span class="string">"HTTP/1.1 200 OK\r\n"</span>.getBytes());</span><br><span class="line">        out.write(<span class="string">"Content‐Type:text/html\r\n"</span>.getBytes());</span><br><span class="line">        <span class="comment">// 必须要写入空行,否则浏览器不解析</span></span><br><span class="line">        out.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(bytes))!=‐<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">        out.close();</span><br><span class="line">        readWb.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问效果"><a href="#访问效果" class="headerlink" title="访问效果"></a>访问效果</h3><ul><li><p><strong>火狐</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190824/KJ8mYMJsRVRj.png!blog" alt=""></p><blockquote><p>小贴士：<br>&emsp;&emsp;不同的浏览器，内核不一样，解析效果有可能不一样。</p></blockquote><p>&emsp;&emsp;发现浏览器中出现很多的叉子,说明浏览器没有读取到图片信息导致。</p><p>&emsp;&emsp;浏览器工作原理是遇到图片会开启一个线程进行单独的访问,因此在服务器端加入线程技术。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Socket socket = server.accept();</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Web(socket)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Web</span><span class="params">(Socket socket)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.socket=socket;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//转换流,读取浏览器请求第一行</span></span><br><span class="line">                BufferedReader readWb = <span class="keyword">new</span></span><br><span class="line">                    BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">                String requst = readWb.readLine();</span><br><span class="line">                <span class="comment">//取出请求资源的路径</span></span><br><span class="line">                String[] strArr = requst.split(<span class="string">" "</span>);</span><br><span class="line">                System.out.println(Arrays.toString(strArr));</span><br><span class="line">                String path = strArr[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">                System.out.println(path);</span><br><span class="line">                FileInputStream fis = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">                System.out.println(fis);</span><br><span class="line">                <span class="keyword">byte</span>[] bytes= <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span> ;</span><br><span class="line">                <span class="comment">//向浏览器 回写数据</span></span><br><span class="line">                OutputStream out = socket.getOutputStream();</span><br><span class="line">                out.write(<span class="string">"HTTP/1.1 200 OK\r\n"</span>.getBytes());</span><br><span class="line">                out.write(<span class="string">"Content‐Type:text/html\r\n"</span>.getBytes());</span><br><span class="line">                out.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">                <span class="keyword">while</span>((len = fis.read(bytes))!=‐<span class="number">1</span>)&#123;</span><br><span class="line">                    out.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">                fis.close();</span><br><span class="line">                out.close();</span><br><span class="line">                readWb.close();</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问效果：</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190824/Y3MUECWrpXio.png!blog" alt=""></p><p><strong>图解：</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190824/zUPveDJgPSSY.png!blog" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第十一章 2.TCP通信程序</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/11_2%20TCP%E9%80%9A%E4%BF%A1%E7%A8%8B%E5%BA%8F.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/11_2%20TCP%E9%80%9A%E4%BF%A1%E7%A8%8B%E5%BA%8F.html</url>
      
        <content type="html"><![CDATA[<h1 id="11-2-TCP通信程序"><a href="#11-2-TCP通信程序" class="headerlink" title="11.2 TCP通信程序"></a>11.2 TCP通信程序</h1><h2 id="11-2-1-概述"><a href="#11-2-1-概述" class="headerlink" title="11.2.1 概述"></a>11.2.1 概述</h2><p>&emsp;&emsp;TCP通信能实现两台计算机之间的数据交互，通信的两端，要严格区分为客户端（Client）与服务端（Server）。</p><p><strong>两端通信时步骤：</strong></p><ol><li>服务端程序，需要事先启动，等待客户端的连接。</li><li>客户端主动连接服务器端，连接成功才能通信。服务端不可以主动连接客户端。</li></ol><p><strong>在Java中，提供了两个类用于实现TCP通信程序：</strong></p><ol><li>客户端：<code>java.net.Socket</code>类表示。创建<code>Socket</code>对象，向服务端发出连接请求，服务端响应请求，两者建立连接开始通信。</li><li>服务端：<code>java.net.ServerSocket</code>类表示。创建<code>ServerSocket</code>对象，相当于开启一个服务，并等待客户端的连接。</li></ol><h2 id="11-2-2-Socket类"><a href="#11-2-2-Socket类" class="headerlink" title="11.2.2 Socket类"></a>11.2.2 Socket类</h2><p><code>Socket</code>类：该类实现客户端套接字，套接字指的是两台设备之间通讯的端点。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p><strong><code>public Socket(String host, int port)</code></strong>：创建套接字对象并将其连接到指定主机上的指定端口号。如果指定的host是null ，则相当于指定地址为回送地址。</p><blockquote><p>小贴士：<br>&emsp;&emsp;回送地址(127.x.x.x) 是本机回送地址（Loopback Address），主要用于网络软件测试以及本地机进程间通信，无论什么程序，一旦使用回送地址发送数据，立即返回，不进行任何网络传输。</p></blockquote></li><li><p>构造举例，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">6666</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><ul><li><strong><code>public InputStream getInputStream()</code></strong>：返回此套接字的输入流。<ul><li>如果此Scoket具有相关联的通道，则生成的InputStream 的所有操作也关联该通道。</li><li>关闭生成的InputStream也将关闭相关的Socket。</li></ul></li><li><strong><code>public OutputStream getOutputStream()</code></strong>：返回此套接字的输出流。<ul><li>如果此Scoket具有相关联的通道，则生成的OutputStream 的所有操作也关联该通道。</li><li>关闭生成的OutputStream也将关闭相关的Socket。</li></ul></li><li><strong><code>public void close()</code></strong>：关闭此套接字。<ul><li>一旦一个socket被关闭，它不可再使用。</li><li>关闭此socket也将关闭相关的InputStream和OutputStream 。</li></ul></li><li><strong><code>public void shutdownOutput()</code></strong>：禁用此套接字的输出流。<ul><li>任何先前写出的数据将被发送，随后终止输出流。</li></ul></li></ul><h2 id="11-2-3-ServerSocket类"><a href="#11-2-3-ServerSocket类" class="headerlink" title="11.2.3 ServerSocket类"></a>11.2.3 ServerSocket类</h2><p><code>ServerSocket</code> 类：这个类实现了服务器套接字，该对象等待通过网络的请求。</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p><strong><code>public ServerSocket(int port)</code></strong>：使用该构造方法在创建ServerSocket对象时，就可以将其绑定到一个指定的端口号上，参数port就是端口号。</p><p>  构造举例，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h3><ul><li><strong><code>public Socket accept()</code></strong>：侦听并接受连接，返回一个新的Socket对象，用于和客户端实现通信。该方法会一直阻塞直到建立连接。</li></ul><h2 id="11-2-4-简单的TCP网络程序"><a href="#11-2-4-简单的TCP网络程序" class="headerlink" title="11.2.4 简单的TCP网络程序"></a>11.2.4 简单的TCP网络程序</h2><h3 id="TCP通信分析图解"><a href="#TCP通信分析图解" class="headerlink" title="TCP通信分析图解"></a>TCP通信分析图解</h3><ol><li>【服务端】启动，创建ServerSocket对象，等待连接。</li><li>【客户端】启动，创建Socket对象，请求连接。</li><li>【服务端】接收连接，调用accept方法，并返回一个Socket对象。</li><li>【客户端】Socket对象，获取OutputStream，向服务端写出数据。</li><li>【服务端】Scoket对象，获取InputStream，读取客户端发送的数据。</li></ol><blockquote><p>到此，客户端向服务端发送数据成功。</p></blockquote><p><img src="//cdn.foreversfj.com/image/blog/20190824/Lig51NoBfmm3.png!blog" alt=""></p><blockquote><p>自此，服务端向客户端回写数据。</p></blockquote><ol start="6"><li>【服务端】Socket对象，获取OutputStream，向客户端回写数据。</li><li>【客户端】Scoket对象，获取InputStream，解析回写数据。</li><li>【客户端】释放资源，断开连接。</li></ol><h3 id="客户端向服务器发送数据"><a href="#客户端向服务器发送数据" class="headerlink" title="客户端向服务器发送数据"></a>客户端向服务器发送数据</h3><h4 id="服务端实现："><a href="#服务端实现：" class="headerlink" title="服务端实现："></a>服务端实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTCP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务端启动 , 等待连接 .... "</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1.创建 ServerSocket对象，绑定端口，开始等待连接</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.接收连接 accept 方法, 返回 socket 对象.</span></span><br><span class="line">        Socket server = ss.accept();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.通过socket 获取输入流</span></span><br><span class="line">        InputStream is = server.getInputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.一次性读取数据</span></span><br><span class="line">        <span class="comment">// 4.1 创建字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 4.2 据读取到字节数组中.</span></span><br><span class="line">        <span class="keyword">int</span> len = is.read(b);</span><br><span class="line">        <span class="comment">// 4.3 解析数组,打印字符串信息</span></span><br><span class="line">        String msg = <span class="keyword">new</span> String(b, <span class="number">0</span>, len);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5.关闭资源.</span></span><br><span class="line">        is.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端实现："><a href="#客户端实现：" class="headerlink" title="客户端实现："></a>客户端实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTCP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户端 发送数据"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1.创建 Socket ( ip , port ) , 确定连接到哪里.</span></span><br><span class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.获取流对象   输出流</span></span><br><span class="line">        OutputStream os = client.getOutputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.写出数据.</span></span><br><span class="line">        os.write(<span class="string">"你好么? tcp ,我来了"</span>.getBytes());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 关闭资源 .</span></span><br><span class="line">        os.close();</span><br><span class="line">        </span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务器向客户端回写数据"><a href="#服务器向客户端回写数据" class="headerlink" title="服务器向客户端回写数据"></a>服务器向客户端回写数据</h3><h4 id="服务端实现：-1"><a href="#服务端实现：-1" class="headerlink" title="服务端实现："></a>服务端实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTCP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务端启动 , 等待连接 .... "</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1.创建 ServerSocket对象，绑定端口，开始等待连接</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.接收连接 accept 方法, 返回 socket 对象</span></span><br><span class="line">        </span><br><span class="line">        Socket server = ss.accept();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.通过socket 获取输入流</span></span><br><span class="line">        InputStream is = server.getInputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.一次性读取数据</span></span><br><span class="line">        <span class="comment">// 4.1 创建字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 4.2 据读取到字节数组中.</span></span><br><span class="line">        <span class="keyword">int</span> len = is.read(b);</span><br><span class="line">        <span class="comment">// 4.3 解析数组,打印字符串信息</span></span><br><span class="line">        String msg = <span class="keyword">new</span> String(b, <span class="number">0</span>, len);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// =================回写数据=======================</span></span><br><span class="line">        <span class="comment">// 5. 通过 socket 获取输出流</span></span><br><span class="line">        OutputStream out = server.getOutputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6. 回写数据</span></span><br><span class="line">        out.write(<span class="string">"我很好,谢谢你"</span>.getBytes());</span><br><span class="line">        <span class="comment">// 7.关闭资源.</span></span><br><span class="line">        out.close();</span><br><span class="line">        is.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端实现：-1"><a href="#客户端实现：-1" class="headerlink" title="客户端实现："></a>客户端实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTCP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户端 发送数据"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1.创建 Socket ( ip , port ) , 确定连接到哪里.</span></span><br><span class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.通过Scoket,获取输出流对象</span></span><br><span class="line">        OutputStream os = client.getOutputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.写出数据.</span></span><br><span class="line">        os.write(<span class="string">"你好么? tcp ,我来了"</span>.getBytes());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ==============解析回写=========================</span></span><br><span class="line">        <span class="comment">// 4. 通过Scoket,获取 输入流对象</span></span><br><span class="line">        InputStream in = client.getInputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5. 读取数据数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">int</span> len = in.read(b);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(b, <span class="number">0</span>, len));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6. 关闭资源 .</span></span><br><span class="line">        in.close();</span><br><span class="line">        os.close();</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第十一章 1.网络编程入门</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/11_1%20%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/11_1%20%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="11-1-网络编程入门"><a href="#11-1-网络编程入门" class="headerlink" title="11.1 网络编程入门"></a>11.1 网络编程入门</h1><h2 id="11-1-1软件结构"><a href="#11-1-1软件结构" class="headerlink" title="11.1.1软件结构"></a>11.1.1软件结构</h2><ul><li><p><strong>C/S结构</strong>：全称为Client/Server结构，是指客户端和服务器结构。常见程序有ＱＱ、迅雷等软件。</p><p>  <img src="//cdn.foreversfj.com/image/blog/20190824/yq44Y1enDGgI.png!blog" alt=""></p></li><li><p><strong>B/S结构</strong>：全称为Browser/Server结构，是指浏览器和服务器结构。常见浏览器有谷歌、火狐等。</p><p>  <img src="//cdn.foreversfj.com/image/blog/20190824/Qa6BTU3CV0OI.png!blog" alt=""></p></li></ul><p>&emsp;&emsp;两种架构各有优势，但是无论哪种架构，都离不开网络的支持。<strong>网络编程</strong>，就是在一定的协议下，实现两台计算机的通信的程序。</p><h2 id="11-1-2-网络通信协议"><a href="#11-1-2-网络通信协议" class="headerlink" title="11.1.2 网络通信协议"></a>11.1.2 网络通信协议</h2><ul><li><p><strong>网络通信协议</strong>：通信协议是对计算机必须遵守的规则，只有遵守这些规则，计算机之间才能进行通信。这就好比在道路中行驶的汽车一定要遵守交通规则一样，协议中对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守，最终完成数据交换。</p></li><li><p><strong>TCP/IP协议</strong>：传输控制协议/因特网互联协议(<i>Transmission Control Protocol/Internet Protocol</i>)，是Internet最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</p><p>  <img src="//cdn.foreversfj.com/image/blog/20190824/XAcgeikdudsW.png!blog" alt=""></p></li></ul><h2 id="11-1-3-协议分类"><a href="#11-1-3-协议分类" class="headerlink" title="11.1.3 协议分类"></a>11.1.3 协议分类</h2><p>&emsp;&emsp;通信的协议还是比较复杂的，<code>java.net</code> 包中包含的类和接口，它们提供低层次的通信细节。我们可以直接使用这些类和接口，来专注于网络程序开发，而不用考虑通信的细节。</p><p><code>java.net</code> 包中提供了两种常见的网络协议的支持：</p><ul><li><p>TCP：传输控制协议 (Transmission Control Protocol)。TCP协议是面向连接的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。</p><ul><li>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。<ul><li>第一次握手，客户端向服务器端发出连接请求，等待服务器确认。</li><li>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。</li><li>第三次握手，客户端再次向服务器端发送确认信息，确认连接。整个交互过程如下图所示。<br><img src="//cdn.foreversfj.com/image/blog/20190824/tRCicdyrdUh8.png!blog" alt=""><br>&emsp;&emsp;完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛，例如下载文件、浏览网页等。</li></ul></li></ul></li><li><p><strong>UDP</strong>：用户数据报协议(User Datagram Protocol)。UDP协议是一个面向无连接的协议。传输数据时，不需要建立连接，不管对方端服务是否启动，直接将数据、数据源和目的地都封装在数据包中，直接发送。每个数据包的大小限制在64k以内。它是不可靠协议，因为无连接，所以传输速度快，但是容易丢失数据。日常应用中,例如视频会议、QQ聊天等。</p></li></ul><h2 id="11-1-4-网络编程三要素"><a href="#11-1-4-网络编程三要素" class="headerlink" title="11.1.4 网络编程三要素"></a>11.1.4 网络编程三要素</h2><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><ul><li><strong>协议</strong>：计算机网络通信必须遵守的规则。</li></ul><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><ul><li><strong>IP地址</strong>：指<strong>互联网协议地址</strong>（<em>Internet Protocol Address</em>），俗称IP。IP地址用来给一个网络中的计算机设备做唯一的编号。假如我们把“个人电脑”比作“一台电话”的话，那么“IP地址”就相当于“电话号码”。</li></ul><h4 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h4><ul><li><p><strong>IPv4</strong>：是一个32位的二进制数，通常被分为4个字节，表示成a.b.c.d 的形式，例如192.168.65.100 。其中a、b、c、d都是0~255之间的十进制整数，那么最多可以表示42亿个。</p></li><li><p><strong>IPv6</strong>：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。有资料显示，全球IPv4地址在2011年2月分配完毕。</p><p>  &emsp;&emsp;为了扩大地址空间，拟通过IPv6重新定义地址空间，采用128位地址长度，每16个字节一组，分成8组十六进制数，表示成ABCD:EF01:2345:6789:ABCD:EF01:2345:6789 ，号称可以为全世界的每一粒沙子编上一个网址，这样就解决了网络地址资源数量不够的问题。</p></li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><p>查看本机IP地址，在控制台输入：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure></li><li><p>检查网络是否连通，在控制台输入：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping 空格 IP地址</span><br><span class="line">ping <span class="number">220.181</span><span class="number">.57</span><span class="number">.216</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="特殊的IP地址"><a href="#特殊的IP地址" class="headerlink" title="特殊的IP地址"></a>特殊的IP地址</h4><ul><li>本机IP地址： <code>127.0.0.1</code> 、<code>localhost</code>。</li></ul><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>&emsp;&emsp;网络的通信，本质上是两个进程（应用程序）的通信。每台计算机都有很多的进程，那么在网络通信时，如何区分这些进程呢？</p><p>&emsp;&emsp;如果说<strong>IP地址</strong>可以唯一标识网络中的设备，那么<strong>端口号</strong>就可以唯一标识设备中的进程（应用程序）了。</p><ul><li><strong>端口号</strong>：<strong>用两个字节表示的整数，它的取值范围是0~65535</strong>。其中，0~1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</li></ul><p>&emsp;&emsp;利用<code>协议</code>+ <code>IP地址</code>+ <code>端口号</code> 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第十章 4.打印流</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/10_4%20%E6%89%93%E5%8D%B0%E6%B5%81.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/10_4%20%E6%89%93%E5%8D%B0%E6%B5%81.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-4-打印流"><a href="#10-4-打印流" class="headerlink" title="10.4 打印流"></a>10.4 打印流</h1><h2 id="10-4-1-概述"><a href="#10-4-1-概述" class="headerlink" title="10.4.1 概述"></a>10.4.1 概述</h2><p>&emsp;&emsp;平时我们在控制台打印输出，是调用<code>print</code> 方法和<code>println</code> 方法完成的，这两个方法都来自于<code>java.io.PrintStream</code> 类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p><h2 id="10-4-2-PrintStream类"><a href="#10-4-2-PrintStream类" class="headerlink" title="10.4.2 PrintStream类"></a>10.4.2 PrintStream类</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><strong><code>public PrintStream(String fileName)</code></strong>：使用指定的文件名创建一个新的打印流。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"ps.txt"</span>)；</span><br></pre></td></tr></table></figure><h3 id="改变打印流向"><a href="#改变打印流向" class="headerlink" title="改变打印流向"></a>改变打印流向</h3><p>&emsp;&emsp;<code>System.out</code>就是<code>PrintStream</code>类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个”小把戏”，改变它的流向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 调用系统的打印流,控制台直接输出97</span></span><br><span class="line">        System.out.println(<span class="number">97</span>);</span><br><span class="line">        <span class="comment">// 创建打印流,指定文件的名称</span></span><br><span class="line">        PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"ps.txt"</span>);</span><br><span class="line">        <span class="comment">// 设置系统的打印流流向,输出到ps.txt</span></span><br><span class="line">        System.setOut(ps);</span><br><span class="line">        <span class="comment">// 调用系统的打印流,ps.txt中输出97</span></span><br><span class="line">        System.out.println(<span class="number">97</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第十章 3.序列化</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/10_3%20%E5%BA%8F%E5%88%97%E5%8C%96.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/10_3%20%E5%BA%8F%E5%88%97%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-3-序列化"><a href="#10-3-序列化" class="headerlink" title="10.3 序列化"></a>10.3 序列化</h1><h2 id="10-3-1-概述"><a href="#10-3-1-概述" class="headerlink" title="10.3.1 概述"></a>10.3.1 概述</h2><p>&emsp;&emsp;Java提供了一种对象序列化的机制。用一个字节序列可以表示一个对象，该字节序列包含该对象的数据、对象的类型和对象中存储的属性等信息。字节序列写出到文件之后，相当于文件中持久保存了一个对象的信息。</p><p>&emsp;&emsp;反之，该字节序列还可以从文件中读取回来，重构对象，对它进行反序列化。对象的数据、对象的类型和对象中存储的数据信息，都可以用来在内存中创建对象。看图理解序列化：</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/TEymSP8TmTRx.png!blog" alt=""></p><h2 id="10-3-2-ObjectOutputStream类"><a href="#10-3-2-ObjectOutputStream类" class="headerlink" title="10.3.2 ObjectOutputStream类"></a>10.3.2 ObjectOutputStream类</h2><p>&emsp;&emsp;<code>java.io.ObjectOutputStream</code>类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><strong><code>public ObjectOutputStream(OutputStream out)</code></strong>：创建一个指定<code>OutputStream</code>的<code>ObjectOutputStream</code>。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fileOut = <span class="keyword">new</span> FileOutputStream(<span class="string">"employee.txt"</span>);</span><br><span class="line">ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(fileOut);</span><br></pre></td></tr></table></figure><h3 id="序列化操作"><a href="#序列化操作" class="headerlink" title="序列化操作"></a>序列化操作</h3><ol><li><p>一个对象要想序列化，必须满足两个条件:</p><ul><li>该类必须实现<code>java.io.Serializable</code>接口，<code>Serializable</code>是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code>。</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code>关键字修饰。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="keyword">int</span> age; <span class="comment">// transient瞬态修饰成员,不会被序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addressCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Address check : "</span> + name </span><br><span class="line">                           + <span class="string">" ‐‐ "</span> + address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写出对象方法</p><ul><li><strong><code>public final void writeObject (Object obj)</code></strong>：将指定的对象写出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">        Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">        e.name = <span class="string">"zhangsan"</span>;</span><br><span class="line">        e.address = <span class="string">"beiqinglu"</span>;</span><br><span class="line">        e.age = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建序列化流对象</span></span><br><span class="line">            ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"employee.txt"</span>));</span><br><span class="line">            <span class="comment">// 写出对象</span></span><br><span class="line">            out.writeObject(e);</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            out.close();</span><br><span class="line">            fileOut.close();</span><br><span class="line">            <span class="comment">// 姓名，地址被序列化，年龄没有被序列</span></span><br><span class="line">            System.out.println(<span class="string">"Serialized data is saved"</span>); </span><br><span class="line">            化。</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException i) &#123;</span><br><span class="line">            i.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    Serialized data is saved</span><br></pre></td></tr></table></figure></li></ol><h2 id="10-3-3-ObjectInputStream类"><a href="#10-3-3-ObjectInputStream类" class="headerlink" title="10.3.3 ObjectInputStream类"></a>10.3.3 ObjectInputStream类</h2><p>&emsp;&emsp;<code>ObjectInputStream</code>反序列化流，将之前使用<code>ObjectOutputStream</code>序列化的原始数据恢复为对象。</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><strong><code>public ObjectInputStream(InputStream in)</code></strong>：创建一个指定<code>InputStream</code>的<code>ObjectInputStream</code>。</li></ul><h3 id="反序列化操作1"><a href="#反序列化操作1" class="headerlink" title="反序列化操作1"></a>反序列化操作1</h3><p>&emsp;&emsp;如果能找到一个对象的class文件，我们可以进行反序列化操作，调用<code>ObjectInputStream</code>读取对象的方法：</p><ul><li><p><strong><code>public final Object readObject ()</code></strong>：读取一个对象。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeserializeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">        Employee e = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建反序列化流</span></span><br><span class="line">            FileInputStream fileIn = <span class="keyword">new</span> FileInputStream(<span class="string">"employee.txt"</span>);</span><br><span class="line">            ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(fileIn);</span><br><span class="line">            <span class="comment">// 读取一个对象</span></span><br><span class="line">            e = (Employee) in.readObject();</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            in.close();</span><br><span class="line">            fileIn.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException i) &#123;</span><br><span class="line">            <span class="comment">// 捕获其他异常</span></span><br><span class="line">            i.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ClassNotFoundException c) &#123;</span><br><span class="line">            <span class="comment">// 捕获类找不到异常</span></span><br><span class="line">            System.out.println(<span class="string">"Employee class not found"</span>);</span><br><span class="line">            c.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 无异常,直接打印输出</span></span><br><span class="line">        System.out.println(<span class="string">"Name: "</span> + e.name); <span class="comment">// zhangsan</span></span><br><span class="line">        System.out.println(<span class="string">"Address: "</span> + e.address); <span class="comment">// beiqinglu</span></span><br><span class="line">        System.out.println(<span class="string">"age: "</span> + e.age); <span class="comment">// 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;<strong>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个<code>ClassNotFoundException</code>异常。</strong></p><h3 id="反序列化操作2"><a href="#反序列化操作2" class="headerlink" title="反序列化操作2"></a>反序列化操作2</h3><p>&emsp;&emsp;<strong>另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code> 异常</strong>。发生这个异常的原因如下：</p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配</li><li>该类包含未知数据类型</li><li>该类没有可访问的无参数构造方法</li></ul><p>&emsp;&emsp;<code>Serializable</code>接口给需要序列化的类，提供了一个序列版本号。<code>serialVersionUID</code>该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 加入序列版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="comment">// 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> eid;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addressCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Address check : "</span> + name </span><br><span class="line">                           + <span class="string">" ‐‐ "</span> + address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-3-4-练习：序列化集合"><a href="#10-3-4-练习：序列化集合" class="headerlink" title="10.3.4 练习：序列化集合"></a>10.3.4 练习：序列化集合</h2><ol><li>将存有多个自定义对象的集合序列化操作，保存到list.txt 文件中。</li><li>反序列化list.txt ，并遍历集合，打印对象信息。</li></ol><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li>把若干学生对象 ，保存到集合中。</li><li>把集合序列化。</li><li>反序列化读取时，只需要读取一次，转换为集合类型。</li><li>遍历集合，可以打印所有的学生信息</li></ol><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 学生对象</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student(<span class="string">"老王"</span>, <span class="string">"laow"</span>);</span><br><span class="line">        Student student2 = <span class="keyword">new</span> Student(<span class="string">"老张"</span>, <span class="string">"laoz"</span>);</span><br><span class="line">        Student student3 = <span class="keyword">new</span> Student(<span class="string">"老李"</span>, <span class="string">"laol"</span>);</span><br><span class="line">        ArrayList&lt;Student&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        arrayList.add(student);</span><br><span class="line">        arrayList.add(student2);</span><br><span class="line">        arrayList.add(student3);</span><br><span class="line">        <span class="comment">// 序列化操作</span></span><br><span class="line">        <span class="comment">// serializ(arrayList);</span></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"list.txt"</span>));</span><br><span class="line">        <span class="comment">// 读取对象,强转为ArrayList类型</span></span><br><span class="line">        ArrayList&lt;Student&gt; list = (ArrayList&lt;Student&gt;)ois.readObject();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++ )&#123;</span><br><span class="line">            Student s = list.get(i);</span><br><span class="line">            System.out.println(s.getName()+<span class="string">"‐‐"</span>+ s.getPwd());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serializ</span><span class="params">(ArrayList&lt;Student&gt; arrayList)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 序列化流</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"list.txt"</span>));</span><br><span class="line">        <span class="comment">// 写出对象</span></span><br><span class="line">        oos.writeObject(arrayList);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第十章 2.转换流</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/10_2%20%E8%BD%AC%E6%8D%A2%E6%B5%81.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/10_2%20%E8%BD%AC%E6%8D%A2%E6%B5%81.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-2-转换流"><a href="#10-2-转换流" class="headerlink" title="10.2 转换流"></a>10.2 转换流</h1><h2 id="10-2-1-字符编码和字符集"><a href="#10-2-1-字符编码和字符集" class="headerlink" title="10.2.1 字符编码和字符集"></a>10.2.1 字符编码和字符集</h2><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>&emsp;&emsp;计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<strong>编码</strong> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong> 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本f符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p><ul><li><strong>字符编码</strong><code>Character Encoding</code>：就是一套自然语言的字符与二进制数之间的对应规则。</li></ul><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><ul><li><strong>字符集</strong><code>Charset</code>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</li></ul><p>&emsp;&emsp;计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/I8GL7bG6mIf7.png!blog" alt=""></p><p>&emsp;&emsp;可见，当指定了<strong>编码</strong>，它所对应的<strong>字符集</strong>自然就指定了，所以<strong>编码</strong>才是我们最终要关心的。</p><ul><li><p><strong>ASCII字符集</strong> ：</p><ul><li><strong>ASCII</strong>（<i>American Standard Code for Information Interchange</i>，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。</li></ul></li><li><p><strong><code>ISO-8859-1</code>字符集</strong>：</p><ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</li><li>ISO-5559-1使用单字节编码，兼容ASCII编码。</li></ul></li><li><p><strong>GBxxx字符集</strong>：</p><ul><li>GB就是国标的意思，是为了显示中文而设计的一套字符集。</li><li><strong><code>GB2312</code></strong>：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</li><li><strong><code>GBK</code></strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</li><li><strong>GB18030</strong>：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul></li><li><p><strong>Unicode字符集</strong> ：</p><ul><li>Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。</li><li>它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，<code>UTF-8</code>、UTF-16和UTF-32。最为常用的<strong>UTF-8编码</strong>。</li><li><strong><code>UTF-8</code>编码</strong>，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。</li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul></li></ul><h2 id="10-2-2-编码引出的问题"><a href="#10-2-2-编码引出的问题" class="headerlink" title="10.2.2 编码引出的问题"></a>10.2.2 编码引出的问题</h2><p>&emsp;&emsp;在IDEA中，使用<code>FileReader</code> 读取项目中的文本文件。由于IDEA的设置，都是默认的<code>UTF-8</code> 编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fileReader = <span class="keyword">new</span> FileReader(<span class="string">"E:\\File_GBK.txt"</span>);</span><br><span class="line">        <span class="keyword">int</span> read;</span><br><span class="line">        <span class="keyword">while</span> ((read = fileReader.read()) != ‐<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)read);</span><br><span class="line">        &#125;</span><br><span class="line">        fileReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    􀳦􀳦􀳦</span><br></pre></td></tr></table></figure><p>那么如何读取GBK编码的文件呢？</p><h2 id="10-2-3-InputStreamReader类"><a href="#10-2-3-InputStreamReader类" class="headerlink" title="10.2.3 InputStreamReader类"></a>10.2.3 InputStreamReader类</h2><p>&emsp;&emsp;转换流<code>java.io.InputStreamReader</code> ，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p><strong><code>InputStreamReader(InputStream in)</code></strong>：创建一个使用默认字符集的字符流。</p></li><li><p><strong><code>InputStreamReader(InputStream in, String charsetName)</code></strong>：创建一个指定字符集的字符流。</p></li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"in.txt"</span>));</span><br><span class="line">InputStreamReader isr2 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"in.txt"</span>) , <span class="string">"GBK"</span>);</span><br></pre></td></tr></table></figure><h3 id="指定编码读取"><a href="#指定编码读取" class="headerlink" title="指定编码读取"></a>指定编码读取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 定义文件路径,文件为gbk编码</span></span><br><span class="line">        String FileName = <span class="string">"E:\\file_gbk.txt"</span>;</span><br><span class="line">        <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(FileName));</span><br><span class="line">        <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        InputStreamReader isr2 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(FileName) , <span class="string">"GBK"</span>);</span><br><span class="line">        <span class="comment">// 定义变量,保存字符</span></span><br><span class="line">        <span class="keyword">int</span> read;</span><br><span class="line">        <span class="comment">// 使用默认编码字符流读取,乱码</span></span><br><span class="line">        <span class="keyword">while</span> ((read = isr.read()) != ‐<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)read); <span class="comment">// 􀳦􀳦Һ􀳦</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">        <span class="comment">// 使用指定编码字符流读取,正常解析</span></span><br><span class="line">        <span class="keyword">while</span> ((read = isr2.read()) != ‐<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)read);<span class="comment">// 大家好</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-2-4-OutputStreamWriter类"><a href="#10-2-4-OutputStreamWriter类" class="headerlink" title="10.2.4 OutputStreamWriter类"></a>10.2.4 OutputStreamWriter类</h2><p>&emsp;&emsp;转换流<code>java.io.OutputStreamWriter</code> ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p><strong><code>OutputStreamWriter(OutputStream in)</code></strong>：创建一个使用默认字符集的字符流。</p></li><li><p><strong><code>OutputStreamWriter(OutputStream in, String charsetName)</code></strong>：创建一个指定字符集的字符流。</p></li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OutputStreamWriter isr = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.txt"</span>));</span><br><span class="line">OutputStreamWriter isr2 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.txt"</span>) , <span class="string">"GBK"</span>);</span><br></pre></td></tr></table></figure><h3 id="指定编码写出"><a href="#指定编码写出" class="headerlink" title="指定编码写出"></a>指定编码写出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 定义文件路径</span></span><br><span class="line">        String FileName = <span class="string">"E:\\out.txt"</span>;</span><br><span class="line">        <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(FileName));</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">        osw.write(<span class="string">"你好"</span>); <span class="comment">// 保存为6个字节</span></span><br><span class="line">        osw.close();</span><br><span class="line">        <span class="comment">// 定义文件路径</span></span><br><span class="line">        String FileName2 = <span class="string">"E:\\out2.txt"</span>;</span><br><span class="line">        <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        OutputStreamWriter osw2 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(FileName2),<span class="string">"GBK"</span>);</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">        osw2.write(<span class="string">"你好"</span>);<span class="comment">// 保存为4个字节</span></span><br><span class="line">        osw2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转换流理解图解"><a href="#转换流理解图解" class="headerlink" title="转换流理解图解"></a>转换流理解图解</h3><p><strong>转换流是字节与字符间的桥梁！</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190824/0XqEBt5cHzys.png!blog" alt=""></p><h2 id="10-2-5-练习：转换文件编码"><a href="#10-2-5-练习：转换文件编码" class="headerlink" title="10.2.5 练习：转换文件编码"></a>10.2.5 练习：转换文件编码</h2><p>将GBK编码的文本文件，转换为UTF-8编码的文本文件。</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li><p>指定GBK编码的转换流，读取文本文件。</p></li><li><p>使用UTF-8编码的转换流，写出文本文件。</p><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.定义文件路径</span></span><br><span class="line">        String srcFile = <span class="string">"file_gbk.txt"</span>;</span><br><span class="line">        String destFile = <span class="string">"file_utf8.txt"</span>;</span><br><span class="line">        <span class="comment">// 2.创建流对象</span></span><br><span class="line">        <span class="comment">// 2.1 转换输入流,指定GBK编码</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(srcFile) , <span class="string">"GBK"</span>);</span><br><span class="line">        <span class="comment">// 2.2 转换输出流,默认utf8编码</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(destFile));</span><br><span class="line">        <span class="comment">// 3.读写数据</span></span><br><span class="line">        <span class="comment">// 3.1 定义数组</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 3.2 定义长度</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="comment">// 3.3 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read(cbuf))!=‐<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 循环写出</span></span><br><span class="line">            osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第十章 1.缓冲流</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/10_1%20%E7%BC%93%E5%86%B2%E6%B5%81.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/10_1%20%E7%BC%93%E5%86%B2%E6%B5%81.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-1-缓冲流"><a href="#10-1-缓冲流" class="headerlink" title="10.1 缓冲流"></a>10.1 缓冲流</h1><h2 id="10-1-1-概述"><a href="#10-1-1-概述" class="headerlink" title="10.1.1 概述"></a>10.1.1 概述</h2><p>&emsp;&emsp;缓冲流，也叫高效流，是对4个基本的<code>FileXxx</code>流的增强，所以也是4个流，按照数据类型分类：</p><ul><li><p><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code></p></li><li><p><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></p></li></ul><p>&emsp;&emsp;缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</p><h2 id="10-1-2-字节缓冲流"><a href="#10-1-2-字节缓冲流" class="headerlink" title="10.1.2 字节缓冲流"></a>10.1.2 字节缓冲流</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><strong><code>public BufferedInputStream(InputStream in)</code></strong>：创建一个 新的缓冲输入流。</li><li><strong><code>public BufferedOutputStream(OutputStream out)</code></strong>：创建一个新的缓冲输出流。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字节缓冲输入流</span></span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"bis.txt"</span>));</span><br><span class="line"><span class="comment">// 创建字节缓冲输出流</span></span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"bos.txt"</span>));</span><br></pre></td></tr></table></figure><h3 id="效率测试"><a href="#效率测试" class="headerlink" title="效率测试"></a>效率测试</h3><p>&emsp;&emsp;查询API，缓冲流读写方法与基本的流是一致的，我们通过复制大文件（375MB），测试它的效率。</p><ol><li><p>基本流，代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"jdk9.exe"</span>);</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"copy.exe"</span>)</span><br><span class="line">        )&#123;</span><br><span class="line">            <span class="comment">// 读写数据</span></span><br><span class="line">            <span class="keyword">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = fis.read()) != ‐<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"普通流复制时间:"</span>+(end ‐ start)+<span class="string">" 毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 十几分钟过去了...</span></span><br></pre></td></tr></table></figure></li><li><p>缓冲流，代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"jdk9.exe"</span>));</span><br><span class="line">            BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"copy.exe"</span>));</span><br><span class="line">        )&#123;</span><br><span class="line">            <span class="comment">// 读写数据</span></span><br><span class="line">            <span class="keyword">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = bis.read()) != ‐<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"缓冲流复制时间:"</span>+(end ‐ start)+<span class="string">" 毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲流复制时间:8016 毫秒</span></span><br></pre></td></tr></table></figure><p> 如何更快呢？</p><p> 使用数组的方式，代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"jdk9.exe"</span>));</span><br><span class="line">            BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"copy.exe"</span>));</span><br><span class="line">        )&#123;</span><br><span class="line">            <span class="comment">// 读写数据</span></span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>*<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(bytes)) != ‐<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(bytes, <span class="number">0</span> , len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"缓冲流使用数组复制时间:"</span>+(end ‐ start)+<span class="string">" 毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲流使用数组复制时间:666 毫秒</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="10-1-3-字符缓冲流"><a href="#10-1-3-字符缓冲流" class="headerlink" title="10.1.3 字符缓冲流"></a>10.1.3 字符缓冲流</h2><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p><strong><code>public BufferedReader(Reader in)</code></strong>：创建一个 新的缓冲输入流。</p></li><li><p><strong><code>public BufferedWriter(Writer out)</code></strong>：创建一个新的缓冲输出流。</p></li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字符缓冲输入流</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"br.txt"</span>));</span><br><span class="line"><span class="comment">// 创建字符缓冲输出流</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"bw.txt"</span>));</span><br></pre></td></tr></table></figure><h3 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h3><p>字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。</p><ul><li><p><em>BufferedReader</em> ：<strong><code>public String readLine()</code></strong>：读一行文字。</p></li><li><p><em>BufferedWriter</em> ：<strong><code>public void newLine()</code></strong>：写一行行分隔符,由系统属性定义符号。</p></li></ul><p><code>readLine</code>方法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"in.txt"</span>));</span><br><span class="line">        <span class="comment">// 定义字符串,保存读取的一行文字</span></span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 循环读取,读取到最后返回null</span></span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(line);</span><br><span class="line">            System.out.println(<span class="string">"‐‐‐‐‐‐"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>newLine</code>方法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedWriterDemo</span> <span class="title">throws</span> <span class="title">IOException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"out.txt"</span>));</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">        bw.write(<span class="string">"我爱"</span>);</span><br><span class="line">        <span class="comment">// 写出换行</span></span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">"学习"</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出效果:</span><br><span class="line">    我爱</span><br><span class="line">    学习</span><br></pre></td></tr></table></figure><h2 id="10-1-4-练习-文本排序"><a href="#10-1-4-练习-文本排序" class="headerlink" title="10.1.4 练习:文本排序"></a>10.1.4 练习:文本排序</h2><p><strong>请将文本信息恢复顺序。</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3.侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必得裨补阙漏，有所广益。</span><br><span class="line">8.愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以咨诹善道，察纳雅言，深追先帝遗诏，臣不胜受恩感激。</span><br><span class="line">4.将军向宠，性行淑均，晓畅军事，试用之于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。</span><br><span class="line">2.宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。</span><br><span class="line">1.先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">9.今当远离，临表涕零，不知所言。</span><br><span class="line">6.臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。</span><br><span class="line">7.先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐付托不效，以伤先帝之明，故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。</span><br><span class="line">5.亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。</span><br></pre></td></tr></table></figure><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li>逐行读取文本信息。</li><li>解析文本信息到集合中。</li><li>遍历集合，按顺序，写出文本信息。</li></ol><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建map集合,保存文本数据,键为序号,值为文字</span></span><br><span class="line">        HashMap&lt;String, String&gt; lineMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 创建流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"in.txt"</span>));</span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"out.txt"</span>));</span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 解析文本</span></span><br><span class="line">            String[] split = line.split(<span class="string">"\\."</span>);</span><br><span class="line">            <span class="comment">// 保存到集合</span></span><br><span class="line">            lineMap.put(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">        <span class="comment">// 遍历map集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lineMap.size(); i++) &#123;</span><br><span class="line">            String key = String.valueOf(i);</span><br><span class="line">            <span class="comment">// 获取map中文本</span></span><br><span class="line">            String value = lineMap.get(key);</span><br><span class="line">            <span class="comment">// 写出拼接文本</span></span><br><span class="line">            bw.write(key+<span class="string">"."</span>+value);</span><br><span class="line">            <span class="comment">// 写出换行</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第九章 5.属性集</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/09_5%20%E5%B1%9E%E6%80%A7%E9%9B%86.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/09_5%20%E5%B1%9E%E6%80%A7%E9%9B%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-5-属性集"><a href="#9-5-属性集" class="headerlink" title="9.5 属性集"></a>9.5 属性集</h1><h2 id="9-5-1-概述"><a href="#9-5-1-概述" class="headerlink" title="9.5.1 概述"></a>9.5.1 概述</h2><p>&emsp;&emsp;<code>java.util.Properties</code>继承于<code>Hashtable</code>，来表示一个持久的属性集。它使用键值结构存储数据，每个键及其对应值都是一个字符串。该类也被许多Java类使用，比如获取系统属性时， <code>System.getProperties</code> 方法就是返回一个<code>Properties</code>对象。</p><h2 id="9-5-2-Properties类"><a href="#9-5-2-Properties类" class="headerlink" title="9.5.2 Properties类"></a>9.5.2 Properties类</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><strong><code>public Properties()</code></strong>：创建一个空的属性列表。</li></ul><h3 id="基本的存储方法"><a href="#基本的存储方法" class="headerlink" title="基本的存储方法"></a>基本的存储方法</h3><ul><li><p><strong><code>public Object setProperty(String key, String value)</code></strong>：保存一对属性。</p></li><li><p><strong><code>public String getProperty(String key)</code></strong>：使用此属性列表中指定的键搜索属性值。</p></li><li><p><strong><code>public Set&lt;String&gt; stringPropertyNames()</code></strong>：所有键的名称的集合。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建属性集对象</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 添加键值对元素</span></span><br><span class="line">        properties.setProperty(<span class="string">"filename"</span>, <span class="string">"a.txt"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"length"</span>, <span class="string">"209385038"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"location"</span>, <span class="string">"D:\\a.txt"</span>);</span><br><span class="line">        <span class="comment">// 打印属性集对象</span></span><br><span class="line">        System.out.println(properties);</span><br><span class="line">        <span class="comment">// 通过键,获取属性值</span></span><br><span class="line">        System.out.println(properties.getProperty(<span class="string">"filename"</span>));</span><br><span class="line">        System.out.println(properties.getProperty(<span class="string">"length"</span>));</span><br><span class="line">        System.out.println(properties.getProperty(<span class="string">"location"</span>));</span><br><span class="line">        <span class="comment">// 遍历属性集,获取所有键的集合</span></span><br><span class="line">        Set&lt;String&gt; strings = properties.stringPropertyNames();</span><br><span class="line">        <span class="comment">// 打印键值对</span></span><br><span class="line">        <span class="keyword">for</span> (String key : strings ) &#123;</span><br><span class="line">            System.out.println(key+<span class="string">" ‐‐ "</span></span><br><span class="line">                               + properties.getProperty(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    &#123;filename=a.txt, length=<span class="number">209385038</span>, location=D:\a.txt&#125;</span><br><span class="line">    a.txt</span><br><span class="line">    <span class="number">209385038</span></span><br><span class="line">    D:\a.txt</span><br><span class="line">    filename ‐‐ a.txt</span><br><span class="line">    length ‐‐ <span class="number">209385038</span></span><br><span class="line">    location ‐‐ D:\a.txt</span><br></pre></td></tr></table></figure></li></ul><h2 id="9-5-3-与流相关的方法"><a href="#9-5-3-与流相关的方法" class="headerlink" title="9.5.3 与流相关的方法"></a>9.5.3 与流相关的方法</h2><ul><li><strong><code>public void load(InputStream inStream)</code></strong>：从字节输入流中读取键值对。</li></ul><p>参数中使用了字节输入流，通过流对象，可以关联到某文件上，这样就能够加载文本中的数据了。文本数据格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filename=a.txt</span><br><span class="line">length=<span class="number">209385038</span></span><br><span class="line">location=D:\a.txt</span><br></pre></td></tr></table></figure><p>加载代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建属性集对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 加载文本中信息到属性集</span></span><br><span class="line">        pro.load(<span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>));</span><br><span class="line">        <span class="comment">// 遍历集合并打印</span></span><br><span class="line">        Set&lt;String&gt; strings = pro.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : strings ) &#123;</span><br><span class="line">            System.out.println(key+<span class="string">" ‐‐ "</span>+pro.getProperty(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    filename ‐‐ a.txt</span><br><span class="line">    length ‐‐ <span class="number">209385038</span></span><br><span class="line">    location ‐‐ D:\a.txt</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：<br>&emsp;&emsp;文本中的数据，必须是键值对形式，可以使用空格、等号、冒号等符号分隔。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第九章 4.IO异常的处理</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/09_4%20IO%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-21-/Java/java_basic/part03/09_4%20IO%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-4-IO异常的处理"><a href="#9-4-IO异常的处理" class="headerlink" title="9.4 IO异常的处理"></a>9.4 IO异常的处理</h1><h2 id="9-4-1-JDK7以前的处理"><a href="#9-4-1-JDK7以前的处理" class="headerlink" title="9.4.1 JDK7以前的处理"></a>9.4.1 JDK7以前的处理</h2><p>&emsp;&emsp;实际开发中异常抛出不会经常使用，而是使用<code>try...catch...finally</code>代码块，处理异常部分，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandleException1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 声明变量</span></span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建流对象</span></span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);</span><br><span class="line">            <span class="comment">// 写出数据</span></span><br><span class="line">            fw.write(<span class="string">"黑马程序员"</span>); <span class="comment">//黑马程序员</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-4-2-JDK7的处理"><a href="#9-4-2-JDK7的处理" class="headerlink" title="9.4.2 JDK7的处理"></a>9.4.2 JDK7的处理</h2><p>&emsp;&emsp;还可以使用JDK7优化后的<code>try-with-resource</code> 语句，该语句确保了每个资源在语句结束时关闭。所谓的资源（resource）是指在程序完成后，必须关闭的对象。</p><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (创建流对象语句，如果多个,使用<span class="string">';'</span>隔开) &#123;</span><br><span class="line">    <span class="comment">// 读写数据</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码使用演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandleException2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> ( FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>); ) &#123;</span><br><span class="line">            <span class="comment">// 写出数据</span></span><br><span class="line">            fw.write(<span class="string">"黑马程序员"</span>); <span class="comment">//黑马程序员</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-4-3-JDK9的改进"><a href="#9-4-3-JDK9的改进" class="headerlink" title="9.4.3 JDK9的改进"></a>9.4.3 JDK9的改进</h2><p>&emsp;&emsp;JDK9中<code>try-with-resource</code>的改进，对于<strong>引入对象</strong>的方式，支持的更加简洁。被引入的对象，同样可以自动关闭，无需手动close，我们来了解一下格式。</p><p>改进前格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被final修饰的对象</span></span><br><span class="line"><span class="keyword">final</span> Resource resource1 = <span class="keyword">new</span> Resource(<span class="string">"resource1"</span>);</span><br><span class="line"><span class="comment">// 普通对象</span></span><br><span class="line">Resource resource2 = <span class="keyword">new</span> Resource(<span class="string">"resource2"</span>);</span><br><span class="line"><span class="comment">// 引入方式：创建新的变量保存</span></span><br><span class="line"><span class="keyword">try</span> (Resource r1 = resource1;</span><br><span class="line">     Resource r2 = resource2) &#123;</span><br><span class="line">    <span class="comment">// 使用对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进后格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被final修饰的对象</span></span><br><span class="line"><span class="keyword">final</span> Resource resource1 = <span class="keyword">new</span> Resource(<span class="string">"resource1"</span>);</span><br><span class="line"><span class="comment">// 普通对象</span></span><br><span class="line">Resource resource2 = <span class="keyword">new</span> Resource(<span class="string">"resource2"</span>);</span><br><span class="line"><span class="comment">// 引入方式：直接引入</span></span><br><span class="line"><span class="keyword">try</span> (resource1; resource2) &#123;</span><br><span class="line">    <span class="comment">// 使用对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进后，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">final</span> FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"in.txt"</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"out.txt"</span>);</span><br><span class="line">        <span class="comment">// 引入到try中</span></span><br><span class="line">        <span class="keyword">try</span> (fr; fw) &#123;</span><br><span class="line">            <span class="comment">// 定义变量</span></span><br><span class="line">            <span class="keyword">int</span> b;</span><br><span class="line">            <span class="comment">// 读取数据</span></span><br><span class="line">            <span class="keyword">while</span> ((b = fr.read())!=‐<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 写出数据</span></span><br><span class="line">                fw.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第九章 3.字符流</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/09_3%20%E5%AD%97%E7%AC%A6%E6%B5%81.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/09_3%20%E5%AD%97%E7%AC%A6%E6%B5%81.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-3-字符流"><a href="#9-3-字符流" class="headerlink" title="9.3 字符流"></a>9.3 字符流</h1><p>&emsp;&emsp;当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p><h2 id="9-3-1-字符输入流【Reader】"><a href="#9-3-1-字符输入流【Reader】" class="headerlink" title="9.3.1 字符输入流【Reader】"></a>9.3.1 字符输入流【Reader】</h2><p>&emsp;&emsp;<code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><ul><li><p><strong><code>public void close()</code></strong>：关闭此流并释放与此流相关联的任何系统资源。</p></li><li><p><strong><code>public int read()</code></strong>：从输入流读取一个字符。</p></li><li><p><strong><code>public int read(char[] cbuf)</code></strong>：从输入流中读取一些字符，并将它们存储到字符数组 <code>cbuf</code>中 。</p></li></ul><h2 id="9-3-2-FileReader类"><a href="#9-3-2-FileReader类" class="headerlink" title="9.3.2 FileReader类"></a>9.3.2 FileReader类</h2><p>&emsp;&emsp;<code>java.io.FileReader</code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><blockquote><p>小贴士：<br>&emsp;&emsp;1、字符编码：字节与字符的对应规则。Windows系统的中文编码默认是GBK编码表。idea中UTF-8<br>&emsp;&emsp;2、字节缓冲区：一个字节数组，用来临时存储字节数据。</p></blockquote><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p><strong><code>FileReader(File file)</code></strong>：创建一个新的<code>FileReader</code>，给定要读取的File对象。</p></li><li><p><strong><code>FileReader(String fileName)</code></strong>：创建一个新的<code>FileReader</code>，给定要读取的文件的名称。</p></li></ul><p>当你创建一个流对象时，必须传入一个文件路径。类似于FileInputStream 。</p><ul><li><p>构造举例，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderConstructor</span> <span class="title">throws</span> <span class="title">IOException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"b.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="读取字符数据"><a href="#读取字符数据" class="headerlink" title="读取字符数据"></a>读取字符数据</h3><ol><li><p><strong>读取字符</strong>： <code>read</code> 方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code> ，循环读取，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FRRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"read.txt"</span>);</span><br><span class="line">        <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">        <span class="keyword">int</span> b ;</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((b = fr.read())!=‐<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    我</span><br><span class="line">    爱</span><br><span class="line">    学</span><br><span class="line">    习</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：<br>&emsp;&emsp;虽然读取了一个字符，但是会自动提升为int类型。</p></blockquote></li><li><p><strong>使用字符数组读取</strong>： <code>read(char[] cbuf)</code>，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FRRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"read.txt"</span>);</span><br><span class="line">        <span class="comment">// 定义变量，保存有效字符个数</span></span><br><span class="line">        <span class="keyword">int</span> len ;</span><br><span class="line">        <span class="comment">// 定义字符数组，作为装字符数据的容器</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(cbuf))!=‐<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(cbuf));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    我爱</span><br><span class="line">    学习</span><br></pre></td></tr></table></figure></li></ol><h2 id="9-3-3-字符输出流【Writer】"><a href="#9-3-3-字符输出流【Writer】" class="headerlink" title="9.3.3 字符输出流【Writer】"></a>9.3.3 字符输出流【Writer】</h2><p>&emsp;&emsp;<code>java.io.Writer</code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><p><strong><code>void write(int c)</code></strong>：写入单个字符。</p></li><li><p><strong><code>void write(char[] cbuf)</code></strong>：写入字符数组。</p></li><li><p><strong><code>abstract void write(char[] cbuf, int off, int len)</code></strong>：写入字符数组的某一部分,off数组的开始索引,len写的字符个数。</p></li><li><p><strong><code>void write(String str)</code></strong>：写入字符串。</p></li><li><p><strong><code>void write(String str, int off, int len)</code></strong>：写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</p></li><li><p><strong><code>void flush()</code></strong>：刷新该流的缓冲。</p></li><li><p><strong><code>void close()</code></strong>：关闭此流，但要先刷新它。</p></li></ul><h2 id="9-3-4-FileWriter类"><a href="#9-3-4-FileWriter类" class="headerlink" title="9.3.4 FileWriter类"></a>9.3.4 FileWriter类</h2><p>&emsp;&emsp;<code>java.io.FileWriter</code>类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p><strong><code>FileWriter(File file)</code></strong>：创建一个新的<code>FileWriter</code>，给定要读取的File对象。</p></li><li><p><strong><code>FileWriter(String fileName)</code></strong>：创建一个新的<code>FileWriter</code>，给定要读取的文件的名称。</p></li></ul><p>当你创建一个流对象时，必须传入一个文件路径，类似于FileOutputStream。</p><ul><li><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriterConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"b.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="基本写出数据"><a href="#基本写出数据" class="headerlink" title="基本写出数据"></a>基本写出数据</h3><p><strong>写出字符：</strong> write(int b) 方法，每次可以写出一个字符数据，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">        fw.write(<span class="number">97</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">        fw.write(<span class="string">'b'</span>); <span class="comment">// 写出第2个字符</span></span><br><span class="line">        fw.write(<span class="string">'C'</span>); <span class="comment">// 写出第3个字符</span></span><br><span class="line">        fw.write(<span class="number">30000</span>); <span class="comment">// 写出第4个字符，中文编码表中30000对应一个汉字。</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        【注意】关闭资源时,与FileOutputStream不同。</span></span><br><span class="line"><span class="comment">        如果不关闭,数据只是保存到缓冲区，并未保存到文件。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// fw.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    abC田</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：<br>&emsp;&emsp;1、虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。<br>&emsp;&emsp;2、未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。</p></blockquote><h3 id="关闭和刷新"><a href="#关闭和刷新" class="headerlink" title="关闭和刷新"></a>关闭和刷新</h3><p>&emsp;&emsp;因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要flush 方法了。</p><ul><li><strong>flush</strong>：刷新缓冲区，流对象可以继续使用。</li><li><strong>close</strong>：先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul><p>代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);</span><br><span class="line">        <span class="comment">// 写出数据，通过flush</span></span><br><span class="line">        fw.write(<span class="string">'刷'</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">        fw.flush();</span><br><span class="line">        fw.write(<span class="string">'新'</span>); <span class="comment">// 继续写出第2个字符，写出成功</span></span><br><span class="line">        fw.flush();</span><br><span class="line">        <span class="comment">// 写出数据，通过close</span></span><br><span class="line">        fw.write(<span class="string">'关'</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">        fw.close();</span><br><span class="line">        <span class="comment">// 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span></span><br><span class="line">        fw.write(<span class="string">'闭'</span>); </span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：<br>&emsp;&emsp;即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。</p></blockquote><h3 id="写出其他数据"><a href="#写出其他数据" class="headerlink" title="写出其他数据"></a>写出其他数据</h3><ol><li><p><strong>写出字符数组</strong> ： <code>write(char[] cbuf)</code> 和 <code>write(char[] cbuf, int off, int len)</code> ，每次可以写出字符数组中的数据，用法类似<code>FileOutputStream</code>，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);</span><br><span class="line">        <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="string">"我爱学习"</span>.toCharArray();</span><br><span class="line">        <span class="comment">// 写出字符数组</span></span><br><span class="line">        fw.write(chars); <span class="comment">// 我爱学习</span></span><br><span class="line">        <span class="comment">// 写出从索引2开始，2个字节。索引2是'学'，两个字节，也就是'学习'。</span></span><br><span class="line">        fw.write(b,<span class="number">2</span>,<span class="number">2</span>); <span class="comment">// 学习</span></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>写出字符串</strong>： <code>write(String str)</code>和 <code>write(String str, int off, int len)</code> ，每次可以写出字符串中的数据，更为方便，代码使用演示：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);</span><br><span class="line">        <span class="comment">// 字符串</span></span><br><span class="line">        String msg = <span class="string">"我爱学习"</span>;</span><br><span class="line">        <span class="comment">// 写出字符数组</span></span><br><span class="line">        fw.write(msg); <span class="comment">//我爱学习</span></span><br><span class="line">        <span class="comment">// 写出从索引2开始，2个字节。索引2是'学'，两个字节，也就是'学习'。</span></span><br><span class="line">        fw.write(msg,<span class="number">2</span>,<span class="number">2</span>); <span class="comment">// 学习</span></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>续写和换行</strong>：操作类似于<code>FileOutputStream</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象，可以续写数据</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>，<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 写出字符串</span></span><br><span class="line">        fw.write(<span class="string">"我爱"</span>);</span><br><span class="line">        <span class="comment">// 写出换行</span></span><br><span class="line">        fw.write(<span class="string">"\r\n"</span>);</span><br><span class="line">        <span class="comment">// 写出字符串</span></span><br><span class="line">        fw.write(<span class="string">"学习"</span>);</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出结果:</span><br><span class="line">    我爱</span><br><span class="line">    学习</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：<br>&emsp;&emsp;字符流，只能操作文本文件，不能操作图片，视频等非文本文件。<br>&emsp;&emsp;当我们单纯读或者写文本文件时 使用字符流 其他情况使用字节流</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第九章 2.字节流</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/09_2%20%E5%AD%97%E8%8A%82%E6%B5%81.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/09_2%20%E5%AD%97%E8%8A%82%E6%B5%81.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-2-字节流"><a href="#9-2-字节流" class="headerlink" title="9.2 字节流"></a>9.2 字节流</h1><h2 id="9-2-1-一切皆为字节"><a href="#9-2-1-一切皆为字节" class="headerlink" title="9.2.1 一切皆为字节"></a>9.2.1 一切皆为字节</h2><p>&emsp;&emsp;一切文件数据(文本、图片、视频等)在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。</p><h2 id="9-2-2-字节输出流【OutputStream】"><a href="#9-2-2-字节输出流【OutputStream】" class="headerlink" title="9.2.2 字节输出流【OutputStream】"></a>9.2.2 字节输出流【OutputStream】</h2><p>&emsp;&emsp;<code>java.io.OutputStream</code>抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><p><strong><code>public void close()</code></strong>：关闭此输出流并释放与此流相关联的任何系统资源。</p></li><li><p><strong><code>public void flush()</code></strong>：刷新此输出流并强制任何缓冲的输出字节被写出。</p></li><li><p><strong><code>public void write(byte[] b)</code></strong>：将 b.length字节从指定的字节数组写入此输出流。</p></li><li><p><strong><code>public void write(byte[] b, int off, int len)</code></strong>：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。</p></li><li><p><strong><code>public abstract void write(int b)</code></strong>：将指定的字节输出流。</p><blockquote><p>小贴士：<br>&emsp;&emsp;<code>close()</code>方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote></li></ul><h2 id="9-2-3-FileOutputStream类"><a href="#9-2-3-FileOutputStream类" class="headerlink" title="9.2.3 FileOutputStream类"></a>9.2.3 FileOutputStream类</h2><p><code>OutputStream</code>有很多子类，我们从最简单的一个子类开始。</p><p><code>java.io.FileOutputStream</code> 类是文件输出流，用于将数据写出到文件。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><strong><code>public FileOutputStream(File file)</code></strong>：创建文件输出流以写入由指定的 File对象表示的文件。</li><li><strong><code>public FileOutputStream(String name)</code></strong>：创建文件输出流以指定的名称写入文件。</li></ul><p>&emsp;&emsp;当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。</p><ul><li><p>构造举例，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamConstructor</span> <span class="title">throws</span> <span class="title">IOException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"b.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="写出字节数据"><a href="#写出字节数据" class="headerlink" title="写出字节数据"></a>写出字节数据</h3><ol><li><p><strong>写出字节</strong>： <code>write(int b)</code> 方法，每次可以写出一个字节数据，代码使用演示：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">        fos.write(<span class="number">97</span>); <span class="comment">// 写出第1个字节</span></span><br><span class="line">        fos.write(<span class="number">98</span>); <span class="comment">// 写出第2个字节</span></span><br><span class="line">        fos.write(<span class="number">99</span>); <span class="comment">// 写出第3个字节</span></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件内容：</span><br><span class="line">    abc</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：<br>&emsp;&emsp;1、虽然参数为int类型的四个字节，但是只会保留一个字节的信息写出。<br>&emsp;&emsp;2、流操作完毕后，必须释放系统资源，调用close方法，千万记得。</p></blockquote></li><li><p><strong>写出字节数组</strong>： <code>write(byte[] b)</code>，每次可以写出数组中的数据，代码使用演示：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);</span><br><span class="line">        <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="string">"字符串转换为字节数组"</span>.getBytes();</span><br><span class="line">        <span class="comment">// 写出字节数组数据</span></span><br><span class="line">        fos.write(b);</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件内容：</span><br><span class="line">    字符串转换为字节数组</span><br></pre></td></tr></table></figure></li><li><p><strong>写出指定长度字节数组</strong>： <code>write(byte[] b, int off, int len)</code> ,每次写出从off索引开始，len个字节，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);</span><br><span class="line">        <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="string">"abcde"</span>.getBytes();</span><br><span class="line">        <span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">        fos.write(b,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件内容：</span><br><span class="line">    cd</span><br></pre></td></tr></table></figure></li></ol><h3 id="数据追加续写"><a href="#数据追加续写" class="headerlink" title="数据追加续写"></a>数据追加续写</h3><p>&emsp;&emsp;经过以上的演示，每次程序运行，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢？</p><ul><li><strong><code>public FileOutputStream(File file, boolean append)</code></strong>：创建文件输出流以写入由指定的 File对象表示的文件。</li><li><strong><code>public FileOutputStream(String name, boolean append)</code></strong>：创建文件输出流以指定的名称写入文件。</li></ul><p>&emsp;&emsp;这两个构造方法，参数中都需要传入一个<code>boolean</code>类型的值， <code>true</code>表示追加数据， <code>false</code>表示清空原有数据。</p><p>这样创建的输出流对象，就可以指定是否追加续写了，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>，<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="string">"abcde"</span>.getBytes();</span><br><span class="line">        <span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">        fos.write(b);</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件操作前：cd</span><br><span class="line">文件操作后：cdabcde</span><br></pre></td></tr></table></figure><h3 id="写出换行"><a href="#写出换行" class="headerlink" title="写出换行"></a>写出换行</h3><p>Windows系统里，换行符号是<code>\r\n</code>。把</p><p>以指定是否追加续写了，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);</span><br><span class="line">        <span class="comment">// 定义字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] words = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>&#125;;</span><br><span class="line">        <span class="comment">// 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 写出一个字节</span></span><br><span class="line">            fos.write(words[i]);</span><br><span class="line">            <span class="comment">// 写出一个换行, 换行符号转成数组写出</span></span><br><span class="line">            fos.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    a</span><br><span class="line">    b</span><br><span class="line">    c</span><br><span class="line">    d</span><br><span class="line">    e</span><br></pre></td></tr></table></figure><blockquote><ul><li>回车符<code>\r</code> 和换行符<code>\n</code>**：<ul><li>回车符：回到一行的开头（return）。</li><li>换行符：下一行（newline）。</li></ul></li><li>系统中的换行：<ul><li>Windows系统里，每行结尾是 <code>回车+换行</code> ，即<code>\r\n</code> ；</li><li>Unix系统里，每行结尾只有 <code>换行</code> ，即<code>\n</code> ；</li><li>Mac系统里，每行结尾是 <code>回车</code> ，即<code>\r</code> 。从 Mac OS X开始与Linux统一。</li></ul></li></ul></blockquote><h2 id="9-2-4-字节输入流【InputStream】"><a href="#9-2-4-字节输入流【InputStream】" class="headerlink" title="9.2.4 字节输入流【InputStream】"></a>9.2.4 字节输入流【InputStream】</h2><p>&emsp;<code>java.io.InputStream</code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p><ul><li><p><strong><code>public void close()</code></strong>：关闭此输入流并释放与此流相关联的任何系统资源。</p></li><li><p><strong><code>public abstract int read()</code></strong>：从输入流读取数据的下一个字节。</p></li><li><p><strong><code>public int read(byte[] b)</code></strong>：从输入流中读取一些字节数，并将它们存储到字节数组 b中 。</p><blockquote><p>小贴士：<br>&emsp;&emsp;<code>close()</code>方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote></li></ul><h2 id="9-2-5-FileInputStream类"><a href="#9-2-5-FileInputStream类" class="headerlink" title="9.2.5 FileInputStream类"></a>9.2.5 FileInputStream类</h2><p>&emsp;&emsp;<code>java.io.FileInputStream</code>类是文件输入流，从文件中读取字节。</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p><strong><code>FileInputStream(File file)</code></strong>：通过打开与实际文件的连接来创建一个<code>FileInputStream</code>，该文件由文件系统中的<code>File</code>对象 <em>file</em> 命名。</p></li><li><p><strong><code>FileInputStream(String name)</code></strong>：通过打开与实际文件的连接来创建一个<code>FileInputStream</code>，该文件由文件系统中的路径名 <em>name</em> 命名。</p></li></ul><p>&emsp;&emsp;当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出<code>FileNotFoundException</code>。</p><ul><li><p>构造举例，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamConstructor</span> <span class="title">throws</span> <span class="title">IOException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line">        FileInputStream fos = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileInputStream fos = <span class="keyword">new</span> FileInputStream(<span class="string">"b.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="读取字节数据"><a href="#读取字节数据" class="headerlink" title="读取字节数据"></a>读取字节数据</h3><ol><li><p><strong>读取字节</strong>： <code>read</code>方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回<code>-1</code> ，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>);</span><br><span class="line">        <span class="comment">// 读取数据，返回一个字节</span></span><br><span class="line">        <span class="keyword">int</span> read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        <span class="comment">// 读取到末尾,返回‐1</span></span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println( read);</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    a</span><br><span class="line">    b</span><br><span class="line">    c</span><br><span class="line">    d</span><br><span class="line">    e</span><br><span class="line">    ‐<span class="number">1</span></span><br></pre></td></tr></table></figure><p>循环改进读取方式，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>);</span><br><span class="line">        <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">        <span class="keyword">int</span> b ；</span><br><span class="line">            <span class="comment">// 循环读取</span></span><br><span class="line">            <span class="keyword">while</span> ((b = fis.read())!=‐<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println((<span class="keyword">char</span>)b);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    a</span><br><span class="line">    b</span><br><span class="line">    c</span><br><span class="line">    d</span><br><span class="line">    e</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：<br>&emsp;&emsp;1、虽然读取了一个字节，但是会自动提升为int类型。<br>&emsp;&emsp;2、流操作完毕后，必须释放系统资源，调用close方法，千万记得。</p></blockquote></li><li><p><strong>使用字节数组读取</strong>： <code>read(byte[] b)</code>，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象.</span></span><br><span class="line">        <span class="comment">// 文件中为abcde</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>); </span><br><span class="line">        <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="comment">// 定义字节数组，作为装字节数据的容器</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> (( len= fis.read(b))!=‐<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 每次读取后,把数组变成字符串打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(b));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    ab</span><br><span class="line">    cd</span><br><span class="line">    ed</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;错误数据<code>d</code>，是由于最后一次读取时，只读取一个字节<code>e</code> ，数组中，上次读取的数据没有被完全替换，所以要通过<code>len</code> ，获取有效的字节，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象.</span></span><br><span class="line">        <span class="comment">// 文件中为abcde</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>); </span><br><span class="line">        <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="comment">// 定义字节数组，作为装字节数据的容器</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> (( len= fis.read(b))!=‐<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 每次读取后,把数组的有效字节部分，变成字符串打印</span></span><br><span class="line">            <span class="comment">// len 每次读取的有效字节个数</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(b，<span class="number">0</span>，len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    ab</span><br><span class="line">    cd</span><br><span class="line">    e</span><br></pre></td></tr></table></figure><p><img src="//cdn.foreversfj.com/image/blog/20200305/h5rHTcS8pLGb.png!blog" alt=""></p><blockquote><p>小贴士：<br>&emsp;&emsp;使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用。</p></blockquote></li></ol><h2 id="9-2-6-字节流练习：图片复制"><a href="#9-2-6-字节流练习：图片复制" class="headerlink" title="9.2.6 字节流练习：图片复制"></a>9.2.6 字节流练习：图片复制</h2><h3 id="复制原理图解"><a href="#复制原理图解" class="headerlink" title="复制原理图解"></a>复制原理图解</h3><p><img src="//cdn.foreversfj.com/image/blog/20190824/3F9I4PhnMhdX.png!blog" alt=""></p><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><ul><li>复制图片文件，代码使用演示：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Copy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建流对象</span></span><br><span class="line">        <span class="comment">// 1.1 指定数据源</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"D:\\test.jpg!blog"</span>);</span><br><span class="line">        <span class="comment">// 1.2 指定目的地</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"test_copy.jpg!blog"</span>);</span><br><span class="line">        <span class="comment">// 2.读写数据</span></span><br><span class="line">        <span class="comment">// 2.1 定义数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 2.2 定义长度</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="comment">// 2.3 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(b))!=‐<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 2.4 写出数据</span></span><br><span class="line">            fos.write(b, <span class="number">0</span> , len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：<br>&emsp;&emsp;流的关闭原则：先开后关，后开先关。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第九章 1.IO概述</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/09_1%20IO%E6%A6%82%E8%BF%B0.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/09_1%20IO%E6%A6%82%E8%BF%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-1-IO概述"><a href="#9-1-IO概述" class="headerlink" title="9.1 IO概述"></a>9.1 IO概述</h1><h2 id="9-1-1-什么是IO"><a href="#9-1-1-什么是IO" class="headerlink" title="9.1.1 什么是IO"></a>9.1.1 什么是IO</h2><p>&emsp;&emsp;生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了<code>ctrl+s</code>，可能文件就白白编辑了。当你电脑上插入一个U盘，可以把一个视频，拷贝到你的电脑硬盘里。那么数据都是在哪些设备上的呢？键盘、内存、硬盘、外接设备等等。</p><p>&emsp;&emsp;我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为<code>输入input</code>和<code>输出output</code>，即流向内存是输入流，流出内存的输出流。</p><p>J&emsp;&emsp;ava中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入也叫做读取</strong>数据，<strong>输出也叫做写出</strong>数据。</p><h2 id="9-1-2-IO的分类"><a href="#9-1-2-IO的分类" class="headerlink" title="9.1.2 IO的分类"></a>9.1.2 IO的分类</h2><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li><strong>输入流</strong> ：把数据从其他设备上读取到内存中的流。</li><li><strong>输出流</strong> ：把数据从内存 中写出到其他设备上的流。</li></ul><p>格局数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p><ul><li><strong>字节流</strong> ：以字节为单位，读写数据的流。</li><li><strong>字符流</strong> ：以字符为单位，读写数据的流。</li></ul><h2 id="9-1-3-IO的流向说明图解"><a href="#9-1-3-IO的流向说明图解" class="headerlink" title="9.1.3 IO的流向说明图解"></a>9.1.3 IO的流向说明图解</h2><p><img src="//cdn.foreversfj.com/image/blog/20190824/Ly538hmqCJ7T.png!blog" alt=""></p><h2 id="9-1-4-顶级父类们"><a href="#9-1-4-顶级父类们" class="headerlink" title="9.1.4 顶级父类们"></a>9.1.4 顶级父类们</h2><table><thead><tr><th align="left"></th><th align="center">输入流</th><th align="center">输出流</th></tr></thead><tbody><tr><td align="left"><strong>字节流</strong></td><td align="center">字节输入流<br/><strong>InputStream</strong></td><td align="center">字节输出流<br/><strong>OutputStream</strong></td></tr><tr><td align="left"><strong>字符流</strong></td><td align="center">字符输入流<br/><strong>Reader</strong></td><td align="center">字符输出流是<br/><strong>Writer</strong></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第八章 3.综合案例</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/08_3%20%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/08_3%20%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="8-3-综合案例"><a href="#8-3-综合案例" class="headerlink" title="8.3 综合案例"></a>8.3 综合案例</h1><h2 id="8-3-1-文件搜索"><a href="#8-3-1-文件搜索" class="headerlink" title="8.3.1 文件搜索"></a>8.3.1 文件搜索</h2><p>搜索<code>D:\aaa</code> 目录中的<code>.java</code> 文件。</p><p><img src="//cdn.foreversfj.com/image/blog/20200305/P4MWILoIwqVt.png!blog" alt=""></p><p><strong>分析：</strong></p><ol><li>目录搜索，无法判断多少级目录，所以使用递归，遍历所有目录。</li><li>遍历目录时，获取的子文件，通过文件名称，判断是否符合条件。</li></ol><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建File对象</span></span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"D:\\aaa"</span>);</span><br><span class="line">        <span class="comment">// 调用打印目录方法</span></span><br><span class="line">        printDir(dir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDir</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取子文件和目录</span></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="comment">// 循环打印</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                <span class="comment">// 是文件，判断文件名并输出文件绝对路径</span></span><br><span class="line">                <span class="keyword">if</span> (file.getName().endsWith(<span class="string">".java"</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"文件名:"</span> </span><br><span class="line">                                       + file.getAbsolutePath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 是目录，继续遍历,形成递归</span></span><br><span class="line">                printDir(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-2-文件过滤器优化"><a href="#8-3-2-文件过滤器优化" class="headerlink" title="8.3.2 文件过滤器优化"></a>8.3.2 文件过滤器优化</h2><p>&emsp;&emsp;<code>java.io.FileFilter</code>和<code>java.io.FilenameFilter</code>都是接口，是File的过滤器。该接口的对象可以传递给File类的<code>listFiles(FileFilter)</code>或者<code>listFiles(FilenameFilter)</code>作为参数， 接口中只有一个方法。</p><ul><li><strong><code>boolean accept(File pathname)</code></strong>：FileFilter中的测试pathname是否应该包含在当前File目录中，符合则返回true。</li><li><strong><code>boolean accept(File dir, String name)</code></strong>：FilenameFilter中的测试dir和name组合的文件是否应该包含在目录中，符合则返回true。</li></ul><p><strong>分析：</strong></p><ol><li>接口作为参数，需要传递子类对象，重写其中方法。我们选择匿名内部类方式，比较简单。</li><li><code>accept</code>方法，参数为File，表示当前File下所有的子文件和子目录。保留住则返回true，过滤掉则返回false。保留规则：<ol><li>要么是.java文件。</li><li>要么是目录，用于继续遍历。</li></ol></li><li>通过过滤器的作用， listFiles(FileFilter) 返回的数组元素中，子文件对象都是符合条件的，可以直接打印。</li></ol><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"D:\\aaa"</span>);</span><br><span class="line">        printDir2(dir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDir2</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 匿名内部类方式,创建过滤器子类对象</span></span><br><span class="line">        <span class="comment">/*File[] files = dir.listFiles(new FileFilter() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean accept(File pathname) &#123;</span></span><br><span class="line"><span class="comment">                return pathname.getName().toLowerCase().endsWith(".java")|| pathname.isDirectory();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">        File[] files = dir.listFiles(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//过滤规则,组合后的file是文件夹或者是.java结尾的文件返回true</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> File(dir,name).isDirectory() || name.toLowerCase().endsWith(<span class="string">".java"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 循环打印</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"文件名:"</span> </span><br><span class="line">                                   + file.getAbsolutePath());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                printDir2(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-3-Lambda优化"><a href="#8-3-3-Lambda优化" class="headerlink" title="8.3.3 Lambda优化"></a>8.3.3 Lambda优化</h2><p><strong>分析</strong>： FileFilter 是只有一个方法的接口，因此可以用lambda表达式简写。</p><p><strong>lambda格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">()‐&gt;&#123; &#125;</span><br></pre></td></tr></table></figure><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDir3</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// lambda的改写</span></span><br><span class="line">    File[] files = dir.listFiles(f ‐&gt; <span class="keyword">return</span> f.getName().endsWith(<span class="string">".java"</span>) || f.isDirectory());</span><br><span class="line">    <span class="comment">// 循环打印</span></span><br><span class="line">    <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"文件名:"</span> + file.getAbsolutePath());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            printDir3(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第八章 2.递归</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/08_2%20%E9%80%92%E5%BD%92.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/08_2%20%E9%80%92%E5%BD%92.html</url>
      
        <content type="html"><![CDATA[<h1 id="8-2-递归"><a href="#8-2-递归" class="headerlink" title="8.2 递归"></a>8.2 递归</h1><h2 id="8-2-1-概述"><a href="#8-2-1-概述" class="headerlink" title="8.2.1 概述"></a>8.2.1 概述</h2><ul><li><strong>递归：</strong>指在当前方法内调用自己的这种现象。</li><li><strong>递归的分类:</strong><ul><li>递归分为两种，直接递归和间接递归。</li><li>直接递归称为方法自身调用自己。</li><li>间接递归可以A方法调用B方法，B方法调用C方法，C方法调用A方法。</li></ul></li><li><strong>注意事项：</strong><ul><li>递归一定要有条件限定，保证递归能够停止下来，否则会发生栈内存溢出。</li><li>在递归中虽然有限定条件，但是递归次数不能太多。否则也会发生栈内存溢出。</li><li>构造方法，禁止递归</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01DiGui</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// a();</span></span><br><span class="line">        b(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 3.构造方法,禁止递归</span></span><br><span class="line"><span class="comment">    * 编译报错:构造方法是创建对象使用的,不能让对象一直创建下去</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo01DiGui</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Demo01DiGui();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 2.在递归中虽然有限定条件，但是递归次数不能太多。否则也会发生栈内存溢出。</span></span><br><span class="line"><span class="comment">    * 4993</span></span><br><span class="line"><span class="comment">    * Exception in thread "main" java.lang.StackOverflowError</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">//添加一个递归结束的条件,i==5000的时候结束</span></span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">5000</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//结束方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        b(++i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 1.递归一定要有条件限定，保证递归能够停止下来，否则会发生栈内存溢出。 </span></span><br><span class="line"><span class="comment">    * Exception in thread "main" java.lang.StackOverflowError</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"a方法"</span>);</span><br><span class="line">        a();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-2-递归累加求和"><a href="#8-2-2-递归累加求和" class="headerlink" title="8.2.2 递归累加求和"></a>8.2.2 递归累加求和</h2><h3 id="计算1-n的和"><a href="#计算1-n的和" class="headerlink" title="计算1 ~ n的和"></a>计算1 ~ n的和</h3><p><strong>分析</strong>：num的累和 = num + (num-1)的累和，所以可以把累和的操作定义成一个方法，递归调用。</p><p><strong>实现代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//计算1~num的和，使用递归完成</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">// 调用求和的方法</span></span><br><span class="line">        <span class="keyword">int</span> sum = getSum(num);</span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过递归算法实现.</span></span><br><span class="line"><span class="comment">    参数列表:int</span></span><br><span class="line"><span class="comment">    返回值类型: int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        num为1时,方法返回1,</span></span><br><span class="line"><span class="comment">        相当于是方法的出口,num总有是1的情况</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        num不为1时,方法返回 num +(num‐1)的累和</span></span><br><span class="line"><span class="comment">        递归调用getSum方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> num + getSum(num‐<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码执行图解"><a href="#代码执行图解" class="headerlink" title="代码执行图解"></a>代码执行图解</h3><p><img src="//cdn.foreversfj.com/image/blog/20190824/N4Q21MvivmlA.png!blog" alt=""></p><blockquote><p>小贴士：<br>&emsp;&emsp;递归一定要有条件限定，保证递归能够停止下来，次数不要太多，否则会发生栈内存溢出。</p></blockquote><h2 id="8-2-3-递归求阶乘"><a href="#8-2-3-递归求阶乘" class="headerlink" title="8.2.3 递归求阶乘"></a>8.2.3 递归求阶乘</h2><ul><li><strong>阶乘</strong>：所有小于及等于该数的正整数的积。  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n的阶乘：n! = n * (n‐<span class="number">1</span>) *...* <span class="number">3</span> * <span class="number">2</span> * <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><em>分析：*</em>这与累加类似,只不过换成了乘法运算，但需要注意阶乘值符合int类型的范围。   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">推理得出：n! = n * (n‐<span class="number">1</span>)!</span><br></pre></td></tr></table></figure><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//计算n的阶乘，使用递归完成</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 调用求阶乘的方法</span></span><br><span class="line">        <span class="keyword">int</span> value = getValue(n);</span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(<span class="string">"阶乘为:"</span>+ value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过递归算法实现.</span></span><br><span class="line"><span class="comment">    参数列表:int</span></span><br><span class="line"><span class="comment">    返回值类型: int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1的阶乘为1</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    n不为1时,方法返回 n! = n*(n‐1)!</span></span><br><span class="line"><span class="comment">    递归调用getValue方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="keyword">return</span> n * getValue(n ‐ <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-4-递归打印多级目录"><a href="#8-2-4-递归打印多级目录" class="headerlink" title="8.2.4 递归打印多级目录"></a>8.2.4 递归打印多级目录</h2><p><strong>分析</strong>：多级目录的打印，就是当目录的嵌套。遍历之前，无从知道到底有多少级目录，所以我们还是要使用递归实现。</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建File对象</span></span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"D:\\aaa"</span>);</span><br><span class="line">        <span class="comment">// 调用打印目录方法</span></span><br><span class="line">        printDir(dir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDir</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取子文件和目录</span></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="comment">// 循环打印</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        判断:</span></span><br><span class="line"><span class="comment">        当是文件时,打印绝对路径.</span></span><br><span class="line"><span class="comment">        当是目录时,继续调用打印目录的方法,形成递归调用.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="comment">// 判断</span></span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                <span class="comment">// 是文件,输出文件绝对路径</span></span><br><span class="line">                System.out.println(<span class="string">"文件名:"</span>+ file.getAbsolutePath());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 是目录,输出目录绝对路径</span></span><br><span class="line">                System.out.println(<span class="string">"目录:"</span>+file.getAbsolutePath());</span><br><span class="line">                <span class="comment">// 继续遍历,调用printDir,形成递归</span></span><br><span class="line">                printDir(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第八章 1.File类</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/08_1%20File%E7%B1%BB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/08_1%20File%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="8-1-File类"><a href="#8-1-File类" class="headerlink" title="8.1 File类"></a>8.1 File类</h1><h2 id="8-1-1-概述"><a href="#8-1-1-概述" class="headerlink" title="8.1.1 概述"></a>8.1.1 概述</h2><p>&emsp;&emsp;<code>java.io.File</code>类是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。</p><h2 id="8-1-2-构造方法"><a href="#8-1-2-构造方法" class="headerlink" title="8.1.2 构造方法"></a>8.1.2 构造方法</h2><ul><li><strong><code>public File(String pathname)</code></strong>：通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例。<ul><li>String pathname：字符串的路径名称<br>路径可以是以文件结尾，也可以是以文件夹结尾<br>路径可以是相对路径，也可以是绝对路径<br>路径可以是存在，也可以是不存在<br>创建File对象，只是把字符串路径封装为File对象，不考虑路径的真假情况</li></ul></li><li><strong><code>public File(String parent, String child)</code></strong>：从父路径名字符串和子路径名字符串创建新的 File实例。</li><li><strong><code>public File(File parent, String child)</code></strong>：从父抽象路径名和子路径名字符串创建新的 File实例。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件路径名</span></span><br><span class="line">String pathname = <span class="string">"D:\\aaa.txt"</span>;</span><br><span class="line">File file1 = <span class="keyword">new</span> File(pathname);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件路径名</span></span><br><span class="line">String pathname2 = <span class="string">"D:\\aaa\\bbb.txt"</span>;</span><br><span class="line">File file2 = <span class="keyword">new</span> File(pathname2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过父路径和子路径字符串</span></span><br><span class="line">String parent = <span class="string">"d:\\aaa"</span>;</span><br><span class="line">String child = <span class="string">"bbb.txt"</span>;</span><br><span class="line">File file3 = <span class="keyword">new</span> File(parent, child);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过父级File对象和子路径字符串</span></span><br><span class="line">File parentDir = <span class="keyword">new</span> File(<span class="string">"d:\\aaa"</span>);</span><br><span class="line">String child = <span class="string">"bbb.txt"</span>;</span><br><span class="line">File file4 = <span class="keyword">new</span> File(parentDir, child);</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：<br>&emsp;&emsp;1、一个File对象代表硬盘中实际存在的一个文件或者目录。<br>&emsp;&emsp;2、无论该路径下是否存在文件或者目录，都不影响File对象的创建。</p></blockquote><h2 id="8-1-3-常用方法"><a href="#8-1-3-常用方法" class="headerlink" title="8.1.3 常用方法"></a>8.1.3 常用方法</h2><h3 id="获取系统分隔符"><a href="#获取系统分隔符" class="headerlink" title="获取系统分隔符"></a>获取系统分隔符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String pathSeparator = File.pathSeparator;</span><br><span class="line">System.out.println(pathSeparator);<span class="comment">//路径分隔符 windows:分号;  linux:冒号:</span></span><br><span class="line"></span><br><span class="line">String separator = File.separator;</span><br><span class="line">System.out.println(separator);<span class="comment">// 文件名称分隔符 windows:反斜杠\  linux:正斜杠/</span></span><br></pre></td></tr></table></figure><h3 id="获取功能的方法"><a href="#获取功能的方法" class="headerlink" title="获取功能的方法"></a>获取功能的方法</h3><ul><li><p><strong><code>public String getAbsolutePath()</code></strong>：返回此File的绝对路径名字符串。</p></li><li><p><strong><code>public String getPath()</code></strong>：将此File转换为路径名字符串。</p></li><li><p><strong><code>public String getName()</code></strong>：返回由此File表示的文件或目录的名称。</p></li><li><p><strong><code>public long length()</code></strong>：返回由此File表示的文件的长度。</p><p>  方法演示，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileGet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/aaa/bbb.java"</span>);</span><br><span class="line">        System.out.println(<span class="string">"文件绝对路径:"</span>+f.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">"文件构造路径:"</span>+f.getPath());</span><br><span class="line">        System.out.println(<span class="string">"文件名称:"</span>+f.getName());</span><br><span class="line">        System.out.println(<span class="string">"文件长度:"</span>+f.length()+<span class="string">"字节"</span>);</span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"d:/aaa"</span>);</span><br><span class="line">        System.out.println(<span class="string">"目录绝对路径:"</span>+f2.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">"目录构造路径:"</span>+f2.getPath());</span><br><span class="line">        System.out.println(<span class="string">"目录名称:"</span>+f2.getName());</span><br><span class="line">        System.out.println(<span class="string">"目录长度:"</span>+f2.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    文件绝对路径:d:\aaa\bbb.java</span><br><span class="line">    文件构造路径:d:\aaa\bbb.java</span><br><span class="line">    文件名称:bbb.java</span><br><span class="line">    文件长度:<span class="number">636</span>字节</span><br><span class="line">    目录绝对路径:d:\aaa</span><br><span class="line">    目录构造路径:d:\aaa</span><br><span class="line">    目录名称:aaa</span><br><span class="line">    目录长度:<span class="number">4096</span></span><br></pre></td></tr></table></figure><blockquote><p>API中说明：<br>&emsp;&emsp;<code>length()</code>，表示文件的长度。但是File对象表示目录，则返回值未指定。</p></blockquote></li></ul><h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><ul><li><strong>绝对路径：</strong>从盘符开始的路径，这是一个完整的路径。</li><li><strong>相对路径</strong>：相对于项目目录的路径，这是一个便捷的路径，开发中经常使用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilePath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// D盘下的bbb.java文件</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"D:\\bbb.java"</span>);</span><br><span class="line">        System.out.println(f.getAbsolutePath());</span><br><span class="line">        <span class="comment">// 项目下的bbb.java文件</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"bbb.java"</span>);</span><br><span class="line">        System.out.println(f2.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    D:\bbb.java</span><br><span class="line">    D:\idea_project_test4\bbb.java</span><br></pre></td></tr></table></figure><h3 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h3><ul><li><p><strong><code>public boolean exists()</code></strong>：此File表示的文件或目录是否实际存在。</p></li><li><p><strong><code>public boolean isDirectory()</code></strong>：此File表示的是否为目录。</p></li><li><p><strong><code>public boolean isFile()</code></strong>：此File表示的是否为文件。</p><p>  方法演示，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileIs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:\\aaa\\bbb.java"</span>);</span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"d:\\aaa"</span>);</span><br><span class="line">        <span class="comment">// 判断是否存在</span></span><br><span class="line">        System.out.println(<span class="string">"d:\\aaa\\bbb.java 是否存在:"</span></span><br><span class="line">                           +f.exists());</span><br><span class="line">        System.out.println(<span class="string">"d:\\aaa 是否存在:"</span>+f2.exists());</span><br><span class="line">        <span class="comment">// 判断是文件还是目录</span></span><br><span class="line">        System.out.println(<span class="string">"d:\\aaa 文件?:"</span>+f2.isFile());</span><br><span class="line">        System.out.println(<span class="string">"d:\\aaa 目录?:"</span>+f2.isDirectory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    d:\aaa\bbb.java 是否存在:<span class="literal">true</span></span><br><span class="line">    d:\aaa 是否存在:<span class="literal">true</span></span><br><span class="line">    d:\aaa 文件?:<span class="literal">false</span></span><br><span class="line">    d:\aaa 目录?:<span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="创建删除功能的方法"><a href="#创建删除功能的方法" class="headerlink" title="创建删除功能的方法"></a>创建删除功能的方法</h3><ul><li><p><strong><code>public boolean createNewFile()</code></strong>：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。</p></li><li><p><strong><code>public boolean delete()</code></strong>：删除由此File表示的文件或目录。</p></li><li><p><strong><code>public boolean mkdir()</code></strong>：创建由此File表示的目录。</p></li><li><p><strong><code>public boolean mkdirs()</code></strong>：创建由此File表示的目录，包括任何必需但不存在的父目录。</p><p>  方法演示，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCreateDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 文件的创建</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"aaa.txt"</span>);</span><br><span class="line">        System.out.println(<span class="string">"是否存在:"</span>+f.exists()); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">"是否创建:"</span>+f.createNewFile()); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">"是否存在:"</span>+f.exists()); <span class="comment">// true</span></span><br><span class="line">        <span class="comment">// 目录的创建</span></span><br><span class="line">        File f2= <span class="keyword">new</span> File(<span class="string">"newDir"</span>);</span><br><span class="line">        System.out.println(<span class="string">"是否存在:"</span>+f2.exists());<span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">"是否创建:"</span>+f2.mkdir()); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">"是否存在:"</span>+f2.exists());<span class="comment">// true</span></span><br><span class="line">        <span class="comment">// 创建多级目录</span></span><br><span class="line">        File f3= <span class="keyword">new</span> File(<span class="string">"newDira\\newDirb"</span>);</span><br><span class="line">        System.out.println(f3.mkdir());<span class="comment">// false</span></span><br><span class="line">        File f4= <span class="keyword">new</span> File(<span class="string">"newDira\\newDirb"</span>);</span><br><span class="line">        System.out.println(f4.mkdirs());<span class="comment">// true</span></span><br><span class="line">        <span class="comment">// 文件的删除</span></span><br><span class="line">        System.out.println(f.delete());<span class="comment">// true</span></span><br><span class="line">        <span class="comment">// 目录的删除</span></span><br><span class="line">        System.out.println(f2.delete());<span class="comment">// true</span></span><br><span class="line">        System.out.println(f4.delete());<span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>API中说明：<br>&emsp;&emsp;<code>delete()</code>方法，如果此File表示目录，则目录必须为空才能删除。</p></blockquote></li></ul><h2 id="8-1-4-目录的遍历"><a href="#8-1-4-目录的遍历" class="headerlink" title="8.1.4 目录的遍历"></a>8.1.4 目录的遍历</h2><ul><li><p><strong><code>public String[] list()</code></strong>：返回一个String数组，表示该File目录中的所有子文件或目录。</p></li><li><p><strong><code>public File[] listFiles()</code></strong>：返回一个File数组，表示该File目录中的所有的子文件或目录。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileFor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"d:\\java_code"</span>);</span><br><span class="line">        <span class="comment">//获取当前目录下的文件以及文件夹的名称。</span></span><br><span class="line">        String[] names = dir.list();</span><br><span class="line">        <span class="keyword">for</span>(String name : names)&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取当前目录下的文件以及文件夹对象，只要拿到了文件对象，那么就可以获取更多信息</span></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            System.out.println(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：<br>&emsp;&emsp;调用listFiles方法的File对象，表示的必须是实际存在的目录，否则返回null，无法进行遍历。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第七章 1.Lambda表达式（二）</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/07_1_2%20Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F(%E4%BA%8C).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/07_1_2%20Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F(%E4%BA%8C).html</url>
      
        <content type="html"><![CDATA[<h1 id="7-1-Lambda表达式"><a href="#7-1-Lambda表达式" class="headerlink" title="7.1. Lambda表达式"></a>7.1. Lambda表达式</h1><h2 id="7-1-7-练习"><a href="#7-1-7-练习" class="headerlink" title="7.1.7. 练习"></a>7.1.7. 练习</h2><p><strong>使用Lambda标准格式（无参无返回）</strong></p><h3 id="7-1-7-1-题目"><a href="#7-1-7-1-题目" class="headerlink" title="7.1.7.1. 题目"></a>7.1.7.1. 题目</h3><p>&emsp;&emsp;给定一个厨子Cook 接口，内含唯一的抽象方法makeFood ，且无参数、无返回值。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cook</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeFood</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在下面的代码中，请使用Lambda的标准格式调用invokeCook 方法，打印输出“吃饭啦！”字样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05InvokeCook</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO 请在此使用Lambda【标准格式】调用invokeCook方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCook</span><span class="params">(Cook cook)</span> </span>&#123;</span><br><span class="line">        cook.makeFood();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-1-7-2-解答"><a href="#7-1-7-2-解答" class="headerlink" title="7.1.7.2. 解答"></a>7.1.7.2. 解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    invokeCook(() ‐&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"吃饭啦！"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>备注：<br>&emsp;&emsp;小括号代表<code>Cook</code>接口<code>makeFood</code>抽象方法的参数为空，大括号代表<code>makeFood</code>的方法体。</p></blockquote><h2 id="7-1-8-Lambda的参数和返回值"><a href="#7-1-8-Lambda的参数和返回值" class="headerlink" title="7.1.8. Lambda的参数和返回值"></a>7.1.8. Lambda的参数和返回值</h2><p>下面举例演示<code>java.util.Comparator&lt;T&gt;</code>接口的使用场景代码，其中的抽象方法定义为：</p><ul><li><strong><code>public abstract int compare(T o1, T o2);</code></strong></li></ul><p>&emsp;&emsp;当需要对一个对象数组进行排序时， <code>Arrays.sort</code>方法需要一个<code>Comparator</code>接口实例来指定排序的规则。假设有一个<code>Person</code>类，含有<code>String name</code>和<code>int age</code> 两个成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 省略构造器、toString方法与Getter Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-1-8-1-传统写法"><a href="#7-1-8-1-传统写法" class="headerlink" title="7.1.8.1. 传统写法"></a>7.1.8.1. 传统写法</h3><p>如果使用传统的代码对<code>Person[]</code>数组进行排序，写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06Comparator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 本来年龄乱序的对象数组</span></span><br><span class="line">        Person[] array = &#123;</span><br><span class="line">            <span class="keyword">new</span> Person(<span class="string">"古力娜扎"</span>, <span class="number">19</span>),</span><br><span class="line">            <span class="keyword">new</span> Person(<span class="string">"迪丽热巴"</span>, <span class="number">18</span>),</span><br><span class="line">            <span class="keyword">new</span> Person(<span class="string">"马尔扎哈"</span>, <span class="number">20</span>) &#125;;</span><br><span class="line">        <span class="comment">// 匿名内部类</span></span><br><span class="line">        Comparator&lt;Person&gt; comp = <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getAge() ‐ o2.getAge();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 第二个参数为排序规则，即Comparator接口实例</span></span><br><span class="line">        Arrays.sort(array, comp); </span><br><span class="line">        <span class="keyword">for</span> (Person person : array) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这种做法在面向对象的思想中，似乎也是“理所当然”的。其中Comparator 接口的实例（使用了匿名内部类）代表了“按照年龄从小到大”的排序规则。</p><h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><p>下面我们来搞清楚上述代码真正要做什么事情。</p><ul><li>为了排序， Arrays.sort 方法需要排序规则，即Comparator 接口的实例，抽象方法compare 是关键；</li><li>为了指定compare 的方法体，不得不需要Comparator 接口的实现类；</li><li>为了省去定义一个ComparatorImpl 实现类的麻烦，不得不使用匿名内部类；</li><li>必须覆盖重写抽象compare 方法，所以方法名称、方法参数、方法返回值不得不再写一遍，且不能写错；</li><li>实际上，只有参数和方法体才是关键。</li></ul><h3 id="7-1-8-2-Lambda写法"><a href="#7-1-8-2-Lambda写法" class="headerlink" title="7.1.8.2. Lambda写法"></a>7.1.8.2. Lambda写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07ComparatorLambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person[] array = &#123;</span><br><span class="line">            <span class="keyword">new</span> Person(<span class="string">"古力娜扎"</span>, <span class="number">19</span>),</span><br><span class="line">            <span class="keyword">new</span> Person(<span class="string">"迪丽热巴"</span>, <span class="number">18</span>),</span><br><span class="line">            <span class="keyword">new</span> Person(<span class="string">"马尔扎哈"</span>, <span class="number">20</span>) &#125;;</span><br><span class="line">        Arrays.sort(array, (Person a, Person b) ‐&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> a.getAge() ‐ b.getAge();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (Person person : array) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-1-9-练习："><a href="#7-1-9-练习：" class="headerlink" title="7.1.9. 练习："></a>7.1.9. 练习：</h2><p><strong>使用Lambda标准格式（有参有返回）</strong></p><h3 id="7-1-9-1-题目"><a href="#7-1-9-1-题目" class="headerlink" title="7.1.9.1. 题目"></a>7.1.9.1. 题目</h3><p><strong>给定一个计算器Calculator 接口，内含抽象方法calc 可以将两个int数字相加得到和值：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在下面的代码中，请使用Lambda的标准格式调用invokeCalc 方法，完成120和130的相加计算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08InvokeCalc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO 请在此使用Lambda【标准格式】调用invokeCalc方法来计算120+130的结果ß</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCalc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, Calculator calculator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = calculator.calc(a, b);</span><br><span class="line">        System.out.println(<span class="string">"结果是："</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-1-9-2-解答"><a href="#7-1-9-2-解答" class="headerlink" title="7.1.9.2. 解答"></a>7.1.9.2. 解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    invokeCalc(<span class="number">120</span>, <span class="number">130</span>, (<span class="keyword">int</span> a, <span class="keyword">int</span> b) ‐&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>备注：<br>&emsp;&emsp;小括号代表<code>Calculator</code>接口<code>calc</code>抽象方法的参数，大括号代表<code>calc</code>的方法体。</p></blockquote><h2 id="7-1-10-Lambda省略格式"><a href="#7-1-10-Lambda省略格式" class="headerlink" title="7.1.10. Lambda省略格式"></a>7.1.10. Lambda省略格式</h2><h3 id="7-1-10-1-可推导即可省略"><a href="#7-1-10-1-可推导即可省略" class="headerlink" title="7.1.10.1. 可推导即可省略"></a>7.1.10.1. 可推导即可省略</h3><p>&emsp;&emsp;Lambda强调的是“做什么”而不是“怎么做”，所以凡是可以根据上下文推导得知的信息，都可以省略。例如上例还可以使用Lambda的省略写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    invokeCalc(<span class="number">120</span>, <span class="number">130</span>, (a, b) ‐&gt; a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-1-10-2-省略规则"><a href="#7-1-10-2-省略规则" class="headerlink" title="7.1.10.2. 省略规则"></a>7.1.10.2. 省略规则</h3><p>在Lambda标准格式的基础上，使用省略写法的规则为：</p><ol><li>小括号内参数的类型可以省略；</li><li>如果小括号内有且仅有一个参，则小括号可以省略；</li><li>如果大括号内有且仅有一个语句，则无论是否有返回值，都可以省略大括号、return关键字及语句分号。</li></ol><blockquote><p>备注：<br>&emsp;&emsp;掌握这些省略规则后，请对应地回顾本章开头的多线程案例。</p></blockquote><h2 id="7-1-11-练习："><a href="#7-1-11-练习：" class="headerlink" title="7.1.11. 练习："></a>7.1.11. 练习：</h2><p><strong>使用Lambda省略格式</strong></p><h3 id="7-1-11-1-题目"><a href="#7-1-11-1-题目" class="headerlink" title="7.1.11.1. 题目"></a>7.1.11.1. 题目</h3><p>&emsp;&emsp;仍然使用前文含有唯一<code>makeFood</code>抽象方法的厨子<code>Cook</code>接口，在下面的代码中，请使用Lambda的<strong>省略格式</strong>调用<code>invokeCook</code>方法，打印输出“吃饭啦！”字样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09InvokeCook</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO 请在此使用Lambda【省略格式】调用invokeCook方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCook</span><span class="params">(Cook cook)</span> </span>&#123;</span><br><span class="line">        cook.makeFood();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-1-11-2-解答"><a href="#7-1-11-2-解答" class="headerlink" title="7.1.11.2. 解答"></a>7.1.11.2. 解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    invokeCook(() ‐&gt; System.out.println(<span class="string">"吃饭啦！"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-1-12-Lambda的使用前提"><a href="#7-1-12-Lambda的使用前提" class="headerlink" title="7.1.12 Lambda的使用前提"></a>7.1.12 Lambda的使用前提</h2><p>Lambda的语法非常简洁，完全没有面向对象复杂的束缚。但是使用时有几个问题需要特别注意：</p><ol><li>使用Lambda必须具有接口，且要求<strong>接口中有且仅有一个抽象方法</strong>。<br>无论是JDK内置的<code>Runnable</code>、<code>Comparator</code>接口还是自定义的接口，只有当接口中的抽象方法存在且唯一时，才可以使用Lambda。</li><li>使用Lambda必须具有<strong>上下文推断</strong>。<br>也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。</li></ol><blockquote><p>备注：<br>&emsp;&emsp;有且仅有一个抽象方法的接口，称为“函数式接口”。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第七章 1.Lambda表达式（一）</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/07_1_1%20Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F(%E4%B8%80).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/07_1_1%20Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F(%E4%B8%80).html</url>
      
        <content type="html"><![CDATA[<h1 id="7-1-Lambda表达式"><a href="#7-1-Lambda表达式" class="headerlink" title="7.1 Lambda表达式"></a>7.1 Lambda表达式</h1><h2 id="7-1-1-函数式编程思想概述"><a href="#7-1-1-函数式编程思想概述" class="headerlink" title="7.1.1 函数式编程思想概述"></a>7.1.1 函数式编程思想概述</h2><p><img src="//cdn.foreversfj.com/image/blog/20190904/9Ex1hIFhXy8W.png!blogy" alt=""></p><p>&emsp;&emsp;在数学中，函数就是有输入量、输出量的一套计算方案，也就是“拿什么东西做什么事情”。相对而言，面向对象过分强调“必须通过对象的形式来做事情”，而函数式思想则尽量忽略面向对象的复杂语法——强调做什么，而不是以什么形式做。</p><ul><li><p><strong>面向对象的思想:</strong><br>  做一件事情,找一个能解决这个事情的对象,调用对象的方法,完成事情.</p></li><li><p><strong>函数式编程思想:</strong><br>  只要能获取到结果,谁去做的,怎么做的都不重要,重视的是结果,不重视过程</p></li></ul><h2 id="7-1-2-冗余的Runnable代码"><a href="#7-1-2-冗余的Runnable代码" class="headerlink" title="7.1.2 冗余的Runnable代码"></a>7.1.2 冗余的Runnable代码</h2><h3 id="传统写法"><a href="#传统写法" class="headerlink" title="传统写法"></a>传统写法</h3><p>&emsp;&emsp;当需要启动一个线程去完成任务时，通常会通过<code>java.lang.Runnable</code>接口来定义任务内容，并使用<code>java.lang.Thread</code> 类来启动该线程。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 匿名内部类</span></span><br><span class="line">        Runnable task = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 覆盖重写抽象方法</span></span><br><span class="line">                System.out.println(<span class="string">"多线程任务执行！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start(); <span class="comment">// 启动线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;本着 <em>一切皆对象</em> 的思想，这种做法是无可厚非的：首先创建一个Runnable 接口的匿名内部类对象来指定任务内容，再将其交给一个线程来启动。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>对于Runnable 的匿名内部类用法，可以分析出几点内容：</p><ul><li><p><code>Thread</code>类需要<code>Runnable</code>接口作为参数，其中的抽象<code>run</code>方法是用来指定线程任务内容的核心；</p></li><li><p>为了指定<code>run</code>的方法体，<strong>不得不</strong>需要<code>Runnable</code>接口的实现类；</p></li><li><p>为了省去定义一个<code>RunnableImpl</code>实现类的麻烦，<strong>不得不</strong>使用匿名内部类；</p></li><li><p>必须覆盖重写抽象<code>run</code>方法，所以方法名称、方法参数、方法返回值不得不再写一遍，且不能写错；</p></li><li><p>而实际上，<strong>似乎只有方法体才是关键所在</strong>。</p></li></ul><h2 id="7-1-3-编程思想转换"><a href="#7-1-3-编程思想转换" class="headerlink" title="7.1.3 编程思想转换"></a>7.1.3 编程思想转换</h2><h3 id="做什么，而不是怎么做"><a href="#做什么，而不是怎么做" class="headerlink" title="做什么，而不是怎么做"></a>做什么，而不是怎么做</h3><p>&emsp;&emsp;我们真的希望创建一个匿名内部类对象吗？不。我们只是为了做这件事情而不得不创建一个对象。我们真正希望做的事情是：将run 方法体内的代码传递给Thread 类知晓。</p><p><strong>传递一段代码</strong>——这才是我们真正的目的。而创建对象只是受限于面向对象语法而不得不采取的一种手段方式。那，有没有更加简单的办法？如果我们将关注点从“怎么做”回归到“做什么”的本质上，就会发现只要能够更好地达到目的，过程与形式其实并不重要。</p><h3 id="生活举例"><a href="#生活举例" class="headerlink" title="生活举例"></a>生活举例</h3><p><img src="//cdn.foreversfj.com/image/blog/20190824/xetWA6Gf0S1p.png!blog" alt=""></p><p>&emsp;&emsp;当我们需要从北京到上海时，可以选择高铁、汽车、骑行或是徒步。我们的真正目的是到达上海，而如何才能到达上海的形式并不重要，所以我们一直在探索有没有比高铁更好的方式——搭乘飞机。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/uxCn51bFrkUk.png!blog" alt=""></p><p>&emsp;&emsp;而现在这种飞机（甚至是飞船）已经诞生：2014年3月Oracle所发布的Java 8（JDK 1.8）中，加入了Lambda表达式的重量级新特性，为我们打开了新世界的大门。</p><h2 id="7-1-4-体验Lambda的更优写法"><a href="#7-1-4-体验Lambda的更优写法" class="headerlink" title="7.1.4 体验Lambda的更优写法"></a>7.1.4 体验Lambda的更优写法</h2><p>&emsp;&emsp;借助Java 8的全新语法，上述Runnable 接口的匿名内部类写法可以通过更简单的Lambda表达式达到等效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02LambdaRunnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() ‐&gt; System.out.println(<span class="string">"多线程任务执行！"</span>)).start(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这段代码和刚才的执行效果是完全一样的，可以在1.8或更高的编译级别下通过。从代码的语义中可以看出：我们启动了一个线程，而线程任务的内容以一种更加简洁的形式被指定。</p><p>&emsp;&emsp;不再有“不得不创建接口对象”的束缚，不再有“抽象方法覆盖重写”的负担，就是这么简单！</p><h2 id="71-5-回顾匿名内部类"><a href="#71-5-回顾匿名内部类" class="headerlink" title="71.5 回顾匿名内部类"></a>71.5 回顾匿名内部类</h2><p>&emsp;&emsp;Lambda是怎样击败面向对象的？在上例中，核心代码其实只是如下所示的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() ‐&gt; System.out.println(<span class="string">"多线程任务执行！"</span>)</span><br></pre></td></tr></table></figure><h3 id="使用实现类"><a href="#使用实现类" class="headerlink" title="使用实现类"></a>使用实现类</h3><p>&emsp;&emsp;要启动一个线程，需要创建一个Thread 类的对象并调用start 方法。而为了指定线程执行的内容，需要调用Thread 类的构造方法：</p><ul><li><code>public Thread(Runnable target)</code></li></ul><p>为了获取Runnable 接口的实现对象，可以为该接口定义一个实现类<code>RunnableImpl</code>**：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"多线程任务执行！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建该实现类的对象作为<code>Thread</code>类的构造参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03ThreadInitParam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable task = <span class="keyword">new</span> RunnableImpl();</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用匿名内部类"><a href="#使用匿名内部类" class="headerlink" title="使用匿名内部类"></a>使用匿名内部类</h3><p>&emsp;&emsp;这个<code>RunnableImpl</code>类只是为了实现<code>Runnable</code>接口而存在的，而且仅被使用了唯一一次，所以使用匿名内部类的语法即可省去该类的单独定义，即匿名内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04ThreadNameless</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"多线程任务执行！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名内部类的好处与弊端"><a href="#匿名内部类的好处与弊端" class="headerlink" title="匿名内部类的好处与弊端"></a>匿名内部类的好处与弊端</h3><p>&emsp;&emsp;一方面，匿名内部类可以帮我们省去<strong>实现类的定义</strong>；另一方面，匿名内部类的语法——<strong>确实太复杂了</strong>！</p><h3 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h3><p>&emsp;&emsp;仔细分析该代码中的语义， <code>Runnable</code>接口只有一个run 方法的定义：</p><ul><li><code>public abstract void run()</code>;</li></ul><p>即制定了一种做事情的方案（其实就是一个函数）：</p><ul><li><strong>无参数：</strong>不需要任何条件即可执行该方案。</li><li><strong>无返回值</strong>：该方案不产生任何结果。</li><li><strong>代码块（方法体）</strong>：该方案的具体执行步骤。</li></ul><p>同样的语义体现在<code>Lambda</code>语法中，要更加简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() ‐&gt; System.out.println(<span class="string">"多线程任务执行！"</span>)</span><br></pre></td></tr></table></figure><ul><li>前面的一对小括号即<code>run</code>方法的参数（无），代表不需要任何条件；</li><li>中间的一个箭头代表将前面的参数传递给后面的代码；</li><li>后面的输出语句即业务逻辑代码。</li></ul><h2 id="7-1-6-Lambda标准格式"><a href="#7-1-6-Lambda标准格式" class="headerlink" title="7.1.6 Lambda标准格式"></a>7.1.6 Lambda标准格式</h2><p>Lambda省去面向对象的条条框框，格式由3个部分组成：</p><ul><li>一些参数</li><li>一个箭头</li><li>一段代码</li></ul><p>Lambda表达式的<strong>标准格式</strong>为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(参数类型 参数名称) ‐&gt; &#123; 代码语句 &#125;</span><br></pre></td></tr></table></figure><p>格式说明：</p><ul><li>小括号内的语法与传统方法参数列表一致：无参数则留空；多个参数则用逗号分隔。</li><li><code>-&gt;</code>是新引入的语法格式，代表指向动作。</li><li>大括号内的语法与传统方法体要求基本一致。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第六章 6.线程池</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/06_6%20%E7%BA%BF%E7%A8%8B%E6%B1%A0.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/06_6%20%E7%BA%BF%E7%A8%8B%E6%B1%A0.html</url>
      
        <content type="html"><![CDATA[<h1 id="6-6-线程池"><a href="#6-6-线程池" class="headerlink" title="6.6 线程池"></a>6.6 线程池</h1><h2 id="6-6-1-线程池思想概述"><a href="#6-6-1-线程池思想概述" class="headerlink" title="6.6.1 线程池思想概述"></a>6.6.1 线程池思想概述</h2><p><img src="//cdn.foreversfj.com/image/blog/20190824/MTgmmxAnBfja.png!blog" alt=""></p><p>&emsp;&emsp;我们使用线程的时候就去创建一个线程，这样实现起来非常简便，但是就会有一个问题：</p><p>&emsp;&emsp;如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</p><p>&emsp;&emsp;那么有没有一种办法使得线程可以复用，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务？</p><p>&emsp;&emsp;在Java中可以通过线程池来达到这样的效果。</p><h2 id="6-6-2-线程池概念"><a href="#6-6-2-线程池概念" class="headerlink" title="6.6.2 线程池概念"></a>6.6.2 线程池概念</h2><ul><li><strong>线程池</strong>：其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。</li></ul><p>&emsp;&emsp;由于线程池中有很多操作都是与优化资源相关的，我们在这里就不多赘述。我们通过一张图来了解线程池的工作原理：</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/V0teskUeEQ2q.png!blog" alt=""></p><p>合理利用线程池能够带来三个好处：</p><ol><li>降低资源消耗。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li><li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li>提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</li></ol><h2 id="6-6-3-线程池的使用"><a href="#6-6-3-线程池的使用" class="headerlink" title="6.6.3 线程池的使用"></a>6.6.3 线程池的使用</h2><p>&emsp;&emsp;Java里面线程池的顶级接口是<code>java.util.concurrent.Executor</code>，但是<code>Executor</code>并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是<code>java.util.concurrent.ExecutorService</code>。</p><p>&emsp;&emsp;要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，很有可能配置的线程池不是较优的，因此在<code>java.util.concurrent.Executors</code> 线程工厂类里面提供了一些静态工厂，生成一些常用的线程池。官方建议使用Executors工程类来创建线程池对象。</p><p>Executors类中有个创建线程池的方法如下：</p><ul><li><strong><code>public static ExecutorService newFixedThreadPool(int nThreads)</code></strong>：返回线程池对象。(创建的是有界线程池,也就是池中的线程个数可以指定最大数量)</li></ul><p>获取到了一个线程池<code>ExecutorService</code>对象，那么怎么使用呢，在这里定义了一个使用线程池对象的方法如下：</p><ul><li><p><strong><code>public Future&lt;?&gt; submit(Runnable task)</code></strong>：获取线程池中的某一个线程对象，并执行</p><blockquote><p><strong>Future接口：</strong>用来记录线程任务执行完毕后产生的结果。线程池创建与使用。使用线程池中线程对象的步骤：</p></blockquote></li></ul><ol><li>创建线程池对象。</li><li>创建Runnable接口子类对象。(task)</li><li>提交Runnable接口子类对象。(take task)</li><li>关闭线程池(一般不做)。</li></ol><p>Runnable实现类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我要一个教练"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"教练来了： "</span> + </span><br><span class="line">                           Thread.currentThread().getName());</span><br><span class="line">        System.out.println(<span class="string">"教我游泳,交完后，教练回到了游泳池"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程池测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程池对象</span></span><br><span class="line">        <span class="comment">// 包含2个线程对象</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 创建Runnable实例对象</span></span><br><span class="line">        MyRunnable r = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="comment">//自己创建线程对象的方式</span></span><br><span class="line">        <span class="comment">// Thread t = new Thread(r);</span></span><br><span class="line">        <span class="comment">// t.start(); ‐‐‐&gt; 调用MyRunnable中的run()</span></span><br><span class="line">        <span class="comment">// 从线程池中获取线程对象,然后调用MyRunnable中的run()</span></span><br><span class="line">        service.submit(r);</span><br><span class="line">        <span class="comment">// 再获取个线程对象，调用MyRunnable中的run()</span></span><br><span class="line">        service.submit(r);</span><br><span class="line">        service.submit(r);</span><br><span class="line">        <span class="comment">// 注意：submit方法调用结束后，程序并不终止，是因为线程池控制了线程的关闭。</span></span><br><span class="line">        <span class="comment">// 将使用完的线程又归还到了线程池中</span></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        <span class="comment">//service.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第六章 5.等待唤醒机制</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/06_5%20%E7%AD%89%E5%BE%85%E5%94%A4%E9%86%92%E6%9C%BA%E5%88%B6.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/06_5%20%E7%AD%89%E5%BE%85%E5%94%A4%E9%86%92%E6%9C%BA%E5%88%B6.html</url>
      
        <content type="html"><![CDATA[<h1 id="6-5-等待唤醒机制"><a href="#6-5-等待唤醒机制" class="headerlink" title="6.5 等待唤醒机制"></a>6.5 等待唤醒机制</h1><h2 id="6-5-1-线程间通信"><a href="#6-5-1-线程间通信" class="headerlink" title="6.5.1 线程间通信"></a>6.5.1 线程间通信</h2><p>&emsp;&emsp;<strong>概念：</strong>多个线程在处理同一个资源，但是处理的动作（线程的任务）却不相同。</p><p>&emsp;&emsp;比如：线程A用来生成包子的，线程B用来吃包子的，包子可以理解为同一资源，线程A与线程B处理的动作，一个是生产，一个是消费，那么线程A与线程B之间就存在线程通信问题。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/ISBbDxsUfe6v.png!blog" alt=""></p><h3 id="为什么要处理线程间通信："><a href="#为什么要处理线程间通信：" class="headerlink" title="为什么要处理线程间通信："></a>为什么要处理线程间通信：</h3><p>&emsp;&emsp;多个线程并发执行时, 在默认情况下CPU是随机切换线程的，当我们需要多个线程来共同完成一件任务，并且我们希望他们有规律的执行, 那么多线程之间需要一些协调通信，以此来帮我们达到多线程共同操作一份数据。</p><h3 id="如何保证线程间通信有效利用资源："><a href="#如何保证线程间通信有效利用资源：" class="headerlink" title="如何保证线程间通信有效利用资源："></a>如何保证线程间通信有效利用资源：</h3><p>&emsp;&emsp;多个线程在处理同一个资源，并且任务不同时，需要线程通信来帮助解决线程之间对同一个变量的使用或操作。 就是多个线程在操作同一份数据时， 避免对同一共享变量的争夺。也就是我们需要通过一定的手段使各个线程能有效的利用资源。而这种手段即—— 等待唤醒机制。</p><h2 id="6-5-2-等待唤醒机制"><a href="#6-5-2-等待唤醒机制" class="headerlink" title="6.5.2 等待唤醒机制"></a>6.5.2 等待唤醒机制</h2><h3 id="什么是等待唤醒机制"><a href="#什么是等待唤醒机制" class="headerlink" title="什么是等待唤醒机制"></a>什么是等待唤醒机制</h3><p>&emsp;&emsp;这是多个线程间的一种协作机制。谈到线程我们经常想到的是线程间的竞争（race），比如去争夺锁，但这并不是故事的全部，线程间也会有协作机制。就好比在公司里你和你的同事们，你们可能存在在晋升时的竞争，但更多时候你们更多是一起合作以完成某些任务。</p><p>&emsp;&emsp;就是在一个线程进行了规定操作后，就进入等待状态（<code>wait()</code>）， 等待其他线程执行完他们的指定代码过后 再将其唤醒（<code>notify()</code>）;在有多个线程进行等待时， 如果需要，可以使用 <code>notifyAll()</code>来唤醒所有的等待线程。</p><p>&emsp;&emsp;wait/notify 就是线程间的一种协作机制。</p><p><img src="//cdn.foreversfj.com/image/blog/20200304/lbcuql8aYCQX.png!blog" alt=""></p><h3 id="等待唤醒中的方法"><a href="#等待唤醒中的方法" class="headerlink" title="等待唤醒中的方法"></a>等待唤醒中的方法</h3><p>&emsp;&emsp;等待唤醒机制就是用于解决线程间通信的问题的，使用到的3个方法的含义如下：</p><ol><li><p><strong><code>wait</code></strong>：线程不再活动，不再参与调度，进入 wait set 中，因此不会浪费 CPU 资源，也不会去竞争锁了，这时的线程状态即是 WAITING。它还要等着别的线程执行一个<strong>特别的动作</strong>，也即是”<strong>通知（notify）</strong>”在这个对象上等待的线程从wait set 中释放出来，重新进入到调度队列（ready queue）中</p></li><li><p><strong><code>notify</code></strong>：则选取所通知对象的 wait set 中的一个线程释放；例如，餐馆有空位置后，等候就餐最久的顾客最先入座。</p></li><li><p><strong><code>notifyAll</code></strong>：则释放所通知对象的 wait set 上的全部线程。</p></li></ol><blockquote><p><strong>注意：</strong><br>&emsp;&emsp;哪怕只通知了一个等待的线程，被通知线程也不能立即恢复执行，因为它当初中断的地方是在同步块内，而此刻它已经不持有锁，所以她需要再次尝试去获取锁（很可能面临其它线程的竞争），成功后才能在当初调用 wait 方法之后的地方恢复执行。<br><strong>总结如下：</strong></p><ul><li>如果能获取锁，线程就从 WAITING 状态变成 RUNNABLE 状态；</li><li>否则，从 wait set 出来，又进入 entry set，线程就从 WAITING 状态又变成 BLOCKED 状态</li></ul></blockquote><h3 id="调用wait和notify方法需要注意的细节"><a href="#调用wait和notify方法需要注意的细节" class="headerlink" title="调用wait和notify方法需要注意的细节"></a>调用wait和notify方法需要注意的细节</h3><ol><li>wait方法与notify方法必须要由同一个锁对象调用。因为：对应的锁对象可以通过notify唤醒使用同一个锁对象调用的wait方法后的线程。</li><li>wait方法与notify方法是属于Object类的方法的。因为：锁对象可以是任意对象，而任意对象的所属类都是继承了Object类的。</li><li>wait方法与notify方法必须要在同步代码块或者是同步函数中使用。因为：必须要通过锁对象调用这2个方法。</li></ol><h2 id="6-5-3-生产者与消费者问题"><a href="#6-5-3-生产者与消费者问题" class="headerlink" title="6.5.3 生产者与消费者问题"></a>6.5.3 生产者与消费者问题</h2><p>等待唤醒机制其实就是经典的“生产者与消费者”的问题。</p><p>就拿生产包子消费包子来说等待唤醒机制如何有效利用资源：</p><blockquote><p>&emsp;&emsp;包子铺线程生产包子，吃货线程消费包子。当包子没有时（包子状态为false），吃货线程等待，包子铺线程生产包子（即包子状态为true），并通知吃货线程（解除吃货的等待状态）,因为已经有包子了，那么包子铺线程进入等待状态。接下来，吃货线程能否进一步执行则取决于锁的获取情况。如果吃货获取到锁，那么就执行吃包子动作，包子吃完（包子状态为false），并通知包子铺线程（解除包子铺的等待状态）,吃货线程进入等待。包子铺线程能否进一步执行则取决于锁的获取情况。</p></blockquote><p><strong>代码演示：</strong></p><p>包子资源类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoZi</span> </span>&#123;</span><br><span class="line">    String pier ;</span><br><span class="line">    String xianer ;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span> ;<span class="comment">//包子资源 是否存在 包子资源状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>吃货线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChiHuo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BaoZi bz;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChiHuo</span><span class="params">(String name,BaoZi bz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.bz = bz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (bz)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bz.flag == <span class="keyword">false</span>)&#123;<span class="comment">//没包子</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bz.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"吃货正在吃"</span>+bz.pier+bz.xianer+<span class="string">"包子"</span>);</span><br><span class="line">                bz.flag = <span class="keyword">false</span>;</span><br><span class="line">                bz.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包子铺线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoZiPu</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BaoZi bz;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaoZiPu</span><span class="params">(String name,BaoZi bz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.bz = bz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//造包子</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//同步</span></span><br><span class="line">            <span class="keyword">synchronized</span> (bz)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bz.flag == <span class="keyword">true</span>)&#123;<span class="comment">//包子资源 存在</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bz.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 没有包子 造包子</span></span><br><span class="line">                System.out.println(<span class="string">"包子铺开始做包子"</span>);</span><br><span class="line">                <span class="keyword">if</span>(count%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// 冰皮 五仁</span></span><br><span class="line">                    bz.pier = <span class="string">"冰皮"</span>;</span><br><span class="line">                    bz.xianer = <span class="string">"五仁"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 薄皮 牛肉大葱</span></span><br><span class="line">                    bz.pier = <span class="string">"薄皮"</span>;</span><br><span class="line">                    bz.xianer = <span class="string">"牛肉大葱"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                count++;</span><br><span class="line">                bz.flag=<span class="keyword">true</span>;</span><br><span class="line">                System.out.println(<span class="string">"包子造好了："</span>+bz.pier+bz.xianer);</span><br><span class="line">                System.out.println(<span class="string">"吃货来吃吧"</span>);</span><br><span class="line">                <span class="comment">//唤醒等待线程 （吃货）</span></span><br><span class="line">                bz.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//等待唤醒案例</span></span><br><span class="line">        BaoZi bz = <span class="keyword">new</span> BaoZi();</span><br><span class="line">        ChiHuo ch = <span class="keyword">new</span> ChiHuo(<span class="string">"吃货"</span>,bz);</span><br><span class="line">        BaoZiPu bzp = <span class="keyword">new</span> BaoZiPu(<span class="string">"包子铺"</span>,bz);</span><br><span class="line">        ch.start();</span><br><span class="line">        bzp.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行效果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">包子铺开始做包子</span><br><span class="line">包子造好了：冰皮五仁</span><br><span class="line">吃货来吃吧</span><br><span class="line">吃货正在吃冰皮五仁包子</span><br><span class="line">包子铺开始做包子</span><br><span class="line">包子造好了：薄皮牛肉大葱</span><br><span class="line">吃货来吃吧</span><br><span class="line">吃货正在吃薄皮牛肉大葱包子</span><br><span class="line">包子铺开始做包子</span><br><span class="line">包子造好了：冰皮五仁</span><br><span class="line">吃货来吃吧</span><br><span class="line">吃货正在吃冰皮五仁包子</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第六章 4.线程状态</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/06_4%20%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/06_4%20%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.html</url>
      
        <content type="html"><![CDATA[<h1 id="6-4-线程状态"><a href="#6-4-线程状态" class="headerlink" title="6.4 线程状态"></a>6.4 线程状态</h1><h2 id="6-4-1-线程状态概述"><a href="#6-4-1-线程状态概述" class="headerlink" title="6.4.1 线程状态概述"></a>6.4.1 线程状态概述</h2><p>&emsp;&emsp;当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，有几种状态呢？在API中<code>java.lang.Thread.State</code>这个枚举中给出了六种线程状态：</p><p>这里先列出各个线程状态发生的条件，下面将会对每种状态进行详细解析</p><table><thead><tr><th align="left">线程状态</th><th align="left">导致状态发生条件</th></tr></thead><tbody><tr><td align="left">NEW(新建)</td><td align="left">&emsp;&emsp;线程刚被创建，但是并未启动。还没调用start方法。</td></tr><tr><td align="left">Runnable<br/>(可运行)</td><td align="left">&emsp;&emsp;线程可以在java虚拟机中运行的状态，可能正在运行自己代码，也可能没有，这取决于操作系统处理器。</td></tr><tr><td align="left">Blocked<br/>(锁阻塞)</td><td align="left">&emsp;&emsp;当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态。</td></tr><tr><td align="left">Waiting<br/>(无限等待)</td><td align="left">&emsp;&emsp;一个线程在等待另一个线程执行一个（唤醒）动作时，该线程进入Waiting状态。进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify或者notifyAll方法才能够唤醒。</td></tr><tr><td align="left">TimedWaiting<br/>(计时等待)</td><td align="left">&emsp;&emsp;同waiting状态，有几个方法有超时参数，调用他们将进入Timed Waiting状态。这一状态将一直保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有Thread.sleep 、Object.wait。</td></tr><tr><td align="left">Teminated<br/>(被终止)</td><td align="left">&emsp;&emsp;因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡。</td></tr></tbody></table><p>&emsp;&emsp;我们不需要去研究这几种状态的实现原理，我们只需知道在做线程操作中存在这样的状态。那我们怎么去理解这几个状态呢，新建与被终止还是很容易理解的，我们就研究一下线程从Runnable（可运行）状态与非运行状态之间的转换问题。</p><h2 id="6-4-2-Timed-Waiting（计时等待）"><a href="#6-4-2-Timed-Waiting（计时等待）" class="headerlink" title="6.4.2 Timed Waiting（计时等待）"></a>6.4.2 Timed Waiting（计时等待）</h2><p>&emsp;&emsp;<code>Timed Waiting</code>在API中的描述为：一个正在限时等待另一个线程执行一个（唤醒）动作的线程处于这一状态。单独的去理解这句话，真是玄之又玄，其实我们在之前的操作中已经接触过这个状态了，在哪里呢？</p><p>&emsp;&emsp;在我们写卖票的案例中，为了减少线程执行太快，现象不明显等问题，我们在run方法中添加了sleep语句，这样就强制当前正在执行的线程休眠（<strong>暂停执行</strong>），以“减慢线程”。</p><p>&emsp;&emsp;其实当我们调用了sleep方法之后，当前执行的线程就进入到“休眠状态”，其实就是所谓的<code>Timed Waiting</code>(计时等待)，那么我们通过一个案例加深对该状态的一个理解。</p><p><strong>实现一个计数器，计数到100，在每个数字之间暂停1秒，每隔10个数字输出一个字符串</strong></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i) % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"‐‐‐‐‐‐‐"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.print(<span class="string">" 线程睡眠1秒！\n"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyThread().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过案例可以发现，sleep方法的使用还是很简单的。我们需要记住下面几点：</p><ol><li><p>进入 TIMED_WAITING 状态的一种常见情形是调用的 sleep 方法，单独的线程也可以调用，不一定非要有协作关系。</p></li><li><p>为了让其他线程有机会执行，可以将Thread.sleep()的调用放线程run()之内。这样才能保证该线程执行过程中会睡眠</p></li><li><p>sleep与锁无关，线程睡眠到期自动苏醒，并返回到Runnable（可运行）状态。</p><blockquote><p>小提示：<br>&emsp;&emsp;<code>sleep()</code>中指定的时间是线程不会运行的最短时间。因此，sleep()方法不能保证该线程睡眠到期后就开始立刻执行。</p></blockquote></li></ol><p><code>Timed Waiting</code>线程状态图：</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/GgGnnOfo8xJ8.png!blog" alt=""></p><h2 id="6-4-3-BLOCKED（锁阻塞）"><a href="#6-4-3-BLOCKED（锁阻塞）" class="headerlink" title="6.4.3 BLOCKED（锁阻塞）"></a>6.4.3 BLOCKED（锁阻塞）</h2><p>&emsp;&emsp;Blocked状态在API中的介绍为：一个正在阻塞等待一个监视器锁（锁对象）的线程处于这一状态。</p><p>&emsp;&emsp;我们已经学完同步机制，那么这个状态是非常好理解的了。比如，线程A与线程B代码中使用同一锁，如果线程A获取到锁，线程A进入到Runnable状态，那么线程B就进入到Blocked锁阻塞状态。</p><p>&emsp;&emsp;这是由Runnable状态进入Blocked状态。除此Waiting以及Time Waiting状态也会在某种情况下进入阻塞状态。</p><p>Blocked 线程状态图</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/7Q8KhYSPGugE.png!blog" alt=""></p><h2 id="6-4-4-Waiting（无限等待）"><a href="#6-4-4-Waiting（无限等待）" class="headerlink" title="6.4.4 Waiting（无限等待）"></a>6.4.4 Waiting（无限等待）</h2><p>&emsp;&emsp;Wating状态在API中介绍为：一个正在无限期等待另一个线程执行一个特别的（唤醒）动作的线程处于这一状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitingTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 演示waiting</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            System.out.println(Thread.currentThread().getName() </span><br><span class="line">                                               +<span class="string">"=== 获取到锁对象，调用wait方法，"</span> </span><br><span class="line">                                               + <span class="string">"进入waiting状态，释放锁对象"</span>);</span><br><span class="line">                            obj.wait(); <span class="comment">//无限等待</span></span><br><span class="line">                            <span class="comment">//obj.wait(5000); //计时等待, 5秒 时间到，自动醒来</span></span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println( Thread.currentThread().getName()</span><br><span class="line">                                           + <span class="string">"=== 从waiting状态醒来，"</span></span><br><span class="line">                                           + <span class="string">"获取到锁对象，继续执行了"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"等待线程"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// while (true)&#123; //每隔3秒 唤醒一次</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println( Thread.currentThread().getName() </span><br><span class="line">                                       +<span class="string">"‐‐‐‐‐ 等待3秒钟"</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    System.out.println( Thread.currentThread().getName() </span><br><span class="line">                                       + <span class="string">"‐‐‐‐‐ 获取到锁对象,"</span></span><br><span class="line">                                       + <span class="string">"调用notify方法，释放锁对象"</span>);</span><br><span class="line">                    obj.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;,<span class="string">"唤醒线程"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过上述代码会发现，<code>Object.wait</code>方法的线程会等待另一个线程调用此对象的<code>Object.notify()</code>方法或<code>Object.notifyAll()</code>方法。</p><p>&emsp;&emsp;其实waiting状态并不是一个线程的操作，它体现的是多个线程间的通信，可以理解为多个线程之间的协作关系，多个线程会争取锁，同时相互之间又存在协作关系。就好比在公司里你和你的同事们，你们可能存在晋升时的竞争，但更多时候你们更多是一起合作以完成某些任务。</p><p>&emsp;&emsp;当多个线程协作时，比如A，B线程，如果A线程在Runnable（可运行）状态中调用了wait()方法那么A线程就进入了Waiting（无限等待）状态，同时失去了同步锁。假如这个时候B线程获取到了同步锁，在运行状态中调用了notify()方法，那么就会将无限等待的A线程唤醒。注意是唤醒，如果获取到锁对象，那么A线程唤醒后就进入Runnable（可运行）状态；如果没有获取锁对象，那么就进入到Blocked（锁阻塞状态）。</p><p><strong>Waiting 线程状态图</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190824/oecWdiTLnpEc.png!blog" alt=""></p><h2 id="6-4-5-补充知识点"><a href="#6-4-5-补充知识点" class="headerlink" title="6.4.5 补充知识点"></a>6.4.5 补充知识点</h2><p>到此为止我们已经对线程状态有了基本的认识，想要有更多的了解，详情可以见下图：</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/jb5T0g8Sdwxs.png!blog" alt=""></p><blockquote><p>Tips:<br>&emsp;&emsp;我们在翻阅API的时候会发现Timed Waiting（计时等待） 与 Waiting（无限等待） 状态联系还是很紧密的，比如Waiting（无限等待） 状态中wait方法是空参的，而timed waiting（计时等待） 中wait方法是带参的。这种带参的方法，其实是一种倒计时操作，相当于我们生活中的小闹钟，我们设定好时间，到时通知，可是如果提前得到（唤醒）通知，那么设定好时间在通知也就显得多此一举了，那么这种设计方案其实是一举两得。如果没有得到（唤醒）通知，那么线程就处于Timed Waiting状态,直到倒计时完毕自动醒来；如果在倒计时期间得到（唤醒）通知，那么线程从Timed Waiting状态立刻唤醒。</p></blockquote><h3 id="吃包子"><a href="#吃包子" class="headerlink" title="吃包子"></a>吃包子</h3><p>两个人去吃包子，使用notifyAll唤醒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02WaitAndNotify</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建锁对象,保证唯一</span></span><br><span class="line">        Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="comment">// 创建一个顾客线程(消费者)</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//一直等着买包子</span></span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="comment">//保证等待和唤醒的线程只能有一个执行,需要使用同步技术</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                        System.out.println(<span class="string">"顾客1告知老板要的包子的种类和数量"</span>);</span><br><span class="line">                        <span class="comment">//调用wait方法,放弃cpu的执行,进入到WAITING状态(无限等待)</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            obj.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//唤醒之后执行的代码</span></span><br><span class="line">                        System.out.println(<span class="string">"包子已经做好了,顾客1开吃!"</span>);</span><br><span class="line">                        System.out.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个顾客线程(消费者)</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//一直等着买包子</span></span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="comment">//保证等待和唤醒的线程只能有一个执行,需要使用同步技术</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                        System.out.println(<span class="string">"顾客2告知老板要的包子的种类和数量"</span>);</span><br><span class="line">                        <span class="comment">//调用wait方法,放弃cpu的执行,进入到WAITING状态(无限等待)</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            obj.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//唤醒之后执行的代码</span></span><br><span class="line">                        System.out.println(<span class="string">"包子已经做好了,顾客2开吃!"</span>);</span><br><span class="line">                        System.out.println(<span class="string">"-------------------------------"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个老板线程(生产者)</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//一直做包子</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="comment">//花了5秒做包子</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">5000</span>);<span class="comment">//花5秒钟做包子</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//保证等待和唤醒的线程只能有一个执行,需要使用同步技术</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                        System.out.println(<span class="string">"老板5秒钟之后做好包子,告知顾客,可以吃包子了"</span>);</span><br><span class="line">                        <span class="comment">//做好包子之后,调用notify方法,唤醒顾客吃包子</span></span><br><span class="line">                        <span class="comment">//obj.notify();//如果有多个等待线程,随机唤醒一个</span></span><br><span class="line">                        obj.notifyAll();<span class="comment">//唤醒所有等待的线程</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">顾客<span class="number">1</span>告知老板要的包子的种类和数量</span><br><span class="line">顾客<span class="number">2</span>告知老板要的包子的种类和数量</span><br><span class="line">老板<span class="number">5</span>秒钟之后做好包子,告知顾客,可以吃包子了</span><br><span class="line">包子已经做好了,顾客<span class="number">1</span>开吃!</span><br><span class="line">---------------------------------------</span><br><span class="line">顾客<span class="number">1</span>告知老板要的包子的种类和数量</span><br><span class="line">包子已经做好了,顾客<span class="number">2</span>开吃!</span><br><span class="line">---------------------------------------</span><br><span class="line">顾客<span class="number">2</span>告知老板要的包子的种类和数量</span><br><span class="line">···</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第六章 3.线程安全</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/06_3%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/06_3%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="6-3-线程安全"><a href="#6-3-线程安全" class="headerlink" title="6.3 线程安全"></a>6.3 线程安全</h1><h2 id="6-3-1-线程安全概念"><a href="#6-3-1-线程安全概念" class="headerlink" title="6.3.1 线程安全概念"></a>6.3.1 线程安全概念</h2><p>&emsp;&emsp;如果有多个线程在同时运行，而这些线程可能会同时运行这段代码。程序每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。</p><p>&emsp;&emsp;我们通过一个案例，演示线程的安全问题：</p><p>&emsp;&emsp;电影院要卖票，我们模拟电影院的卖票过程。假设要播放的电影是 “葫芦娃大战奥特曼”，本次电影的座位共100个(本场电影只能卖100张票)。</p><p>&emsp;&emsp;我们来模拟电影院的售票窗口，实现多个窗口同时卖 “葫芦娃大战奥特曼”这场电影票(多个窗口一起卖这100张票)</p><p>&emsp;&emsp;需要窗口，采用线程对象来模拟；需要票，Runnable接口子类来模拟</p><p><strong>模拟票：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 执行卖票操作</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//每个窗口卖票的操作</span></span><br><span class="line">        <span class="comment">//窗口 永远开启</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;<span class="comment">//有票 可以卖</span></span><br><span class="line">                <span class="comment">//出票操作</span></span><br><span class="line">                <span class="comment">//使用sleep模拟一下出票时间</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto‐generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//获取当前线程对象的名字</span></span><br><span class="line">                String name = Thread.currentThread().getName();</span><br><span class="line">                System.out.println(name + <span class="string">"正在卖:"</span> + ticket‐‐);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建线程任务对象</span></span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="comment">//创建三个窗口对象</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(ticket, <span class="string">"窗口1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(ticket, <span class="string">"窗口2"</span>);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(ticket, <span class="string">"窗口3"</span>);</span><br><span class="line">        <span class="comment">//同时卖票</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果中有一部分这样现象：</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/d6lPAavpE7mU.png!blog" alt=""></p><p>发现程序出现了两个问题：</p><ol><li>相同的票数，比如5这张票被卖了两回。</li><li>不存在的票，比如0票与-1票，是不存在的。</li></ol><p>这种问题，几个窗口(线程)票数不同步了，这种问题称为线程不安全。</p><blockquote><p>&emsp;&emsp;线程安全问题都是由全局变量及静态变量引起的。若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则的话就可能影响线程安全。</p></blockquote><h2 id="6-3-2-线程同步"><a href="#6-3-2-线程同步" class="headerlink" title="6.3.2 线程同步"></a>6.3.2 线程同步</h2><p>&emsp;&emsp;当我们使用多个线程访问同一资源的时候，且多个线程中对资源有写的操作，就容易出现线程安全问题。</p><p>&emsp;&emsp;要解决上述多线程并发访问一个资源的安全性问题:也就是解决重复票与不存在票问题，Java中提供了同步机制(synchronized)来解决。</p><p>根据案例简述：</p><blockquote><p>&emsp;&emsp;窗口1线程进入操作的时候，窗口2和窗口3线程只能在外等着，窗口1操作结束，窗口1和窗口2和窗口3才有机会进入代码去执行。也就是说在某个线程修改共享资源的时候，其他线程不能修改该资源，等待修改完毕同步之后，才能去抢夺CPU资源，完成对应的操作，保证了数据的同步性，解决了线程不安全的现象。</p></blockquote><p>&emsp;&emsp;为了保证每个线程都能正常执行原子操作,Java引入了线程同步机制。</p><p>那么怎么去使用呢？有三种方式完成同步操作：</p><ol><li>同步代码块。</li><li>同步方法。</li><li>锁机制。</li></ol><h3 id="6-3-2-1-同步代码块"><a href="#6-3-2-1-同步代码块" class="headerlink" title="6.3.2.1 同步代码块"></a>6.3.2.1 同步代码块</h3><ul><li><strong>同步代码块</strong>：<code>synchronized</code>关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。</li></ul><p>格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步锁)&#123;</span><br><span class="line">    需要同步操作的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>同步锁:</strong></p><p>对象的同步锁只是一个概念，可以想象为在对象上标记了一个锁.</p><ol><li>锁对象可以是任意类型。</li><li>多个线程对象，要使用同一把锁。</li></ol><blockquote><p> <strong>注意:</strong><br>&emsp;&emsp;在任何时候，最多允许一个线程拥有同步锁，谁拿到锁就进入代码块，其他的线程只能在外等着(BLOCKED)。</p></blockquote><p>使用同步代码块解决代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 执行卖票操作</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//每个窗口卖票的操作</span></span><br><span class="line">        <span class="comment">//窗口 永远开启</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;<span class="comment">//有票 可以卖</span></span><br><span class="line">                    <span class="comment">//出票操作</span></span><br><span class="line">                    <span class="comment">//使用sleep模拟一下出票时间</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto‐generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//获取当前线程对象的名字</span></span><br><span class="line">                    String name = Thread.currentThread().getName();</span><br><span class="line">                    System.out.println(name+<span class="string">"正在卖:"</span>+ticket‐‐);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用了同步代码块后，上述的线程的安全问题，解决了。</p><h3 id="6-3-2-2-同步方法"><a href="#6-3-2-2-同步方法" class="headerlink" title="6.3.2.2 同步方法"></a>6.3.2.2 同步方法</h3><ul><li><strong>同步方法：</strong>使用<code>synchronized</code>修饰的方法，就叫做同步方法，保证A线程执行该方法的时候，其他线程只能在方法外等着。</li></ul><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    可能会产生线程安全问题的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>同步锁是谁?</strong><br>&emsp;&emsp;对于非static方法，同步锁就是this。<br>&emsp;&emsp;对于static方法，我们使用当前方法所在类的字节码对象(类名.class)。</p></blockquote><p>使用同步方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 执行卖票操作</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//每个窗口卖票的操作</span></span><br><span class="line">        <span class="comment">//窗口 永远开启</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            sellTicket();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 锁对象 是 谁调用这个方法 就是谁</span></span><br><span class="line"><span class="comment">    * 隐含 锁对象 就是 this</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sellTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;<span class="comment">//有票 可以卖</span></span><br><span class="line">            <span class="comment">//出票操作</span></span><br><span class="line">            <span class="comment">//使用sleep模拟一下出票时间</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto‐generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取当前线程对象的名字</span></span><br><span class="line">            String name = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(name+<span class="string">"正在卖:"</span>+ticket‐‐);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-2-3-Lock锁"><a href="#6-3-2-3-Lock锁" class="headerlink" title="6.3.2.3 Lock锁"></a>6.3.2.3 Lock锁</h3><p>&emsp;&emsp;<code>java.util.concurrent.locks.Lock</code> 机制提供了比<strong>synchronized</strong>代码块和<strong>synchronized</strong>方法更广泛的锁定操作,同步代码块/同步方法具有的功能Lock都有,除此之外更强大,更体现面向对象。</p><p>&emsp;&emsp;Lock锁也称同步锁，加锁与释放锁方法化了，如下：</p><ul><li><strong><code>public void lock()</code></strong>：加同步锁。</li><li><strong><code>public void unlock()</code></strong>：释放同步锁。</li></ul><p>使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 执行卖票操作</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//每个窗口卖票的操作</span></span><br><span class="line">        <span class="comment">//窗口 永远开启</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;<span class="comment">//有票 可以卖</span></span><br><span class="line">                <span class="comment">//出票操作</span></span><br><span class="line">                <span class="comment">//使用sleep模拟一下出票时间</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                    <span class="comment">//获取当前线程对象的名字</span></span><br><span class="line">                    String name = Thread.currentThread().getName();</span><br><span class="line">                    System.out.println(name+<span class="string">"正在卖:"</span>+ticket‐‐);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto‐generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第六章 2.线程</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/06_2%20%E7%BA%BF%E7%A8%8B.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/06_2%20%E7%BA%BF%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="6-2-线程"><a href="#6-2-线程" class="headerlink" title="6.2 线程"></a>6.2 线程</h1><h2 id="6-2-1-多线程原理"><a href="#6-2-1-多线程原理" class="headerlink" title="6.2.1 多线程原理"></a>6.2.1 多线程原理</h2><p>&emsp;&emsp;以下用多线程执行的时序图来体现一下多线程程序的执行流程。</p><p><strong>代码如下：</strong></p><p><strong>自定义线程类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 利用继承中的特点</span></span><br><span class="line"><span class="comment">    * 将线程名称传递 进行设置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 重写run方法</span></span><br><span class="line"><span class="comment">    * 定义线程要执行的代码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//getName()方法 来自父亲</span></span><br><span class="line">            System.out.println(getName()+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这里是main线程"</span>);</span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread(<span class="string">"小强"</span>);</span><br><span class="line">        mt.start();<span class="comment">//开启了一个新的线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"旺财:"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>流程图：</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190824/Y74gwXQIOV65.png!blogy" alt=""></p><p>&emsp;&emsp;程序启动运行main时候，java虚拟机启动一个进程，主线程main在main()调用时候被创建。随着调用mt的对象的start方法，另外一个新的线程也启动了，这样，整个应用就在多线程下运行。</p><p>&emsp;&emsp;通过这张图可以很清晰的看到多线程的执行流程，那么为什么可以完成并发执行呢?</p><p>&emsp;&emsp;多线程执行时，到底在内存中是如何运行的呢？以上个程序为例，进行图解说明：</p><p>&emsp;&emsp;多线程执行时，在栈内存中，其实每一个执行线程都有一片自己所属的栈内存空间。进行方法的压栈和弹栈。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/roYlBRaUW3bV.png!blog" alt=""></p><p>&emsp;&emsp;当执行线程的任务结束了，线程自动在栈内存中释放了。但是当所有的执行线程都结束了，那么进程就结束了。</p><h2 id="6-2-2-Thread类"><a href="#6-2-2-Thread类" class="headerlink" title="6.2.2 Thread类"></a>6.2.2 Thread类</h2><p>&emsp;&emsp;在上一节内容中已经可以完成最基本的线程开启，那么在我们完成操作过程中用到了<code>java.lang.Thread</code>类，API中该类中定义了有关线程的一些方法，具体如下：</p><h3 id="构造方法："><a href="#构造方法：" class="headerlink" title="构造方法："></a>构造方法：</h3><ul><li><p><strong><code>public Thread()</code></strong>：分配一个新的线程对象。</p></li><li><p><strong><code>public Thread(String name)</code></strong>：分配一个指定名字的新的线程对象。</p></li><li><p><strong><code>public Thread(Runnable target)</code></strong>：分配一个带有指定目标新的线程对象。</p></li><li><p><strong><code>public Thread(Runnable target,String name)</code></strong>：分配一个带有指定目标新的线程对象并指定名字。</p></li></ul><h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><ul><li><p><strong><code>public String getName()</code></strong>：获取当前线程名称。</p></li><li><p><strong><code>public void start()</code></strong>：导致此线程开始执行；Java虚拟机调用此线程的run方法。</p></li><li><p><strong><code>public void run()</code></strong>：此线程要执行的任务在此处定义代码。</p></li><li><p><strong><code>public static void sleep(long millis)</code></strong>：使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。</p></li><li><p><strong><code>public static Thread currentThread()</code></strong>：返回对当前正在执行的线程对象的引用。</p></li></ul><p>&emsp;&emsp;翻阅API后得知创建线程的方式总共有两种，一种是继承Thread类方式，一种是实现Runnable接口方式，方式一我们上一天已经完成，接下来讲解方式二实现的方式。</p><h2 id="6-2-3-创建线程方式二"><a href="#6-2-3-创建线程方式二" class="headerlink" title="6.2.3 创建线程方式二"></a>6.2.3 创建线程方式二</h2><p>&emsp;&emsp;采用<code>java.lang.Runnable</code> 也是非常常见的一种，我们只需要重写run方法即可。</p><p><strong>步骤如下：</strong></p><ol><li>定义Runnable接口的实现类，并重写该接口的<code>run()</code>方法，该<code>run()</code>方法的方法体同样是该线程的线程执行体。</li><li>创建Runnable实现类的实例，并以此实例作为Thread的参数来创建Thread对象，该Thread对象才是真正的线程对象。</li><li>调用线程对象的start()方法来启动线程。</li></ol><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" "</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建自定义类对象 线程任务对象</span></span><br><span class="line">        MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="comment">//创建线程对象，并设置线程名字为小强</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(mr, <span class="string">"小强"</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"旺财 "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过实现Runnable接口，使得该类有了多线程类的特征。<code>run()</code>方法是多线程程序的一个执行目标。所有的多线程代码都在<code>run</code>方法里面。Thread类实际上也是实现了Runnable接口的类。</p><p>&emsp;&emsp;在启动的多线程的时候，需要先通过Thread类的构造方法<code>Thread(Runnable target)</code> 构造出对象，然后调用Thread对象的<code>start()</code>方法来运行多线程代码。</p><p>&emsp;&emsp;实际上所有的多线程代码都是通过运行Thread的<code>start()</code>方法来运行的。因此，不管是继承Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的，熟悉Thread类的API是进行多线程编程的基础。</p><blockquote><p>Tips:<br>&emsp;&emsp;Runnable对象仅仅作为Thread对象的传递参数，Runnable实现类里包含的<code>run()</code>方法仅作为线程执行体。<br>&emsp;&emsp;而实际的线程对象依然是Thread实例，只是该Thread线程负责执行其target的<code>run()</code>方法。</p></blockquote><h2 id="6-2-4-Thread和Runnable的区别"><a href="#6-2-4-Thread和Runnable的区别" class="headerlink" title="6.2.4 Thread和Runnable的区别"></a>6.2.4 Thread和Runnable的区别</h2><p>&emsp;&emsp;如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话，则很容易的实现资源共享。</p><p><strong>总结：</strong></p><p><strong>实现Runnable接口比继承Thread类所具有的优势：</strong></p><ol><li>适合多个相同的程序代码的线程去共享同一个资源。</li><li>可以避免java中的单继承的局限性。</li><li>增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。</li><li>线程池只能放入实现Runable或Callable类线程，不能直接放入继承Thread的类。</li></ol><blockquote><p> <strong>扩充：</strong><br>&emsp;&emsp;在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。因为每当使用java命令执行一个类的时候，实际上都会启动一个JVM，每一个JVM其实在就是在操作系统中启动了一个进程。</p></blockquote><h2 id="6-2-5-匿名内部类方式实现线程的创建"><a href="#6-2-5-匿名内部类方式实现线程的创建" class="headerlink" title="6.2.5 匿名内部类方式实现线程的创建"></a>6.2.5 匿名内部类方式实现线程的创建</h2><p>&emsp;&emsp;使用线程的内匿名内部类方式，可以方便的实现每个线程执行不同的线程任务操作。</p><p>&emsp;&emsp;使用匿名内部类的方式实现Runnable接口，重新Runnable接口中的<code>run()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoNameInnerClassThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"张宇:"</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> Thread(r).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"费玉清:"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>代码简化：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="comment">//重写run方法,设置线程任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">20</span> ; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;"</span>+<span class="string">"传智播客"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第六章 1.多线程</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/06_1%20%E5%A4%9A%E7%BA%BF%E7%A8%8B.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/06_1%20%E5%A4%9A%E7%BA%BF%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="6-1-多线程"><a href="#6-1-多线程" class="headerlink" title="6.1 多线程"></a>6.1 多线程</h1><p>&emsp;&emsp;在之前，学习的程序在没有跳转语句的前提下，都是由上至下依次执行，那现在想要设计一个程序，边打游戏边听歌，怎么设计？</p><p>要解决上述问题,咱们得使用多进程或者多线程来解决.</p><h2 id="6-1-1-并发与并行"><a href="#6-1-1-并发与并行" class="headerlink" title="6.1.1 并发与并行"></a>6.1.1 并发与并行</h2><ul><li><strong>并发</strong>：指两个或多个事件在同一个时间段内发生。</li><li><strong>并行</strong>：指两个或多个事件在同一时刻发生（同时发生）。</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190824/To86zOBPz8N8.png!blog" alt=""></p><p>&emsp;&emsp;在操作系统中，安装了多个程序，并发指的是在一段时间内宏观上有多个程序同时运行，这在单 CPU 系统中，每一时刻只能有一道程序执行，即微观上这些程序是分时的交替运行，只不过是给人的感觉是同时运行，那是因为分时交替运行的时间是非常短的。</p><p>&emsp;&emsp;而在多个 CPU 系统中，则这些可以并发执行的程序便可以分配到多个处理器上（CPU），实现多任务并行执行，即利用每个处理器来处理一个可以并发执行的程序，这样多个程序便可以同时执行。目前电脑市场上说的多核CPU，便是多核处理器，核越多，并行处理的程序越多，能大大的提高电脑运行的效率。</p><blockquote><p><strong>注意：</strong><br>&emsp;&emsp;单核处理器的计算机肯定是不能并行的处理多个任务的，只能是多个任务在单个CPU上并发运行。同理，线程也是一样的，从宏观角度上理解线程是并行运行的，但是从微观角度上分析却是串行运行的，即一个线程一个线程的去运行，当系统只有一个CPU时，线程会以某种顺序执行多个线程，我们把这种情况称之为线程调度。</p></blockquote><h2 id="6-1-2-线程与进程"><a href="#6-1-2-线程与进程" class="headerlink" title="6.1.2 线程与进程"></a>6.1.2 线程与进程</h2><ul><li><p><strong>进程</strong>：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个线程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</p></li><li><p><strong>线程</strong>：线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。</p><p>  简而言之：一个程序运行后至少有一个进程，一个进程中可以包含多个线程</p></li></ul><p>我们可以再电脑底部任务栏，右键—–&gt;打开任务管理器,可以查看当前任务的进程：</p><h3 id="6-1-2-1-进程"><a href="#6-1-2-1-进程" class="headerlink" title="6.1.2.1 进程"></a>6.1.2.1 进程</h3><p><img src="//cdn.foreversfj.com/image/blog/20190824/G0zzaoMvQz58.png!blog" alt=""></p><h3 id="6-1-2-2-线程"><a href="#6-1-2-2-线程" class="headerlink" title="6.1.2.2 线程"></a>6.1.2.2 线程</h3><p><img src="//cdn.foreversfj.com/image/blog/20190824/K8SmmmX0Axun.png!blog" alt=""></p><h3 id="6-1-2-3-线程调度"><a href="#6-1-2-3-线程调度" class="headerlink" title="6.1.2.3 线程调度:"></a>6.1.2.3 线程调度:</h3><ul><li><p><strong>分时调度</strong><br>&emsp;&emsp;所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间。</p></li><li><p><strong>抢占式调度</strong><br>&emsp;&emsp;优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为抢占式调度。</p><ul><li><p><strong>设置线程的优先级</strong><br><img src="//cdn.foreversfj.com/image/blog/20190824/hmeAApAd5dUk.png!blog" alt=""></p></li><li><p><strong>抢占式调度详解</strong><br>&emsp;&emsp;大部分操作系统都支持多进程并发运行，现在的操作系统几乎都支持同时运行多个程序。</p><p>&emsp;&emsp;比如：现在我们上课一边使用编辑器，一边使用录屏软件，同时还开着画图板，dos窗口等软件。此时，这些程序是在同时运行，“感觉这些软件好像在同一时刻运行着”。<br>&emsp;&emsp;实际上，CPU(中央处理器)使用抢占式调度模式在多个线程间进行着高速的切换。对于CPU的一个核而言，某个时刻，只能执行一个线程，而 CPU的在多个线程间切换速度相对我们的感觉要快，看上去就是在同一时刻运行。 其实，多线程程序并不能提高程序的运行速度，但能够提高程序运行效率，让CPU的使用率更高。</p></li></ul></li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190824/KvsMrFcPCvFt.png!blogy" alt=""></p><h2 id="6-1-3-创建线程类"><a href="#6-1-3-创建线程类" class="headerlink" title="6.1.3 创建线程类"></a>6.1.3 创建线程类</h2><h3 id="创建多线程的第一种方式"><a href="#创建多线程的第一种方式" class="headerlink" title="创建多线程的第一种方式"></a>创建多线程的第一种方式</h3><p>&emsp;&emsp;<strong>创建Thread类的子类。</strong></p><p>&emsp;&emsp;<strong>java.lang.Thread类</strong>：是描述线程的类，我们想要实现多线程程序，就必须继承Thread类</p><p>&emsp;&emsp;Java使用<code>java.lang.Thread</code>类代表线程，所有的线程对象都必须是Thread类或其子类的实例。每个线程的作用是完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。Java使用线程执行体来代表这段程序流。</p><ol><li>定义Thread类的子类，</li><li>在子类中重写<code>run()</code>方法，该<code>run()</code>方法的方法体就代表了线程需要完成的任务，因此把<code>run()</code>方法称为线程执行体。</li><li>创建Thread子类的实例，即创建了线程对象</li><li>调用线程对象的<code>start()</code>方法来启动该线程<ul><li><code>void start()</code> 使该线程开始执行；Java 虚拟机调用该线程的 <code>run</code>方法。结果是两个线程并发地运行；当前线程（main线程）和另一个线程（创建的新线程,执行其 run 方法）。</li><li>多次启动一个线程是非法的。特别是当线程已经结束执行后，不能再重新启动。</li><li>java程序属于抢占式调度，哪个线程的优先级高，那个线程优先执行；同一个优先级，随机选择一个执行</li></ul></li></ol><p><strong>代码如下：</strong></p><p><strong>测试类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建自定义线程对象</span></span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread(<span class="string">"新的线程！"</span>);</span><br><span class="line">        <span class="comment">//开启新线程</span></span><br><span class="line">        mt.start();</span><br><span class="line">        <span class="comment">//在主方法中执行for循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"main线程！"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义线程类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义指定线程名称的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用父类的String参数的构造方法，指定线程的名称</span></span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 重写run方法，完成该线程执行的逻辑</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">"：正在执行！"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>提示：</p><p>&emsp;&emsp;在IDEA中运行时可能会在main方法执行完后再执行其他线程，这是由于IDEA中jvm默认先执行main。如果要测试并发，建议由控制台运行此demo</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第五章 3.自定义异常</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/05_3%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/05_3%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8.html</url>
      
        <content type="html"><![CDATA[<h1 id="5-3-自定义异常"><a href="#5-3-自定义异常" class="headerlink" title="5.3 自定义异常"></a>5.3 自定义异常</h1><h2 id="5-3-1-概述"><a href="#5-3-1-概述" class="headerlink" title="5.3.1 概述"></a>5.3.1 概述</h2><h3 id="为什么需要自定义异常类"><a href="#为什么需要自定义异常类" class="headerlink" title="为什么需要自定义异常类:"></a>为什么需要自定义异常类:</h3><p>&emsp;&emsp;我们说了Java中不同的异常类,分别表示着某一种具体的异常情况,那么在开发中总是有些异常情况是SUN没有定义好的,此时我们根据自己业务的异常情况来定义异常类。例如年龄负数问题,考试成绩负数问题等等。</p><p>&emsp;&emsp;在上述代码中，发现这些异常都是JDK内部定义好的，但是实际开发中也会出现很多异常,这些异常很可能在JDK中没有定义过,例如年龄负数问题,考试成绩负数问题.那么能不能自己定义异常呢？</p><h3 id="什么是自定义异常类"><a href="#什么是自定义异常类" class="headerlink" title="什么是自定义异常类:"></a>什么是自定义异常类:</h3><p>在开发中根据自己业务的异常情况来定义异常类.</p><p>自定义一个业务逻辑异常: RegisterException。一个注册异常类。</p><h3 id="异常类如何定义"><a href="#异常类如何定义" class="headerlink" title="异常类如何定义:"></a>异常类如何定义:</h3><ol><li>自定义一个编译期异常：自定义类并继承于 。</li><li>自定义一个运行时期的异常类：自定义类并继承于java.lang.RuntimeException 。</li></ol><h2 id="5-3-2-自定义异常的练习"><a href="#5-3-2-自定义异常的练习" class="headerlink" title="5.3.2 自定义异常的练习"></a>5.3.2 自定义异常的练习</h2><p>&emsp;&emsp;要求：我们模拟注册操作，如果用户名已存在，则抛出异常并提示：亲，该用户名已经被注册。</p><p>首先定义一个登陆异常类<code>RegisterException</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 业务逻辑异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 空参构造</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> message 表示异常提示</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;模拟登陆操作，使用数组模拟数据库中存储的数据，并提供当前注册账号是否存在方法用于判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 模拟数据库中已存在账号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] names = &#123;<span class="string">"bill"</span>,<span class="string">"hill"</span>,<span class="string">"jill"</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 可能出现异常的代码</span></span><br><span class="line">            checkUsername(<span class="string">"nill"</span>);</span><br><span class="line">            System.out.println(<span class="string">"注册成功"</span>);<span class="comment">//如果没有异常就是注册成功</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(RegisterException e)&#123;</span><br><span class="line">            <span class="comment">//处理异常</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断当前注册账号是否存在</span></span><br><span class="line">    <span class="comment">//因为是编译期异常，又想调用者去处理 所以声明该异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(String uname)</span> <span class="keyword">throws</span> LoginException</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            <span class="keyword">if</span>(name.equals(uname))&#123;<span class="comment">//如果名字在这里面 就抛出登陆异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RegisterException(<span class="string">"亲"</span>+name+<span class="string">"已经被注册了！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第五章 2.异常的处理</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/05_2%20%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/05_2%20%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="5-2-异常的处理"><a href="#5-2-异常的处理" class="headerlink" title="5.2 异常的处理"></a>5.2 异常的处理</h1><p>Java异常处理的五个关键字：try、catch、finally、throw、throws</p><h2 id="5-2-1-抛出异常throw"><a href="#5-2-1-抛出异常throw" class="headerlink" title="5.2.1 抛出异常throw"></a>5.2.1 抛出异常throw</h2><p>&emsp;&emsp;在编写程序时，我们必须要考虑程序出现问题的情况。比如，在定义方法时，方法需要接受参数。那么，当调用方法使用接受到的参数时，首先需要先对参数数据进行合法的判断，数据若不合法，就应该告诉调用者，传递合法的数据进来。这时需要使用抛出异常的方式来告诉调用者。</p><p>&emsp;&emsp;在java中，提供了一个throw关键字，它用来抛出一个指定的异常对象。那么，抛出一个异常具体如何操作呢？</p><ul><li><p>创建一个异常对象。封装一些提示信息(信息可以自己编写)。</p></li><li><p>需要将这个异常对象告知给调用者。怎么告知呢？怎么将这个异常对象传递到调用者处呢？通过关键字<code>throw</code>就可以完成。<code>throw [异常对象]</code>。</p></li></ul><p>&emsp;&emsp;<code>throw</code><strong>用在方法内</strong>，用来抛出一个异常对象，将这个异常对象传递到调用者处，并结束当前方法的执行。</p><p><strong>使用格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> 异常类名(参数);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"要访问的arr数组不存在"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"该索引在数组中不存在，已超出范围"</span>);</span><br></pre></td></tr></table></figure><p>学习完抛出异常的格式后，我们通过下面程序演示下throw的使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">52</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="comment">//根据索引找对应的元素</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> element = getElement(arr, index);</span><br><span class="line">        System.out.println(element);</span><br><span class="line">        System.out.println(<span class="string">"over"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 根据 索引找到数组中对应的元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getElement</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断 索引是否越界</span></span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;arr.length‐<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            判断条件如果满足，当执行完throw抛出异常对象后，</span></span><br><span class="line"><span class="comment">            方法已经无法继续运算。</span></span><br><span class="line"><span class="comment">            这时就会结束当前方法的执行，并将异常告知给调用者。</span></span><br><span class="line"><span class="comment">            这时就需要通过异常来解决。</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"哥们，角标越界了~~~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> element = arr[index];</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong><br>&emsp;&emsp;如果产生了问题，我们就会throw将问题描述类即异常进行抛出，也就是将问题返回给该方法的调用者。<br>&emsp;&emsp;那么对于调用者来说，该怎么处理呢？一种是进行捕获处理，另一种就是继续讲问题声明出去，使用throws声明处理。</p></blockquote><h2 id="5-2-2-Objects非空判断"><a href="#5-2-2-Objects非空判断" class="headerlink" title="5.2.2 Objects非空判断"></a>5.2.2 Objects非空判断</h2><p>&emsp;&emsp;以前学习的类Objects中，曾经提到过它由一些静态的实用方法组成，这些方法是null-save（空指针安全的）或null-tolerant（容忍空指针的），那么在它的源码中，对对象为null的值进行了抛出异常操作。</p><ul><li><strong><code>public static &lt;T&gt; T requireNonNull(T obj)</code></strong>：查看指定引用对象不是null。</li></ul><p>查看源码发现这里对为null的进行了抛出异常操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">requireNonNull</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException()  ;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-3-声明异常throws"><a href="#5-2-3-声明异常throws" class="headerlink" title="5.2.3 声明异常throws"></a>5.2.3 声明异常throws</h2><p>&emsp;&emsp;<strong>声明异常</strong>：将问题标识出来，报告给调用者。如果方法内通过<code>throw</code>抛出了编译时异常，而没有捕获处理，那么必须通过<code>throws</code>进行声明，让调用者去处理。</p><p>&emsp;&emsp;关键字<code>throws</code>运用于方法声明之上,用于表示当前方法不处理异常,而是提醒该方法的调用者来处理异常(抛出异常).</p><p><strong>声明异常格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数) <span class="keyword">throws</span> 异常类名<span class="number">1</span>,异常类名<span class="number">2</span>…&#123; &#125;</span><br></pre></td></tr></table></figure><p>声明异常的代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        read(<span class="string">"a.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果定义功能时有问题发生需要报告给调用者。可以通过在方法上使用throws关键字进行声明</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!path.equals(<span class="string">"a.txt"</span>)) &#123;<span class="comment">//如果不是 a.txt这个文件</span></span><br><span class="line">            <span class="comment">// 我假设 如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常 throw</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"文件不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;throws用于进行异常类的声明，若该方法可能有多种异常情况产生，那么在throws后面可以写多个异常类，用逗号隔开。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        read(<span class="string">"a.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span><span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!path.equals(<span class="string">"a.txt"</span>)) &#123;<span class="comment">//如果不是 a.txt这个文件</span></span><br><span class="line">            <span class="comment">// 我假设 如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常 throw</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"文件不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!path.equals(<span class="string">"b.txt"</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-4-捕获异常try…catch"><a href="#5-2-4-捕获异常try…catch" class="headerlink" title="5.2.4 捕获异常try…catch"></a>5.2.4 捕获异常try…catch</h2><p>如果异常出现的话,会立刻终止程序,所以我们得处理异常:</p><ol><li>该方法不处理,而是声明抛出,由该方法的调用者来处理(throws)。</li><li>在方法中使用try-catch的语句块来处理异常。</li></ol><p>try-catch的方式就是捕获异常。</p><ul><li><strong>捕获异常</strong>：Java中对异常有针对性的语句进行捕获，可以对出现的异常进行指定方式的处理。</li></ul><p>捕获异常语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    编写可能会出现异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 e)&#123;</span><br><span class="line">    处理异常的代码</span><br><span class="line">        <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>try：</strong>该代码块中编写可能产生异常的代码。</p><p><strong>catch：</strong>用来进行某种异常的捕获，实现对捕获到的异常进行处理。</p><blockquote><p>注意：<code>try</code>和<code>catch</code>都不能单独使用，必须连用。</p></blockquote><p>演示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">// 当产生异常时，必须有处理方式。要么捕获，要么声明。</span></span><br><span class="line">            read(<span class="string">"b.txt"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;<span class="comment">// 括号中需要定义什么呢？</span></span><br><span class="line">            <span class="comment">//try中抛出的是什么异常，在括号中就定义什么异常类型</span></span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"over"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 我们 当前的这个方法中 有异常 有编译期异常</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!path.equals(<span class="string">"a.txt"</span>)) &#123;<span class="comment">//如果不是 a.txt这个文件</span></span><br><span class="line">            <span class="comment">// 我假设 如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常 throw</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"文件不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何获取异常信息：</p><p><code>Throwable</code>类中定义了一些查看方法:</p><ul><li><p><strong><code>public String getMessage()</code></strong>：获取异常的描述信息,原因(提示给用户的时候,就提示错误原因。</p></li><li><p><strong><code>public String toString()</code></strong>：获取异常的类型和异常描述信息(不用)。</p></li><li><p><strong><code>public void printStackTrace()</code></strong>：打印异常的跟踪栈信息并输出到控制台。</p></li></ul><p><i>包含了异常的类型,异常的原因,还包括异常出现的位置,在开发和调试阶段,都得使用</i><strong><code>printStackTrace</code></strong>。</p><h2 id="5-2-4-finally-代码块"><a href="#5-2-4-finally-代码块" class="headerlink" title="5.2.4 finally 代码块"></a>5.2.4 finally 代码块</h2><p>&emsp;&emsp;<strong>finally</strong>：有一些特定的代码无论异常是否发生，都需要执行。另外，因为异常会引发程序跳转，导致有些语句执行不到。而<code>finally</code>就是解决这个问题的，在<code>finally</code>代码块中存放的代码都是一定会被执行的。</p><p><strong>什么时候的代码必须最终执行？</strong></p><p>&emsp;&emsp;当我们在try语句块中打开了一些物理资源(磁盘文件/网络连接/数据库连接等),我们都得在使用完之后,最终关闭打开的资源。</p><p>finally的语法:</p><p><strong><code>try...catch....finally</code></strong>：自身需要处理异常,最终还得关闭资源。</p><blockquote><p>注意：<code>finally</code>不能单独使用。</p></blockquote><p>&emsp;&emsp;比如在我们之后学习的IO流中，当打开了一个关联文件的资源，最后程序不管结果如何，都需要把这个资源关闭掉。</p><p><code>finally</code>代码参考如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            read(<span class="string">"a.txt"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">//抓取到的是编译期异常 抛出去的是运行期</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"不管程序怎样，这里都将会被执行。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"over"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 我们 当前的这个方法中 有异常 有编译期异常</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!path.equals(<span class="string">"a.txt"</span>)) &#123;<span class="comment">//如果不是 a.txt这个文件</span></span><br><span class="line">            <span class="comment">// 我假设 如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常 throw</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"文件不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当只有在try或者catch中调用退出JVM的相关方法,此时finally才不会执行,否则finally永远会执行。</p></blockquote><p><img src="//cdn.foreversfj.com/image/blog/20190824/kXp2KeIKsAgk.png!blog" alt=""></p><h2 id="5-2-5-异常注意事项"><a href="#5-2-5-异常注意事项" class="headerlink" title="5.2.5 异常注意事项"></a>5.2.5 异常注意事项</h2><ul><li><p>多个异常使用捕获又该如何处理呢？</p><ol><li><p>多个异常分别处理。</p></li><li><p>多个异常一次捕获，多次处理。</p></li><li><p>多个异常一次捕获一次处理。</p><p>一般我们是使用一次捕获多次处理方式，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    编写可能会出现异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型A e)&#123; 当<span class="keyword">try</span>中出现A类型异常,就用该<span class="keyword">catch</span>来捕获.</span><br><span class="line">    处理异常的代码</span><br><span class="line">    <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型B e)&#123; 当<span class="keyword">try</span>中出现B类型异常,就用该<span class="keyword">catch</span>来捕获.</span><br><span class="line">    处理异常的代码</span><br><span class="line">    <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong><br>&emsp;&emsp;这种异常处理方式，要求多个catch中的异常不能相同，并且若catch中的多个异常之间有子父类异常的关系，那么子类异常要求在上面的catch处理，父类异常在下面的catch处理。</p></blockquote></li></ol></li><li><p>运行时异常被抛出可以不处理。即不捕获也不声明抛出。</p></li><li><p>如果finally有return语句,永远返回finally中的结果,避免该情况.</p></li><li><p>如果父类抛出了多个异常,子类重写父类方法时,抛出和父类相同的异常或者是父类异常的子类或者不抛出异常。</p></li><li><p>父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第五章 1.异常</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/05_1%20%E5%BC%82%E5%B8%B8.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/05_1%20%E5%BC%82%E5%B8%B8.html</url>
      
        <content type="html"><![CDATA[<h1 id="5-1-异常"><a href="#5-1-异常" class="headerlink" title="5.1 异常"></a>5.1 异常</h1><h2 id="5-1-1-异常概念"><a href="#5-1-1-异常概念" class="headerlink" title="5.1.1 异常概念"></a>5.1.1 异常概念</h2><p>&emsp;&emsp;异常，就是不正常的意思。</p><p>&emsp;&emsp;在生活中：医生说，你的身体某个部位有异常，该部位和正常相比有点不同，该部位的功能将受影响。</p><ul><li><strong>异常 ：</strong>指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止。</li></ul><p>&emsp;&emsp;在Java等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。Java处理异常的方式是中断处理。</p><blockquote><p>异常指的并不是语法错误,语法错了,编译不通过,不会产生字节码文件,根本不能运行。</p></blockquote><h2 id="5-1-2-异常体系"><a href="#5-1-2-异常体系" class="headerlink" title="5.1.2 异常体系"></a>5.1.2 异常体系</h2><p>&emsp;&emsp;异常机制其实是帮助我们找到程序中的问题，异常的根类是<code>java.lang.Throwable</code>，其下有两个子类：<code>java.lang.Error</code> 与<code>java.lang.Exception</code>，平常所说的异常指<code>java.lang.Exception</code> 。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/IncifUj8MhyP.png!blog" alt=""></p><p><strong><code>Throwable</code>体系：</strong></p><ul><li><p><strong>Error</strong>：严重错误Error，无法通过处理的错误，只能事先避免，好比绝症。</p></li><li><p><strong>Exception</strong>：表示异常，异常产生后程序员可以通过代码的方式纠正，使程序继续运行，是必须要处理的。好比感冒、阑尾炎。</p></li></ul><p><strong><code>Throwable</code>中的常用方法：</strong></p><ul><li><p><strong><code>public void printStackTrace()</code></strong>：打印异常的详细信息。<br>  <em>包含了异常的类型，异常的原因，还包括异常出现的位置，在开发和调试阶段，都得使用printStackTrace</em> 。</p></li><li><p><strong><code>public String getMessage()</code></strong>：获取发生异常的原因。<br>  <em>提示给用户的时候，就提示错误原因</em> 。</p></li><li><p><strong><code>public String toString()</code></strong>：获取异常的类型和异常描述信息(不用)。<br>  <em>出现异常，不要紧张，把异常的简单类名，拷贝到API中去查</em> 。</p></li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190904/sdMeif3C4STU.png!blog" alt=""></p><h2 id="5-1-3-异常分类"><a href="#5-1-3-异常分类" class="headerlink" title="5.1.3 异常分类"></a>5.1.3 异常分类</h2><p>&emsp;&emsp;我们平常说的异常就是指Exception，因为这类异常一旦出现，我们就要对代码进行更正，修复程序。</p><p><strong>异常(Exception)的分类</strong>: 根据在编译时期还是运行时期去检查异常?</p><ul><li><strong>编译时期异常</strong>:  checked异常。在编译时期，就会检查，如果没有处理异常，则编译失败。(如日期格式化异常)</li><li><strong>运行时期异常</strong>:  runtime异常。在运行时期，检查异常，在编译时期，运行异常不会编译器检测(不报错)。(如数学异常)</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190824/ynf1GAbDuaJR.png!blog" alt=""></p><h2 id="5-1-4-异常的产生过程解析"><a href="#5-1-4-异常的产生过程解析" class="headerlink" title="5.1.4 异常的产生过程解析"></a>5.1.4 异常的产生过程解析</h2><p>&emsp;&emsp;先运行下面的程序，程序会产生一个数组索引越界异常<code>ArrayIndexOfBoundsException</code>。以下通过图解来解析异常产生的过程。</p><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTools</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对给定的数组通过给定的角标获取元素。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getElement</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> element = arr[index];</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123; <span class="number">34</span>, <span class="number">12</span>, <span class="number">67</span> &#125;;</span><br><span class="line">        intnum = ArrayTools.getElement(arr, <span class="number">4</span>)</span><br><span class="line">            System.out.println(<span class="string">"num="</span> + num);</span><br><span class="line">        System.out.println(<span class="string">"over"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序执行过程图解：</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/TrtMH1EX4U43.png!blogy" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第四章 3.模拟斗地主洗牌发牌</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/04_3%20%E6%A8%A1%E6%8B%9F%E6%96%97%E5%9C%B0%E4%B8%BB%E6%B4%97%E7%89%8C%E5%8F%91%E7%89%8C.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/04_3%20%E6%A8%A1%E6%8B%9F%E6%96%97%E5%9C%B0%E4%B8%BB%E6%B4%97%E7%89%8C%E5%8F%91%E7%89%8C.html</url>
      
        <content type="html"><![CDATA[<h1 id="4-3-模拟斗地主洗牌发牌"><a href="#4-3-模拟斗地主洗牌发牌" class="headerlink" title="4.3 模拟斗地主洗牌发牌"></a>4.3 模拟斗地主洗牌发牌</h1><h2 id="4-3-1-案例介绍"><a href="#4-3-1-案例介绍" class="headerlink" title="4.3.1 案例介绍"></a>4.3.1 案例介绍</h2><p>按照斗地主的规则，完成洗牌发牌的动作。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/474dVULiLRES.png!blogy" alt=""></p><p><strong>具体规则：</strong></p><ol><li>组装54张扑克牌将</li><li>54张牌顺序打乱</li><li>三个玩家参与游戏，三人交替摸牌，每人17张牌，最后三张留作底牌。</li><li>查看三人各自手中的牌（按照牌的大小排序）、底牌</li></ol><blockquote><p> 规则：手中扑克牌从大到小的摆放顺序：大王,小王,2,A,K,Q,J,10,9,8,7,6,5,4,3</p></blockquote><h2 id="4-3-2-案例需求分析"><a href="#4-3-2-案例需求分析" class="headerlink" title="4.3.2 案例需求分析"></a>4.3.2 案例需求分析</h2><ol><li><p>准备牌：</p><p>完成数字与纸牌的映射关系：</p><p>使用双列Map(HashMap)集合，完成一个数字与字符串纸牌的对应关系(相当于一个字典)。</p></li><li><p>洗牌：</p><p>通过数字完成洗牌发牌</p></li><li><p>发牌：</p><p> 将每个人以及底牌设计为ArrayList,将最后3张牌直接存放于底牌，剩余牌通过对3取模依次发牌。</p><p> 存放的过程中要求数字大小与斗地主规则的大小对应。</p><p> 将代表不同纸牌的数字分配给不同的玩家与底牌。</p></li><li><p>看牌：</p><p>通过Map集合找到对应字符展示。</p><p>通过查询纸牌与数字的对应关系，由数字转成纸牌字符串再进行展示。</p></li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190824/d3mTmx65X7Om.png!blog" alt=""></p><h2 id="4-3-3-实现代码步骤"><a href="#4-3-3-实现代码步骤" class="headerlink" title="4.3.3 实现代码步骤"></a>4.3.3 实现代码步骤</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 1组装54张扑克牌</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// 1.1 创建Map集合存储</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; pokerMap = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line">        <span class="comment">// 1.2 创建 花色集合 与 数字集合</span></span><br><span class="line">        ArrayList&lt;String&gt; colors = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; numbers = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">// 1.3 存储 花色 与数字</span></span><br><span class="line">        Collections.addAll(colors, <span class="string">"♦"</span>, <span class="string">"♣"</span>, <span class="string">"♥"</span>, <span class="string">"♠"</span>);</span><br><span class="line">        Collections.addAll(numbers, <span class="string">"2"</span>, <span class="string">"A"</span>, <span class="string">"K"</span>, <span class="string">"Q"</span>, <span class="string">"J"</span>, <span class="string">"10"</span>, <span class="string">"9"</span>, <span class="string">"8"</span>, <span class="string">"7"</span>, <span class="string">"6"</span>, <span class="string">"5"</span>, <span class="string">"4"</span>,</span><br><span class="line">                           <span class="string">"3"</span>);</span><br><span class="line">        <span class="comment">// 设置 存储编号变量</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        pokerMap.put(count++, <span class="string">"大王"</span>);</span><br><span class="line">        pokerMap.put(count++, <span class="string">"小王"</span>);</span><br><span class="line">        <span class="comment">// 1.4 创建牌 存储到map集合中</span></span><br><span class="line">        <span class="keyword">for</span> (String number : numbers) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">                String card = color + number;</span><br><span class="line">                pokerMap.put(count++, card);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 2 将54张牌顺序打乱</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// 取出编号 集合</span></span><br><span class="line">        Set&lt;Integer&gt; numberSet = pokerMap.keySet();</span><br><span class="line">        <span class="comment">// 因为要将编号打乱顺序 所以 应该先进行转换到 list集合中</span></span><br><span class="line">        ArrayList&lt;Integer&gt; numberList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        numberList.addAll(numberSet);</span><br><span class="line">        <span class="comment">// 打乱顺序</span></span><br><span class="line">        Collections.shuffle(numberList);</span><br><span class="line">        <span class="comment">// 3 完成三个玩家交替摸牌，每人17张牌，最后三张留作底牌</span></span><br><span class="line">        <span class="comment">// 3.1 发牌的编号</span></span><br><span class="line">        <span class="comment">// 创建三个玩家编号集合 和一个 底牌编号集合</span></span><br><span class="line">        ArrayList&lt;Integer&gt; noP1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; noP2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; noP3 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; dipaiNo = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">// 3.2发牌的编号</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberList.size(); i++) &#123;</span><br><span class="line">            <span class="comment">// 获取该编号</span></span><br><span class="line">            Integer no = numberList.get(i);</span><br><span class="line">            <span class="comment">// 发牌</span></span><br><span class="line">            <span class="comment">// 留出底牌</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">51</span>) &#123;</span><br><span class="line">                dipaiNo.add(no);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    noP1.add(no);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    noP2.add(no);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    noP3.add(no);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4 查看三人各自手中的牌（按照牌的大小排序）、底牌</span></span><br><span class="line">        <span class="comment">// 4.1 对手中编号进行排序</span></span><br><span class="line">        Collections.sort(noP1);</span><br><span class="line">        Collections.sort(noP2);</span><br><span class="line">        Collections.sort(noP3);</span><br><span class="line">        Collections.sort(dipaiNo);</span><br><span class="line">        <span class="comment">// 4.2 进行牌面的转换</span></span><br><span class="line">        <span class="comment">// 创建三个玩家牌面集合 以及底牌牌面集合</span></span><br><span class="line">        ArrayList&lt;String&gt; player1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player3 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; dipai = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">// 4.3转换</span></span><br><span class="line">        <span class="keyword">for</span> (Integer i : noP1) &#123;</span><br><span class="line">            <span class="comment">// 4.4 根据编号找到 牌面 pokerMap</span></span><br><span class="line">            String card = pokerMap.get(i);</span><br><span class="line">            <span class="comment">// 添加到对应的 牌面集合中</span></span><br><span class="line">            player1.add(card);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer i : noP2) &#123;</span><br><span class="line">            String card = pokerMap.get(i);</span><br><span class="line">            player2.add(card);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer i : noP3) &#123;</span><br><span class="line">            String card = pokerMap.get(i);</span><br><span class="line">            player3.add(card);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer i : dipaiNo) &#123;</span><br><span class="line">            String card = pokerMap.get(i);</span><br><span class="line">            dipai.add(card);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.5 查看</span></span><br><span class="line">        System.out.println(<span class="string">"令狐冲："</span>+player1);</span><br><span class="line">        System.out.println(<span class="string">"石破天："</span>+player2);</span><br><span class="line">        System.out.println(<span class="string">"鸠摩智："</span>+player3);</span><br><span class="line">        System.out.println(<span class="string">"底牌："</span>+dipai);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第四章 2补充知识点</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/04_2%20%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86%E7%82%B9.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/04_2%20%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86%E7%82%B9.html</url>
      
        <content type="html"><![CDATA[<h1 id="4-2-补充知识点"><a href="#4-2-补充知识点" class="headerlink" title="4.2 补充知识点"></a>4.2 补充知识点</h1><h2 id="4-2-1-JDK9对集合添加的优化"><a href="#4-2-1-JDK9对集合添加的优化" class="headerlink" title="4.2.1 JDK9对集合添加的优化"></a>4.2.1 JDK9对集合添加的优化</h2><p>&emsp;&emsp;通常，我们在代码中创建一个集合（例如，<code>List</code>或<code>Set</code>），并直接用一些元素填充它。 实例化集合，几个<code>add</code>方法调用，使得代码重复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"abc"</span>);</span><br><span class="line">        list.add(<span class="string">"def"</span>);</span><br><span class="line">        list.add(<span class="string">"ghi"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;Java 9，添加了几种集合工厂方法,更方便创建少量元素的集合、map实例。新的List、Set、Map的静态工厂方法可以更方便地创建集合的不可变实例。</p><p><strong>例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJDK9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; str1=Set.of(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);</span><br><span class="line">        <span class="comment">//str1.add("c");这里编译的时候不会错，但是执行的时候会报错，因为是不可变的集合</span></span><br><span class="line">        System.out.println(str1);</span><br><span class="line">        Map&lt;String,Integer&gt; str2=Map.of(<span class="string">"a"</span>,<span class="number">1</span>,<span class="string">"b"</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        List&lt;String&gt; str3=List.of(<span class="string">"a"</span>,<span class="string">"b"</span>);</span><br><span class="line">        System.out.println(str3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意以下两点：</p><blockquote><p>&emsp;&emsp;<code>of()</code>方法只是 <em>Map</em> ， <em>List</em> ， <em>Set</em> 这三个接口的静态方法，其父类接口和子类实现并没有这类方法，比如<code>HashSet</code>，<code>ArrayList</code>等待；<br>&emsp;&emsp;返回的集合是不可变的；</p></blockquote><h2 id="4-2-2-Debug追踪"><a href="#4-2-2-Debug追踪" class="headerlink" title="4.2.2 Debug追踪"></a>4.2.2 Debug追踪</h2><p><strong>使用IDEA的断点调试功能，查看程序的运行过程</strong></p><ol><li><p>在有效代码行，点击行号右边的空白区域，设置断点，程序执行到断点将停止，我们可以手动来运行程序</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/LQuAAhKxPr3u.png!blog" alt=""></p></li><li><p>点击Debug运行模式</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/1wF4srVzHABX.png!blog" alt=""></p></li><li><p>程序停止在断点上不再执行，而IDEA最下方打开了Debug调试窗口</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/HRWYSN1KMMfr.png!blogy" alt=""></p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/9tsjYd6bBSV7.png!blog" alt=""></p></li><li><p>Debug调试窗口介绍</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/ytlgJXlfyS9e.png!blog" alt=""></p></li><li><p>快捷键F8，代码向下执行一行,第九行执行完毕，执行到第10行（第10行还未执行）</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/zdSEHgQnCt4d.png!blog" alt=""></p></li><li><p>切换到控制台面板，控制台显示 请录入一个字符串： 并且等待键盘录入</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/00DuGa8ca4hT.png!blog" alt=""></p></li><li><p>快捷键F8，程序继续向后执行，执行键盘录入操作，在控制台录入数据 ababcea</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/y457HIu2NqVV.png!blog" alt=""></p><p> 回车之后效果：</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/uLDclCCqqpwx.png!blog" alt=""></p><p> 调试界面效果：</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/vJxOzINYmoBG.png!blog" alt=""></p></li><li><p>此时到达findChar方法，快捷键F7，进入方法findChar</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/9NvkjBkFXYQn.png!blog" alt=""></p></li><li><p>快捷键F8 接续执行，创建了map对象，变量区域显示</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/JIWOyWsk1qb6.png!blog" alt=""></p></li><li><p>快捷键F8 接续执行，进入到循环中，循环变量i为 0,F8再继续执行，就获取到变量c赋值为字符‘a’ 字节值97</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/zl1P9PeSV1wM.png!blog" alt=""></p></li><li><p>快捷键F8 接续执行，进入到判断语句中，因为该字符 不在Map集合键集中，再按F8执行，进入该判断中.</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/eOJf4zXx4QcI.png!blog" alt=""></p></li><li><p>快捷键F8 接续执行，循环结束，进入下次循环，此时map中已经添加一对儿元素</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/7Ma5mDANGQ9r.png!blog" alt=""></p></li><li><p>快捷键F8 接续执行，进入下次循环，再继续上面的操作，我们就可以看到代码每次是如何执行的了</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/RLJ201qHExce.png!blog" alt=""></p></li><li><p>如果不想继续debug,那么可以使用快捷键F9,程序正常执行到结束，程序结果在控制台显示</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/HD4POHPnEmGn.png!blog" alt=""></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第四章 1.Map集合(二)</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/04_1_2%20Map%E9%9B%86%E5%90%88(%E4%BA%8C).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/04_1_2%20Map%E9%9B%86%E5%90%88(%E4%BA%8C).html</url>
      
        <content type="html"><![CDATA[<h1 id="4-1-Map集合"><a href="#4-1-Map集合" class="headerlink" title="4.1 Map集合"></a>4.1 Map集合</h1><h2 id="4-1-5-Entry键值对对象"><a href="#4-1-5-Entry键值对对象" class="headerlink" title="4.1.5 Entry键值对对象"></a>4.1.5 Entry键值对对象</h2><p>&emsp;&emsp;我们已经知道，<code>Map</code>中存放的是两种对象，一种称为key(键)，一种称为value(值)，它们在在<code>Map</code>中是一一对应关系，这一对对象又称做<code>Map</code>中的一个<code>Entry(项)</code>。<br>&emsp;&emsp;<code>Entry</code>将键值对的对应关系封装成了对象。即键值对对象，这样我们在遍历<code>Map</code>集合时，就可以从每一个键值对（<code>Entry</code>）对象中获取对应的键与对应的值。</p><p>&emsp;&emsp;既然Entry表示了一对键和值，那么也同样提供了获取对应键和对应值得方法：</p><ul><li><strong><code>public K getKey()</code></strong>：获取Entry对象中的键。</li><li><strong><code>public V getValue()</code></strong>：获取Entry对象中的值。</li></ul><p>在Map集合中也提供了获取所有Entry对象的方法：</p><ul><li><strong><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code></strong>：获取到Map集合中所有的键值对对象的集合(Set集合)。</li></ul><h2 id="4-1-6-Map集合遍历键值对方式"><a href="#4-1-6-Map集合遍历键值对方式" class="headerlink" title="4.1.6 Map集合遍历键值对方式"></a>4.1.6 Map集合遍历键值对方式</h2><p>键值对方式：即通过集合中每个键值对(Entry)对象，获取键值对(Entry)对象中的键与值。<br>操作步骤与图解：</p><ol><li><p>获取Map集合中，所有的键值对(Entry)对象，以Set集合形式返回。方法提示:<code>entrySet()</code>。</p></li><li><p>遍历包含键值对(Entry)对象的Set集合，得到每一个键值对(Entry)对象。</p></li><li><p>通过键值对(Entry)对象，获取Entry对象中的键与值。 方法提示:<code>getkey()</code> 、<code>getValue()</code>。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Map集合对象</span></span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">        <span class="comment">// 添加元素到集合</span></span><br><span class="line">        map.put(<span class="string">"胡歌"</span>, <span class="string">"霍建华"</span>);</span><br><span class="line">        map.put(<span class="string">"郭德纲"</span>, <span class="string">"于谦"</span>);</span><br><span class="line">        map.put(<span class="string">"薛之谦"</span>, <span class="string">"大张伟"</span>);</span><br><span class="line">        <span class="comment">// 获取 所有的 entry对象 entrySet</span></span><br><span class="line">        Set&lt;Entry&lt;String,String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">        <span class="comment">// 遍历得到每一个entry对象</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : entrySet) &#123;</span><br><span class="line">            <span class="comment">// 解析</span></span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            String value = entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">"的CP是:"</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历图解：</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/mode2NrmipOb.png!blog" alt=""></p><blockquote><p>Tips：<br>&emsp;&emsp;Map集合不能直接使用迭代器或者foreach进行遍历。但是转成Set之后就可以使用了。</p></blockquote><h2 id="4-1-7-HashMap存储自定义类型键值"><a href="#4-1-7-HashMap存储自定义类型键值" class="headerlink" title="4.1.7 HashMap存储自定义类型键值"></a>4.1.7 HashMap存储自定义类型键值</h2><p>练习：每位学生（姓名，年龄）都有自己的家庭住址。那么，既然有对应关系，则将学生对象和家庭住址存储到map集合中。学生作为键, 家庭住址作为值。</p><blockquote><p>注意，学生姓名相同并且年龄相同视为同一名学生。</p></blockquote><p><strong>编写学生类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Student student = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> age == student.age &amp;&amp; Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1,创建Hashmap集合对象。</span></span><br><span class="line">        Map&lt;Student,String&gt;map = <span class="keyword">new</span> HashMap&lt;Student,String&gt;();</span><br><span class="line">        <span class="comment">//2,添加元素。</span></span><br><span class="line">        map.put(newStudent(<span class="string">"lisi"</span>,<span class="number">28</span>), <span class="string">"上海"</span>);</span><br><span class="line">        map.put(newStudent(<span class="string">"wangwu"</span>,<span class="number">22</span>), <span class="string">"北京"</span>);</span><br><span class="line">        map.put(newStudent(<span class="string">"zhaoliu"</span>,<span class="number">24</span>), <span class="string">"成都"</span>);</span><br><span class="line">        map.put(newStudent(<span class="string">"zhouqi"</span>,<span class="number">25</span>), <span class="string">"广州"</span>);</span><br><span class="line">        map.put(newStudent(<span class="string">"wangwu"</span>,<span class="number">22</span>), <span class="string">"南京"</span>);</span><br><span class="line">        <span class="comment">//3,取出元素。键找值方式</span></span><br><span class="line">        Set&lt;Student&gt;keySet = map.keySet();</span><br><span class="line">        <span class="keyword">for</span>(Student key: keySet)&#123;</span><br><span class="line">            Stringvalue = map.get(key);</span><br><span class="line">            System.out.println(key.toString()+<span class="string">"....."</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当给<code>HashMap</code>中存放自定义对象时，如果自定义对象作为key存在，这时要保证对象唯一，必须复写对象的<code>hashCode</code>和<code>equals方</code>法。</li><li>如果要保证map中存放的key和取出的顺序一致，可以使用<code>java.util.LinkedHashMap</code> 集合来存放。</li></ul><h2 id="4-1-8-LinkedHashMap"><a href="#4-1-8-LinkedHashMap" class="headerlink" title="4.1.8 LinkedHashMap"></a>4.1.8 LinkedHashMap</h2><p>&emsp;&emsp;HashMap保证成对元素唯一，并且查询速度很快，可是成对元素存放进去是没有顺序的。但是，如果要保证有序，还要速度快，怎么办呢？</p><p>&emsp;&emsp;在HashMap下面有一个子类<code>LinkedHashMap</code>，它是链表和哈希表组合的一个数据存储结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">        map.put(<span class="string">"邓超"</span>, <span class="string">"孙俪"</span>);</span><br><span class="line">        map.put(<span class="string">"李晨"</span>, <span class="string">"范冰冰"</span>);</span><br><span class="line">        map.put(<span class="string">"刘德华"</span>, <span class="string">"朱丽倩"</span>);</span><br><span class="line">        Set&lt;Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : entrySet) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">" "</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">邓超 孙俪</span><br><span class="line">李晨 范冰冰</span><br><span class="line">刘德华 朱丽倩</span><br></pre></td></tr></table></figure><h2 id="4-1-9-Map集合练习"><a href="#4-1-9-Map集合练习" class="headerlink" title="4.1.9 Map集合练习"></a>4.1.9 Map集合练习</h2><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><ul><li>计算一个字符串中每个字符出现次数。</li></ul><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><ol><li>获取一个字符串对象</li><li>创建一个Map集合，键代表字符，值代表次数。</li><li>遍历字符串得到每个字符。</li><li>判断Map中是否有该键。</li><li>如果没有，第一次出现，存储次数为1；如果有，则说明已经出现过，获取到对应的值进行++，再次存储。</li><li>打印最终结果</li></ol><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//友情提示</span></span><br><span class="line">        System.out.println(<span class="string">"请录入一个字符串:"</span>);</span><br><span class="line">        String line = <span class="keyword">new</span> Scanner(System.in).nextLine();</span><br><span class="line">        <span class="comment">// 定义 每个字符出现次数的方法</span></span><br><span class="line">        findChar(line);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findChar</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1:创建一个集合 存储 字符 以及其出现的次数</span></span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="comment">//2:遍历字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = line.charAt(i);</span><br><span class="line">            <span class="comment">//判断 该字符 是否在键集中</span></span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(c)) &#123;<span class="comment">//说明这个字符没有出现过</span></span><br><span class="line">                <span class="comment">//那就是第一次</span></span><br><span class="line">                map.put(c, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//先获取之前的次数</span></span><br><span class="line">                Integer count = map.get(c);</span><br><span class="line">                <span class="comment">//count++;</span></span><br><span class="line">                <span class="comment">//再次存入 更新</span></span><br><span class="line">                map.put(c, ++count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第四章 1.Map集合(一)</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/04_1_1%20Map%E9%9B%86%E5%90%88(%E4%B8%80).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/04_1_1%20Map%E9%9B%86%E5%90%88(%E4%B8%80).html</url>
      
        <content type="html"><![CDATA[<h1 id="4-1-Map集合"><a href="#4-1-Map集合" class="headerlink" title="4.1 Map集合"></a>4.1 Map集合</h1><h2 id="4-1-1-概述"><a href="#4-1-1-概述" class="headerlink" title="4.1.1 概述"></a>4.1.1 概述</h2><p>&emsp;&emsp;现实生活中，常会看到这样的一种集合：IP地址与主机名，身份证号与个人，系统用户名与系统用户对象等，这种一一对应的关系，就叫做映射。Java提供了专门的集合类用来存放这种对象关系的对象，即<code>java.util.Map</code>接口。</p><p>&emsp;&emsp;通过查看<code>Map</code>接口描述，发现<code>Map</code>接口下的集合与<code>Collection</code>接口下的集合，它们存储数据的形式不同，如下图。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/eXyNRyYakFhF.png!blog" alt=""></p><ul><li><strong><code>Collection</code></strong>中的集合，元素是孤立存在的（理解为单身），向集合中存储元素采用一个个元素的方式存储。</li><li><strong><code>Map</code></strong>中的集合，元素是成对存在的(理解为夫妻)。每个元素由键与值两部分组成，通过键可以找对所对应的值。</li><li><strong><code>Collection</code></strong>中的集合称为单列集合，<code>Map</code>中的集合称为双列集合。</li><li>需要注意的是，<code>Map</code>中的集合不能包含重复的键，值可以重复；每个键只能对应一个值。</li></ul><h2 id="4-1-2-Map常用子类"><a href="#4-1-2-Map常用子类" class="headerlink" title="4.1.2 Map常用子类"></a>4.1.2 Map常用子类</h2><p>&emsp;&emsp;通过查看<code>Map</code>接口描述，看到<code>Map</code>有多个子类，这里主要讲常用的<code>HashMap</code>集合、<code>LinkedHashMap</code>集合。</p><ul><li><strong>HashMap</strong>：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</li><li><strong>LinkedHashMap</strong>：HashMap下有个子类<code>LinkedHashMap</code>，存储数据采用的哈希表结构+链表结构。通过链表结构可以保证元素的存取顺序一致；通过哈希表结构可以保证的键的唯一、不重复，需要重写键的<code>hashCode()</code>方法、<code>equals()</code>方法。</li></ul><blockquote><p>Tips：<br>&emsp;&emsp;Map接口中的集合都有两个泛型变量,在使用时，要为两个泛型变量赋予数据类型。两个泛型变量的数据类型可以相同，也可以不同。</p></blockquote><h2 id="4-1-3-Map接口中的常用方法"><a href="#4-1-3-Map接口中的常用方法" class="headerlink" title="4.1.3 Map接口中的常用方法"></a>4.1.3 Map接口中的常用方法</h2><p>Map接口中定义了很多方法，常用的如下：</p><ul><li><p><strong><code>public V put(K key, V value)</code></strong>：把指定的键与指定的值添加到Map集合中。</p></li><li><p><strong><code>public V remove(Object key)</code></strong>：把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</p></li><li><p><strong><code>public V get(Object key)</code></strong>：根据指定的键，在Map集合中获取对应的值。</p></li><li><p><strong><code>public Set&lt;K&gt; keySet()</code></strong>：获取Map集合中所有的键，存储到Set集合中。</p></li><li><p><strong><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code></strong>：获取到Map集合中所有的键值对对象的集合(Set集合)。</p></li></ul><p><strong>Map接口的方法演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 map对象</span></span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        <span class="comment">//添加元素到集合</span></span><br><span class="line">        map.put(<span class="string">"黄晓明"</span>, <span class="string">"杨颖"</span>);</span><br><span class="line">        map.put(<span class="string">"文章"</span>, <span class="string">"马伊琍"</span>);</span><br><span class="line">        map.put(<span class="string">"邓超"</span>, <span class="string">"孙俪"</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">//String remove(String key)</span></span><br><span class="line">        System.out.println(map.remove(<span class="string">"邓超"</span>));</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">// 想要查看 黄晓明的媳妇 是谁</span></span><br><span class="line">        System.out.println(map.get(<span class="string">"黄晓明"</span>));</span><br><span class="line">        System.out.println(map.get(<span class="string">"邓超"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tips:<br>&emsp;&emsp;使用put方法时，若指定的键(key)在集合中没有，则没有这个键对应的值，返回null，并把指定的键值添加到集合中；<br>&emsp;&emsp;若指定的键(key)在集合中存在，则返回值为集合中键对应的值（该值为替换前的值），并把指定键所对应的值，替换成指定的新值。</p></blockquote><h2 id="4-1-4-Map集合遍历键找值方式"><a href="#4-1-4-Map集合遍历键找值方式" class="headerlink" title="4.1.4 Map集合遍历键找值方式"></a>4.1.4 Map集合遍历键找值方式</h2><p>&emsp;&emsp;<strong>键找值方式：即通过元素中的键，获取键所对应的值</strong></p><p><strong>分析步骤：</strong></p><ol><li>获取Map中所有的键，由于键是唯一的，所以返回一个Set集合存储所有的键。方法提示: keyset()</li><li>遍历键的Set集合，得到每一个键。</li><li>根据键，获取键所对应的值。方法提示: get(K key)</li></ol><p><strong>代码演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象</span></span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">        <span class="comment">//添加元素到集合</span></span><br><span class="line">        map.put(<span class="string">"胡歌"</span>, <span class="string">"霍建华"</span>);</span><br><span class="line">        map.put(<span class="string">"郭德纲"</span>, <span class="string">"于谦"</span>);</span><br><span class="line">        map.put(<span class="string">"薛之谦"</span>, <span class="string">"大张伟"</span>);</span><br><span class="line">        <span class="comment">//获取所有的键 获取键集</span></span><br><span class="line">        Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">        <span class="comment">// 遍历键集 得到 每一个键</span></span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="comment">//key 就是键</span></span><br><span class="line">            <span class="comment">//获取对应值</span></span><br><span class="line">            String value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">"的CP是："</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>遍历图解：</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190824/gzzi57Vwffiv.png!blog" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第三章 5.Collections集合工具类</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/03_5%20Collections%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/03_5%20Collections%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-5-Collections集合工具类"><a href="#3-5-Collections集合工具类" class="headerlink" title="3.5 Collections集合工具类"></a>3.5 Collections集合工具类</h1><h2 id="3-5-1-常用功能"><a href="#3-5-1-常用功能" class="headerlink" title="3.5.1 常用功能"></a>3.5.1 常用功能</h2><p><strong><code>java.utils.Collections</code></strong>是集合工具类，用来对集合进行操作。部分方法如下：</p><ul><li><p><strong><code>public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T... elements)</code></strong>：往集合中添加一些元素。</p></li><li><p><strong><code>public static void shuffle(List&lt;?&gt; list)</code></strong>：打乱集合顺序。</p></li><li><p><strong><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code></strong>：将集合中元素按照默认规则排序。</p></li><li><p><strong><code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code></strong>：将集合中元素按照指定规则排序。</p></li></ul><p><strong>代码演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">//原来写法</span></span><br><span class="line">        <span class="comment">//list.add(12);</span></span><br><span class="line">        <span class="comment">//list.add(14);</span></span><br><span class="line">        <span class="comment">//list.add(15);</span></span><br><span class="line">        <span class="comment">//list.add(1000);</span></span><br><span class="line">        <span class="comment">//采用工具类 完成 往集合中添加元素  </span></span><br><span class="line">        Collections.addAll(list, <span class="number">5</span>, <span class="number">222</span>, <span class="number">1</span>，<span class="number">2</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//排序方法 </span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">5</span>, <span class="number">222</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">222</span>]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;代码演示之后 ，发现集合按照顺序进行了排列，可是这样的顺序是采用默认的顺序，如果想要指定顺序那该怎么办呢？</p><p>&emsp;&emsp;<strong>有这样的一个方法：</strong></p><ul><li><strong><code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code></strong>：将集合中元素按照指定规则排序。</li></ul><h2 id="3-5-2-Comparator比较器"><a href="#3-5-2-Comparator比较器" class="headerlink" title="3.5.2 Comparator比较器"></a>3.5.2 Comparator比较器</h2><p>先研究这个方法</p><ul><li><strong><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code></strong>：将集合中元素按照默认规则排序。</li></ul><p>不过这次存储的是字符串类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt;  list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">"cba"</span>);</span><br><span class="line">        list.add(<span class="string">"aba"</span>);</span><br><span class="line">        list.add(<span class="string">"sba"</span>);</span><br><span class="line">        list.add(<span class="string">"nba"</span>);</span><br><span class="line">        <span class="comment">//排序方法</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[aba, cba, nba, sba]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们使用的是默认的规则完成字符串的排序，那么默认规则是怎么定义出来的呢？</p><p>&emsp;&emsp;说到排序了，简单的说就是两个对象之间比较大小，那么在JAVA中提供了两种比较实现的方式，一种是比较死板的采用<code>java.lang.Comparable</code>接口去实现，一种是灵活的当我需要做排序的时候在去选择的<code>java.util.Comparator</code>接口完成。</p><p>&emsp;&emsp;那么我们采用的<code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>这个方法完成的排序，实际上要求了被排序的类型需要实现Comparable接口完成比较的功能，在String类型上如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;String类实现了这个接口，并完成了比较规则的定义，但是这样就把这种规则写死了，那比如我想要字符串按照第一个字符降序排列，那么这样就要修改<code>String</code>的源代码，这是不可能的了，那么这个时候我们可以使用<code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code>方法灵活的完成，这个里面就涉及到了<code>Comparator</code>这个接口，位于位于<code>java.util</code>包下，排序是<code>comparator</code>能实现的功能之一,该接口代表一个比较器，比较器具有可比性！顾名思义就是做排序的，通俗地讲需要比较两个对象谁排在前谁排在后，那么比较的方法就是：</p><ul><li><p><strong><code>public int compare(String o1, String o2)</code></strong>：比较其两个参数的顺序。</p><blockquote><p>两个对象比较的结果有三种：大于，等于，小于。<br>如果要按照升序排序，<br>&emsp;&emsp;则o1 小于o2，返回（负数），相等返回0，01大于02返回（正数）<br>如果要按照降序排序<br>&emsp;&emsp;则o1 小于o2，返回（正数），相等返回0，01大于02返回（负数）</p></blockquote></li></ul><p>操作如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">"cba"</span>);</span><br><span class="line">        list.add(<span class="string">"aba"</span>);</span><br><span class="line">        list.add(<span class="string">"sba"</span>);</span><br><span class="line">        list.add(<span class="string">"nba"</span>);</span><br><span class="line">        <span class="comment">//排序方法  按照第一个单词的降序</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2.charAt(<span class="number">0</span>) - o1.charAt(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sba, nba, cba, aba]</span><br></pre></td></tr></table></figure><h2 id="3-5-3-Comparable和Comparator的区别。"><a href="#3-5-3-Comparable和Comparator的区别。" class="headerlink" title="3.5.3 Comparable和Comparator的区别。"></a>3.5.3 Comparable和Comparator的区别。</h2><p>&emsp;&emsp;<strong>Comparable</strong>：强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的<code>compareTo</code>方法被称为它的自然比较方法。只能在类中实现<code>compareTo()</code>一次，不能经常修改类的代码实现自己想要的排序。实现此接口的对象列表（和数组）可以通过<code>Collections.sort</code>（和<code>Arrays.sort</code>）进行自动排序，对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</p><p>&emsp;&emsp;<strong>Comparator</strong>：强行对某个对象进行整体排序。可以将<code>Comparator</code>传递给<code>sort</code>方法（如<code>Collections.sort</code>或<code>Arrays.sort</code>），从而允许在排序顺序上实现精确控制。还可以使用<code>Comparator</code>来控制某些数据结构（如有序<code>set</code>或有序映射）的顺序，或者为那些没有自然顺序的对象<code>collection</code>提供排序。</p><h2 id="3-5-4-练习"><a href="#3-5-4-练习" class="headerlink" title="3.5.4  练习"></a>3.5.4  练习</h2><p>创建一个学生类，存储到ArrayList集合中完成指定排序操作。</p><p>Student 初始类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">               <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">               <span class="string">", age="</span> + age +</span><br><span class="line">               <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建四个学生对象 存储到集合中</span></span><br><span class="line">        ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"rose"</span>,<span class="number">18</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"jack"</span>,<span class="number">16</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"abc"</span>,<span class="number">16</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"ace"</span>,<span class="number">17</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"mark"</span>,<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          让学生 按照年龄排序 升序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        Collections.sort(list);//要求 该list中元素类型  必须实现比较器Comparable接口</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现，当我们调用<code>Collections.sort()</code>方法的时候 程序报错了。</p><p>原因：如果想要集合中的元素完成排序，那么必须要实现比较器<code>Comparable</code>接口。</p><p>于是我们就完成了 <em>Student</em> 类的一个实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age-o.age;<span class="comment">//升序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次测试，代码就OK 了效果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student&#123;name=<span class="string">'jack'</span>, age=<span class="number">16</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'abc'</span>, age=<span class="number">16</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'mark'</span>, age=<span class="number">16</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'ace'</span>, age=<span class="number">17</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'rose'</span>, age=<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-5-扩展"><a href="#3-5-5-扩展" class="headerlink" title="3.5.5 扩展"></a>3.5.5 扩展</h2><p>&emsp;&emsp;如果在使用的时候，想要独立的定义规则去使用 可以采用<strong><code>Collections.sort(List list,Comparetor&lt;T&gt; c)</code></strong>方式，自己定义规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o2.getAge()-o1.getAge();<span class="comment">//以学生的年龄降序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student&#123;name=<span class="string">'rose'</span>, age=<span class="number">18</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'ace'</span>, age=<span class="number">17</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'jack'</span>, age=<span class="number">16</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'abc'</span>, age=<span class="number">16</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'mark'</span>, age=<span class="number">16</span>&#125;</span><br></pre></td></tr></table></figure><p>如果想要规则更多一些，可以参考下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 年龄降序</span></span><br><span class="line">                <span class="keyword">int</span> result = o2.getAge()-o1.getAge();<span class="comment">//年龄降序</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(result==<span class="number">0</span>)&#123;<span class="comment">//第一个规则判断完了 下一个规则 姓名的首字母 升序</span></span><br><span class="line">                    result = o1.getName().charAt(<span class="number">0</span>)-o2.getName().charAt(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>效果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student&#123;name=<span class="string">'rose'</span>, age=<span class="number">18</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'ace'</span>, age=<span class="number">17</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'abc'</span>, age=<span class="number">16</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'jack'</span>, age=<span class="number">16</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'mark'</span>, age=<span class="number">16</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第三章 4.Set接口</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/03_4%20Set%E6%8E%A5%E5%8F%A3.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/03_4%20Set%E6%8E%A5%E5%8F%A3.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-4-Set接口"><a href="#3-4-Set接口" class="headerlink" title="3.4 Set接口"></a>3.4 Set接口</h1><p>&emsp;&emsp;<code>java.util.Set</code>接口和<code>java.util.List</code>接口一样，同样继承自<code>Collection</code>接口，它与<code>Collection</code>接口中的方法基本一致，并没有对<code>Collection</code>接口进行功能上的扩充，只是比<code>Collection</code>接口更加严格了。与<code>List</code>接口不同的是，<code>Set</code>接口中元素无序，并且都会以某种规则保证存入的元素不出现重复。</p><p>&emsp;&emsp;<code>Set</code>集合有多个子类，这里我们介绍其中的<code>java.util.HashSet</code>、<code>java.util.LinkedHashSet</code>这两个集合。</p><blockquote><p>Tips：<br>&emsp;&emsp;Set集合取出元素的方式可以采用：迭代器、增强for。</p></blockquote><h2 id="3-4-1-HashSet集合介绍"><a href="#3-4-1-HashSet集合介绍" class="headerlink" title="3.4.1 HashSet集合介绍"></a>3.4.1 HashSet集合介绍</h2><p>&emsp;&emsp;<code>java.util.HashSet</code>是<code>Set</code>接口的一个实现类，它所存储的元素是不可重复的，并且元素都是无序的(即存取顺序不一致)。<code>java.util.HashSet</code>底层的实现其实是一个<code>java.util.HashMap</code>支持，由于我们暂时还未学习，先做了解。</p><p>&emsp;&emsp;<code>HashSet</code>是根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。保证元素唯一性的方式依赖于：<code>hashCode</code>与<code>equals</code>方法。</p><p>&emsp;&emsp;先来演示一下Set集合存储，看下现象，再进行原理的分析:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 Set集合</span></span><br><span class="line">        HashSet&lt;String&gt;  set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="keyword">new</span> String(<span class="string">"cba"</span>));</span><br><span class="line">        set.add(<span class="string">"abc"</span>);</span><br><span class="line">        set.add(<span class="string">"bac"</span>); </span><br><span class="line">        set.add(<span class="string">"cba"</span>);  </span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (String name : set) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下，说明集合中不能存储重复元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cba</span><br><span class="line">abc</span><br><span class="line">bac</span><br></pre></td></tr></table></figure><blockquote><p>Tips：<br>&emsp;&emsp;根据结果我们发现字符串”cba”只存储了一个，也就是说重复的元素set集合不存储。</p></blockquote><h2 id="3-4-2-哈希表"><a href="#3-4-2-哈希表" class="headerlink" title="3.4.2  哈希表"></a>3.4.2  哈希表</h2><p><strong>什么是哈希表呢？</strong></p><p>&emsp;&emsp;<strong>HashSet集合存储数据的结构</strong></p><p>&emsp;&emsp;在<strong>JDK1.8</strong>之前，哈希表底层采用数组+链表实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。但是当位于一个桶中的元素较多，即hash值相等的元素较多时，通过key值依次查找的效率较低。而JDK1.8中，哈希表存储采用数组+链表+红黑树实现，当链表长度超过阈值（8）时，将链表转换为红黑树，这样大大减少了查找时间。</p><p>&emsp;&emsp;简单的来说，哈希表是由数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，如下图所示。</p><p><img src="//cdn.foreversfj.com/image/blog/20200303/wd9FyyazLwsR.png!blog" alt=""></p><p>&emsp;&emsp;为了方便理解，结合一个存储流程图来说明一下：</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/tAfHmJt41zQd.png!blog" alt=""></p><p>&emsp;&emsp;总而言之，<strong>JDK1.8</strong>引入红黑树大程度优化了HashMap的性能，那么对于我们来讲保证HashSet集合元素的唯一，其实就是根据对象的hashCode和equals方法来决定的。如果我们往集合中存放自定义的对象，那么保证其唯一，就必须复写hashCode和equals方法建立属于当前对象的比较方式。</p><h2 id="3-4-3-HashSet存储自定义类型元素"><a href="#3-4-3-HashSet存储自定义类型元素" class="headerlink" title="3.4.3  HashSet存储自定义类型元素"></a>3.4.3  HashSet存储自定义类型元素</h2><p>&emsp;&emsp;给HashSet中存放自定义类型元素时，需要重写对象中的hashCode和equals方法，建立自己的比较方式，才能保证HashSet集合中的对象唯一</p><p>创建自定义Student类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Student student = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> age == student.age &amp;&amp;</span><br><span class="line">               Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象   该集合中存储 Student类型对象</span></span><br><span class="line">        HashSet&lt;Student&gt; stuSet = <span class="keyword">new</span> HashSet&lt;Student&gt;();</span><br><span class="line">        <span class="comment">//存储 </span></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(<span class="string">"于谦"</span>, <span class="number">43</span>);</span><br><span class="line">        stuSet.add(stu);</span><br><span class="line">        stuSet.add(<span class="keyword">new</span> Student(<span class="string">"郭德纲"</span>, <span class="number">44</span>));</span><br><span class="line">        stuSet.add(<span class="keyword">new</span> Student(<span class="string">"于谦"</span>, <span class="number">43</span>));</span><br><span class="line">        stuSet.add(<span class="keyword">new</span> Student(<span class="string">"郭麒麟"</span>, <span class="number">23</span>));</span><br><span class="line">        stuSet.add(stu);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Student stu2 : stuSet) &#123;</span><br><span class="line">            System.out.println(stu2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">执行结果：</span><br><span class="line">Student [name=郭德纲, age=<span class="number">44</span>]</span><br><span class="line">Student [name=于谦, age=<span class="number">43</span>]</span><br><span class="line">Student [name=郭麒麟, age=<span class="number">23</span>]</span><br></pre></td></tr></table></figure><h2 id="3-4-3-LinkedHashSet"><a href="#3-4-3-LinkedHashSet" class="headerlink" title="3.4.3 LinkedHashSet"></a>3.4.3 LinkedHashSet</h2><p>&emsp;&emsp;我们知道HashSet保证元素唯一，可是元素存放进去是没有顺序的，那么我们要保证有序，怎么办呢？</p><p>&emsp;&emsp;在HashSet下面有一个子类<code>java.util.LinkedHashSet</code>，它是链表和哈希表组合的一个数据存储结构。</p><p>演示代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashSetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;();</span><br><span class="line">        set.add(<span class="string">"bbb"</span>);</span><br><span class="line">        set.add(<span class="string">"aaa"</span>);</span><br><span class="line">        set.add(<span class="string">"abc"</span>);</span><br><span class="line">        set.add(<span class="string">"bbc"</span>);</span><br><span class="line">        Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">  bbb</span><br><span class="line">  aaa</span><br><span class="line">  abc</span><br><span class="line">  bbc</span><br></pre></td></tr></table></figure><h2 id="3-4-4-可变参数"><a href="#3-4-4-可变参数" class="headerlink" title="3.4.4 可变参数"></a>3.4.4 可变参数</h2><p>&emsp;&emsp;在<strong>JDK1.5</strong>之后，如果我们定义一个方法需要接受多个参数，并且多个参数类型一致，我们可以对其简化成如下格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型...形参名)&#123;  &#125;</span><br></pre></td></tr></table></figure><p>其实这个书写完全等价与</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型[] 形参名)&#123;  &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;只是后面这种定义，在调用时必须传递数组，而前者可以直接传递数据即可。</p><p>&emsp;&emsp;<strong>JDK1.5</strong>以后。出现了简化操作。<strong><code>...</code></strong> 用在参数上，称之为可变参数。</p><p>&emsp;&emsp;同样是代表数组，但是在调用这个带有可变参数的方法时，不用创建数组(这就是简单之处)，直接将数组中的元素作为实际参数进行传递，其实编译成的class文件，将这些元素先封装到一个数组中，在进行传递。这些动作都在编译.class文件时，自动完成了。</p><p>代码演示：    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeArgs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">62</span>, <span class="number">431</span>, <span class="number">2</span> &#125;;</span><br><span class="line">        <span class="keyword">int</span> sum = getSum(arr);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        <span class="comment">//  6  7  2 12 2121</span></span><br><span class="line">        <span class="comment">// 求 这几个元素和 6  7  2 12 2121</span></span><br><span class="line">        <span class="keyword">int</span> sum2 = getSum(<span class="number">6</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">2121</span>);</span><br><span class="line">        System.out.println(sum2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 完成数组  所有元素的求和 原始写法</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">      public static int getSum(int[] arr)&#123;</span></span><br><span class="line"><span class="comment">        int sum = 0;</span></span><br><span class="line"><span class="comment">        for(int a : arr)&#123;</span></span><br><span class="line"><span class="comment">            sum += a;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        return sum;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//可变参数写法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span>... arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a : arr) &#123;</span><br><span class="line">            sum += a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tips：<br>&emsp;&emsp;上述add方法在同一个类中，只能存在一个。因为会发生调用的不确定性<br>&emsp;&emsp;如果在方法中书写时，这个方法拥有多参数，参数中包含可变参数，可变参数一定要写在参数列表的<strong>末尾位置</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第三章 3.List的子类</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/03_3%20List%E7%9A%84%E5%AD%90%E7%B1%BB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/03_3%20List%E7%9A%84%E5%AD%90%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-3-List的子类"><a href="#3-3-List的子类" class="headerlink" title="3.3 List的子类"></a>3.3 List的子类</h1><h2 id="3-3-1-ArrayList集合"><a href="#3-3-1-ArrayList集合" class="headerlink" title="3.3.1 ArrayList集合"></a>3.3.1 ArrayList集合</h2><p>&emsp;&emsp;<code>java.util.ArrayList</code>集合数据存储的结构是数组结构。元素增删慢，查找快，由于日常开发中使用最多的功能为查询数据、遍历数据，所以<code>ArrayList</code>是最常用的集合。</p><h2 id="3-3-2-LinkedList集合"><a href="#3-3-2-LinkedList集合" class="headerlink" title="3.3.2 LinkedList集合"></a>3.3.2 LinkedList集合</h2><p><code>java.util.LinkedList</code>集合数据存储的结构是链表结构。方便元素添加、删除的集合。</p><p><code>LinkedList</code>是一个双向链表，那么双向链表是什么样子的呢，如下图：</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/JbY9c35nKwOk.png!blog" alt=""></p><p>&emsp;&emsp;实际开发中对一个集合元素的添加与删除经常涉及到首尾操作，而<code>LinkedList</code>提供了大量首尾操作的方法。这些方法我们作为了解即可：</p><ul><li><strong><code>public void addFirst(E e)</code></strong>：将指定元素插入此列表的开头。</li><li><strong><code>public void addLast(E e)</code></strong>：将指定元素添加到此列表的结尾。</li><li><strong><code>public E getFirst()</code></strong>：返回此列表的第一个元素。</li><li><strong><code>public E getLast()</code></strong>：返回此列表的最后一个元素。</li><li><strong><code>public E removeFirst()</code></strong>：移除并返回此列表的第一个元素。</li><li><strong><code>public E removeLast()</code></strong>：移除并返回此列表的最后一个元素。</li><li><strong><code>public E pop()</code></strong>：从此列表所表示的堆栈处弹出一个元素。</li><li><strong><code>public void push(E e)</code></strong>：将元素推入此列表所表示的堆栈。</li><li><strong><code>public boolean isEmpty()</code></strong>：如果列表不包含元素，则返回true。</li></ul><p>&emsp;&emsp;<code>LinkedList</code>是<code>List</code>的子类，<code>List</code>中的方法<code>LinkedList</code>都是可以使用。在开发时，<code>LinkedList</code>集合也可以作为堆栈，队列的结构使用。</p><p>方法演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; link = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        link.addFirst(<span class="string">"abc1"</span>);</span><br><span class="line">        link.addFirst(<span class="string">"abc2"</span>);</span><br><span class="line">        link.addFirst(<span class="string">"abc3"</span>);</span><br><span class="line">        System.out.println(link);</span><br><span class="line">        <span class="comment">// 获取元素</span></span><br><span class="line">        System.out.println(link.getFirst());</span><br><span class="line">        System.out.println(link.getLast());</span><br><span class="line">        <span class="comment">// 删除元素</span></span><br><span class="line">        System.out.println(link.removeFirst());</span><br><span class="line">        System.out.println(link.removeLast());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!link.isEmpty()) &#123; <span class="comment">//判断集合是否为空</span></span><br><span class="line">            System.out.println(link.pop()); <span class="comment">//弹出集合中的栈顶元素</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(link);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第三章 2.List集合</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/03_2%20List%E9%9B%86%E5%90%88.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/03_2%20List%E9%9B%86%E5%90%88.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-2-List集合"><a href="#3-2-List集合" class="headerlink" title="3.2 List集合"></a>3.2 List集合</h1><p>&emsp;&emsp;我们掌握了Collection接口的使用后，再来看看Collection接口中的子类，他们都具备那些特性呢？</p><p>&emsp;&emsp;接下来，我们一起学习Collection中的常用几个子类（<code>java.util.List</code>集合、<code>java.util.Set</code>集合）。</p><h2 id="3-2-1-List接口介绍"><a href="#3-2-1-List接口介绍" class="headerlink" title="3.2.1 List接口介绍"></a>3.2.1 List接口介绍</h2><p>&emsp;&emsp;<code>java.util.List</code>接口继承自<code>Collection</code>接口，是单列集合的一个重要分支，习惯性地会将实现了<code>List</code>接口的对象称为List集合。在List集合中允许出现重复的元素，所有的元素是以一种线性方式进行存储的，在程序中可以通过索引来访问集合中的指定元素。另外，List集合还有一个特点就是元素有序，即元素的存入顺序和取出顺序一致。</p><p>&emsp;&emsp;看完API，总结一下：</p><p>List接口特点：</p><ol><li>它是一个元素存取有序的集合。例如，存元素的顺序是11、22、33。那么集合中，元素的存储就是按照11、22、33的顺序完成的）。</li><li>它是一个带有索引的集合，通过索引就可以精确的操作集合中的元素（与数组的索引是一个道理）。</li><li>集合中可以有重复的元素，通过元素的equals方法，来比较是否为重复的元素。</li></ol><blockquote><p>Tips：<br>&emsp;&emsp;我们在基础班的时候已经学习过List接口的子类java.util.ArrayList类，该类中的方法都是来自List中定义。</p></blockquote><h2 id="3-2-2-List接口中常用方法"><a href="#3-2-2-List接口中常用方法" class="headerlink" title="3.2.2 List接口中常用方法"></a>3.2.2 List接口中常用方法</h2><p>List作为Collection集合的子接口，不但继承了Collection接口中的全部方法，而且还增加了一些根据元素索引来操作集合的特有方法，如下：</p><ul><li><strong><code>public void add(int index, E element)</code></strong>：将指定的元素，添加到该集合中的指定位置上。</li><li><strong><code>public E get(int index)</code></strong>：返回集合中指定位置的元素。</li><li><strong><code>public E remove(int index)</code></strong>：移除列表中指定位置的元素, 返回的是被移除的元素。</li><li><strong><code>public E set(int index, E element)</code></strong>：用指定元素替换集合中指定位置的元素,返回值的更新前的元素。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建List集合对象</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 往 尾部添加 指定元素</span></span><br><span class="line">        list.add(<span class="string">"图图"</span>);</span><br><span class="line">        list.add(<span class="string">"小美"</span>);</span><br><span class="line">        list.add(<span class="string">"不高兴"</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">// add(int index,String s) 往指定位置添加</span></span><br><span class="line">        list.add(<span class="number">1</span>,<span class="string">"没头脑"</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">// String remove(int index) 删除指定位置元素  返回被删除元素</span></span><br><span class="line">        <span class="comment">// 删除索引位置为2的元素 </span></span><br><span class="line">        System.out.println(<span class="string">"删除索引位置为2的元素"</span>);</span><br><span class="line">        System.out.println(list.remove(<span class="number">2</span>));</span><br><span class="line">        </span><br><span class="line">        System.out.println(list);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// String set(int index,String s)</span></span><br><span class="line">        <span class="comment">// 在指定位置 进行 元素替代（改） </span></span><br><span class="line">        <span class="comment">// 修改指定位置元素</span></span><br><span class="line">        list.set(<span class="number">0</span>, <span class="string">"三毛"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// String get(int index)  获取指定位置元素</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 跟size() 方法一起用  来 遍历的 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//还可以使用增强for</span></span><br><span class="line">        <span class="keyword">for</span> (String string : list) &#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第三章 1.数据结构</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/03_1%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/03_1%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-1-数据结构"><a href="#3-1-数据结构" class="headerlink" title="3.1 数据结构"></a>3.1 数据结构</h1><h2 id="3-1-1-数据结构有什么用？"><a href="#3-1-1-数据结构有什么用？" class="headerlink" title="3.1.1 数据结构有什么用？"></a>3.1.1 数据结构有什么用？</h2><p>&emsp;&emsp;当你用着java里面的容器类很爽的时候，你有没有想过，怎么ArrayList就像一个无限扩充的数组，也好像链表之类的。好用吗？好用，这就是数据结构的用处，只不过你在不知不觉中使用了。</p><p>&emsp;&emsp;现实世界的存储，我们使用的工具和建模。每种数据结构有自己的优点和缺点，想想如果Google的数据用的是数组的存储，我们还能方便地查询到所需要的数据吗？而算法，在这么多的数据中如何做到最快的插入，查找，删除，也是在追求更快。</p><p>&emsp;&emsp;java是面向对象的语言，就好似自动档轿车，C语言好似手动档吉普。数据结构呢？是变速箱的工作原理。你完全可以不知道变速箱怎样工作，就把自动档的车子从 A点 开到 B点，而且未必就比懂得的人慢。写程序这件事，和开车一样，经验可以起到很大作用，但如果你不知道底层是怎么工作的，就永远只能开车，既不会修车，也不能造车。当然了，数据结构内容比较多，细细的学起来也是相对费功夫的，不可能达到一蹴而就。我们将常见的数据结构：堆栈、队列、数组、链表和红黑树 这几种给大家介绍一下，作为数据结构的入门，了解一下它们的特点即可。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/9PBQOhbEmRNs.jpg!blog" alt=""></p><h2 id="3-1-2-常见的数据结构"><a href="#3-1-2-常见的数据结构" class="headerlink" title="3.1.2 常见的数据结构"></a>3.1.2 常见的数据结构</h2><p>&emsp;&emsp;数据存储的常用结构有：栈、队列、数组、链表和红黑树。</p><h3 id="3-1-2-1-栈"><a href="#3-1-2-1-栈" class="headerlink" title="3.1.2.1 栈"></a>3.1.2.1 栈</h3><ul><li><strong>栈</strong>：<code>stack</code>，又称堆栈，它是运算受限的线性表，其限制是仅允许在标的一端进行插入和删除操作，不允许在其他任何位置进行添加、查找、删除等操作。</li></ul><p>&emsp;&emsp;简单的说：采用该结构的集合，对元素的存取有如下的特点</p><ul><li><p><strong>先进后出</strong>（即，存进去的元素，要在后它后面的元素依次取出后，才能取出该元素）。例如，子弹压进弹夹，先压进去的子弹在下面，后压进去的子弹在上面，当开枪时，先弹出上面的子弹，然后才能弹出下面的子弹。</p></li><li><p>栈的入口、出口的都是栈的顶端位置。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/Y6WzJnm2HItz.png!blog" alt=""></p></li></ul><p>这里两个名词需要注意：</p><ul><li><strong>压栈</strong>：就是存元素。即，把元素存储到栈的顶端位置，栈中已有元素依次向栈底方向移动一个位置。</li><li><strong>弹栈</strong>：就是取元素。即，把栈的顶端位置元素取出，栈中已有元素依次向栈顶方向移动一个位置。</li></ul><h3 id="3-1-2-2-队列"><a href="#3-1-2-2-队列" class="headerlink" title="3.1.2.2 队列"></a>3.1.2.2 队列</h3><ul><li><strong>队列</strong>：<code>queue</code>,简称队，它同堆栈一样，也是一种运算受限的线性表，其限制是仅允许在表的一端进行插入，而在表的另一端进行删除。</li></ul><p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p><ul><li><strong>先进先出</strong>（即，存进去的元素，要在后它前面的元素依次取出后，才能取出该元素）。例如，小火车过山洞，车头先进去，车尾后进去；车头先出来，车尾后出来。</li><li>队列的入口、出口各占一侧。例如，下图中的左侧为入口，右侧为出口。</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190824/aoVDkH2gd0GN.bmp" alt=""></p><h3 id="3-1-2-3-数组"><a href="#3-1-2-3-数组" class="headerlink" title="3.1.2.3 数组"></a>3.1.2.3 数组</h3><ul><li><strong>数组</strong>:<code>Array</code>,是有序的元素序列，数组是在内存中开辟一段连续的空间，并在此空间存放元素。就像是一排出租屋，有100个房间，从001到100每个房间都有固定编号，通过编号就可以快速找到租房子的人。</li></ul><p>简单的说,采用该结构的集合，对元素的存取有如下的特点：</p><ul><li><p>查找元素快：通过索引，可以快速访问指定位置的元素</p><p> <img src="//cdn.foreversfj.com/image/blog/20190824/5n18wvDm2hfu.png!blog" alt=""></p></li><li><p>增删元素慢</p><ul><li><strong>指定索引位置增加元素</strong>：需要创建一个新数组，将指定新元素存储在指定索引位置，再把原数组元素根据索引，复制到新数组对应索引的位置。如下图<img src="img/%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0.png!blog" alt=""></li><li><strong>指定索引位置删除元素：</strong>需要创建一个新数组，把原数组元素根据索引，复制到新数组对应索引的位置，原数组中指定索引位置元素不复制到新数组中。如下图<img src="img/%E6%95%B0%E7%BB%84%E5%88%A0%E9%99%A4.png!blog" alt=""></li></ul></li></ul><h3 id="3-1-2-4-链表"><a href="#3-1-2-4-链表" class="headerlink" title="3.1.2.4 链表"></a>3.1.2.4 链表</h3><ul><li><strong>链表</strong>:<code>linked list</code>,由一系列结点node（链表中每一个元素称为结点）组成，结点可以在运行时i动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。我们常说的链表结构有<strong>单向链表与双向链表。</strong></li></ul><h4 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h4><p><img src="//cdn.foreversfj.com/image/blog/20190824/sGPOSwhpKYVf.png!blog" alt=""></p><p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p><ul><li><p>多个结点之间，通过地址进行连接。例如，多个人手拉手，每个人使用自己的右手拉住下个人的左手，依次类推，这样多个人就连在一起了。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/5cD8rWFejCNa.png!blog" alt=""></p></li><li><p>查找元素慢：想查找某个元素，需要通过连接的节点，依次向后查找指定元素</p></li><li><p>增删元素快：</p><ul><li><p>增加元素：只需要修改连接下个元素的地址即可。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/uk6yvucAlJFY.png!blog" alt=""></p></li><li><p>删除元素：只需要修改连接下个元素的地址即可。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/S2XQmaarJeIj.bmp!blog" alt=""></p></li></ul></li></ul><h3 id="3-1-2-5-红黑树"><a href="#3-1-2-5-红黑树" class="headerlink" title="3.1.2.5 红黑树"></a>3.1.2.5 红黑树</h3><ul><li><strong>二叉树</strong>：<code>binary tree</code>,是每个结点不超过2的有序<strong>树（tree）</strong> 。</li></ul><p>简单的理解，就是一种类似于我们生活中树的结构，只不过每个结点上都最多只能有两个子结点。</p><p>二叉树是每个节点最多有两个子树的树结构。顶上的叫根结点，两边被称作“左子树”和“右子树”。</p><p>如图：</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/BP50T241zhCe.bmp!blog" alt=""></p><p>&emsp;&emsp;我们要说的是二叉树的一种比较有意思的叫做<strong>红黑树</strong>，红黑树本身就是一颗二叉查找树，将节点插入后，该树仍然是一颗二叉查找树。也就意味着，树的键值仍然是有序的。</p><p>红黑树的约束:</p><ol><li>节点可以是红色的或者黑色的</li></ol><ol start="2"><li>根节点是黑色的</li></ol><ol start="3"><li>叶子节点(特指空节点)是黑色的</li><li>每个红色节点的子节点都是黑色的</li><li>任何一个节点到其每一个叶子节点的所有路径上黑色节点数相同</li></ol><p>红黑树的特点:<br>&emsp;&emsp;<em>速度特别快，趋近平衡树，查找叶子元素最少和最多次数不多于二倍</em></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第二章 4.集合的综合案例</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/02_4%20%E9%9B%86%E5%90%88%E7%9A%84%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/02_4%20%E9%9B%86%E5%90%88%E7%9A%84%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-4-集合的综合案例"><a href="#2-4-集合的综合案例" class="headerlink" title="2.4 集合的综合案例"></a>2.4 集合的综合案例</h1><h2 id="2-4-1-案例介绍"><a href="#2-4-1-案例介绍" class="headerlink" title="2.4.1 案例介绍"></a>2.4.1 案例介绍</h2><p>按照斗地主的规则，完成洗牌发牌的动作。</p><ul><li><p>具体规则：</p><blockquote><p>使用54张牌打乱顺序,三个玩家参与游戏，三人交替摸牌，每人17张牌，最后三张留作底牌。</p></blockquote></li></ul><h2 id="2-4-2-案例分析"><a href="#2-4-2-案例分析" class="headerlink" title="2.4.2 案例分析"></a>2.4.2 案例分析</h2><ul><li><strong>准备牌：</strong></li></ul><p>&emsp;&emsp;牌可以设计为一个<code>ArrayList&lt;String&gt;</code>,每个字符串为一张牌。<br>&emsp;&emsp;每张牌由花色数字两部分组成，我们可以使用花色集合与数字集合嵌套迭代完成每张牌的组装。<br>&emsp;&emsp;牌由Collections类的shuffle方法进行随机排序。</p><ul><li><strong>发牌</strong></li></ul><p>&emsp;&emsp;将每个人以及底牌设计为<code>ArrayList&lt;String&gt;</code>,将最后3张牌直接存放于底牌，剩余牌通过对3取模依次发牌。</p><ul><li><strong>看牌</strong></li></ul><p>&emsp;&emsp;直接打印每个集合。</p><h2 id="2-4-3-代码实现"><a href="#2-4-3-代码实现" class="headerlink" title="2.4.3 代码实现"></a>2.4.3 代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 1: 准备牌操作</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//1.1 创建牌盒 将来存储牌面的 </span></span><br><span class="line">        ArrayList&lt;String&gt; pokerBox = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//1.2 创建花色集合</span></span><br><span class="line">        ArrayList&lt;String&gt; colors = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.3 创建数字集合</span></span><br><span class="line">        ArrayList&lt;String&gt; numbers = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.4 分别给花色 以及 数字集合添加元素</span></span><br><span class="line">        colors.add(<span class="string">"♥"</span>);</span><br><span class="line">        colors.add(<span class="string">"♦"</span>);</span><br><span class="line">        colors.add(<span class="string">"♠"</span>);</span><br><span class="line">        colors.add(<span class="string">"♣"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            numbers.add(i+<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        numbers.add(<span class="string">"J"</span>);</span><br><span class="line">        numbers.add(<span class="string">"Q"</span>);</span><br><span class="line">        numbers.add(<span class="string">"K"</span>);</span><br><span class="line">        numbers.add(<span class="string">"A"</span>);</span><br><span class="line">        <span class="comment">//1.5 创造牌  拼接牌操作</span></span><br><span class="line">        <span class="comment">// 拿出每一个花色  然后跟每一个数字 进行结合  存储到牌盒中</span></span><br><span class="line">        <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">            <span class="comment">//color每一个花色 </span></span><br><span class="line">            <span class="comment">//遍历数字集合</span></span><br><span class="line">            <span class="keyword">for</span>(String number : numbers)&#123;</span><br><span class="line">                <span class="comment">//结合</span></span><br><span class="line">                String card = color+number;</span><br><span class="line">                <span class="comment">//存储到牌盒中</span></span><br><span class="line">                pokerBox.add(card);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.6大王小王</span></span><br><span class="line">        pokerBox.add(<span class="string">"小☺"</span>);</span><br><span class="line">        pokerBox.add(<span class="string">"大☠"</span>);      </span><br><span class="line">        <span class="comment">// System.out.println(pokerBox);</span></span><br><span class="line">        <span class="comment">//洗牌 是不是就是将  牌盒中 牌的索引打乱 </span></span><br><span class="line">        <span class="comment">// Collections类  工具类  都是 静态方法</span></span><br><span class="line">        <span class="comment">// shuffer方法   </span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * static void shuffle(List&lt;?&gt; list) </span></span><br><span class="line"><span class="comment">         *     使用默认随机源对指定列表进行置换。 </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//2:洗牌</span></span><br><span class="line">        Collections.shuffle(pokerBox);</span><br><span class="line">        <span class="comment">//3 发牌</span></span><br><span class="line">        <span class="comment">//3.1 创建 三个 玩家集合  创建一个底牌集合</span></span><br><span class="line">        ArrayList&lt;String&gt; player1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player3 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; dipai = <span class="keyword">new</span> ArrayList&lt;String&gt;();      </span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历 牌盒  必须知道索引   </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;pokerBox.size();i++)&#123;</span><br><span class="line">            <span class="comment">//获取 牌面</span></span><br><span class="line">            String card = pokerBox.get(i);</span><br><span class="line">            <span class="comment">//留出三张底牌 存到 底牌集合中</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">51</span>)&#123;<span class="comment">//存到底牌集合中</span></span><br><span class="line">                dipai.add(card);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//玩家1   %3  ==0</span></span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                      player1.add(card);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">1</span>)&#123;<span class="comment">//玩家2</span></span><br><span class="line">                      player2.add(card);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;<span class="comment">//玩家3</span></span><br><span class="line">                      player3.add(card);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//看看</span></span><br><span class="line">        System.out.println(<span class="string">"令狐冲："</span>+player1);</span><br><span class="line">        System.out.println(<span class="string">"田伯光："</span>+player2);</span><br><span class="line">        System.out.println(<span class="string">"绿竹翁："</span>+player3);</span><br><span class="line">        System.out.println(<span class="string">"底牌："</span>+dipai);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第二章 3.泛型</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/02_3%20%E6%B3%9B%E5%9E%8B.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/02_3%20%E6%B3%9B%E5%9E%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-3-泛型"><a href="#2-3-泛型" class="headerlink" title="2.3 泛型"></a>2.3 泛型</h1><h2 id="2-3-1-泛型概述"><a href="#2-3-1-泛型概述" class="headerlink" title="2.3.1  泛型概述"></a>2.3.1  泛型概述</h2><p>&emsp;&emsp;在学习集合时，已经知道集合中是可以存放任意对象的，只要把对象存储集合后，那么这时他们都会被提升成Object类型。当取出每一个对象，并且进行相应的操作，必须采用类型转换。</p><p>观察下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="string">"abc"</span>);</span><br><span class="line">        coll.add(<span class="string">"itcast"</span>);</span><br><span class="line">        coll.add(<span class="number">5</span>);<span class="comment">//由于集合没有做任何限定，任何类型都可以给其中存放</span></span><br><span class="line">        Iterator it = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="comment">//需要打印每个字符串的长度,就要把迭代出来的对象转成String类型</span></span><br><span class="line">            String str = (String) it.next();</span><br><span class="line">            System.out.println(str.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;程序在运行时<strong>发生了问题</strong><code>java.lang.ClassCastException</code>。为什么会发生类型转换异常呢？</p><p>&emsp;&emsp;<strong>分析：</strong>由于集合中什么类型的元素都可以存储。导致取出时强转引发运行时 <code>ClassCastException</code>。     </p><p><strong>怎么来解决这个问题呢？</strong></p><p>&emsp;&emsp;Collection虽然可以存储各种对象，但实际上通常Collection只存储同一类型对象。例如都是存储字符串对象。因此在<code>JDK5</code>之后，新增了<strong>泛型</strong>(<strong>Generic</strong>)语法，在设计<code>API</code>时可以指定类或方法支持泛型，这样使用<code>API</code>的时候也变得更为简洁，并得到了编译时期的语法检查。</p><ul><li><strong>泛型</strong>：可以在类或方法中预支地使用未知的类型。</li></ul><blockquote><p>Tips：<br>&emsp;&emsp;一般在创建对象时，将未知的类型确定具体的类型。当没有指定泛型时，默认类型为Object类型。</p></blockquote><h2 id="2-3-2-使用泛型的好处"><a href="#2-3-2-使用泛型的好处" class="headerlink" title="2.3.2  使用泛型的好处"></a>2.3.2  使用泛型的好处</h2><ul><li>将运行时期的<code>ClassCastException</code>，转移到了编译时期变成了编译失败。</li><li>避免了类型强转的麻烦。</li></ul><p>通过我们如下代码体验一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">"abc"</span>);</span><br><span class="line">        list.add(<span class="string">"itcast"</span>);</span><br><span class="line">        <span class="comment">// list.add(5);//当集合明确类型后，存放类型不一致就会编译报错</span></span><br><span class="line">        <span class="comment">// 集合已经明确具体存放的元素类型，那么在使用迭代器的时候，迭代器也同样会知道具体遍历元素类型</span></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            String str = it.next();</span><br><span class="line">            <span class="comment">//当使用Iterator&lt;String&gt;控制元素类型后，就不需要强转了。获取到的元素直接就是String类型</span></span><br><span class="line">            System.out.println(str.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tips：<br>&emsp;&emsp;泛型是数据类型的一部分，我们将类名与泛型合并一起看做数据类型。</p></blockquote><h2 id="2-3-3-泛型的定义与使用"><a href="#2-3-3-泛型的定义与使用" class="headerlink" title="2.3.3  泛型的定义与使用"></a>2.3.3  泛型的定义与使用</h2><p>&emsp;&emsp;我们在集合中会大量使用到泛型，这里来完整地学习泛型知识。</p><p>&emsp;&emsp;泛型，用来灵活地将数据类型应用到不同的类、方法、接口当中。将数据类型作为参数进行传递。</p><h3 id="2-3-3-1-定义和使用含有泛型的类"><a href="#2-3-3-1-定义和使用含有泛型的类" class="headerlink" title="2.3.3.1 定义和使用含有泛型的类"></a>2.3.3.1 定义和使用含有泛型的类</h3><p>定义格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 class 类名&lt;代表泛型的变量&gt; &#123;  &#125;</span><br></pre></td></tr></table></figure><p>例如，API中的ArrayList集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt;</span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123; &#125;</span><br><span class="line">       ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用泛型： 即什么时候确定泛型。</p><p><strong>在创建对象的时候确定泛型</strong></p><p> 例如，<code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</code></p><p>此时，变量E的值就是String类型,那么我们的类型就可以理解为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">String</span>&gt;</span>&#123; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(String e)</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;  &#125;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再例如，<code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</code></p><p>此时，变量E的值就是Integer类型,那么我们的类型就可以理解为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">Integer</span>&gt; </span>&#123; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Integer e)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  &#125;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例自定义泛型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericClass</span>&lt;<span class="title">MVP</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//没有MVP类型，在这里代表 未知的一种数据类型 未来传递什么就是什么类型</span></span><br><span class="line">    <span class="keyword">private</span> MVP mvp;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMVP</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mvp = mvp;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> MVP <span class="title">getMVP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mvp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClassDemo</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;         </span><br><span class="line">         <span class="comment">// 创建一个泛型为String的类</span></span><br><span class="line">         MyGenericClass&lt;String&gt; my = <span class="keyword">new</span> MyGenericClass&lt;String&gt;();        </span><br><span class="line">         <span class="comment">// 调用setMVP</span></span><br><span class="line">         my.setMVP(<span class="string">"大胡子登登"</span>);</span><br><span class="line">         <span class="comment">// 调用getMVP</span></span><br><span class="line">         String mvp = my.getMVP();</span><br><span class="line">         System.out.println(mvp);</span><br><span class="line">         <span class="comment">//创建一个泛型为Integer的类</span></span><br><span class="line">         MyGenericClass&lt;Integer&gt; my2 = <span class="keyword">new</span> MyGenericClass&lt;Integer&gt;(); </span><br><span class="line">         my2.setMVP(<span class="number">123</span>);         </span><br><span class="line">         Integer mvp2 = my2.getMVP();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-2-含有泛型的方法"><a href="#2-3-3-2-含有泛型的方法" class="headerlink" title="2.3.3.2 含有泛型的方法"></a>2.3.3.2 含有泛型的方法</h3><p>定义格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数)&#123;  &#125;</span><br></pre></td></tr></table></figure><p>例如，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericMethod</span> </span>&#123;      </span><br><span class="line">    <span class="keyword">public</span> &lt;MVP&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line">        System.out.println(mvp.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> &lt;MVP&gt; <span class="function">MVP <span class="title">show2</span><span class="params">(MVP mvp)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> mvp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用格式：<strong>调用方法时，确定泛型的类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethodDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        MyGenericMethod mm = <span class="keyword">new</span> MyGenericMethod();</span><br><span class="line">        <span class="comment">// 演示看方法提示</span></span><br><span class="line">        mm.show(<span class="string">"aaa"</span>);</span><br><span class="line">        mm.show(<span class="number">123</span>);</span><br><span class="line">        mm.show(<span class="number">12.45</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-3-含有泛型的接口"><a href="#2-3-3-3-含有泛型的接口" class="headerlink" title="2.3.3.3 含有泛型的接口"></a>2.3.3.3 含有泛型的接口</h3><p>定义格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 interface接口名&lt;代表泛型的变量&gt; &#123;  &#125;</span><br></pre></td></tr></table></figure><p>例如，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> E <span class="title">getE</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用格式：</p><p><strong>1、定义类时确定泛型的类型</strong></p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImp1</span> <span class="keyword">implements</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，泛型E的值就是String类型。</p><p><strong>2、始终不确定泛型的类型，直到创建对象时，确定泛型的类型</strong></p><p> 例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImp2</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 省略...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确定泛型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyImp2&lt;String&gt;  my = <span class="keyword">new</span> MyImp2&lt;String&gt;();  </span><br><span class="line">        my.add(<span class="string">"aa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-4-泛型通配符"><a href="#2-3-4-泛型通配符" class="headerlink" title="2.3.4  泛型通配符"></a>2.3.4  泛型通配符</h2><p>&emsp;&emsp;当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符<code>&lt;?&gt;</code>表示。但是一旦使用泛型的通配符后，只能使用Object类中的共性方法，集合中元素自身方法无法使用。</p><h3 id="2-3-4-1-通配符基本使用"><a href="#2-3-4-1-通配符基本使用" class="headerlink" title="2.3.4.1 通配符基本使用"></a>2.3.4.1 通配符基本使用</h3><p>&emsp;&emsp;泛型的通配符：<strong>不知道使用什么类型来接收的时候，此时可以使用<code>?</code>，<code>?</code>表示未知通配符。</strong></p><p>此时只能接受数据，不能往该集合中存储数据。</p><p>举个例子大家理解使用即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;Intger&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    getElement(list1);</span><br><span class="line">    Collection&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    getElement(list2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement</span><span class="params">(Collection&lt;?&gt; coll)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//？代表可以接收任意类型</span></span><br></pre></td></tr></table></figure><blockquote><p>Tips：</p><p>&emsp;&emsp;泛型不存在继承关系 Collection<Object> list = new ArrayList<String>();这种是错误的。</p></blockquote><h3 id="2-3-4-2-通配符高级使用——受限泛型"><a href="#2-3-4-2-通配符高级使用——受限泛型" class="headerlink" title="2.3.4.2 通配符高级使用——受限泛型"></a>2.3.4.2 通配符高级使用——受限泛型</h3><p>&emsp;&emsp;之前设置泛型的时候，实际上是可以任意设置的，只要是类就可以设置。但是在JAVA的泛型中可以指定一个泛型的<strong>上限</strong>和<strong>下限</strong>。</p><p><strong>泛型的上限</strong>：</p><ul><li><strong>格式</strong>：<code>类型名称 &lt;? extends E类 &gt; 对象名称</code></li><li><strong>意义</strong>：只能接收E类型及其子类</li></ul><p><strong>泛型的下限</strong>：</p><ul><li><strong>格式</strong>：<code>类型名称 &lt;? super E类 &gt; 对象名称</code></li><li><strong>意义</strong>：只能接收E类型及其父类型</li></ul><p>比如：现已知Object类，String 类，Number类，Integer类，其中Number是Integer的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    Collection&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    Collection&lt;Number&gt; list3 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">    Collection&lt;Object&gt; list4 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">    </span><br><span class="line">    getElement(list1);</span><br><span class="line">    getElement(list2);<span class="comment">//报错</span></span><br><span class="line">    getElement(list3);</span><br><span class="line">    getElement(list4);<span class="comment">//报错</span></span><br><span class="line">  </span><br><span class="line">    getElement2(list1);<span class="comment">//报错</span></span><br><span class="line">    getElement2(list2);<span class="comment">//报错</span></span><br><span class="line">    getElement2(list3);</span><br><span class="line">    getElement2(list4);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 泛型的上限：此时的泛型?，必须是Number类型或者Number类型的子类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement1</span><span class="params">(Collection&lt;? extends Number&gt; coll)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 泛型的下限：此时的泛型?，必须是Number类型或者Number类型的父类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement2</span><span class="params">(Collection&lt;? <span class="keyword">super</span> Number&gt; coll)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第二章 2.Iterator迭代器</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/02_2%20Iterator%E8%BF%AD%E4%BB%A3%E5%99%A8.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/02_2%20Iterator%E8%BF%AD%E4%BB%A3%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-2-Iterator迭代器"><a href="#2-2-Iterator迭代器" class="headerlink" title="2.2 Iterator迭代器"></a>2.2 Iterator迭代器</h1><h2 id="2-2-1-Iterator接口"><a href="#2-2-1-Iterator接口" class="headerlink" title="2.2.1 Iterator接口"></a>2.2.1 Iterator接口</h2><p>&emsp;&emsp;在程序开发中，经常需要遍历集合中的所有元素。针对这种需求，JDK专门提供了一个接口<code>java.util.Iterator</code>。<code>Iterator</code>接口也是Java集合中的一员，但它与<code>Collection</code>、<code>Map</code>接口有所不同，<code>Collection</code>接口与<code>Map</code>接口主要用于存储元素，而<code>Iterator</code>主要用于迭代访问（即遍历）<code>Collection</code>中的元素，因此<code>Iterator</code>对象也被称为迭代器。</p><p>&emsp;&emsp;想要遍历Collection集合，那么就要获取该集合迭代器完成迭代操作，下面介绍一下获取迭代器的方法：</p><ul><li><strong><code>public Iterator iterator()</code></strong>：获取集合对应的迭代器，用来遍历集合中的元素的。</li></ul><p>&emsp;&emsp;下面介绍一下迭代的概念：</p><ul><li><strong>迭代</strong>：即Collection集合元素的通用获取方式。在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，继续在判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</li></ul><p>&emsp;&emsp;Iterator接口的常用方法如下：</p><ul><li><strong><code>public E next()</code></strong>：返回迭代的下一个元素。</li><li><strong><code>public boolean hasNext()</code></strong>：如果仍有元素可以迭代，则返回 true。</li></ul><p>接下来通过案例学习如何使用Iterator迭代集合中元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用多态方式 创建对象</span></span><br><span class="line">    Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="comment">// 添加元素到集合</span></span><br><span class="line">    coll.add(<span class="string">"串串星人"</span>);</span><br><span class="line">    coll.add(<span class="string">"吐槽星人"</span>);</span><br><span class="line">    coll.add(<span class="string">"汪星人"</span>);</span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="comment">//使用迭代器 遍历   每个集合对象都有自己的迭代器</span></span><br><span class="line">    Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line">    <span class="comment">//  泛型指的是 迭代出 元素的数据类型</span></span><br><span class="line">    <span class="keyword">while</span>(it.hasNext())&#123; <span class="comment">//判断是否有迭代元素</span></span><br><span class="line">        String s = it.next();<span class="comment">//获取迭代出的元素</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tips：<br>&emsp;&emsp;在进行集合元素取出时，如果集合中已经没有元素了，还继续使用迭代器的<code>next</code>方法，将会发生<code>java.util.NoSuchElementException</code>没有集合元素的错误。</p></blockquote><h2 id="2-2-2-迭代器的实现原理"><a href="#2-2-2-迭代器的实现原理" class="headerlink" title="2.2.2 迭代器的实现原理"></a>2.2.2 迭代器的实现原理</h2><p>&emsp;&emsp;在之前案例已经完成了Iterator遍历集合的整个过程。当遍历集合时，首先通过调用集合的<code>iterator()</code>方法获得迭代器对象，然后使用<code>hashNext()</code>方法判断集合中是否存在下一个元素，如果存在，则调用next()方法将元素取出，否则说明已到达了集合末尾，停止遍历元素。</p><p>&emsp;&emsp;Iterator迭代器对象在遍历集合时，内部采用指针的方式来跟踪集合中的元素，为了让初学者能更好地理解迭代器的工作原理，接下来通过一个图例来演示Iterator对象迭代元素的过程：</p><p><img src="//cdn.foreversfj.com/image/blog/20190903/jdRqO2oixBg0.png!blog" alt=""></p><p>&emsp;&emsp;在调用Iterator的<code>next</code>方法之前，迭代器的索引位于第一个元素之前，不指向任何元素，当第一次调用迭代器的<code>next</code>方法后，迭代器的索引会向后移动一位，指向第一个元素并将该元素返回，当再次调用<code>next</code>方法时，迭代器的索引会指向第二个元素并将该元素返回，依此类推，直到<code>hasNext</code>方法返回<code>false</code>，表示到达了集合的末尾，终止对元素的遍历。</p><h2 id="2-2-3-增强for"><a href="#2-2-3-增强for" class="headerlink" title="2.2.3 增强for"></a>2.2.3 增强for</h2><p>&emsp;&emsp;增强for循环(也称<code>for each</code>循环)是<strong>JDK1.5</strong>以后出来的一个高级for循环，专门用来遍历数组和集合的。它的内部原理其实是个Iterator迭代器，所以在遍历的过程中，不能对集合中的元素进行增删操作。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素的数据类型  变量 : Collection集合or数组)&#123; </span><br><span class="line">      <span class="comment">//写操作代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;它用于遍历Collection和数组。通常只进行遍历元素，不要在遍历的过程中对集合元素进行增删操作。</p><h3 id="练习1：遍历数组"><a href="#练习1：遍历数组" class="headerlink" title="练习1：遍历数组"></a>练习1：遍历数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBForDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">87</span>&#125;;</span><br><span class="line">           <span class="comment">//使用增强for遍历数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a : arr)&#123;<span class="comment">//a代表数组中的每个元素</span></span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习2-遍历集合"><a href="#练习2-遍历集合" class="headerlink" title="练习2:遍历集合"></a>练习2:遍历集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBFor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        coll.add(<span class="string">"小河神"</span>);</span><br><span class="line">        coll.add(<span class="string">"老河神"</span>);</span><br><span class="line">        coll.add(<span class="string">"神婆"</span>);</span><br><span class="line">        <span class="comment">//使用增强for遍历</span></span><br><span class="line">        <span class="keyword">for</span>(String s :coll)&#123;<span class="comment">//接收变量s代表 代表被遍历到的集合元素</span></span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tips：<br>&emsp;&emsp;新for循环必须有被遍历的目标。目标只能是Collection或者是数组。新式for仅仅作为遍历操作出现。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第二章 1.Collection集合</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/02_1%20Collection%E9%9B%86%E5%90%88.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/02_1%20Collection%E9%9B%86%E5%90%88.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-1-Collection集合"><a href="#2-1-Collection集合" class="headerlink" title="2.1 Collection集合"></a>2.1 Collection集合</h1><h2 id="2-1-1-集合概述"><a href="#2-1-1-集合概述" class="headerlink" title="2.1.1 集合概述"></a>2.1.1 集合概述</h2><p>&emsp;&emsp;在前面基础班我们已经学习过并使用过集合<code>ArrayList&lt;E&gt;</code>,那么集合到底是什么呢?</p><ul><li><strong>集合</strong>：集合是java中提供的一种容器，可以用来存储多个数据。</li></ul><p>&emsp;&emsp;集合和数组既然都是容器，它们有啥区别呢？</p><ul><li>数组的长度是固定的。集合的长度是可变的。</li><li>数组中存储的是同一类型的元素，可以存储基本数据类型值。集合存储的都是对象。而且对象的类型可以不一致。在开发中一般当对象多的时候，使用集合进行存储。</li></ul><h2 id="2-1-2-集合框架"><a href="#2-1-2-集合框架" class="headerlink" title="2.1.2  集合框架"></a>2.1.2  集合框架</h2><p>&emsp;&emsp;JAVASE提供了满足各种需求的API，在使用这些API前，先了解其继承与接口操作架构，才能了解何时采用哪个类，以及类之间如何彼此合作，从而达到灵活应用。</p><p>&emsp;&emsp;集合按照其存储结构可以分为两大类，分别是单列集合<code>java.util.Collection</code>和双列集合<code>java.util.Map</code>，今天我们主要学习<code>Collection</code>集合，在day04时讲解<code>Map</code>集合。</p><ul><li><strong>Collection</strong>：单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是<code>java.util.List</code>和<code>java.util.Set</code>。其中，<code>List</code>的特点是元素有序、元素可重复。<code>Set</code>的特点是元素无序，而且不可重复。<code>List</code>接口的主要实现类有<code>java.util.ArrayList</code>和<code>java.util.LinkedList</code>，<code>Set</code>接口的主要实现类有<code>java.util.HashSet</code>和<code>java.util.TreeSet</code>。</li></ul><p>&emsp;&emsp;从上面的描述可以看出JDK中提供了丰富的集合类库，为了便于初学者进行系统地学习，接下来通过一张图来描述整个集合类的继承体系。</p><p><img src="//cdn.foreversfj.com/image/blog/20190903/9VQodwgjaHhu.png!blog" alt=""></p><p>&emsp;&emsp;其中，橙色框里填写的都是接口类型，而蓝色框里填写的都是具体的实现类。</p><p>&emsp;&emsp;集合本身是一个工具，它存放在<code>java.util</code>包中。在<code>Collection</code>接口定义着单列集合框架中最最共性的内容。</p><p><img src="//cdn.foreversfj.com/image/blog/20200303/CKA1S6GFRAYH.png!blog" alt=""></p><h2 id="2-1-3-Collection-常用功能"><a href="#2-1-3-Collection-常用功能" class="headerlink" title="2.1.3 Collection 常用功能"></a>2.1.3 Collection 常用功能</h2><p>&emsp;&emsp;Collection是所有单列集合的父接口，因此在Collection中定义了单列集合(List和Set)通用的一些方法，这些方法可用于操作所有的单列集合。方法如下：</p><ul><li><strong><code>public boolean add(E e)</code></strong>：把给定的对象添加到当前集合中 。</li><li><strong><code>public void clear()</code></strong>：清空集合中所有的元素。</li><li><strong><code>public boolean remove(E e)</code></strong>：把给定的对象在当前集合中删除。</li><li><strong><code>public boolean contains(E e)</code></strong>：判断当前集合中是否包含给定的对象。</li><li><strong><code>public boolean isEmpty()</code></strong>：判断当前集合是否为空。</li><li><strong><code>public int size()</code></strong>：返回集合中元素的个数。</li><li><strong><code>public Object[] toArray()</code></strong>：把集合中的元素，存储到数组中。</li></ul><p>方法演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Collection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象,可以使用多态</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//Collection&lt;String&gt; coll = new HashSet&lt;&gt;();</span></span><br><span class="line">        System.out.println(coll);<span class="comment">//重写了toString方法  []</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public boolean add(E e)：  把给定的对象添加到当前集合中 。</span></span><br><span class="line"><span class="comment">            返回值是一个boolean值,一般都返回true,所以可以不用接收</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b1 = coll.add(<span class="string">"张三"</span>);</span><br><span class="line">        System.out.println(<span class="string">"b1:"</span>+b1);<span class="comment">//b1:true</span></span><br><span class="line">        System.out.println(coll);<span class="comment">//[张三]</span></span><br><span class="line">        coll.add(<span class="string">"李四"</span>);</span><br><span class="line">        coll.add(<span class="string">"李四"</span>);</span><br><span class="line">        coll.add(<span class="string">"赵六"</span>);</span><br><span class="line">        coll.add(<span class="string">"田七"</span>);</span><br><span class="line">        System.out.println(coll);<span class="comment">//[张三, 李四, 赵六, 田七]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public boolean remove(E e): 把给定的对象在当前集合中删除。</span></span><br><span class="line"><span class="comment">            返回值是一个boolean值,集合中存在元素,删除元素,返回true</span></span><br><span class="line"><span class="comment">                                集合中不存在元素,删除失败,返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b2 = coll.remove(<span class="string">"赵六"</span>);</span><br><span class="line">        System.out.println(<span class="string">"b2:"</span>+b2);<span class="comment">//b2:true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b3 = coll.remove(<span class="string">"赵四"</span>);</span><br><span class="line">        System.out.println(<span class="string">"b3:"</span>+b3);<span class="comment">//b3:false</span></span><br><span class="line">        System.out.println(coll);<span class="comment">//[张三, 李四, 田七]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public boolean contains(E e): 判断当前集合中是否包含给定的对象。</span></span><br><span class="line"><span class="comment">            包含返回true, 不包含返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b4 = coll.contains(<span class="string">"李四"</span>);</span><br><span class="line">        System.out.println(<span class="string">"b4:"</span>+b4);<span class="comment">//b4:true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b5 = coll.contains(<span class="string">"赵四"</span>);</span><br><span class="line">        System.out.println(<span class="string">"b5:"</span>+b5);<span class="comment">//b5:false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public boolean isEmpty(): 判断当前集合是否为空。 </span></span><br><span class="line"><span class="comment">        集合为空返回true,集合不为空返回false</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">boolean</span> b6 = coll.isEmpty();</span><br><span class="line">        System.out.println(<span class="string">"b6:"</span>+b6);<span class="comment">//b6:false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public int size(): 返回集合中元素的个数。</span></span><br><span class="line">        <span class="keyword">int</span> size = coll.size();</span><br><span class="line">        System.out.println(<span class="string">"size:"</span>+size);<span class="comment">//size:3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Object[] toArray(): 把集合中的元素，存储到数组中。</span></span><br><span class="line">        Object[] arr = coll.toArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public void clear() :清空集合中所有的元素。但是不删除集合,集合还存在</span></span><br><span class="line">        coll.clear();</span><br><span class="line">        System.out.println(coll);<span class="comment">//[]</span></span><br><span class="line">        System.out.println(coll.isEmpty());<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tips:<br>&emsp;&emsp;有关Collection中的方法可不止上面这些，其他方法可以自行查看API学习。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第一章 5.包装类</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/01_5%20%E5%8C%85%E8%A3%85%E7%B1%BB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/01_5%20%E5%8C%85%E8%A3%85%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-5-包装类"><a href="#1-5-包装类" class="headerlink" title="1.5 包装类"></a>1.5 包装类</h1><h2 id="1-5-1-概述"><a href="#1-5-1-概述" class="headerlink" title="1.5.1 概述"></a>1.5.1 概述</h2><p>&emsp;&emsp;Java提供了两个类型系统，基本类型与引用类型，使用基本类型在于效率，然而很多情况，会创建对象使用，因为对象可以做更多的功能，如果想要我们的基本类型像对象一样操作，就可以使用基本类型对应的包装类，如下：</p><table><thead><tr><th align="left">基本类型</th><th align="left">对应的包装类（位于java.lang包中）</th></tr></thead><tbody><tr><td align="left">byte</td><td align="left">Byte</td></tr><tr><td align="left">short</td><td align="left">Short</td></tr><tr><td align="left">int</td><td align="left"><strong>Integer</strong></td></tr><tr><td align="left">long</td><td align="left">Long</td></tr><tr><td align="left">float</td><td align="left">Float</td></tr><tr><td align="left">double</td><td align="left">Double</td></tr><tr><td align="left">char</td><td align="left"><strong>Character</strong></td></tr><tr><td align="left">boolean</td><td align="left">Boolean</td></tr></tbody></table><p><img src="//cdn.foreversfj.com/image/blog/20190824/Xpe3nFTUr14B.png!blog" alt=""></p><h2 id="1-5-2-装箱与拆箱"><a href="#1-5-2-装箱与拆箱" class="headerlink" title="1.5.2 装箱与拆箱"></a>1.5.2 装箱与拆箱</h2><p>&emsp;&emsp;基本类型与对应的包装类对象之间，来回转换的过程称为”装箱“与”拆箱“：</p><ul><li><p><strong>装箱</strong>：从基本类型转换为对应的包装类对象。</p></li><li><p><strong>拆箱</strong>：从包装类对象转换为对应的基本类型。</p></li></ul><p>用<code>Integer</code>与<code>int</code>为例：（看懂代码即可）</p><p>基本数值—-&gt;包装对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">4</span>);<span class="comment">//使用构造函数函数</span></span><br><span class="line">Integer iii = Integer.valueOf(<span class="number">4</span>);<span class="comment">//使用包装类中的valueOf方法</span></span><br></pre></td></tr></table></figure><p>包装对象—-&gt;基本数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = i.intValue();</span><br></pre></td></tr></table></figure><h2 id="1-5-3自动装箱与自动拆箱"><a href="#1-5-3自动装箱与自动拆箱" class="headerlink" title="1.5.3自动装箱与自动拆箱"></a>1.5.3自动装箱与自动拆箱</h2><p>&emsp;&emsp;由于经常要做基本类型与包装类之间的转换，从Java 5（JDK 1.5）开始，基本类型与包装类的装箱、拆箱动作可以自动完成。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">4</span>;<span class="comment">//自动装箱。相当于Integer i = Integer.valueOf(4);</span></span><br><span class="line">i = i + <span class="number">5</span>;<span class="comment">//等号右边：将i对象转成基本数值(自动拆箱) i.intValue() + 5;</span></span><br><span class="line"><span class="comment">//加法运算完成后，再次装箱，把基本数值转成对象。</span></span><br></pre></td></tr></table></figure><h2 id="1-5-3-基本类型与字符串之间的转换"><a href="#1-5-3-基本类型与字符串之间的转换" class="headerlink" title="1.5.3 基本类型与字符串之间的转换"></a>1.5.3 基本类型与字符串之间的转换</h2><h3 id="基本类型转换为String"><a href="#基本类型转换为String" class="headerlink" title="基本类型转换为String"></a>基本类型转换为String</h3><p>&emsp;&emsp;基本类型转换String总共有三种方式，查看课后资料可以得知，这里只讲最简单的一种方式： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基本类型直接与””相连接即可；如：34+&quot;&quot;</span><br></pre></td></tr></table></figure><p>String转换成对应的基本类型</p><p>&emsp;&emsp;除了Character类之外，其他所有包装类都具有parseXxx静态方法可以将字符串参数转换为对应的基本类型：</p><ul><li><p><strong><code>public static byte parseByte(String s)</code></strong>：将字符串参数转换为对应的byte基本类型。</p></li><li><p><strong><code>public static short parseShort(String s)</code></strong>：将字符串参数转换为对应的short基本类型。</p></li><li><p><strong><code>public static int parseInt(String s)</code></strong>：将字符串参数转换为对应的int基本类型。</p></li><li><p><strong><code>public static long parseLong(String s)</code></strong>：将字符串参数转换为对应的long基本类型。</p></li><li><p><strong><code>public static float parseFloat(String s)</code></strong>：将字符串参数转换为对应的float基本类型。</p></li><li><p><strong><code>public static double parseDouble(String s)</code></strong>：将字符串参数转换为对应的double基本类型。</p></li><li><p><strong><code>public static boolean parseBoolean(String s)</code></strong>：将字符串参数转换为对应的boolean基本类型。</p></li></ul><p>代码使用（仅以Integer类的静态方法parseXxx为例）如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo18WrapperParse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(<span class="string">"100"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意:<br>&emsp;&emsp;如果字符串参数的内容无法正确转换为对应的基本类型，则会抛出<br/><code>java.lang.NumberFormatException</code>异常。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第一章 4.StringBuilder类</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/01_4%20StringBuilder%E7%B1%BB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/01_4%20StringBuilder%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-4-StringBuilder类"><a href="#1-4-StringBuilder类" class="headerlink" title="1.4 StringBuilder类"></a>1.4 StringBuilder类</h1><h2 id="1-4-1-字符串拼接问题"><a href="#1-4-1-字符串拼接问题" class="headerlink" title="1.4.1 字符串拼接问题"></a>1.4.1 字符串拼接问题</h2><p>&emsp;&emsp;由于String类的对象内容不可改变，所以每当进行字符串拼接时，总是会在内存中创建一个新的对象。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"Hello"</span>;</span><br><span class="line">        s += <span class="string">"World"</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在API中对String类有这样的描述：字符串是常量，它们的值在创建后不能被更改。</p><p>&emsp;&emsp;根据这句话分析我们的代码，其实总共产生了三个字符串，即<code>&quot;Hello&quot;</code>、<code>&quot;World&quot;</code>和<code>&quot;HelloWorld&quot;</code>。引用变量s首先指向<code>Hello</code>对象，最终指向拼接出来的新字符串对象，即<code>HelloWord</code> 。</p><p><img src="//cdn.foreversfj.com/image/blog/20190825/qD9dXTRTdxk5.png!blogy" alt=""></p><p>&emsp;&emsp;由此可知，如果对字符串进行拼接操作，每次拼接，都会构建一个新的String对象，既耗时，又浪费空间。为了解决这一问题，可以使用<code>java.lang.StringBuilder</code>类。</p><h2 id="1-4-2-StringBuilder概述"><a href="#1-4-2-StringBuilder概述" class="headerlink" title="1.4.2 StringBuilder概述"></a>1.4.2 StringBuilder概述</h2><p>&emsp;&emsp;查阅<code>java.lang.StringBuilder</code>的API，StringBuilder又称为可变字符序列，它是一个类似于 String 的字符串缓冲区，通过某些方法调用可以改变该序列的长度和内容。</p><p>&emsp;&emsp;原来StringBuilder是个字符串的缓冲区，即它是一个容器，容器中可以装很多字符串。并且能够对其中的字符串进行各种操作。</p><p>&emsp;&emsp;它的内部拥有一个数组用来存放字符串内容，进行字符串拼接时，直接在数组中加入新内容。StringBuilder会自动维护数组的扩容。原理如下图所示：(默认16字符空间，超过自动扩充)</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/9driNFnxC7Kz.png!blog" alt=""></p><h2 id="1-4-3-构造方法"><a href="#1-4-3-构造方法" class="headerlink" title="1.4.3 构造方法"></a>1.4.3 构造方法</h2><p>&emsp;&emsp;根据StringBuilder的API文档，常用构造方法有2个：</p><ul><li><strong><code>public StringBuilder()</code></strong>：构造一个空的StringBuilder容器。</li><li><strong><code>public StringBuilder(String str)</code></strong>：构造一个StringBuilder容器，并将字符串添加进去。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        System.out.println(sb1); <span class="comment">// (空白)</span></span><br><span class="line">        <span class="comment">// 使用带参构造</span></span><br><span class="line">        StringBuilder sb2 = <span class="keyword">new</span> StringBuilder(<span class="string">"itcast"</span>);</span><br><span class="line">        System.out.println(sb2); <span class="comment">// itcast</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-4-常用方法"><a href="#1-4-4-常用方法" class="headerlink" title="1.4.4 常用方法"></a>1.4.4 常用方法</h2><p>&emsp;&emsp;StringBuilder常用的方法有2个：</p><ul><li><strong><code>public StringBuilder append(...)</code></strong>：添加任意类型数据的字符串形式，并返回当前对象自身。</li><li><strong><code>public String toString()</code></strong>：将当前<code>StringBuilder</code>对象转换为<code>String</code>对象。</li></ul><h3 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a>append方法</h3><p>&emsp;&emsp;<code>append</code>方法具有多种重载形式，可以接收任意类型的参数。任何数据作为参数都会将对应的字符串内容添加到<code>StringBuilder</code>中。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02StringBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//public StringBuilder append(任意类型)</span></span><br><span class="line">        StringBuilder builder2 = builder.append(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="comment">//对比一下</span></span><br><span class="line">        System.out.println(<span class="string">"builder:"</span>+builder);</span><br><span class="line">        System.out.println(<span class="string">"builder2:"</span>+builder2);</span><br><span class="line">        System.out.println(builder == builder2); <span class="comment">//true</span></span><br><span class="line">        <span class="comment">// 可以添加 任何类型</span></span><br><span class="line">        builder.append(<span class="string">"hello"</span>);</span><br><span class="line">        builder.append(<span class="string">"world"</span>);</span><br><span class="line">        builder.append(<span class="keyword">true</span>);</span><br><span class="line">        builder.append(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">// 在我们开发中，会遇到调用一个方法后，返回一个对象的情况。然后使用返回的对象继续调用方法。</span></span><br><span class="line">        <span class="comment">// 这种时候，我们就可以把代码现在一起，如append方法一样，代码如下</span></span><br><span class="line">        <span class="comment">//链式编程</span></span><br><span class="line">        builder.append(<span class="string">"hello"</span>).append(<span class="string">"world"</span>).append(<span class="keyword">true</span>).append(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">"builder:"</span>+builder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>备注：StringBuilder已经覆盖重写了Object当中的toString方法。</p></blockquote><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><p>&emsp;&emsp;通过<code>toString</code>方法，<code>StringBuilder</code>对象将会转换为不可变的<code>String</code>对象。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo16StringBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 链式创建</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"Hello"</span>).append(<span class="string">"World"</span>).append(<span class="string">"Java"</span>);</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        String str = sb.toString();</span><br><span class="line">        System.out.println(str); <span class="comment">// HelloWorldJava</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第一章 3.System类</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/01_3%20System%E7%B1%BB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/01_3%20System%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-3-System类"><a href="#1-3-System类" class="headerlink" title="1.3 System类"></a>1.3 System类</h1><p>&emsp;&emsp;<code>java.lang.System</code>类中提供了大量的静态方法，可以获取与系统相关的信息或系统级操作，在System类的API文档中，常用的方法有：</p><ul><li><p><strong><code>public static long currentTimeMillis()</code></strong>：返回以毫秒为单位的当前时间。</p></li><li><p><strong><code>public static void arraycopy(Object src, int srcPos, Object dest, int destPos,</code> <code>int length)</code></strong>：将数组中指定的数据拷贝到另一个数组中。</p></li></ul><h2 id="1-3-1-currentTimeMillis方法"><a href="#1-3-1-currentTimeMillis方法" class="headerlink" title="1.3.1 currentTimeMillis方法"></a>1.3.1 <code>currentTimeMillis</code>方法</h2><p>&emsp;&emsp;实际上，<code>currentTimeMillis</code>方法就是 获取当前系统时间与1970年01月01日00:00点之间的毫秒差值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           <span class="comment">//获取当前时间毫秒值</span></span><br><span class="line">        System.out.println(System.currentTimeMillis()); <span class="comment">// 1516090531144</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-1-1-练习"><a href="#1-3-1-1-练习" class="headerlink" title="1.3.1.1 练习"></a>1.3.1.1 练习</h3><p>验证for循环打印数字1-9999所需要使用的时间（毫秒）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"共耗时毫秒："</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-2-arraycopy方法"><a href="#1-3-2-arraycopy方法" class="headerlink" title="1.3.2 arraycopy方法"></a>1.3.2 <code>arraycopy</code>方法</h2><ul><li><strong><code>public static void arraycopy(Object src, int srcPos, Object dest, int destPos,</code><br/><code>int length)</code></strong>：将数组中指定的数据拷贝到另一个数组中。</li></ul><p>&emsp;&emsp;数组的拷贝动作是系统级的，性能很高。System.arraycopy方法具有5个参数，含义分别为：</p><table><thead><tr><th align="left">参数序号</th><th align="left">参数名称</th><th align="left">参数类型</th><th align="left">参数含义</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">src</td><td align="left">Object</td><td align="left">源数组</td></tr><tr><td align="left">2</td><td align="left">srcPos</td><td align="left">int</td><td align="left">源数组索引起始位置</td></tr><tr><td align="left">3</td><td align="left">dest</td><td align="left">Object</td><td align="left">目标数组</td></tr><tr><td align="left">4</td><td align="left">destPos</td><td align="left">int</td><td align="left">目标数组索引起始位置</td></tr><tr><td align="left">5</td><td align="left">length</td><td align="left">int</td><td align="left">复制元素个数</td></tr></tbody></table><h3 id="1-3-2-1-练习"><a href="#1-3-2-1-练习" class="headerlink" title="1.3.2.1 练习"></a>1.3.2.1 练习</h3><p>&emsp;&emsp;将<code>src</code>数组中前3个元素，复制到<code>dest</code>数组的前3个位置上复制元素前：<code>src</code>数组元素<code>[1,2,3,4,5]</code>，<code>dest</code>数组元素<code>[6,7,8,9,10]</code>复制元素后：<code>src</code>数组元素<code>[1,2,3,4,5]</code>，<code>dest</code>数组元素<code>[1,2,3,9,10]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11SystemArrayCopy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] src = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] dest = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        System.arraycopy( src, <span class="number">0</span>, dest, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">/*代码运行后：两个数组中的元素发生了变化</span></span><br><span class="line"><span class="comment">         src数组元素[1,2,3,4,5]</span></span><br><span class="line"><span class="comment">         dest数组元素[1,2,3,9,10]</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第一章 2.日期时间类</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/01_2%20%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E7%B1%BB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/01_2%20%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-2-日期时间类"><a href="#1-2-日期时间类" class="headerlink" title="1.2 日期时间类"></a>1.2 日期时间类</h1><h2 id="1-2-1-Date类"><a href="#1-2-1-Date类" class="headerlink" title="1.2.1 Date类"></a>1.2.1 Date类</h2><h3 id="1-2-1-1-概述"><a href="#1-2-1-1-概述" class="headerlink" title="1.2.1.1 概述"></a>1.2.1.1 概述</h3><p>&emsp;&emsp;<code>java.util.Date</code>类表示特定的瞬间，精确到<strong>毫秒</strong>。</p><p>&emsp;&emsp;继续查阅Date类的描述，发现Date拥有多个构造函数，只是部分已经过时，但是其中有未过时的构造函数可以把毫秒值转成日期对象。</p><ul><li><p><strong><code>public Date()</code></strong>：分配Date对象并初始化此对象，以表示分配它的时间（精确到毫秒）。</p></li><li><p><strong><code>public Date(long date)</code></strong>：分配Date对象并初始化此对象，以表示自从标准基准时间（称为“历元（epoch）”，即1970年1月1日00:00:00 GMT）以来的指定毫秒数。</p></li></ul><blockquote><p>Tips:<br>&emsp;&emsp;由于我们处于东八区，所以我们的基准时间为1970年1月1日8时0分0秒。</p></blockquote><p>&emsp;&emsp;简单来说：使用无参构造，可以自动设置当前系统时间的毫秒时刻；指定long类型的构造参数，可以自定义毫秒时刻。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Date</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建日期对象，把当前的时间</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date()); <span class="comment">// Tue Jan 16 14:37:35 CST 2018</span></span><br><span class="line">        <span class="comment">// 创建日期对象，把当前的毫秒值转成日期对象</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date(<span class="number">0L</span>)); <span class="comment">// Thu Jan 01 08:00:00 CST 1970</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tips:<br>&emsp;&emsp;在使用<code>println</code>方法时，会自动调用<code>Date</code>类中的<code>toString</code>方法。<code>Date</code>类对<code>Object</code>类中的<code>toString</code>方法进行了覆盖重写，所以结果为指定格式的字符串。</p></blockquote><h3 id="1-2-1-2-常用方法"><a href="#1-2-1-2-常用方法" class="headerlink" title="1.2.1.2 常用方法"></a>1.2.1.2 常用方法</h3><p>Date类中的多数方法已经过时，常用的方法有：</p><ul><li><strong><code>public long getTime()</code></strong>：把日期对象转换成对应的时间毫秒值。</li></ul><h2 id="1-2-2-DateFormat类"><a href="#1-2-2-DateFormat类" class="headerlink" title="1.2.2 DateFormat类"></a>1.2.2 DateFormat类</h2><p>&emsp;&emsp;<code>java.text.DateFormat</code>是日期/时间格式化子类的抽象类，我们通过这个类可以帮我们完成日期和文本之间的转换,也就是可以在<code>Date</code>对象与<code>String</code>对象之间进行来回转换。</p><ul><li><strong>格式化</strong>：按照指定的格式，从Date对象转换为String对象。</li><li><strong>解析</strong>：按照指定的格式，从String对象转换为Date对象。</li></ul><h3 id="1-2-2-1-构造方法"><a href="#1-2-2-1-构造方法" class="headerlink" title="1.2.2.1 构造方法"></a>1.2.2.1 构造方法</h3><p>&emsp;&emsp;由于<code>DateFormat</code>为抽象类，不能直接使用，所以需要常用的子类<code>java.text.SimpleDateFormat</code>。这个类需要一个模式（格式）来指定格式化或解析的标准。构造方法为：</p><ul><li><strong><code>public SimpleDateFormat(String pattern)</code></strong>：用给定的模式和默认语言环境的日期格式符号构造<code>SimpleDateFormat</code>。</li></ul><p>&emsp;&emsp;参数pattern是一个字符串，代表日期时间的自定义格式。</p><h3 id="1-2-2-2-格式规则"><a href="#1-2-2-2-格式规则" class="headerlink" title="1.2.2.2 格式规则"></a>1.2.2.2 格式规则</h3><p>常用的格式规则为：</p><table><thead><tr><th align="center">标识字母（区分大小写）</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">y</td><td align="left">年</td></tr><tr><td align="center">M</td><td align="left">月</td></tr><tr><td align="center">d</td><td align="left">日</td></tr><tr><td align="center">H</td><td align="left">时</td></tr><tr><td align="center">m</td><td align="left">分</td></tr><tr><td align="center">s</td><td align="left">秒</td></tr></tbody></table><blockquote><p>备注：更详细的格式规则，可以参考<code>SimpleDateFormat</code>类的API文档0。</p></blockquote><p>创建<code>SimpleDateFormat</code>对象的代码如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02SimpleDateFormat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对应的日期格式如：2018-01-16 15:06:38</span></span><br><span class="line">        DateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-3-常用方法"><a href="#1-2-2-3-常用方法" class="headerlink" title="1.2.2.3 常用方法"></a>1.2.2.3 常用方法</h3><p><code>DateFormat</code>类的常用方法有：</p><ul><li><strong><code>public String format(Date date)</code></strong>：将Date对象格式化为字符串。</li><li><strong><code>public Date parse(String source)</code></strong>：将字符串解析为Date对象。</li></ul><h4 id="format方法"><a href="#format方法" class="headerlink" title="format方法"></a>format方法</h4><p>使用format方法的代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 把Date对象转换成String</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03DateFormatMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">// 创建日期格式化对象,在获取格式化对象时可以指定风格</span></span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>);</span><br><span class="line">        String str = df.format(date);</span><br><span class="line">        System.out.println(str); <span class="comment">// 2008年1月23日</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="parse方法"><a href="#parse方法" class="headerlink" title="parse方法"></a>parse方法</h4><p>使用parse方法的代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 把String转换成Date对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04DateFormatMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>);</span><br><span class="line">        String str = <span class="string">"2018年12月11日"</span>;</span><br><span class="line">        Date date = df.parse(str);</span><br><span class="line">        System.out.println(date); <span class="comment">// Tue Dec 11 00:00:00 CST 2018</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-3-练习"><a href="#1-2-3-练习" class="headerlink" title="1.2.3 练习"></a>1.2.3 练习</h2><p>请使用日期时间相关的API，计算出一个人已经出生了多少天。</p><p><strong>思路：</strong></p><p>1.获取当前时间对应的毫秒值</p><p>2.获取自己出生日期对应的毫秒值</p><p>3.两个时间相减（当前时间– 出生日期）</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"请输入出生日期 格式 YYYY-MM-dd"</span>);</span><br><span class="line">    <span class="comment">// 获取出生日期,键盘输入</span></span><br><span class="line">    String birthdayString = <span class="keyword">new</span> Scanner(System.in).next();</span><br><span class="line">    <span class="comment">// 将字符串日期,转成Date对象</span></span><br><span class="line">    <span class="comment">// 创建SimpleDateFormat对象,写日期模式</span></span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    <span class="comment">// 调用方法parse,字符串转成日期对象</span></span><br><span class="line">    Date birthdayDate = sdf.parse(birthdayString);    </span><br><span class="line">    <span class="comment">// 获取今天的日期对象</span></span><br><span class="line">    Date todayDate = <span class="keyword">new</span> Date();    </span><br><span class="line">    <span class="comment">// 将两个日期转成毫秒值,Date类的方法getTime</span></span><br><span class="line">    <span class="keyword">long</span> birthdaySecond = birthdayDate.getTime();</span><br><span class="line">    <span class="keyword">long</span> todaySecond = todayDate.getTime();</span><br><span class="line">    <span class="keyword">long</span> secone = todaySecond-birthdaySecond;    </span><br><span class="line">    <span class="keyword">if</span> (secone &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"还没出生呢"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(secone/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-4-Calendar类"><a href="#1-2-4-Calendar类" class="headerlink" title="1.2.4 Calendar类"></a>1.2.4 Calendar类</h2><h3 id="1-2-4-1-概念"><a href="#1-2-4-1-概念" class="headerlink" title="1.2.4.1 概念"></a>1.2.4.1 概念</h3><p>日历我们都见过</p><p><img src="//cdn.foreversfj.com/image/blog/20190903/JDh0B6VCmCYv.png!blogy" alt=""></p><p>&emsp;&emsp;<code>java.util.Calendar</code>是日历类，在Date后出现，替换掉了许多Date的方法。该类将所有可能用到的时间信息封装为静态成员变量，方便获取。日历类就是方便获取各个时间属性的。</p><h3 id="1-2-4-2-获取方式"><a href="#1-2-4-2-获取方式" class="headerlink" title="1.2.4.2 获取方式"></a>1.2.4.2 获取方式</h3><p>&emsp;&emsp;Calendar为抽象类，由于语言敏感性，Calendar类在创建对象时并非直接创建，而是通过静态方法创建，返回子类对象，如下：</p><p>Calendar静态方法</p><ul><li><strong><code>public static Calendar getInstance()</code></strong>：使用默认时区和语言环境获得一个日历</li></ul><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06CalendarInit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-3-常用方法"><a href="#1-2-4-3-常用方法" class="headerlink" title="1.2.4.3 常用方法"></a>1.2.4.3 常用方法</h3><p>根据Calendar类的API文档，常用方法有：</p><ul><li><strong><code>public int get(int field)</code></strong>：返回给定日历字段的值。</li><li><strong><code>public void set(int field, int value)</code></strong>：将给定的日历字段设置为给定值。</li><li><strong><code>public abstract void add(int field, int amount)</code></strong>：根据日历的规则，为给定的日历字段添加或减去指定的时间量。</li><li><strong><code>public Date getTime()</code></strong>：返回一个表示此Calendar时间值（从历元到现在的毫秒偏移量）的Date对象。</li></ul><p>Calendar类中提供很多成员常量，代表给定的日历字段：</p><table><thead><tr><th align="left">字段值</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">YEAR</td><td align="left">年</td></tr><tr><td align="left">MONTH</td><td align="left">月（从0开始，可以+1使用）</td></tr><tr><td align="left">DAY_OF_MONTH</td><td align="left">月中的天（几号）</td></tr><tr><td align="left">HOUR</td><td align="left">时（12小时制）</td></tr><tr><td align="left">HOUR_OF_DAY</td><td align="left">时（24小时制）</td></tr><tr><td align="left">MINUTE</td><td align="left">分</td></tr><tr><td align="left">SECOND</td><td align="left">秒</td></tr><tr><td align="left">DAY_OF_WEEK</td><td align="left">周中的天（周几，周日为1，可以-1使用）</td></tr></tbody></table><h4 id="get-set方法"><a href="#get-set方法" class="headerlink" title="get/set方法"></a>get/set方法</h4><p>&emsp;&emsp;get方法用来获取指定字段的值，set方法用来设置指定字段的值，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Calendar对象</span></span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 设置年 </span></span><br><span class="line">        <span class="keyword">int</span> year = cal.get(Calendar.YEAR);</span><br><span class="line">        <span class="comment">// 设置月</span></span><br><span class="line">        <span class="keyword">int</span> month = cal.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 设置日</span></span><br><span class="line">        <span class="keyword">int</span> dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.print(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + dayOfMonth + <span class="string">"日"</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07CalendarMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.set(Calendar.YEAR, <span class="number">2020</span>);</span><br><span class="line">        System.out.print(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + dayOfMonth + <span class="string">"日"</span>); <span class="comment">// 2020年1月17日</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h4><p>&emsp;&emsp;add方法可以对指定日历字段的值进行加减操作，如果第二个参数为正数则加上偏移量，如果为负数则减去偏移量。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08CalendarMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        System.out.print(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + dayOfMonth + <span class="string">"日"</span>); <span class="comment">// 2018年1月17日</span></span><br><span class="line">        <span class="comment">// 使用add方法</span></span><br><span class="line">        cal.add(Calendar.DAY_OF_MONTH, <span class="number">2</span>); <span class="comment">// 加2天</span></span><br><span class="line">        cal.add(Calendar.YEAR, -<span class="number">3</span>); <span class="comment">// 减3年</span></span><br><span class="line">        System.out.print(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + dayOfMonth + <span class="string">"日"</span>); <span class="comment">// 2015年1月18日; </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getTime方法"><a href="#getTime方法" class="headerlink" title="getTime方法"></a>getTime方法</h4><p>&emsp;&emsp;Calendar中的getTime方法并不是获取毫秒时刻，而是拿到对应的Date对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09CalendarMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        Date date = cal.getTime();</span><br><span class="line">        System.out.println(date); <span class="comment">// Tue Jan 16 16:03:09 CST 2018</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：<br>&emsp;&emsp;西方星期的开始为周日，中国为周一。<br>&emsp;&emsp;在Calendar类中，月份的表示是以0-11代表1-12月。<br>&emsp;&emsp;日期是有大小关系的，时间靠后，时间越大。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三部分 第一章 1.Object类</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/01_1%20Object%E7%B1%BB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part03/01_1%20Object%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-Object类"><a href="#1-1-Object类" class="headerlink" title="1.1 Object类"></a>1.1 Object类</h1><h2 id="1-1-1-概述"><a href="#1-1-1-概述" class="headerlink" title="1.1.1 概述"></a>1.1.1 概述</h2><p>&emsp;&emsp;<code>java.lang.Object</code>类是Java语言中的根类，即所有类的父类。它中描述的所有方法子类都可以使用。在对象实例化的时候，最终找的父类就是Object。</p><p>&emsp;&emsp;如果一个类没有特别指定父类，那么默认则继承自Object类。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> /*<span class="keyword">extends</span> <span class="title">Object</span>*/ </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;根据JDK源代码及Object类的API文档，Object类当中包含的方法有11个。本节主要学习其中的2个：</p><ul><li><strong><code>public String toString()</code></strong>：返回该对象的字符串表示。</li><li><strong><code>public boolean equals(Object obj)</code></strong>：指示其他某个对象是否与此对象“相等”。</li></ul><h2 id="1-1-2-toString方法"><a href="#1-1-2-toString方法" class="headerlink" title="1.1.2 toString方法"></a>1.1.2 toString方法</h2><h3 id="1-1-2-1-方法摘要"><a href="#1-1-2-1-方法摘要" class="headerlink" title="1.1.2.1 方法摘要"></a>1.1.2.1 方法摘要</h3><ul><li><strong><code>public String toString()</code></strong>：返回该对象的字符串表示。</li></ul><p>&emsp;&emsp;<code>toString</code>方法返回该对象的字符串表示，其实该字符串内容就是<code>对象的类型@内存地址值</code>。</p><p>&emsp;&emsp;由于<code>toString</code>方法返回的结果是内存地址，而在开发中，经常需要按照对象的属性得到相应的字符串表现形式，因此也需要重写它。</p><h3 id="1-1-2-2-覆盖重写"><a href="#1-1-2-2-覆盖重写" class="headerlink" title="1.1.2.2 覆盖重写"></a>1.1.2.2 覆盖重写</h3><p>&emsp;&emsp;如果不希望使用<code>toString</code>方法的默认行为，则可以对它进行覆盖重写。例如自定义的Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> + <span class="string">"name='"</span> + name + <span class="string">'\''</span> + <span class="string">", age="</span> + age + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略构造器与Getter Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在IntelliJ IDEA中，可以点击<code>Code</code>菜单中的<code>Generate...</code>，也可以使用快捷键<code>alt+insert</code>，点击<code>toString()</code>选项。选择需要包含的成员变量并确定。</p><blockquote><p>小贴士：<br>&emsp;&emsp;在我们直接使用输出语句输出对象名的时候,其实通过该对象调用了其toString()方法。</p></blockquote><h2 id="1-1-3-equals方法"><a href="#1-1-3-equals方法" class="headerlink" title="1.1.3 equals方法"></a>1.1.3 equals方法</h2><h3 id="1-1-3-1-方法摘要"><a href="#1-1-3-1-方法摘要" class="headerlink" title="1.1.3.1 方法摘要"></a>1.1.3.1 方法摘要</h3><ul><li><strong><code>public boolean equals(Object obj)</code></strong>：指示其他某个对象是否与此对象“相等”。</li></ul><p>&emsp;&emsp;调用成员方法equals并指定参数为另一个对象，则可以判断这两个对象是否是相同的。这里的“相同”有默认和自定义两种方式。</p><h3 id="1-1-3-2-默认地址比较"><a href="#1-1-3-2-默认地址比较" class="headerlink" title="1.1.3.2 默认地址比较"></a>1.1.3.2 默认地址比较</h3><p>&emsp;&emsp;如果没有覆盖重写equals方法，那么Object类中默认进行<code>==</code>运算符的对象地址比较，只要不是同一个对象，结果必然为false。</p><h3 id="1-1-3-3-对象内容比较"><a href="#1-1-3-3-对象内容比较" class="headerlink" title="1.1.3.3 对象内容比较"></a>1.1.3.3 对象内容比较</h3><p>&emsp;&emsp;如果希望进行对象的内容比较，即所有或指定的部分成员变量相同就判定两个对象相同，则可以覆盖重写equals方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果对象地址一样，则认为相同</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 如果参数为空，或者类型信息不一样，则认为不同</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 转换为当前类型</span></span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="comment">// 要求基本类型相等，并且将引用类型交给java.util.Objects类的equals静态方法取用结果</span></span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp; Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这段代码充分考虑了对象为空、类型一致等问题，但方法内容并不唯一。大多数IDE都可以自动生成equals方法的代码内容。在IntelliJ IDEA中，可以使用<code>Code</code>菜单中的<code>Generate…</code>选项，也可以使用快捷键<code>alt+insert</code>，并选择<code>equals() and hashCode()</code>进行自动代码生成。</p><blockquote><p>Tips：<br>&emsp;&emsp;Object类当中的hashCode等其他方法，今后学习。</p></blockquote><h2 id="1-1-4-Objects类"><a href="#1-1-4-Objects类" class="headerlink" title="1.1.4 Objects类"></a>1.1.4 Objects类</h2><p>&emsp;&emsp;在刚才IDEA自动重写<code>equals</code>代码中，使用到了<code>java.util.Objects</code>类，那么这个类是什么呢？</p><p>&emsp;&emsp;在<strong>JDK7</strong>添加了一个<code>Objects</code>工具类，它提供了一些方法来操作对象，它由一些静态的实用方法组成，这些方法是<code>null-save</code>（空指针安全的）或<code>null-tolerant</code>（容忍空指针的），用于计算对象的<code>hashcode</code>、返回对象的字符串表示形式、比较两个对象。</p><p>&emsp;&emsp;在比较两个对象的时候，<code>Object</code>的<code>equals</code>方法容易抛出空指针异常，而Objects类中的equals方法就优化了这个问题。方法如下：</p><ul><li><strong><code>public static boolean equals(Object a, Object b)</code></strong>：判断两个对象是否相等。</li></ul><p>我们可以查看一下源码，学习一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十三章 5.综合案例——发红包【界面版】</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/13_5%20%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E5%8F%91%E7%BA%A2%E5%8C%85.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/13_5%20%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E5%8F%91%E7%BA%A2%E5%8C%85.html</url>
      
        <content type="html"><![CDATA[<h1 id="13-5-综合案例——发红包"><a href="#13-5-综合案例——发红包" class="headerlink" title="13.5 综合案例——发红包"></a>13.5 综合案例——发红包</h1><p>&emsp;&emsp;红包文化源远流长。从古时的红色纸包，到手机App中的手气红包，红包作为一种独特的中华文化传承至今。之前也编写过程序，模拟发普通红包。那么现在将整合以前所有的技术和知识，编写一个带界面版的 <code>发红包</code> 案例。</p><blockquote><p>&emsp;&emsp;目前，我们尚未学习过任何与界面相关的类。所以，界面相关代码，已经给出。请运用所学技术分析并使用。</p></blockquote><h2 id="13-5-1-案例需求"><a href="#13-5-1-案例需求" class="headerlink" title="13.5.1 案例需求"></a>13.5.1 案例需求</h2><p>分析并使用已给出的类，编写程序，设置红包类型。</p><blockquote><p>小贴士<br>红包类型：</p><ol><li>普通红包：金额均分。不能整除的，余额添加到最后一份红包中。</li><li>手气红包：金额随机。各个红包金额累和与总金额相等。</li></ol><p>红包场景：<br>&emsp;&emsp;此案例是模拟群主给群成员发红包，群主自己打开最后一个红包的场景。</p></blockquote><h2 id="13-5-2-案例分析"><a href="#13-5-2-案例分析" class="headerlink" title="13.5.2 案例分析"></a>13.5.2 案例分析</h2><p>已知的类：</p><ol><li><p><code>RedPacketFrame</code>**：一个抽象类，包含了一些属性，是红包案例的页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RedPacketFrame</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* ownerName : 群主名称 */</span></span><br><span class="line">    <span class="keyword">public</span> String ownerName = <span class="string">"谁谁谁谁"</span>;</span><br><span class="line">    <span class="comment">/* openMode : 红包的类型 [普通红包/手气红包] */</span></span><br><span class="line">    <span class="keyword">public</span> OpenMode openMode = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构造方法:生成红包界面.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> title 页面的标题.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedPacketFrame</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(title);</span><br><span class="line">        init();<span class="comment">// 页面相关的初始化操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* set方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOwnerName</span><span class="params">(String ownerName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ownerName = ownerName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOpenMode</span><span class="params">(OpenMode openMode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.openMode = openMode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>OpenMode</code>**：一个接口，包含一个分配方法，用来指定红包类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OpenMode</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> totalMoney 总金额,单位是"分"。</span></span><br><span class="line"><span class="comment">    *             总金额为方便计算,已经转换为整数,单位为分。</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> count 红包个数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> ArrayList&lt;Integer&gt; 元素为各个红包的金额值,</span></span><br><span class="line"><span class="comment">    *                     所有元素的值累和等于总金额.</span></span><br><span class="line"><span class="comment">    * 请将totalMoney,分成count分,保存到ArrayList&lt;Integer&gt;中,返回即可.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ArrayList&lt;Integer&gt; <span class="title">divide</span><span class="params">(<span class="keyword">int</span> totalMoney, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="13-5-3-案例实现"><a href="#13-5-3-案例实现" class="headerlink" title="13.5.3 案例实现"></a>13.5.3 案例实现</h2><h3 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h3><ol><li><p>创建项目：名称自定义，建议为<code>RedPacketDemo</code>。</p></li><li><p>导入图片：将<code>pic</code>目录，导入项目中，与<code>src</code>目录平级。</p></li><li><p>导入已知类：在<code>src</code>下创建一个包，名字自定义，建议为<code>known</code>，将类 <code>RedPacketFrame</code>、接口<code>OpenMode</code>拷入。</p></li></ol><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><ol><li><p>定义<code>RedPacket</code>类，继承<code>RedPacketFrame</code>，代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedPacket</span> <span class="keyword">extends</span> <span class="title">RedPacketFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedPacket</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义测试类，创建<code>RedPacket</code>对象，代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedPacketTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RedPacket rp = <span class="keyword">new</span> RedPacket(<span class="string">"大红包"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>运行代码，打开一个发红包的页面。可以输入总金额，红包个数，留言信息。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十三章 4.引用类型用法总结</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/13_4%20%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/13_4%20%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<h1 id="13-4-引用类型用法总结"><a href="#13-4-引用类型用法总结" class="headerlink" title="13.4 引用类型用法总结"></a>13.4 引用类型用法总结</h1><p>&emsp;&emsp;实际的开发中，引用类型的使用非常重要，也是非常普遍的。我们可以在理解基本类型的使用方式基础上，进一步去掌握引用类型的使用方式。基本类型可以作为成员变量、作为方法的参数、作为方法的返回值，那么当然引用类型也是可以的。</p><h2 id="13-4-1-class作为成员变量"><a href="#13-4-1-class作为成员变量" class="headerlink" title="13.4.1 class作为成员变量"></a>13.4.1 class作为成员变量</h2><p>&emsp;&emsp;在定义一个类Role（游戏角色）时，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id; <span class="comment">// 角色id</span></span><br><span class="line">    <span class="keyword">int</span> blood; <span class="comment">// 生命值</span></span><br><span class="line">    String name; <span class="comment">// 角色名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;使用<code>int</code>类型表示 角色id和生命值，使用<code>String</code>类型表示姓名。此时，<code>String</code>本身就是引用类型，由于使用的方式类似常量，所以往往忽略了它是引用类型的存在。如果我们继续丰富这个类的定义，给<code>Role</code>增加武器，穿戴装备等属性，我们将如何编写呢？</p><p>定义武器类，将增加攻击能力：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">// 武器名称</span></span><br><span class="line">    <span class="keyword">int</span> hurt; <span class="comment">// 伤害值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义穿戴盔甲类，将增加防御能力，也就是提升生命值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Armour</span> </span>&#123;</span><br><span class="line">    String name;<span class="comment">// 装备名称</span></span><br><span class="line">    <span class="keyword">int</span> protect;<span class="comment">// 防御值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义角色类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">int</span> blood;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">// 添加武器属性</span></span><br><span class="line">    Weapon wp;</span><br><span class="line">    <span class="comment">// 添加盔甲属性</span></span><br><span class="line">    Armour ar;</span><br><span class="line">    <span class="comment">// 提供get/set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Weapon <span class="title">getWp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeapon</span><span class="params">(Weapon wp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wp = wp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Armour <span class="title">getArmour</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ar;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArmour</span><span class="params">(Armour ar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ar = ar;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 攻击方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用"</span>+ wp.getName() +<span class="string">", 造成"</span>+wp.getHurt()+<span class="string">"点伤害"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 穿戴盔甲</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 增加防御,就是增加blood值</span></span><br><span class="line">        <span class="keyword">this</span>.blood += ar.getProtect();</span><br><span class="line">        System.out.println(<span class="string">"穿上"</span>+ar.getName()+<span class="string">", 生命值增加"</span>+ar.getProtect());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Weapon 对象</span></span><br><span class="line">        Weapon wp = <span class="keyword">new</span> Weapon(<span class="string">"屠龙刀"</span> , <span class="number">999999</span>);</span><br><span class="line">        <span class="comment">// 创建Armour 对象</span></span><br><span class="line">        Armour ar = <span class="keyword">new</span> Armour(<span class="string">"麒麟甲"</span>,<span class="number">10000</span>);</span><br><span class="line">        <span class="comment">// 创建Role 对象</span></span><br><span class="line">        Role r = <span class="keyword">new</span> Role();</span><br><span class="line">        <span class="comment">// 设置武器属性</span></span><br><span class="line">        r.setWeapon(wp);</span><br><span class="line">        <span class="comment">// 设置盔甲属性</span></span><br><span class="line">        r.setArmour(ar);</span><br><span class="line">        <span class="comment">// 攻击</span></span><br><span class="line">        r.attack();</span><br><span class="line">        <span class="comment">// 穿戴盔甲</span></span><br><span class="line">        r.wear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出结果:</span><br><span class="line">    使用屠龙刀,造成<span class="number">999999</span>点伤害</span><br><span class="line">    穿上麒麟甲 ,生命值增加<span class="number">10000</span></span><br></pre></td></tr></table></figure><blockquote><p>类作为成员变量时，对它进行赋值的操作，实际上，是赋给它该类的一个对象。</p></blockquote><h2 id="13-4-2-interface作为成员变量"><a href="#13-4-2-interface作为成员变量" class="headerlink" title="13.4.2 interface作为成员变量"></a>13.4.2 interface作为成员变量</h2><p>&emsp;&emsp;接口是对方法的封装，对应游戏当中，可以看作是扩展游戏角色的技能。所以，如果想扩展更强大技能，我们在<code>Role</code>中，可以增加接口作为成员变量，来设置不同的技能。</p><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法术攻击</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FaShuSkill</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">faShuAttack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义角色类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    FaShuSkill fs;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFaShuSkill</span><span class="params">(FaShuSkill fs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fs = fs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 法术攻击</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">faShuSkillAttack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"发动法术攻击:"</span>);</span><br><span class="line">        fs.faShuAttack();</span><br><span class="line">        System.out.println(<span class="string">"攻击完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建游戏角色</span></span><br><span class="line">        Role role = <span class="keyword">new</span> Role();</span><br><span class="line">        <span class="comment">// 设置角色法术技能</span></span><br><span class="line">        role.setFaShuSkill(<span class="keyword">new</span> FaShuSkill() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">faShuAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"纵横天下"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 发动法术攻击</span></span><br><span class="line">        role.faShuSkillAttack();</span><br><span class="line">        <span class="comment">// 更换技能</span></span><br><span class="line">        role.setFaShuSkill(<span class="keyword">new</span> FaShuSkill() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">faShuAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"逆转乾坤"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 发动法术攻击</span></span><br><span class="line">        role.faShuSkillAttack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出结果:</span><br><span class="line">    发动法术攻击:纵横天下</span><br><span class="line">    攻击完毕</span><br><span class="line">    发动法术攻击:逆转乾坤</span><br><span class="line">    攻击完毕</span><br></pre></td></tr></table></figure><blockquote><p>我们使用一个接口，作为成员变量，以便随时更换技能，这样的设计更为灵活，增强了程序的扩展性。<br>接口作为成员变量时，对它进行赋值的操作，实际上，是赋给它该接口的一个子类对象。</p></blockquote><h2 id="13-4-3-interface作为方法参数和返回值类型"><a href="#13-4-3-interface作为方法参数和返回值类型" class="headerlink" title="13.4.3 interface作为方法参数和返回值类型"></a>13.4.3 interface作为方法参数和返回值类型</h2><p>&emsp;&emsp;当接口作为方法的参数时,需要传递什么呢？当接口作为方法的返回值类型时，需要返回什么呢？对，其实都是它的子类对象。<code>ArrayList</code>类我们并不陌生，查看API我们发现，实际上，它是<code>java.util.List</code>接口的实现类。所以，当我们看见<code>List</code>接口作为参数或者返回值类型时，当然可以将<code>ArrayList</code>的对象进行传递或返回。</p><p>请观察如下方法：<strong>获取某集合中所有的偶数</strong>。</p><p>定义方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">getEvenNum</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建保存偶数的集合</span></span><br><span class="line">    ArrayList&lt;Integer&gt; evenList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 遍历集合list,判断元素为偶数,就添加到evenList中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        Integer integer = list.get(i);</span><br><span class="line">        <span class="keyword">if</span> (integer % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            evenList.add(integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    返回偶数集合</span></span><br><span class="line"><span class="comment">    因为getEvenNum方法的返回值类型是List,而ArrayList是List的子类,</span></span><br><span class="line"><span class="comment">    所以evenList可以返回</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> evenList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建ArrayList集合,并添加数字</span></span><br><span class="line">        ArrayList&lt;Integer&gt; srcList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            srcList.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取偶数集合</span></span><br><span class="line"><span class="comment">        因为getEvenNum方法的参数是List,而ArrayList是List的子类,</span></span><br><span class="line"><span class="comment">        所以srcList可以传递</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        List list = getEvenNum(srcList);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接口作为参数时，传递它的子类对象。<br>接口作为返回值类型时，返回它的子类对象。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十三章 3.内部类</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/13_3%20%E5%86%85%E9%83%A8%E7%B1%BB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/13_3%20%E5%86%85%E9%83%A8%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="13-3-内部类"><a href="#13-3-内部类" class="headerlink" title="13.3 内部类"></a>13.3 内部类</h1><h2 id="13-3-1-概述"><a href="#13-3-1-概述" class="headerlink" title="13.3.1 概述"></a>13.3.1 概述</h2><h3 id="什么是内部类"><a href="#什么是内部类" class="headerlink" title="什么是内部类"></a>什么是内部类</h3><p>&emsp;&emsp;将一个类A定义在另一个类B里面，里面的那个类A就称为内部类，B则称为外部类。</p><h2 id="13-3-2-成员内部类"><a href="#13-3-2-成员内部类" class="headerlink" title="13.3.2 成员内部类"></a>13.3.2 成员内部类</h2><ul><li><p>成员内部类 ：定义在类中、方法外的类。</p><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 外部类 </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> 内部类</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;在描述事物时，若一个事物内部还包含其他事物，就可以使用内部类这种结构。比如，汽车类<code>Car</code>中包含发动机类<code>Engine</code>，这时，<code>Engine</code>就可以使用内部类来描述，定义在成员位置。</p><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123; <span class="comment">//内部类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问特点"><a href="#访问特点" class="headerlink" title="访问特点"></a>访问特点</h3><ul><li>内部类可以直接访问外部类的成员，包括私有成员。</li><li>外部类要访问内部类的成员，必须要建立内部类的对象。</li></ul><p>创建内部类对象格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类名.内部类名 对象名 = <span class="keyword">new</span> 外部类型().<span class="keyword">new</span> 内部类型()；</span><br></pre></td></tr></table></figure><p>访问演示，代码如下：</p><p>定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> live = <span class="keyword">true</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Heart</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 直接访问外部类成员</span></span><br><span class="line">            <span class="keyword">if</span> (live) &#123;</span><br><span class="line">                System.out.println(<span class="string">"心脏在跳动"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"心脏不跳了"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> live;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLive</span><span class="params">(<span class="keyword">boolean</span> live)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.live = live;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建外部类对象</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">// 创建内部类对象</span></span><br><span class="line">        Heart heart = p.<span class="keyword">new</span> Heart();</span><br><span class="line">        <span class="comment">// 调用内部类方法</span></span><br><span class="line">        heart.jump();</span><br><span class="line">        <span class="comment">// 调用外部类方法</span></span><br><span class="line">        p.setLive(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 调用内部类方法</span></span><br><span class="line">        heart.jump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出结果:</span><br><span class="line">    心脏在跳动</span><br><span class="line">    心脏不跳了</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;内部类仍然是一个独立的类，在编译之后会内部类会被编译成独立的<code>.class</code>文件，但是前面冠以外部类的类名和<code>$</code>符号。<br>&emsp;&emsp;比如，<code>Person$Heart.class</code></p></blockquote><h2 id="13-3-3-局部内部类"><a href="#13-3-3-局部内部类" class="headerlink" title="13.3.3 局部内部类"></a>13.3.3 局部内部类</h2><ul><li>局部内部类：定义在方法中的类。</li></ul><p>如果希望访问所在方法的局部变量，那么这个局部变量必须是【有效final的】。</p><p>备注：从Java 8+开始，只要局部变量事实不变，那么final关键字可以省略。</p><p><strong>原因：</strong></p><ol><li>new出来的对象在堆内存当中。</li><li>局部变量是跟着方法走的，在栈内存当中。</li><li>方法运行结束之后，立刻出栈，局部变量就会立刻消失。</li><li>但是new出来的对象会在堆当中持续存在，直到垃圾回收消失。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOuter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOuter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>; <span class="comment">// 所在方法的局部变量</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">MyInner</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-3-4-匿名内部类"><a href="#13-3-4-匿名内部类" class="headerlink" title="13.3.4 匿名内部类"></a>13.3.4 匿名内部类</h2><ul><li><strong>匿名内部类</strong>：是内部类的简化写法。它的本质是一个<strong>带具体实现的</strong> 父类或者父接口的 <strong>匿名</strong>子类对象。</li></ul><p>&emsp;&emsp;开发中，最常用到的内部类就是匿名内部类了。以接口举例，当你使用一个接口时，似乎得做如下几步操作:</p><ol><li>定义子类</li><li>重写接口中的方法</li><li>创建子类对象</li><li>调用重写后的方法</li></ol><p>&emsp;&emsp;我们的目的，最终只是为了调用方法，那么能不能简化一下，把以上四步合成一步呢？匿名内部类就是做这样的快捷方式。</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul><li>匿名内部类必须<strong>继承一个父类</strong>或者<strong>实现一个父接口</strong>。</li></ul><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类名或者接口名()&#123;</span><br><span class="line">    <span class="comment">// 方法重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>以接口为例，匿名内部类的使用，代码如下：</p><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyAble</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建匿名内部类，并调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.等号右边:是匿名内部类，定义并创建该接口的子类对象</span></span><br><span class="line"><span class="comment">        2.等号左边:是多态赋值,接口类型引用指向子类对象</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        FlyAble f = <span class="keyword">new</span> FlyAble()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"我飞了~~~"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//调用 fly方法,执行重写后的方法</span></span><br><span class="line">        f.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通常在方法的形式参数是接口或者抽象类时，也可以将匿名内部类作为参数传递。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.等号右边:定义并创建该接口的子类对象</span></span><br><span class="line"><span class="comment">        2.等号左边:是多态,接口类型引用指向子类对象</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        FlyAble f = <span class="keyword">new</span> FlyAble()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"我飞了~~~"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 将f传递给showFly方法中</span></span><br><span class="line">        showFly(f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showFly</span><span class="params">(FlyAble f)</span> </span>&#123;</span><br><span class="line">        f.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两步，也可以简化为一步，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        创建匿名内部类,直接传递给showFly(FlyAble f)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        showFly( <span class="keyword">new</span> FlyAble()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"我飞了~~~"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showFly</span><span class="params">(FlyAble f)</span> </span>&#123;</span><br><span class="line">        f.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-3-5-匿名对象"><a href="#13-3-5-匿名对象" class="headerlink" title="13.3.5 匿名对象"></a>13.3.5 匿名对象</h2><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用匿名内部类，但不是匿名对象，对象名称就叫objA</span></span><br><span class="line">        MyInterface objA = <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！111-A"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！222-A"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">        objA.method1();</span><br><span class="line">        System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">        objA.method2();</span><br><span class="line">        System.out.println(<span class="string">"================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用了匿名内部类，而且省略了对象名称，也是匿名对象</span></span><br><span class="line">        <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！111-B"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！222-B"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.method1();</span><br><span class="line">        System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">        <span class="comment">// 因为匿名对象无法调用第二次方法，所以需要再创建一个匿名内部类的匿名对象</span></span><br><span class="line">        <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！111-B"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！222-B"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>匿名内部类，在【创建对象】的时候，只能使用唯一一次。<br>如果希望多次创建对象，而且类的内容一样的话，那么就需要使用单独定义的实现类了。</li><li>匿名对象，在【调用方法】的时候，只能调用唯一一次。<br>如果希望同一个对象，调用多次方法，那么必须给对象起个名字。</li><li>匿名内部类是省略了【实现类/子类名称】，但是匿名对象是省略了【对象名称】<br>强调：<strong>匿名内部类和匿名对象不是一回事！！！</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十三章 2.权限修饰符</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/13_2%20%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/13_2%20%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6.html</url>
      
        <content type="html"><![CDATA[<h1 id="13-2-权限修饰符"><a href="#13-2-权限修饰符" class="headerlink" title="13.2 权限修饰符"></a>13.2 权限修饰符</h1><h2 id="13-2-1-概述"><a href="#13-2-1-概述" class="headerlink" title="13.2.1 概述"></a>13.2.1 概述</h2><p>&emsp;&emsp;在Java中提供了四种访问权限，使用不同的访问权限修饰符修饰时，被修饰的内容会有不同的访问权限，</p><ul><li>public：公共的。</li><li>protected：受保护的</li><li>default：默认的</li><li>private：私有的</li></ul><h2 id="13-2-2-不同权限的访问能力"><a href="#13-2-2-不同权限的访问能力" class="headerlink" title="13.2.2 不同权限的访问能力"></a>13.2.2 不同权限的访问能力</h2><table><thead><tr><th align="left"></th><th align="left">public</th><th align="left">protected</th><th align="left">default（空的）</th><th align="left">private</th></tr></thead><tbody><tr><td align="left">同一类中</td><td align="left">√</td><td align="left">√</td><td align="left">√</td><td align="left">√</td></tr><tr><td align="left">同一包中(子类与无关类)</td><td align="left">√</td><td align="left">√</td><td align="left">√</td><td align="left"></td></tr><tr><td align="left">不同包的子类</td><td align="left">√</td><td align="left">√</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">不同包中的无关类</td><td align="left">√</td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><p>&emsp;&emsp;可见，public具有最大权限。private则是最小权限。</p><p>&emsp;&emsp;编写代码时，如果没有特殊的考虑，建议这样使用权限：</p><ul><li>成员变量使用private ，隐藏细节。</li><li>构造方法使用public ，方便创建对象。</li><li>成员方法使用public ，方便调用方法。</li></ul><blockquote><p>小贴士：不加权限修饰符，其访问能力与default修饰符相同</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十三章 1.final关键字</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/13_1%20final%E5%85%B3%E9%94%AE%E5%AD%97.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/13_1%20final%E5%85%B3%E9%94%AE%E5%AD%97.html</url>
      
        <content type="html"><![CDATA[<h1 id="13-1-final关键字"><a href="#13-1-final关键字" class="headerlink" title="13.1 final关键字"></a>13.1 final关键字</h1><h2 id="13-1-1-概述"><a href="#13-1-1-概述" class="headerlink" title="13.1.1 概述"></a>13.1.1 概述</h2><p>&emsp;&emsp;学习了继承后，我们知道，子类可以在父类的基础上改写父类内容，比如，方法重写。那么我们能不能随意的继承API中提供的类，改写其内容呢？显然这是不合适的。为了避免这种随意改写的情况，Java提供了<code>final</code>关键字，用于修饰<strong>不可改变</strong>内容。</p><ul><li>final： 不可改变。可以用于修饰类、方法和变量。<ul><li>类：被修饰的类，不能被继承。</li><li>方法：被修饰的方法，不能被重写。</li><li>变量：被修饰的变量，不能被重新赋值。</li></ul></li></ul><h2 id="13-1-2-使用方式"><a href="#13-1-2-使用方式" class="headerlink" title="13.1.2 使用方式"></a>13.1.2 使用方式</h2><h3 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h3><p>格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;查询API发现像<code>public final class String</code> 、<code>public final class Math</code> 、<code>public final class Scanner</code>等，很多我们学习过的类，都是被final修饰的，目的就是供我们使用，而不让我们所以改变其内容。</p><h3 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h3><p>格式如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">final</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写被 <code>final</code>修饰的方法，编译时就会报错。</p><h3 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h3><ol><li><strong>局部变量——基本类型</strong></li></ol><p>&emsp;&emsp;基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 声明变量，使用final修饰</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> a;</span><br><span class="line">        <span class="comment">// 第一次赋值</span></span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 第二次赋值</span></span><br><span class="line">        a = <span class="number">20</span>; <span class="comment">// 报错,不可重新赋值</span></span><br><span class="line">        <span class="comment">// 声明变量，直接赋值，使用final修饰</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 第二次赋值</span></span><br><span class="line">        b = <span class="number">20</span>; <span class="comment">// 报错,不可重新赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考，如下两种写法，哪种可以通过编译？</p><p>写法1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    c = i;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> c = i;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;根据<code>final</code>的定义，写法1报错！写法2通过。为什么通过编译呢？因为每次循环，都是一次新的变量c。这也是大家需要注意的地方。</p><ol start="2"><li><strong>局部变量——引用类型</strong></li></ol><p>&emsp;&emsp;引用类型的局部变量，被final修饰后，只能指向一个对象，地址不能再更改。但是不影响对象内部的成员变量值的修改，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 User 对象</span></span><br><span class="line">        <span class="keyword">final</span> User u = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">// 创建 另一个 User对象</span></span><br><span class="line">        u = <span class="keyword">new</span> User(); <span class="comment">// 报错，指向了新的对象，地址值改变。</span></span><br><span class="line">        <span class="comment">// 调用setName方法</span></span><br><span class="line">        u.setName(<span class="string">"张三"</span>); <span class="comment">// 可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>成员变量</li></ol><p>&emsp;&emsp;成员变量涉及到初始化的问题，初始化方式有两种，只能二选一：</p><ul><li><p>显示初始化；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String USERNAME = <span class="string">"张三"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造方法初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String USERNAME ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.USERNAME = username;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>被final修饰的常量名称，一般都有书写规范，所有字母都大写。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十二章 3.接口多态的综合案例</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/12_3%20%E6%8E%A5%E5%8F%A3%E5%A4%9A%E6%80%81%E7%9A%84%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/12_3%20%E6%8E%A5%E5%8F%A3%E5%A4%9A%E6%80%81%E7%9A%84%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="12-3-接口多态的综合案例"><a href="#12-3-接口多态的综合案例" class="headerlink" title="12.3 接口多态的综合案例"></a>12.3 接口多态的综合案例</h1><h2 id="12-3-1-笔记本电脑"><a href="#12-3-1-笔记本电脑" class="headerlink" title="12.3.1 笔记本电脑"></a>12.3.1 笔记本电脑</h2><p>&emsp;&emsp;笔记本电脑（laptop）通常具备使用USB设备的功能。在生产时，笔记本都预留了可以插入USB设备的USB接口，但具体是什么USB设备，笔记本厂商并不关心，只要符合USB规格的设备都可以。</p><p>&emsp;&emsp;定义USB接口，具备最基本的开启功能和关闭功能。鼠标和键盘要想能在电脑上使用，那么鼠标和键盘也必须遵守USB规范，实现USB接口，否则鼠标和键盘的生产出来也无法使用。</p><h2 id="12-3-2-案例分析"><a href="#12-3-2-案例分析" class="headerlink" title="12.3.2 案例分析"></a>12.3.2 案例分析</h2><p>进行描述笔记本类，实现笔记本使用USB鼠标、USB键盘</p><ul><li>USB接口，包含开启功能、关闭功能</li><li>笔记本类，包含运行功能、关机功能、使用USB设备功能</li><li>鼠标类，要实现USB接口，并具备点击的方法</li><li>键盘类，要实现USB接口，具备敲击的方法</li></ul><h2 id="12-3-3-案例实现"><a href="#12-3-3-案例实现" class="headerlink" title="12.3.3 案例实现"></a>12.3.3 案例实现</h2><p>定义USB接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;<span class="comment">// 开启功能</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;<span class="comment">// 关闭功能</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义鼠标类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"鼠标开启，红灯闪一闪"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"鼠标关闭，红灯熄灭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"鼠标单击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义键盘类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyBoard</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"键盘开启，绿灯闪一闪"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"键盘关闭，绿灯熄灭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">type</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"键盘打字"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义笔记本类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Laptop</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 笔记本开启运行功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"笔记本运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 笔记本使用usb设备，这时当笔记本对象调用这个功能时，必须给其传递一个符合USB规则的USB设备</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useUSB</span><span class="params">(USB usb)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否有USB设备</span></span><br><span class="line">        <span class="keyword">if</span> (usb != <span class="keyword">null</span>) &#123;</span><br><span class="line">            usb.open();</span><br><span class="line">            <span class="comment">// 类型转换,调用特有方法</span></span><br><span class="line">            <span class="keyword">if</span>(usb <span class="keyword">instanceof</span> Mouse)&#123;</span><br><span class="line">                Mouse m = （Mouse）usb；</span><br><span class="line">                    m.click();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (usb <span class="keyword">instanceof</span> KeyBoard)&#123;</span><br><span class="line">                KeyBoard kb = (KeyBoard)usb;</span><br><span class="line">                kb.type();</span><br><span class="line">            &#125;</span><br><span class="line">            usb.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"笔记本关闭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建笔记本实体对象</span></span><br><span class="line">        Laptop lt = <span class="keyword">new</span> Laptop();</span><br><span class="line">        <span class="comment">// 笔记本开启</span></span><br><span class="line">        lt.run();</span><br><span class="line">        <span class="comment">// 创建鼠标实体对象</span></span><br><span class="line">        Usb u = <span class="keyword">new</span> Mouse();</span><br><span class="line">        <span class="comment">// 笔记本使用鼠标</span></span><br><span class="line">        lt.useUSB(u);</span><br><span class="line">        <span class="comment">// 创建键盘实体对象</span></span><br><span class="line">        KeyBoard kb = <span class="keyword">new</span> KeyBoard();</span><br><span class="line">        <span class="comment">// 笔记本使用键盘</span></span><br><span class="line">        lt.useUSB(kb);</span><br><span class="line">        <span class="comment">// 笔记本关闭</span></span><br><span class="line">        lt.shutDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十二章 2.多态</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/12_2%20%E5%A4%9A%E6%80%81.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/12_2%20%E5%A4%9A%E6%80%81.html</url>
      
        <content type="html"><![CDATA[<h1 id="12-2-多态"><a href="#12-2-多态" class="headerlink" title="12.2 多态"></a>12.2 多态</h1><h2 id="12-2-1-概述"><a href="#12-2-1-概述" class="headerlink" title="12.2.1 概述"></a>12.2.1 概述</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>&emsp;&emsp;多态是继封装、继承之后，面向对象的第三大特性。</p><p>&emsp;&emsp;生活中，比如跑的动作，小猫、小狗和大象，跑起来是不一样的。再比如飞的动作，昆虫、鸟类和飞机，飞起来也是不一样的。可见，同一行为，通过不同的事物，可以体现出来的不同的形态。多态，描述的就是这样的状态。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><strong>多态：</strong> 是指同一行为，具有多个不同表现形式。</li></ul><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ol><li>继承或者实现【二选一】</li><li>方法的重写【意义体现：不重写，无意义】</li><li>父类引用指向子类对象【格式体现】</li></ol><h2 id="12-2-2-多态的体现"><a href="#12-2-2-多态的体现" class="headerlink" title="12.2.2 多态的体现"></a>12.2.2 多态的体现</h2><h3 id="多态体现的格式："><a href="#多态体现的格式：" class="headerlink" title="多态体现的格式："></a>多态体现的格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父类类型 变量名 = <span class="keyword">new</span> 子类对象；</span><br><span class="line">变量名.方法名();</span><br></pre></td></tr></table></figure><blockquote><p>父类类型：指子类对象继承的父类类型，或者实现的父接口类型。</p></blockquote><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Fu f = <span class="keyword">new</span> Zi();</span><br><span class="line">f.method();</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>当使用多态方式调用方法时</strong>，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，执行的是子类重写后方法。</p><p>代码如下：</p><ul><li>定义父类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义子类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃鱼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃骨头"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义测试类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 多态形式，创建对象</span></span><br><span class="line">        Animal a1 = <span class="keyword">new</span> Cat();</span><br><span class="line">        <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line">        a1.eat();</span><br><span class="line">        <span class="comment">// 多态形式，创建对象</span></span><br><span class="line">        Animal a2 = <span class="keyword">new</span> Dog();</span><br><span class="line">        <span class="comment">// 调用的是 Dog 的 eat</span></span><br><span class="line">        a2.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-2-3-多态的好处"><a href="#12-2-3-多态的好处" class="headerlink" title="12.2.3 多态的好处"></a>12.2.3 多态的好处</h2><p>&emsp;&emsp;实际开发的过程中，父类类型作为方法形式参数，传递子类对象给方法，进行方法的调用，更能体现出多态的扩展性与便利。代码如下：</p><ul><li>定义父类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义子类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃鱼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃骨头"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义测试类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 多态形式，创建对象</span></span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">        <span class="comment">// 调用showCatEat</span></span><br><span class="line">        showCatEat(c);</span><br><span class="line">        <span class="comment">// 调用showDogEat</span></span><br><span class="line">        showDogEat(d);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        以上两个方法, 均可以被showAnimalEat(Animal a)方法所替代</span></span><br><span class="line"><span class="comment">        而执行效果一致</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        showAnimalEat(c);</span><br><span class="line">        showAnimalEat(d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showCatEat</span> <span class="params">(Cat c)</span></span>&#123;</span><br><span class="line">        c.eat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showDogEat</span> <span class="params">(Dog d)</span></span>&#123;</span><br><span class="line">        d.eat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showAnimalEat</span> <span class="params">(Animal a)</span></span>&#123;</span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;由于多态特性的支持，<code>showAnimalEat</code>方法的<code>Animal</code>类型，是<code>Cat</code>和<code>Dog</code>的父类类型，父类类型接收子类对象，当然可以把<code>Cat</code>对象和<code>Dog</code>对象，传递给方法。</p><p>&emsp;&emsp;当<code>eat</code>方法执行时，多态规定，执行的是子类重写的方法，那么效果自然与<code>showCatEat</code>、<code>showDogEat</code>方法一致，所以<code>showAnimalEat</code>完全可以替代以上两方法。</p><p>&emsp;&emsp;不仅仅是替代，在扩展性方面，无论之后再多的子类出现，我们都不需要编写<code>showXxxEat</code>方法了，直接使用<code>showAnimalEat</code>都可以完成。</p><p>&emsp;&emsp;所以，多态的好处，体现在，可以使程序编写的更简单，并有良好的扩展。</p><h2 id="12-2-4-引用类型转换"><a href="#12-2-4-引用类型转换" class="headerlink" title="12.2.4 引用类型转换"></a>12.2.4 引用类型转换</h2><p>多态的转型分为向上转型与向下转型两种：</p><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><ul><li><strong>向上转型</strong>：多态本身是子类类型向父类类型向上转换的过程，这个过程是默认的。</li></ul><p>当父类引用指向一个子类对象时，便是向上转型。</p><p>使用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父类类型 变量名 = <span class="keyword">new</span> 子类类型();</span><br><span class="line">如：Animal a = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><ul><li>向下转型：父类类型向子类类型向下转换的过程，这个过程是强制的。</li></ul><p>&emsp;&emsp;一个已经向上转型的子类对象，将父类引用转为子类引用，可以使用强制类型转换的格式，便是向下转型。</p><p>使用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">子类类型 变量名 = (子类类型) 父类变量名;</span><br><span class="line">如:Cat c =(Cat) a;</span><br></pre></td></tr></table></figure><h3 id="为什么要转型"><a href="#为什么要转型" class="headerlink" title="为什么要转型"></a>为什么要转型</h3><p>&emsp;&emsp;当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，<strong>不能调用</strong>子类拥有，而父类没有的方法。编译都错误，更别说运行了。这也是多态给我们带来的一点”小麻烦”。所以，想要调用子类特有的方法，必须做向下转型。</p><p>转型演示，代码如下：</p><ul><li>定义类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃鱼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"抓老鼠"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃骨头"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"看家"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义测试类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 向上转型</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        a.eat(); <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        Cat c = (Cat)a;</span><br><span class="line">        c.catchMouse(); <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转型的异常"><a href="#转型的异常" class="headerlink" title="转型的异常"></a>转型的异常</h3><p>转型的过程中，一不小心就会遇到这样的问题，请看如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 向上转型</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        a.eat(); <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        Dog d = (Dog)a;</span><br><span class="line">        d.watchHouse(); <span class="comment">// 调用的是 Dog 的 watchHouse 【运行报错】</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这段代码可以通过编译，但是运行时，却报出了<code>ClassCastException</code>，类型转换异常！这是因为，明明创建了Cat类型对象，运行时，当然不能转换成Dog对象的。这两个类型并没有任何继承关系，不符合类型转换的定义。</p><p>&emsp;&emsp;为了避免<code>ClassCastException</code>的发生，Java提供了<code>instanceof</code>关键字，给引用变量做类型的校验，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量名 <span class="keyword">instanceof</span> 数据类型</span><br><span class="line">如果变量属于该数据类型，返回<span class="keyword">true</span>。</span><br><span class="line">如果变量不属于该数据类型，返回<span class="keyword">false</span>。</span><br></pre></td></tr></table></figure><p>所以，转换前，我们最好先做一个判断，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 向上转型</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        a.eat(); <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">            Cat c = (Cat)a;</span><br><span class="line">            c.catchMouse(); <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog)&#123;</span><br><span class="line">            Dog d = (Dog)a;</span><br><span class="line">            d.watchHouse(); <span class="comment">// 调用的是 Dog 的 watchHouse</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十二章 1.接口</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/12_1%20%E6%8E%A5%E5%8F%A3.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/12_1%20%E6%8E%A5%E5%8F%A3.html</url>
      
        <content type="html"><![CDATA[<h1 id="12-1-接口"><a href="#12-1-接口" class="headerlink" title="12.1 接口"></a>12.1 接口</h1><h2 id="12-1-1-概述"><a href="#12-1-1-概述" class="headerlink" title="12.1.1 概述"></a>12.1.1 概述</h2><p>&emsp;&emsp;接口，是Java语言中一种引用类型，是方法的集合，如果说类的内部封装了成员变量、构造方法和成员方法，那么接口的内部主要就是<strong>封装了方法</strong>，包含抽象方法（JDK 7及以前），默认方法和静态方法（JDK 8），私有方法（JDK 9）。</p><p>&emsp;&emsp;接口的定义，它与定义类方式相似，但是使用<code>interface</code>关键字。它也会被编译成.class文件，但一定要明确它并不是类，而是另外一种引用数据类型。</p><ul><li>引用数据类型：数组，类，接口。</li></ul><p>&emsp;&emsp;接口的使用，它不能创建对象，但是可以被实现（<code>implements</code>，类似于被继承）。一个实现接口的类（可以看做是接口的子类），需要实现接口中所有的抽象方法，创建该类对象，就可以调用方法了，否则它必须是一个抽象类。</p><h2 id="12-1-2-定义格式"><a href="#12-1-2-定义格式" class="headerlink" title="12.1.2 定义格式"></a>12.1.2 定义格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名称 </span>&#123;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="comment">// 私有方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="含有抽象方法"><a href="#含有抽象方法" class="headerlink" title="含有抽象方法"></a>含有抽象方法</h3><p>&emsp;&emsp;抽象方法：使用<code>abstract</code>关键字修饰，可以省略，没有方法体。该方法供子类实现使用。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterFaceName</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="含有默认方法和静态方法"><a href="#含有默认方法和静态方法" class="headerlink" title="含有默认方法和静态方法"></a>含有默认方法和静态方法</h3><p>&emsp;&emsp;默认方法：使用<code>default</code>修饰，不可省略，供子类调用或者子类重写。</p><p>&emsp;&emsp;静态方法：使用<code>static</code>修饰，供接口直接调用。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterFaceName</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="含有私有方法和私有静态方法"><a href="#含有私有方法和私有静态方法" class="headerlink" title="含有私有方法和私有静态方法"></a>含有私有方法和私有静态方法</h3><p>&emsp;&emsp;私有方法：使用<code>private</code>修饰，供接口中的默认方法或者静态方法调用。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterFaceName</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-1-3-基本的实现"><a href="#12-1-3-基本的实现" class="headerlink" title="12.1.3 基本的实现"></a>12.1.3 基本的实现</h2><h3 id="实现的概述"><a href="#实现的概述" class="headerlink" title="实现的概述"></a>实现的概述</h3><p>&emsp;&emsp;类与接口的关系为实现关系，即<strong>类实现接口</strong>，该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类似继承，格式相仿，只是关键字不同，实现使用 <code>implements</code>关键字。</p><p>非抽象子类实现接口：</p><ol><li>必须重写接口中所有抽象方法。</li><li>继承了接口的默认方法，即可以直接调用，也可以重写。</li></ol><p>实现格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 <span class="keyword">implements</span> 接口名 </span>&#123;</span><br><span class="line">    <span class="comment">// 重写接口中抽象方法【必须】</span></span><br><span class="line">    <span class="comment">// 重写接口中默认方法【可选】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象方法的使用"><a href="#抽象方法的使用" class="headerlink" title="抽象方法的使用"></a>抽象方法的使用</h3><p>必须全部实现，代码如下：</p><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LiveAble</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">LiveAble</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃东西"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"晚上睡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">        <span class="comment">// 调用实现后的方法</span></span><br><span class="line">        a.eat();</span><br><span class="line">        a.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    吃东西</span><br><span class="line">    晚上睡</span><br></pre></td></tr></table></figure><h3 id="默认方法的使用"><a href="#默认方法的使用" class="headerlink" title="默认方法的使用"></a>默认方法的使用</h3><p>&emsp;&emsp;可以继承，可以重写，二选一，但是只能通过实现类的对象来调用。</p><ol><li><p>继承默认方法，代码如下：</p><p> 定义接口：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LiveAble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"天上飞"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 定义实现类：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">LiveAble</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 继承，什么都不用写，直接调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 定义测试类：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">        <span class="comment">// 调用默认方法</span></span><br><span class="line">        a.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    天上飞</span><br></pre></td></tr></table></figure></li><li><p>重写默认方法，代码如下：</p><p> 定义接口：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LiveAble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"天上飞"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 定义实现类：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">LiveAble</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"自由自在的飞"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 定义测试类：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">        <span class="comment">// 调用重写方法</span></span><br><span class="line">        a.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    自由自在的飞</span><br></pre></td></tr></table></figure></li></ol><h3 id="静态方法的使用"><a href="#静态方法的使用" class="headerlink" title="静态方法的使用"></a>静态方法的使用</h3><p>&emsp;&emsp;静态与.class 文件相关，只能使用接口名调用，不可以通过实现类的类名或者实现类的对象调用，代码如下：</p><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LiveAble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"跑起来~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">LiveAble</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 无法重写静态方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Animal.run(); // 【错误】无法继承方法,也无法调用</span></span><br><span class="line">        LiveAble.run(); <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    跑起来~~~</span><br></pre></td></tr></table></figure><h3 id="私有方法的使用"><a href="#私有方法的使用" class="headerlink" title="私有方法的使用"></a>私有方法的使用</h3><ul><li>私有方法：只有默认方法可以调用。</li><li>私有静态方法：默认方法和静态方法可以调用。</li></ul><p>&emsp;&emsp;如果一个接口中有多个默认方法，并且方法中有重复的内容，那么可以抽取出来，封装到私有方法中，供默认方法去调用。从设计的角度讲，私有的方法是对默认方法和静态方法的辅助。</p><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LiveAble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        func1();</span><br><span class="line">        func2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"跑起来~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"跑起来~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-1-4-接口的多实现"><a href="#12-1-4-接口的多实现" class="headerlink" title="12.1.4 接口的多实现"></a>12.1.4 接口的多实现</h2><p>&emsp;&emsp;在继承体系中，一个类只能继承一个父类。而对于接口而言，一个类是可以实现多个接口的，这叫做接口的多实现。并且，一个类能继承一个父类，同时实现多个接口。</p><p>实现格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class 类名 [extends 父类名] implements 接口名1,接口名2,接口名3... &#123;</span><br><span class="line">    <span class="comment">// 重写接口中抽象方法【必须】</span></span><br><span class="line">    <span class="comment">// 重写接口中默认方法【不重名时可选】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>[ ]： 表示可选操作。</p></blockquote><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><p>&emsp;&emsp;接口中，有多个抽象方法时，实现类必须重写所有抽象方法。如果抽象方法有重名的，只需要重写一次。代码如下：</p><p>定义多个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">showA</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">showB</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"showA"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"showB"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"show"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>&emsp;&emsp;接口中，有多个默认方法时，实现类都可继承使用。<strong>如果默认方法有重名的，必须重写一次</strong>。代码如下：</p><p>定义多个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>接口中，存在同名的静态方法并不会冲突，原因是只能通过各自接口名访问静态方法。</p><h3 id="优先级的问题"><a href="#优先级的问题" class="headerlink" title="优先级的问题"></a>优先级的问题</h3><p>&emsp;&emsp;当一个类，既继承一个父类，又实现若干个接口时，父类中的成员方法与接口中的默认方法重名，子类就近选择执行父类的成员方法。代码如下：</p><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AAAAAAAAAAAA"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"DDDDDDDDDDDD"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 未重写methodA方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">        c.methodA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出结果:</span><br><span class="line">    DDDDDDDDDDDD</span><br></pre></td></tr></table></figure><h2 id="12-1-5-接口的多继承"><a href="#12-1-5-接口的多继承" class="headerlink" title="12.1.5 接口的多继承"></a>12.1.5 接口的多继承</h2><p>&emsp;&emsp;一个接口能继承另一个或者多个接口，这和类之间的继承比较相似。接口的继承使用<code>extends</code>关键字，子接口继承父接口的方法。<strong>如果父接口中的默认方法有重名的，那么子接口需要重写一次</strong>。代码如下：</p><p>定义父接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AAAAAAAAAAAAAAAAAAA"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"BBBBBBBBBBBBBBBBBBB"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义子接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"DDDDDDDDDDDDDD"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：<br>&emsp;&emsp;子接口重写默认方法时，default关键字可以保留。<br>&emsp;&emsp;子类重写默认方法时，default关键字不可以保留。</p></blockquote><h2 id="12-1-6-其他成员特点"><a href="#12-1-6-其他成员特点" class="headerlink" title="12.1.6 其他成员特点"></a>12.1.6 其他成员特点</h2><ul><li>接口中，无法定义成员变量，但是可以定义常量，其值不可以改变，默认使用 <code>public static final</code>修饰。</li><li>接口中，没有构造方法，不能创建对象。</li><li>接口中，没有静态代码块。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p><strong>使用接口的时候，需要注意：</strong></p><ul><li><p>接口是没有静态代码块或者构造方法的。</p></li><li><p>一个类的直接父类是唯一的，但是一个类可以同时实现多个接口。<br><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">MyInterfaceA</span>, <span class="title">MyInterfaceB</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 覆盖重写所有抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果实现类所实现的多个接口当中，存在重复的抽象方法，那么只需要覆盖重写一次即可。</p></li><li><p>如果实现类没有覆盖重写所有接口当中的所有抽象方法，那么实现类就必须是一个抽象类。</p></li><li><p>如果实现类锁实现的多个接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写。</p></li><li><p>一个类如果直接父类当中的方法，和接口当中的默认方法产生了冲突，优先用父类当中的方法。</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十一章 3.继承的综合案例</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/11_3%20%E7%BB%A7%E6%89%BF%E7%9A%84%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-20-/Java/java_basic/part02/11_3%20%E7%BB%A7%E6%89%BF%E7%9A%84%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="11-3-继承的综合案例"><a href="#11-3-继承的综合案例" class="headerlink" title="11.3 继承的综合案例"></a>11.3 继承的综合案例</h1><h2 id="11-3-1-综合案例：群主发普通红包"><a href="#11-3-1-综合案例：群主发普通红包" class="headerlink" title="11.3.1 综合案例：群主发普通红包"></a>11.3.1 综合案例：群主发普通红包</h2><p>&emsp;&emsp;群主发普通红包。某群有多名成员，群主给成员发普通红包。普通红包的规则：</p><ol><li>群主的一笔金额，从群主余额中扣除，平均分成n等份，让成员领取。</li><li>成员领取红包后，保存到成员余额中。</li></ol><p>&emsp;&emsp;请根据描述，完成案例中所有类的定义以及指定类之间的继承关系，并完成发红包的操作。</p><h2 id="11-3-2-案例分析"><a href="#11-3-2-案例分析" class="headerlink" title="11.3.2 案例分析"></a>11.3.2 案例分析</h2><p>根据描述分析，得出如下继承体系：</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/sgvYFNFdfsQT.png!blog" alt=""></p><h2 id="11-3-3-案例实现"><a href="#11-3-3-案例实现" class="headerlink" title="11.3.3 案例实现"></a>11.3.3 案例实现</h2><p>定义用户类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String username; <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> leftMoney; <span class="comment">// 余额</span></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, <span class="keyword">double</span> leftMoney)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.leftMoney = leftMoney;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get/set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLeftMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> leftMoney;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeftMoney</span><span class="params">(<span class="keyword">double</span> leftMoney)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.leftMoney = leftMoney;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 展示信息的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户名:"</span>+ username +<span class="string">" , 余额为:"</span> + leftMoney + <span class="string">"元"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义群主类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QunZhu</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 添加构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QunZhu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QunZhu</span><span class="params">(String username, <span class="keyword">double</span> leftMoney)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过super 调用父类构造方法</span></span><br><span class="line">        <span class="keyword">super</span>(username, leftMoney);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    群主发红包，就是把一个整数的金额，分层若干等份。</span></span><br><span class="line"><span class="comment">    1.获取群主余额,是否够发红包.</span></span><br><span class="line"><span class="comment">    不能则返回null,并提示.</span></span><br><span class="line"><span class="comment">    能则继续.</span></span><br><span class="line"><span class="comment">    2.修改群主余额.</span></span><br><span class="line"><span class="comment">    3.拆分红包.</span></span><br><span class="line"><span class="comment">    3.1.如果能整除，那么就平均分。</span></span><br><span class="line"><span class="comment">    3.2.如果不能整除，那么就把余数分给最后一份。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Double&gt; <span class="title">send</span><span class="params">(<span class="keyword">int</span> money, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取群主余额</span></span><br><span class="line">        <span class="keyword">double</span> leftMoney = getLeftMoney();</span><br><span class="line">        <span class="keyword">if</span>(money &gt; leftMoney) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 修改群主余额的</span></span><br><span class="line">        setLeftMoney(leftMoney ‐ money);</span><br><span class="line">        <span class="comment">// 创建一个集合,保存等份金额</span></span><br><span class="line">        ArrayList&lt;Double&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 扩大100倍,相当于折算成'分'为单位,避免小数运算损失精度的问题</span></span><br><span class="line">        money = money * <span class="number">100</span>;</span><br><span class="line">        <span class="comment">// 每份的金额</span></span><br><span class="line">        <span class="keyword">int</span> m = money / count;</span><br><span class="line">        <span class="comment">// 不能整除的余数</span></span><br><span class="line">        <span class="keyword">int</span> l = money % count;</span><br><span class="line">        <span class="comment">// 无论是否整除,n‐1份,都是每份的等额金额</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count ‐ <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 缩小100倍,折算成 '元'</span></span><br><span class="line">            list.add(m / <span class="number">100.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否整除</span></span><br><span class="line">        <span class="keyword">if</span> (l == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 能整除, 最后一份金额,与之前每份金额一致</span></span><br><span class="line">            list.add(m / <span class="number">100.0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不能整除, 最后一份的金额,是之前每份金额+余数金额</span></span><br><span class="line">            list.add((m + l) / <span class="number">100.00</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回集合</span></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义成员类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(String username, <span class="keyword">double</span> leftMoney)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(username, leftMoney);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打开红包,就是从集合中,随机取出一份,保存到自己的余额中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openHongbao</span><span class="params">(ArrayList&lt;Double&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Random对象</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">// 随机生成一个角标</span></span><br><span class="line">        <span class="keyword">int</span> index = r.nextInt(list.size());</span><br><span class="line">        <span class="comment">// 移除一个金额</span></span><br><span class="line">        Double money = list.remove(index);</span><br><span class="line">        <span class="comment">// 直接调用父类方法,设置到余额</span></span><br><span class="line">        setLeftMoney( money );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个群主对象</span></span><br><span class="line">        QunZhu qz = <span class="keyword">new</span> QunZhu(<span class="string">"群主"</span> , <span class="number">200</span>);</span><br><span class="line">        <span class="comment">// 创建一个键盘录入</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner();</span><br><span class="line">        System.out.println(<span class="string">"请输入金额:"</span>);</span><br><span class="line">        <span class="keyword">int</span> money = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"请输入个数:"</span>);</span><br><span class="line">        <span class="keyword">int</span> count = sc.nextInt();</span><br><span class="line">        <span class="comment">// 发送红包</span></span><br><span class="line">        ArrayList&lt;Double&gt; sendList = s.send(money,count);</span><br><span class="line">        <span class="comment">// 判断,如果余额不足</span></span><br><span class="line">        <span class="keyword">if</span>(sendList == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">" 余额不足..."</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建三个成员</span></span><br><span class="line">        Member m = <span class="keyword">new</span> Member();</span><br><span class="line">        Member m2 = <span class="keyword">new</span> Member();</span><br><span class="line">        Member m3 = <span class="keyword">new</span> Member();</span><br><span class="line">        <span class="comment">// 打开红包</span></span><br><span class="line">        m.openHongbao(sendList);</span><br><span class="line">        m2.openHongbao(sendList);</span><br><span class="line">        m3.openHongbao(sendList);</span><br><span class="line">        <span class="comment">// 展示信息</span></span><br><span class="line">        qz.show();</span><br><span class="line">        m.show();</span><br><span class="line">        m2.show();</span><br><span class="line">        m3.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例扩展："><a href="#案例扩展：" class="headerlink" title="案例扩展："></a>案例扩展：</h3><ol><li>如果成员的余额不为0呢，将如何处理？</li><li>如果群主想输入带小数的金额呢，将如何处理？</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十一章 2.抽象类</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/11_2%20%E6%8A%BD%E8%B1%A1%E7%B1%BB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/11_2%20%E6%8A%BD%E8%B1%A1%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="11-2-抽象类"><a href="#11-2-抽象类" class="headerlink" title="11.2 抽象类"></a>11.2 抽象类</h1><h2 id="11-2-1-概述"><a href="#11-2-1-概述" class="headerlink" title="11.2.1 概述"></a>11.2.1 概述</h2><h3 id="11-2-1-1-由来"><a href="#11-2-1-1-由来" class="headerlink" title="11.2.1.1 由来"></a>11.2.1.1 由来</h3><p>&emsp;&emsp;父类中的方法，被它的子类们重写，子类各自的实现都不尽相同。那么父类的方法声明和方法主体，只有声明还有意义，而方法主体则没有存在的意义了。我们把没有方法主体的方法称为<strong>抽象方法</strong>。Java语法规定，包含抽象方法的类就是<strong>抽象类</strong>。</p><h3 id="11-2-1-2-定义"><a href="#11-2-1-2-定义" class="headerlink" title="11.2.1.2 定义"></a>11.2.1.2 定义</h3><ul><li><strong>抽象方法</strong> ： 没有方法体的方法。</li><li><strong>抽象类</strong>：包含抽象方法的类。</li></ul><h2 id="11-2-2-abstract使用格式"><a href="#11-2-2-abstract使用格式" class="headerlink" title="11.2.2 abstract使用格式"></a>11.2.2 abstract使用格式</h2><h3 id="11-2-2-1-抽象方法"><a href="#11-2-2-1-抽象方法" class="headerlink" title="11.2.2.1 抽象方法"></a>11.2.2.1 抽象方法</h3><p>&emsp;&emsp;使用<code>abstract</code>关键字修饰方法，该方法就成了抽象方法，抽象方法只包含一个方法名，而没有方法体。</p><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">abstract</span> 返回值类型 方法名 (参数列表)；</span><br></pre></td></tr></table></figure><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span>；</span></span><br></pre></td></tr></table></figure><h3 id="11-2-2-2-抽象类"><a href="#11-2-2-2-抽象类" class="headerlink" title="11.2.2.2 抽象类"></a>11.2.2.2 抽象类</h3><p>如果一个类包含抽象方法，那么该类必须是抽象类。</p><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名字 </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span>；</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="11-2-2-3-抽象的使用"><a href="#11-2-2-3-抽象的使用" class="headerlink" title="11.2.2.3 抽象的使用"></a>11.2.2.3 抽象的使用</h3><p>&emsp;&emsp;继承抽象类的子类必须重写父类所有的抽象方法。否则，该子类也必须声明为抽象类。最终，必须有子类实现该父类的抽象方法，否则，从最初的父类到最终的子类都不能创建对象，失去意义。</p><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小猫在墙头走~~~"</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">        <span class="comment">// 调用run方法</span></span><br><span class="line">        c.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    小猫在墙头走~~~</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做<strong>实现方法</strong>。</p><h2 id="11-2-3-注意事项"><a href="#11-2-3-注意事项" class="headerlink" title="11.2.3 注意事项"></a>11.2.3 注意事项</h2><p>关于抽象类的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。</p><ol><li><p>抽象类<strong>不能创建对象</strong>，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。</p><blockquote><p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。 </p></blockquote></li><li><p>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。</p><blockquote><p>理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。 </p></blockquote></li><li><p>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p><blockquote><p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p></blockquote></li><li><p>抽象类的子类，必须重写抽象父类中<strong>所有的</strong>抽象方法，否则，编译无法通过而报错。除非该子类也是抽象类。</p><blockquote><p>理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十一章 1.继承</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/11_1%20%E7%BB%A7%E6%89%BF.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/11_1%20%E7%BB%A7%E6%89%BF.html</url>
      
        <content type="html"><![CDATA[<h1 id="11-1-继承"><a href="#11-1-继承" class="headerlink" title="11.1 继承"></a>11.1 继承</h1><h2 id="11-1-1-概述"><a href="#11-1-1-概述" class="headerlink" title="11.1.1 概述"></a>11.1.1 概述</h2><h3 id="11-1-1-1-由来"><a href="#11-1-1-1-由来" class="headerlink" title="11.1.1.1 由来"></a>11.1.1.1 由来</h3><p>&emsp;&emsp;多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那一个类即可。如图所示：</p><img src="//cdn.foreversfj.com/image/blog/20190824/LiELYvTvtP5n.png!blog" style="zoom:75%"/><p>&emsp;&emsp;其中，多个类可以称为<strong>子类</strong>，单独那一个类称为<strong>父类、超类</strong>（superclass）或者<strong>基类</strong>。</p><p>&emsp;&emsp;继承描述的是事物之间的所属关系，这种关系是： is-a 的关系。例如，图中兔子属于食草动物，食草动物属于动物。可见，父类更通用，子类更具体。我们通过继承，可以使多种事物之间形成一种关系体系。</p><h3 id="11-1-1-2-定义"><a href="#11-1-1-2-定义" class="headerlink" title="11.1.1.2 定义"></a>11.1.1.2 定义</h3><ul><li><strong>继承：</strong>就是子类继承父类的<strong>属性</strong>和<strong>行为</strong>，使得子类对象具有与父类相同的属性、相同的行为。子类可以直接访问父类中的<strong>非私有</strong>的属性和行为。</li></ul><h3 id="11-1-1-3-好处"><a href="#11-1-1-3-好处" class="headerlink" title="11.1.1.3 好处"></a>11.1.1.3 好处</h3><ol><li>提高代码的复用性。</li><li>类与类之间产生了关系，是多态的前提。</li></ol><h2 id="11-1-2-继承的格式"><a href="#11-1-2-继承的格式" class="headerlink" title="11.1.2 继承的格式"></a>11.1.2 继承的格式</h2><p>&emsp;&emsp;通过 <code>extends</code>关键字，可以声明一个子类继承另外一个父类，定义格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类 </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 定义员工类Employee，做为父类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">// 定义name属性</span></span><br><span class="line">    <span class="comment">// 定义员工的工作方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"尽心尽力地工作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 定义讲师类Teacher 继承 员工类Employee</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个打印name的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name="</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 定义测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个讲师类对象</span></span><br><span class="line">        Teacher t = <span class="keyword">new</span> Teacher();</span><br><span class="line">        <span class="comment">// 为该员工类的name属性进行赋值</span></span><br><span class="line">        t.name = <span class="string">"小明"</span>;</span><br><span class="line">        <span class="comment">// 调用该员工的printName()方法</span></span><br><span class="line">        t.printName(); <span class="comment">// name = 小明</span></span><br><span class="line">        <span class="comment">// 调用Teacher类继承来的work()方法</span></span><br><span class="line">        t.work(); <span class="comment">// 尽心尽力地工作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-1-3-继承后的特点——成员变量"><a href="#11-1-3-继承后的特点——成员变量" class="headerlink" title="11.1.3 继承后的特点——成员变量"></a>11.1.3 继承后的特点——成员变量</h2><p>&emsp;&emsp;当类之间产生了关系后，其中各类中的成员变量，又产生了哪些影响呢？</p><h3 id="11-1-3-1-成员变量不重名"><a href="#11-1-3-1-成员变量不重名" class="headerlink" title="11.1.3.1 成员变量不重名"></a>11.1.3.1 成员变量不重名</h3><p>&emsp;&emsp;如果子类父类中出现<strong>不重名</strong>的成员变量，这时的访问是<strong>没有影响</strong>的。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Fu中的成员变量。</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Zi中的成员变量</span></span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// Zi中的成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 访问父类中的num，</span></span><br><span class="line">        System.out.println(<span class="string">"Fu num="</span>+num); <span class="comment">// 继承而来，所以直接访问。</span></span><br><span class="line">        <span class="comment">// 访问子类中的num2</span></span><br><span class="line">        System.out.println(<span class="string">"Zi num2="</span>+num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line">        Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">        <span class="comment">// 调用子类中的show方法</span></span><br><span class="line">        z.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">演示结果：</span><br><span class="line">    Fu num = <span class="number">5</span></span><br><span class="line">    Zi num2 = <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="11-1-3-2-成员变量重名"><a href="#11-1-3-2-成员变量重名" class="headerlink" title="11.1.3.2 成员变量重名"></a>11.1.3.2 成员变量重名</h3><p>&emsp;&emsp;如果子类父类中出现重名的成员变量，这时的访问是有影响的。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Fu中的成员变量。</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Zi中的成员变量</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">6</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 访问父类中的num</span></span><br><span class="line">        System.out.println(<span class="string">"Fu num="</span> + num);</span><br><span class="line">        <span class="comment">// 访问子类中的num</span></span><br><span class="line">        System.out.println(<span class="string">"Zi num="</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line">        Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">        <span class="comment">// 调用子类中的show方法</span></span><br><span class="line">        z.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">演示结果：</span><br><span class="line">    Fu num = <span class="number">6</span></span><br><span class="line">    Zi num = <span class="number">6</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，需要使用<code>super</code>关键字，修饰父类成员变量，类似于之前学过的<code>this</code>。</p><p>使用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">super</span>.父类成员变量名</span><br></pre></td></tr></table></figure><p>子类方法需要修改，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Zi中的成员变量</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">6</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//访问父类中的num</span></span><br><span class="line">        System.out.println(<span class="string">"Fu num="</span> + <span class="keyword">super</span>.num);</span><br><span class="line">        <span class="comment">//访问子类中的num</span></span><br><span class="line">        System.out.println(<span class="string">"Zi num="</span> + <span class="keyword">this</span>.num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">演示结果：</span><br><span class="line">    Fu num = <span class="number">5</span></span><br><span class="line">    Zi num = <span class="number">6</span></span><br></pre></td></tr></table></figure><blockquote><p>小贴士：<br>&emsp;&emsp;Fu 类中的成员变量是非私有的，子类中可以直接访问。若Fu 类中的成员变量私有了，子类是不能直接访问的。通常编码时，我们遵循封装的原则，使用private修饰成员变量，那么如何访问父类的私有成员变量呢？<br>&emsp;&emsp;对！可以在父类中提供公共的<code>getXxx()</code>方法和<code>setXxx()</code>方法。</p></blockquote><h2 id="11-1-4-继承后的特点——成员方法"><a href="#11-1-4-继承后的特点——成员方法" class="headerlink" title="11.1.4 继承后的特点——成员方法"></a>11.1.4 继承后的特点——成员方法</h2><p>当类之间产生了关系，其中各类中的成员方法，又产生了哪些影响呢？</p><h3 id="11-1-4-1-成员方法不重名"><a href="#11-1-4-1-成员方法不重名" class="headerlink" title="11.1.4.1 成员方法不重名"></a>11.1.4.1 成员方法不重名</h3><p>&emsp;&emsp;如果子类父类中出现<strong>不重名</strong>的成员方法，这时的调用是<strong>没有影响</strong>的。对象调用方法时，会先在子类中查找有没有对应的方法，若子类中存在就会执行子类中的方法，若子类中不存在就会执行父类中相应的方法。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fu类中的show方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Zi类中的show2方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo04</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">        <span class="comment">//子类中没有show方法，但是可以找到父类方法去执行</span></span><br><span class="line">        z.show();</span><br><span class="line">        z.show2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-1-4-2-成员方法重名——重写-Override"><a href="#11-1-4-2-成员方法重名——重写-Override" class="headerlink" title="11.1.4.2 成员方法重名——重写(Override)"></a>11.1.4.2 成员方法重名——重写(Override)</h3><p>&emsp;&emsp;如果子类父类中出现重名的成员方法，这时的访问是一种特殊情况，叫做<strong>方法重写</strong> (Override)。</p><ul><li><strong>方法重写：</strong>子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效果，也称为重写或者复写。<strong>声明不变，重新实现</strong>。</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fu show"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="comment">//子类重写了父类的show方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Zi show"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo05</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">        <span class="comment">// 子类中有show方法，只执行重写后的show方法</span></span><br><span class="line">        z.show(); <span class="comment">// Zi show</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-1-4-3-重写的应用"><a href="#11-1-4-3-重写的应用" class="headerlink" title="11.1.4.3 重写的应用"></a>11.1.4.3 重写的应用</h3><p>&emsp;&emsp;子类可以根据需要，定义特定于自己的行为。既沿袭了父类的功能名称，又根据子类的需要重新实现父类方法，从而进行扩展增强。比如新的手机增加来电显示头像的功能，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"来电显示号码"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//智能手机类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="comment">//重写父类的来电显示号码功能，并增加自己的显示姓名和图片功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用父类已经存在的功能使用super</span></span><br><span class="line">        <span class="keyword">super</span>.showNum();</span><br><span class="line">        <span class="comment">//增加自己特有显示姓名和图片功能</span></span><br><span class="line">        System.out.println(<span class="string">"显示来电姓名"</span>);</span><br><span class="line">        System.out.println(<span class="string">"显示头像"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line">        NewPhone np = <span class="keyword">new</span> NewPhone()；</span><br><span class="line">            <span class="comment">// 调用父类继承而来的方法</span></span><br><span class="line">            np.call();</span><br><span class="line">        <span class="comment">// 调用子类重写的方法</span></span><br><span class="line">        np.showNum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：这里重写时，用到super.父类成员方法，表示调用父类的成员方法。</p></blockquote><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>子类方法覆盖父类方法，必须要保证权限大于等于父类权限。</li><li>子类方法覆盖父类方法，返回值类型、函数名和参数列表都要一模一样。</li></ol><h2 id="11-1-5-继承后的特点——构造方法"><a href="#11-1-5-继承后的特点——构造方法" class="headerlink" title="11.1.5 继承后的特点——构造方法"></a>11.1.5 继承后的特点——构造方法</h2><p>当类之间产生了关系，其中各类中的构造方法，又产生了哪些影响呢？</p><p>首先我们要回忆两个事情，构造方法的定义格式和作用。</p><ol><li>构造方法的名字是与类名一致的。所以子类是无法继承父类构造方法的。</li><li>构造方法的作用是初始化成员变量的。所以子类的初始化过程中，必须先执行父类的初始化动作。子类的构造方法中默认有一个super() ，表示调用父类的构造方法，父类成员变量初始化后，才可以给子类使用。</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">    Fu()&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fu()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    Zi()&#123;</span><br><span class="line">        <span class="comment">// super（），调用父类构造方法</span></span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        System.out.println(<span class="string">"Zi（）"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo07</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    Fu（）</span><br><span class="line">    Zi（）</span><br></pre></td></tr></table></figure><h2 id="11-1-6-super和this"><a href="#11-1-6-super和this" class="headerlink" title="11.1.6 super和this"></a>11.1.6 super和this</h2><h3 id="11-1-6-1-父类空间优先于子类对象产生"><a href="#11-1-6-1-父类空间优先于子类对象产生" class="headerlink" title="11.1.6.1 父类空间优先于子类对象产生"></a>11.1.6.1 父类空间优先于子类对象产生</h3><p>&emsp;&emsp;在每次创建子类对象时，先初始化父类空间，再创建其子类对象本身。目的在于子类对象中包含了其对应的父类空间，便可以包含其父类的成员，如果父类成员非private修饰，则子类可以随意使用父类成员。代码体现在子类的构造方法调用时，一定先调用父类的构造方法。</p><p>理解图解如下：</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/EjMtxnG3Cscf.png!blog" alt=""></p><h3 id="11-1-6-2-super和this的含义"><a href="#11-1-6-2-super和this的含义" class="headerlink" title="11.1.6.2 super和this的含义"></a>11.1.6.2 super和this的含义</h3><ul><li><strong>super</strong>：代表父类的<strong>存储空间标识</strong>(可以理解为父亲的引用)。</li><li><strong>this</strong>：代表<strong>当前对象的引用</strong>(谁调用就代表谁)。</li></ul><h3 id="11-1-6-3-super和this的用法"><a href="#11-1-6-3-super和this的用法" class="headerlink" title="11.1.6.3 super和this的用法"></a>11.1.6.3 super和this的用法</h3><h4 id="访问成员"><a href="#访问成员" class="headerlink" title="访问成员"></a>访问成员</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.成员变量 ‐‐ 本类的</span><br><span class="line"><span class="keyword">super</span>.成员变量 ‐‐ 父类的</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.成员方法名() ‐‐ 本类的</span><br><span class="line"><span class="keyword">super</span>.成员方法名() ‐‐ 父类的</span><br></pre></td></tr></table></figure><p>用法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"animal : eat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat : eat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.eat(); <span class="comment">// this 调用本类的方法</span></span><br><span class="line">        <span class="keyword">super</span>.eat(); <span class="comment">// super 调用父类的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">        a.eat();</span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">        c.eatTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输出结果为：</span><br><span class="line">    animal : eat</span><br><span class="line">    cat : eat</span><br><span class="line">    animal : eat</span><br></pre></td></tr></table></figure><h4 id="访问构造方法"><a href="#访问构造方法" class="headerlink" title="访问构造方法"></a>访问构造方法</h4><p><strong>super关键字的用法有三种：</strong></p><ol><li>在子类的成员方法中，访问父类的成员变量。</li><li>在子类的成员方法中，访问父类的成员方法。</li><li>在子类的构造方法中，访问父类的构造方法。</li></ol><p><strong>super关键字用来访问父类内容，而this关键字用来访问本类内容。用法也有三种：</strong></p><ol><li>在本类的成员方法中，访问本类的成员变量。</li><li>在本类的成员方法中，访问本类的另一个成员方法。</li><li>在本类的构造方法中，访问本类的另一个构造方法。</li></ol><blockquote><p>&emsp;&emsp;子类的每个构造方法中均有默认的<code>super()</code>，调用父类的空参构造。手动调用父类构造会覆盖默认的<code>super()</code>。</p><p>&emsp;&emsp;<code>super()</code>和 <code>this()</code> 都必须是在构造方法的第一行，所以<strong>不能同时出现</strong>。</p></blockquote><h3 id="11-1-6-4-内存图解"><a href="#11-1-6-4-内存图解" class="headerlink" title="11.1.6.4 内存图解"></a>11.1.6.4 内存图解</h3><p><img src="//cdn.foreversfj.com/image/blog/20200302/VofhEzuLI6TS.png!blog" alt=""></p><h2 id="11-1-7-继承的特点"><a href="#11-1-7-继承的特点" class="headerlink" title="11.1.7 继承的特点"></a>11.1.7 继承的特点</h2><ol><li><p>Java只支持单继承，不支持多继承。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个类只能有一个父类，不可以有多个父类。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125; <span class="comment">//ok</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>，<span class="title">B</span>... //<span class="title">error</span></span></span><br></pre></td></tr></table></figure></li><li><p>Java支持多层继承(继承体系)。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>顶层父类是Object类。所有的类默认继承Object，作为父类。</p></blockquote></li><li><p>子类和父类是一种相对的概念。</p></li></ol><p><img src="//cdn.foreversfj.com/image/blog/20200302/Tol0Ts6QozjN.png!blog" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十章 7.Math类</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/10_7%20Math%E7%B1%BB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/10_7%20Math%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-7-Math类"><a href="#10-7-Math类" class="headerlink" title="10.7 Math类"></a>10.7 Math类</h1><h2 id="10-7-1-概述"><a href="#10-7-1-概述" class="headerlink" title="10.7.1 概述"></a>10.7.1 概述</h2><p>&emsp;&emsp;<code>java.lang.Math</code>类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。类似这样的工具类，其所有方法均为静态方法，并且不会创建对象，调用起来非常简单。</p><h2 id="10-7-2-基本运算的方法"><a href="#10-7-2-基本运算的方法" class="headerlink" title="10.7.2 基本运算的方法"></a>10.7.2 基本运算的方法</h2><ul><li><p><strong><code>public static double abs(double a)</code></strong>：返回 double 值的绝对值。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d1 = Math.abs(‐<span class="number">5</span>); <span class="comment">//d1的值为5</span></span><br><span class="line"><span class="keyword">double</span> d2 = Math.abs(<span class="number">5</span>); <span class="comment">//d2的值为5</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>public static double ceil(double a)</code></strong>：返回大于等于参数的最小的整数。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d1 = Math.ceil(<span class="number">3.3</span>); <span class="comment">//d1的值为 4.0</span></span><br><span class="line"><span class="keyword">double</span> d2 = Math.ceil(‐<span class="number">3.3</span>); <span class="comment">//d2的值为 ‐3.0</span></span><br><span class="line"><span class="keyword">double</span> d3 = Math.ceil(<span class="number">5.1</span>); <span class="comment">//d3的值为 6.0</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>public static double floor(double a)</code></strong>：返回小于等于参数最大的整数。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d1 = Math.floor(<span class="number">3.3</span>); <span class="comment">//d1的值为3.0</span></span><br><span class="line"><span class="keyword">double</span> d2 = Math.floor(‐<span class="number">3.3</span>); <span class="comment">//d2的值为‐4.0</span></span><br><span class="line"><span class="keyword">double</span> d3 = Math.floor(<span class="number">5.1</span>); <span class="comment">//d3的值为 5.0</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>public static long round(double a)</code></strong>：返回最接近参数的long。(相当于四舍五入方法)</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> d1 = Math.round(<span class="number">5.5</span>); <span class="comment">//d1的值为6.0</span></span><br><span class="line"><span class="keyword">long</span> d2 = Math.round(<span class="number">5.4</span>); <span class="comment">//d2的值为5.0</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="10-7-3-练习"><a href="#10-7-3-练习" class="headerlink" title="10.7.3 练习"></a>10.7.3 练习</h2><p>请使用<code>Math</code>相关的<code>API</code>，计算在 <em>-10.8到5.9</em> 之间， <em>绝对值大于6或者小于2.1</em> 的整数有多少个？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义最小值</span></span><br><span class="line">        <span class="keyword">double</span> min = ‐<span class="number">10.8</span>;</span><br><span class="line">        <span class="comment">// 定义最大值</span></span><br><span class="line">        <span class="keyword">double</span> max = <span class="number">5.9</span>;</span><br><span class="line">        <span class="comment">// 定义变量计数</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 范围内循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> i = Math.ceil(min); i &lt;= max; i++) &#123;</span><br><span class="line">            <span class="comment">// 获取绝对值并判断</span></span><br><span class="line">            <span class="keyword">if</span> (Math.abs(i) &gt; <span class="number">6</span> || Math.abs(i) &lt; <span class="number">2.1</span>) &#123;</span><br><span class="line">                <span class="comment">// 计数</span></span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"个数为: "</span> + count + <span class="string">" 个"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十章 6.Arrays类</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/10_6%20Arrays%E7%B1%BB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/10_6%20Arrays%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-6-Arrays类"><a href="#10-6-Arrays类" class="headerlink" title="10.6 Arrays类"></a>10.6 Arrays类</h1><h2 id="10-6-1-概述"><a href="#10-6-1-概述" class="headerlink" title="10.6.1 概述"></a>10.6.1 概述</h2><p>&emsp;&emsp;<code>java.util.Arrays</code>此类包含用来操作数组的各种方法，比如排序和搜索等。其所有方法均为静态方法，调用起来非常简单。</p><h2 id="10-6-2-操作数组的方法"><a href="#10-6-2-操作数组的方法" class="headerlink" title="10.6.2 操作数组的方法"></a>10.6.2 操作数组的方法</h2><ul><li><p><strong><code>public static String toString(int[] a)</code></strong>：返回指定数组内容的字符串表示形式。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义int 数组</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">34</span>,<span class="number">35</span>,<span class="number">4</span>,<span class="number">657</span>,<span class="number">8</span>,<span class="number">69</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="comment">// 打印数组,输出地址值</span></span><br><span class="line">    System.out.println(arr); <span class="comment">// [I@2ac1fdc4</span></span><br><span class="line">    <span class="comment">// 数组内容转为字符串</span></span><br><span class="line">    String s = Arrays.toString(arr);</span><br><span class="line">    <span class="comment">// 打印字符串,输出内容</span></span><br><span class="line">    System.out.println(s); <span class="comment">// [2, 34, 35, 4, 657, 8, 69, 9]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>public static void sort(int[] a)</code></strong>：对指定的 int 型数组按数字升序进行排序。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义int 数组</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">24</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">48</span>, <span class="number">4</span>, <span class="number">46</span>, <span class="number">35</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="comment">// 排序前:[24, 7, 5, 48, 4, 46, 35, 11, 6, 2]</span></span><br><span class="line">    System.out.println(<span class="string">"排序前:"</span>+ Arrays.toString(arr));</span><br><span class="line">    <span class="comment">// 升序排序</span></span><br><span class="line">    Arrays.sort(arr);</span><br><span class="line">    <span class="comment">// 排序后:[2, 4, 5, 6, 7, 11, 24, 35, 46, 48]</span></span><br><span class="line">    System.out.println(<span class="string">"排序后:"</span>+ Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="10-6-3-练习"><a href="#10-6-3-练习" class="headerlink" title="10.6.3 练习"></a>10.6.3 练习</h2><ul><li><p>请使用<code>Arrays</code>相关的API，将一个随机字符串中的所有字符升序排列，并倒序打印。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraysTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义随机的字符串</span></span><br><span class="line">        String line = <span class="string">"ysKUreaytWTRHsgFdSAoidq"</span>;</span><br><span class="line">        <span class="comment">// 转换为字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = line.toCharArray();</span><br><span class="line">        <span class="comment">// 升序排序</span></span><br><span class="line">        Arrays.sort(chars);</span><br><span class="line">        <span class="comment">// 反向遍历打印</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = chars.length‐<span class="number">1</span>; i &gt;= <span class="number">0</span> ; i‐‐) &#123;</span><br><span class="line">            <span class="comment">// y y t s s r q o i g e d d a W U T S R K H F A</span></span><br><span class="line">            System.out.print(chars[i]+<span class="string">" "</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十章 5.static关键字</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/10_5%20static%E5%85%B3%E9%94%AE%E5%AD%97.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/10_5%20static%E5%85%B3%E9%94%AE%E5%AD%97.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-5-static关键字"><a href="#10-5-static关键字" class="headerlink" title="10.5 static关键字"></a>10.5 static关键字</h1><h2 id="10-5-1-概述"><a href="#10-5-1-概述" class="headerlink" title="10.5.1 概述"></a>10.5.1 概述</h2><p>&emsp;&emsp;关于<code>static</code>关键字的使用，它可以用来修饰的成员变量和成员方法，被修饰的成员是属于类的，而不是单单是属于某个对象的。也就是说，既然属于类，就可以不靠创建对象来调用了。</p><h2 id="10-5-2-定义和使用格式"><a href="#10-5-2-定义和使用格式" class="headerlink" title="10.5.2 定义和使用格式"></a>10.5.2 定义和使用格式</h2><h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3><p>&emsp;&emsp;当<code>static</code>修饰成员变量时，该变量称为类变量。该类的每个对象都<strong>共享</strong>同一个类变量的值。任何对象都可以更改该类变量的值，但也可以在不创建该类的对象的情况下对类变量进行操作。</p><ul><li><strong>类变量：</strong>使用 static关键字修饰的成员变量。</li></ul><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> 数据类型 变量名；</span><br></pre></td></tr></table></figure><p>举例：</p><p>&emsp;&emsp;比如说，基础班新班开班，学员报到。现在想为每一位新来报到的同学编学号（sid），从第一名同学开始，sid为1，以此类推。学号必须是唯一的，连续的，并且与班级的人数相符，这样以便知道，要分配给下一名新同学的学号是多少。这样我们就需要一个变量，与单独的每一个学生对象无关，而是与整个班级同学数量有关。</p><p>&emsp;&emsp;所以，我们可以这样定义一个静态变量<code>numberOfStudent</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 学生的id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sid;</span><br><span class="line">    <span class="comment">// 类变量，记录学生数量，分配学号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> numberOfStudent = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="comment">// 通过 numberOfStudent 给学生分配学号</span></span><br><span class="line">        <span class="keyword">this</span>.sid = ++numberOfStudent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印属性值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Student : name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", sid="</span> + sid );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StuDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">"张三"</span>, <span class="number">23</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">"李四"</span>, <span class="number">24</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">"王五"</span>, <span class="number">25</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">"赵六"</span>, <span class="number">26</span>);</span><br><span class="line">        s1.show(); <span class="comment">// Student : name=张三, age=23, sid=1</span></span><br><span class="line">        s2.show(); <span class="comment">// Student : name=李四, age=24, sid=2</span></span><br><span class="line">        s3.show(); <span class="comment">// Student : name=王五, age=25, sid=3</span></span><br><span class="line">        s4.show(); <span class="comment">// Student : name=赵六, age=26, sid=4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>&emsp;&emsp;当<code>static</code>修饰成员方法时，该方法称为类方法。静态方法在声明中有static，建议使用类名来调用，而不需要创建类的对象。调用方式非常简单。</p><ul><li><strong>类方法：</strong>使用static关键字修饰的成员方法，习惯称为静态方法。</li></ul><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">static</span> 返回值类型 方法名 (参数列表)&#123;</span><br><span class="line">    <span class="comment">// 执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：在Student类中定义静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"num:"</span> + numberOfStudent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>静态方法调用的注意事项：</strong><ul><li>静态方法可以直接访问类变量和静态方法。</li><li>静态方法不能直接访问普通成员变量或成员方法。反之，成员方法可以直接访问类变量或静态方法。</li><li>静态方法中，不能使用this关键字。</li></ul></li></ul><blockquote><p>小贴士：静态方法只能访问静态成员。</p></blockquote><h3 id="调用格式"><a href="#调用格式" class="headerlink" title="调用格式"></a>调用格式</h3><p>&emsp;&emsp;被static修饰的成员可以并且建议通过类名直接访问。虽然也可以通过对象名访问静态成员，原因即多个对象均属于一个类，共享使用同一个静态成员，但是不建议，会出现警告信息。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问类变量</span></span><br><span class="line">类名.类变量名；</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用静态方法</span></span><br><span class="line">类名.静态方法名(参数)；</span><br></pre></td></tr></table></figure><p>调用演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StuDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 访问类变量</span></span><br><span class="line">        System.out.println(Student.numberOfStudent);</span><br><span class="line">        <span class="comment">// 调用静态方法</span></span><br><span class="line">        Student.showNum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-5-3-静态原理图解"><a href="#10-5-3-静态原理图解" class="headerlink" title="10.5.3 静态原理图解"></a>10.5.3 静态原理图解</h2><p><code>static</code>修饰的内容：</p><ul><li>是随着类的加载而加载的，且只加载一次。</li><li>存储于方法区中一块固定的内存区域（静态区），所以，可以直接被类名调用。</li><li>它优先于对象存在，所以，可以被所有对象共享。</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190824/gl4yHoxWOP4P.png!blog" alt=""></p><h2 id="10-5-4-静态代码块"><a href="#10-5-4-静态代码块" class="headerlink" title="10.5.4 静态代码块"></a>10.5.4 静态代码块</h2><ul><li><p><strong>静态代码块</strong>：定义在成员位置，使用<code>static</code>修饰的代码块{ }。</p><ul><li><p>位置：在类中，在方法外。</p></li><li><p>执行：随着类的加载而执行且只执行一次，优先于<code>main</code>方法和构造方法的执行。</p></li><li><p>格式：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>作用：给类变量进行初始化赋值。用法演示，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 给类变量赋值</span></span><br><span class="line">        number = <span class="number">2</span>;</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">// 添加元素到集合中</span></span><br><span class="line">        list.add(<span class="string">"张三"</span>);</span><br><span class="line">        list.add(<span class="string">"李四"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>小贴士：<br>&emsp;&emsp;<code>static</code>关键字，可以修饰变量、方法和代码块。在使用的过程中，其主要目的还是想在不创建对象的情况下，去调用方法。下面将介绍两个工具类，来体现static 方法的便利。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十章 4.String类</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/10_4%20String%E7%B1%BB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/10_4%20String%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-4-String类"><a href="#10-4-String类" class="headerlink" title="10.4 String类"></a>10.4 String类</h1><h2 id="10-4-1-String类概述"><a href="#10-4-1-String类概述" class="headerlink" title="10.4.1 String类概述"></a>10.4.1 String类概述</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>&emsp;&emsp;<code>java.lang.String</code>类代表字符串。Java程序中所有的字符串文字（例如<code>&quot;abc&quot;</code>）都可以被看作是实现此类的实例。</p><p>&emsp;&emsp;类<code>String</code>中包括用于检查各个字符串的方法，比如用于比较字符串，搜索字符串，提取子字符串以及创建具有翻译为大写或小写的所有字符的字符串的副本。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><p>字符串不变：字符串的值在创建后不能被更改。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"abc"</span>;</span><br><span class="line">s1 += <span class="string">"d"</span>;</span><br><span class="line">System.out.println(s1); <span class="comment">// "abcd"</span></span><br><span class="line"><span class="comment">// 内存中有"abc"，"abcd"两个对象，s1从指向"abc"，改变指向，指向了"abcd"。</span></span><br></pre></td></tr></table></figure></li><li><p>因为String对象是不可变的，所以它们可以被共享。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"abc"</span>;</span><br><span class="line">String s2 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="comment">// 内存中只有一个"abc"对象被创建，同时被s1和s2共享。字符串常量池。</span></span><br></pre></td></tr></table></figure></li><li><p>“abc” 等效于 char[] data={ ‘a’ , ‘b’ , ‘c’ } 。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">String str = <span class="string">"abc"</span>;</span><br><span class="line">相当于：</span><br><span class="line"><span class="keyword">char</span> data[] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</span><br><span class="line">String str = <span class="keyword">new</span> String(data);</span><br><span class="line"><span class="comment">// String底层是靠字符数组实现的。</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="10-4-2-使用步骤"><a href="#10-4-2-使用步骤" class="headerlink" title="10.4.2 使用步骤"></a>10.4.2 使用步骤</h2><h3 id="查看类"><a href="#查看类" class="headerlink" title="查看类"></a>查看类</h3><ul><li><strong><code>java.lang.String</code></strong>：此类不需要导入。</li></ul><h3 id="查看构造方法"><a href="#查看构造方法" class="headerlink" title="查看构造方法"></a>查看构造方法</h3><ul><li><strong><code>public String()</code></strong>：初始化新创建的 String对象，以使其表示空字符序列。</li><li><strong><code>public String(char[] value)</code></strong>：通过当前参数中的字符数组来构造新的String。</li><li><strong><code>public String(byte[] bytes)</code></strong>：通过使用平台的默认字符集解码当前参数中的字节数组来构造新的String。</li></ul><h3 id="构造举例，代码如下："><a href="#构造举例，代码如下：" class="headerlink" title="构造举例，代码如下："></a>构造举例，代码如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参构造</span></span><br><span class="line">String str = <span class="keyword">new</span> String（）；</span><br><span class="line"><span class="comment">// 通过字符数组构造</span></span><br><span class="line"><span class="keyword">char</span> chars[] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</span><br><span class="line">String str2 = <span class="keyword">new</span> String(chars);</span><br><span class="line"><span class="comment">// 通过字节数组构造</span></span><br><span class="line"><span class="keyword">byte</span> bytes[] = &#123; <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span> &#125;;</span><br><span class="line">String str3 = <span class="keyword">new</span> String(bytes);</span><br></pre></td></tr></table></figure><h2 id="10-4-3-常用方法"><a href="#10-4-3-常用方法" class="headerlink" title="10.4.3 常用方法"></a>10.4.3 常用方法</h2><h3 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h3><p><strong>字符串常量池</strong>：程序当中直接写上的双引号字符串，就在字符串常量池中。</p><p>对于基本类型来说，<code>==</code> 是进行 <strong><em>数值</em></strong>  的比较。<br>对于引用类型来说，<code>==</code> 是进行 <strong><em>地址值</em></strong>  的比较。</p><p><img src="//cdn.foreversfj.com/image/blog/20200302/YLFU9BWfaHsl.png!blog" alt=""></p><h3 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h3><ul><li><p><strong><code>public boolean equals (Object anObject)</code></strong>：将此字符串与指定对象进行比较。</p><ul><li>任何对象都能用Object进行接收。</li></ul><ol start="2"><li><code>equals</code>方法具有对称性，也就是<code>a.equals(b)</code>和<code>b.equals(a)</code>效果一样。</li><li>如果比较双方一个常量一个变量，推荐把常量字符串写在前面。</li></ol><ul><li><strong>推荐</strong>：<code>&quot;abc&quot;.equals(str)</code>    <strong>不推荐</strong>：<code>str.equals(&quot;abc&quot;)</code></li></ul></li><li><p><strong><code>public boolean equalsIgnoreCase (String anotherString)</code></strong>：将此字符串与指定对象进行比较，忽略大小写。</p><p>  方法演示，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"Hello"</span>;</span><br><span class="line">        String str2 = <span class="string">"Hello"</span>;</span><br><span class="line">        <span class="keyword">char</span>[] charArray = &#123;<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>&#125;;</span><br><span class="line">        String str3 = <span class="keyword">new</span> String(charArray);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.equals(str2)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(str2.equals(str3)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(str3.equals(<span class="string">"Hello"</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>.equals(str1)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        String str4 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(str1.equals(str4)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">"================="</span>);</span><br><span class="line"></span><br><span class="line">    String str5 = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">"abc"</span>.equals(str5)); <span class="comment">// 推荐：false</span></span><br><span class="line">        <span class="comment">// System.out.println(str5.equals("abc")); // 不推荐：报错，空指针异常NullPointerException</span></span><br><span class="line">        System.out.println(<span class="string">"================="</span>);</span><br><span class="line"></span><br><span class="line">        String strA = <span class="string">"Java"</span>;</span><br><span class="line">        String strB = <span class="string">"java"</span>;</span><br><span class="line">        System.out.println(strA.equals(strB)); <span class="comment">// false，严格区分大小写</span></span><br><span class="line">        System.out.println(strA.equalsIgnoreCase(strB)); <span class="comment">// true，忽略大小写</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意，只有英文字母区分大小写，其他都不区分大小写</span></span><br><span class="line">        System.out.println(<span class="string">"abc一123"</span>.equalsIgnoreCase(<span class="string">"abc壹123"</span>)); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Object 是” 对象”的意思，也是一种引用类型。作为参数类型，表示任意对象都可以传递到方法中。</p></blockquote></li></ul><h3 id="获取功能的方法"><a href="#获取功能的方法" class="headerlink" title="获取功能的方法"></a>获取功能的方法</h3><ul><li><p><strong><code>public int length ()</code></strong>：返回此字符串的长度。</p></li><li><p><strong><code>public String concat (String str)</code></strong>：将指定的字符串连接到该字符串的末尾。</p></li><li><p><strong><code>public char charAt (int index)</code></strong>：返回指定索引处的 char值。</p></li><li><p><strong><code>public int indexOf (String str)</code></strong>：返回指定子字符串第一次出现在该字符串内的索引。</p></li><li><p><strong><code>public String substring (int beginIndex)</code></strong>：返回一个子字符串，从beginIndex开始截取字符串到字符串结尾。</p></li><li><p><strong><code>public String substring (int beginIndex, int endIndex)</code></strong>：返回一个子字符串，从beginIndex到endIndex截取字符串。含beginIndex，不含endIndex。</p><p>  方法演示，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符串对象</span></span><br><span class="line">        String s = <span class="string">"helloworld"</span>;</span><br><span class="line">        <span class="comment">// int length():获取字符串的长度，其实也就是字符个数</span></span><br><span class="line">        System.out.println(s.length());</span><br><span class="line">        System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// String concat (String str):将将指定的字符串连接到该字符串的末尾.</span></span><br><span class="line">        String s = <span class="string">"helloworld"</span>;</span><br><span class="line">        String s2 = s.concat(<span class="string">"**hello itheima"</span>);</span><br><span class="line">        System.out.println(s2);<span class="comment">// helloworld**hello itheima</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// char charAt(int index):获取指定索引处的字符</span></span><br><span class="line">        System.out.println(s.charAt(<span class="number">0</span>));</span><br><span class="line">        System.out.println(s.charAt(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// int indexOf(String str):获取str在字符串对象中第一次出现的索引,没有返回‐1</span></span><br><span class="line">        System.out.println(s.indexOf(<span class="string">"l"</span>));</span><br><span class="line">        System.out.println(s.indexOf(<span class="string">"owo"</span>));</span><br><span class="line">        System.out.println(s.indexOf(<span class="string">"ak"</span>));</span><br><span class="line">        System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// String substring(int start):从start开始截取字符串到字符串结尾</span></span><br><span class="line">        System.out.println(s.substring(<span class="number">0</span>));</span><br><span class="line">        System.out.println(s.substring(<span class="number">5</span>));</span><br><span class="line">        System.out.println(<span class="string">"============================"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// String substring(int start,int end):从start到end截取字符串。含start，不含end。</span></span><br><span class="line">        System.out.println(s.substring(<span class="number">0</span>, s.length()));</span><br><span class="line">        System.out.println(s.substring(<span class="number">3</span>,<span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="转换功能的方法"><a href="#转换功能的方法" class="headerlink" title="转换功能的方法"></a>转换功能的方法</h3><ul><li><p><strong><code>public char[] toCharArray ()</code></strong>：将此字符串转换为新的字符数组。</p></li><li><p><strong><code>public byte[] getBytes ()</code></strong>：使用平台的默认字符集将该 String编码转换为新的字节数组。</p></li><li><p><strong><code>public String replace (CharSequence target, CharSequence replacement)</code></strong>：将与target匹配的字符串使用replacement字符串替换。</p><p>  方法演示，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符串对象</span></span><br><span class="line">        String s = <span class="string">"abcde"</span>;</span><br><span class="line">        <span class="comment">// char[] toCharArray():把字符串转换为字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; chs.length; x++) &#123;</span><br><span class="line">            System.out.println(chs[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line">        <span class="comment">// byte[] getBytes ():把字符串转换为字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = s.getBytes();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; bytes.length; x++) &#123;</span><br><span class="line">            System.out.println(bytes[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line">        <span class="comment">// 替换字母it为大写IT</span></span><br><span class="line">        String str = <span class="string">"itcast itheima"</span>;</span><br><span class="line">        String replace = str.replace(<span class="string">"it"</span>, <span class="string">"IT"</span>);</span><br><span class="line">        System.out.println(replace); <span class="comment">// ITcast ITheima</span></span><br><span class="line">        System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  CharSequence 是一个接口，也是一种引用类型。作为参数类型，可以把String对象传递到方法中。</p></blockquote></li></ul><h3 id="分割功能的方法"><a href="#分割功能的方法" class="headerlink" title="分割功能的方法"></a>分割功能的方法</h3><ul><li><p><strong><code>public String[] split(String regex)</code></strong>：将此字符串按照给定的regex（规则）拆分为字符串数组。</p><p>  方法演示，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符串对象</span></span><br><span class="line">        String s = <span class="string">"aa|bb|cc"</span>;</span><br><span class="line">        String[] strArray = s.split(<span class="string">"|"</span>); <span class="comment">// ["aa","bb","cc"]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; strArray.length; x++) &#123;</span><br><span class="line">            System.out.println(strArray[x]); <span class="comment">// aa bb cc</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="10-4-4-String类的练习"><a href="#10-4-4-String类的练习" class="headerlink" title="10.4.4 String类的练习"></a>10.4.4 String类的练习</h2><h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><p>&emsp;&emsp;定义一个方法，把数组{1,2,3}按照指定个格式拼接成一个字符串。格式参照如下：<code>[word1#word2#word3]</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个int类型的数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        String s = arrayToString(arr);</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">"s:"</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 写方法实现把数组中的元素按照指定的格式拼接成一个字符串</span></span><br><span class="line"><span class="comment">    * 两个明确：</span></span><br><span class="line"><span class="comment">    * 返回值类型：String</span></span><br><span class="line"><span class="comment">    * 参数列表：int[] arr</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建字符串s</span></span><br><span class="line">        String s = <span class="keyword">new</span> String(<span class="string">"["</span>);</span><br><span class="line">        <span class="comment">// 遍历数组，并拼接字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == arr.length ‐ <span class="number">1</span>) &#123;</span><br><span class="line">                s = s.concat(arr[x] + <span class="string">"]"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s = s.concat(arr[x] + <span class="string">"#"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计字符个数"><a href="#统计字符个数" class="headerlink" title="统计字符个数"></a>统计字符个数</h3><p>键盘录入一个字符，统计字符串中大小写字母及数字字符个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入一个字符串数据</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入一个字符串数据："</span>);</span><br><span class="line">        String s = sc.nextLine();</span><br><span class="line">        <span class="comment">//定义三个统计变量，初始化值都是0</span></span><br><span class="line">        <span class="keyword">int</span> bigCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> smallCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> numberCount = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历字符串，得到每一个字符</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;s.length(); x++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = s.charAt(x);</span><br><span class="line">            <span class="comment">//拿字符进行判断</span></span><br><span class="line">            <span class="keyword">if</span>(ch&gt;=<span class="string">'A'</span>&amp;&amp;ch&lt;=<span class="string">'Z'</span>) &#123;</span><br><span class="line">                bigCount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">'a'</span>&amp;&amp;ch&lt;=<span class="string">'z'</span>) &#123;</span><br><span class="line">                smallCount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;</span><br><span class="line">                numberCount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"该字符"</span>+ch+<span class="string">"非法"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">"大写字符："</span>+bigCount+<span class="string">"个"</span>);</span><br><span class="line">        System.out.println(<span class="string">"小写字符："</span>+smallCount+<span class="string">"个"</span>);</span><br><span class="line">        System.out.println(<span class="string">"数字字符："</span>+numberCount+<span class="string">"个"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十章 3.ArrayList类</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/10_3%20ArrayList%E7%B1%BB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/10_3%20ArrayList%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-3-ArrayList类"><a href="#10-3-ArrayList类" class="headerlink" title="10.3 ArrayList类"></a>10.3 ArrayList类</h1><h2 id="10-3-1-引入——对象数组"><a href="#10-3-1-引入——对象数组" class="headerlink" title="10.3.1 引入——对象数组"></a>10.3.1 引入——对象数组</h2><p>使用学生数组，存储三个学生对象，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">publicvoid <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">publicint <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">publicvoid <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01StudentArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建学生数组</span></span><br><span class="line">        Student[] students = <span class="keyword">new</span> Student[<span class="number">3</span>];</span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">"曹操"</span>,<span class="number">40</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">"刘备"</span>,<span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">"孙权"</span>,<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//把学生对象作为元素赋值给学生数组</span></span><br><span class="line">        students[<span class="number">0</span>] = s1;</span><br><span class="line">        students[<span class="number">1</span>] = s2;</span><br><span class="line">        students[<span class="number">2</span>] = s3;</span><br><span class="line">        <span class="comment">//遍历学生数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;students.length; x++) &#123;</span><br><span class="line">            Student s = students[x];</span><br><span class="line">            System.out.println(s.getName()+<span class="string">"‐‐‐"</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;到目前为止，我们想存储对象数据，选择的容器，只有对象数组。而数组的长度是固定的，无法适应数据变化的需求。为了解决这个问题，Java提供了另一个容器 <code>java.util.ArrayList</code>集合类,让我们可以更便捷的存储和操作对象数据。</p><h2 id="10-3-2-什么是ArrayList类"><a href="#10-3-2-什么是ArrayList类" class="headerlink" title="10.3.2 什么是ArrayList类"></a>10.3.2 什么是ArrayList类</h2><h3 id="查看类"><a href="#查看类" class="headerlink" title="查看类"></a>查看类</h3><ul><li><strong><code>java.util.ArrayList &lt;E&gt;</code></strong>：该类需要 import导入使后使用。</li></ul><p>&emsp;&emsp;<code>&lt;E&gt;</code>，表示一种指定的数据类型，叫做泛型。<code>E</code>，取自Element（元素）的首字母。在出现<code>E</code>的地方，就使用一种引用数据类型将其替换即可，表示将存储哪种引用类型的元素。代码如下：</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt;，ArrayList&lt;Student&gt;</span><br></pre></td></tr></table></figure></code></pre><h3 id="查看构造方法"><a href="#查看构造方法" class="headerlink" title="查看构造方法"></a>查看构造方法</h3><ul><li><p><strong><code>public ArrayList()</code></strong>：构造一个内容为空的集合。</p><p>  基本格式:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure><p>  在JDK 7后,右侧泛型的尖括号之内可以留空，但是&lt;&gt;仍然要写。简化格式：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看成员方法"><a href="#查看成员方法" class="headerlink" title="查看成员方法"></a>查看成员方法</h3><ul><li><strong><code>public boolean add(E e)</code></strong>： 将指定的元素添加到此集合的尾部。</li></ul><p>&emsp;&emsp;参数<code>E e</code>，在构造<code>ArrayList</code>对象时，<code>&lt;E&gt;</code>指定了什么数据类型，那么<code>add(E e)</code>方法中，只能添加什么数据类型的对象。</p><p>使用<code>ArrayList</code>类，存储三个字符串元素，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02StudentArrayList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建学生数组</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        String s1 = <span class="string">"曹操"</span>;</span><br><span class="line">        String s2 = <span class="string">"刘备"</span>;</span><br><span class="line">        String s3 = <span class="string">"孙权"</span>;</span><br><span class="line">        <span class="comment">//打印学生ArrayList集合</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//把学生对象作为元素添加到集合</span></span><br><span class="line">        list.add(s1);</span><br><span class="line">        list.add(s2);</span><br><span class="line">        list.add(s3);</span><br><span class="line">        <span class="comment">//打印学生ArrayList集合</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-3-3-常用方法和遍历"><a href="#10-3-3-常用方法和遍历" class="headerlink" title="10.3.3 常用方法和遍历"></a>10.3.3 常用方法和遍历</h2><p>对于元素的操作,基本体现在——增、删、查。常用的方法有：</p><ul><li><p><code>public boolean add(E e)</code>**：将指定的元素添加到此集合的尾部。</p></li><li><p><code>public E remove(int index)</code>**：移除此集合中指定位置上的元素。返回被删除的元素。</p></li><li><p><code>public E get(int index)</code>**：返回此集合中指定位置上的元素。返回获取的元素。</p></li><li><p><code>public int size()</code>**：返回此集合中的元素数。遍历集合时，可以控制索引范围，防止越界。</p></li></ul><p>这些都是最基本的方法，操作非常简单，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ArrayListMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        list.add(<span class="string">"hello"</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line">        list.add(<span class="string">"java"</span>);</span><br><span class="line">        <span class="comment">//public E get(int index):返回指定索引处的元素</span></span><br><span class="line">        System.out.println(<span class="string">"get:"</span>+list.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">"get:"</span>+list.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"get:"</span>+list.get(<span class="number">2</span>));</span><br><span class="line">        <span class="comment">//public int size():返回集合中的元素的个数</span></span><br><span class="line">        System.out.println(<span class="string">"size:"</span>+list.size());</span><br><span class="line">        <span class="comment">//public E remove(int index):删除指定索引处的元素，返回被删除的元素</span></span><br><span class="line">        System.out.println(<span class="string">"remove:"</span>+list.remove(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//遍历输出</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-3-4-如何存储基本数据类型"><a href="#10-3-4-如何存储基本数据类型" class="headerlink" title="10.3.4 如何存储基本数据类型"></a>10.3.4 如何存储基本数据类型</h2><p>&emsp;&emsp;ArrayList对象不能存储基本类型，只能存储引用类型的数据。类似<code>&lt;int&gt;</code><strong>不能写</strong>，但是存储基本数据类型对应的包装类型是可以的。所以，想要存储基本类型数据，<code>&lt;&gt;</code>中的数据类型，必须转换后才能编写，转换写法如下：</p><table><thead><tr><th align="left">基本类型</th><th align="left">基本类型包装类</th></tr></thead><tbody><tr><td align="left">byte</td><td align="left">Byte</td></tr><tr><td align="left">short</td><td align="left">Short</td></tr><tr><td align="left">int</td><td align="left">Integer</td></tr><tr><td align="left">long</td><td align="left">Long</td></tr><tr><td align="left">float</td><td align="left">Float</td></tr><tr><td align="left">double</td><td align="left">Double</td></tr><tr><td align="left">char</td><td align="left">Character</td></tr><tr><td align="left">boolean</td><td align="left">Boolean</td></tr></tbody></table><p>&emsp;&emsp;结果发现，只有<code>Integer</code>和<code>Character</code>需要特殊记忆，其他基本类型只是首字母大写即可。那么存储基本类型数据，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02ArrayListMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">4</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-3-5-ArrayList练习"><a href="#10-3-5-ArrayList练习" class="headerlink" title="10.3.5 ArrayList练习"></a>10.3.5 ArrayList练习</h2><h3 id="数值添加到集合"><a href="#数值添加到集合" class="headerlink" title="数值添加到集合"></a>数值添加到集合</h3><ul><li><p><strong>生成6个1~33之间的随机整数,添加到集合,并遍历</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01ArrayList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Random 对象</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">// 创建ArrayList 对象</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 添加随机数到集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = random.nextInt(<span class="number">33</span>) + <span class="number">1</span>;</span><br><span class="line">            list.add(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历集合输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="对象添加到集合"><a href="#对象添加到集合" class="headerlink" title="对象添加到集合"></a>对象添加到集合</h3><ul><li><p><strong>自定义4个学生对象,添加到集合,并遍历</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02ArrayList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">"赵丽颖"</span>,<span class="number">18</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">"唐嫣"</span>,<span class="number">20</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">"景甜"</span>,<span class="number">25</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">"柳岩"</span>,<span class="number">19</span>);</span><br><span class="line">        <span class="comment">//把学生对象作为元素添加到集合中</span></span><br><span class="line">        list.add(s1);</span><br><span class="line">        list.add(s2);</span><br><span class="line">        list.add(s3);</span><br><span class="line">        list.add(s4);</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; list.size(); x++) &#123;</span><br><span class="line">            Student s = list.get(x);</span><br><span class="line">            System.out.println(s.getName()+<span class="string">"‐‐‐"</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="打印集合方法"><a href="#打印集合方法" class="headerlink" title="打印集合方法"></a>打印集合方法</h3><ul><li><p>定义以指定格式打印集合的方法(ArrayList类型作为参数)，使用{}扩起集合，使用@分隔每个元素。格式参照 {元素@元素@元素}。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03ArrayList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">// 添加字符串到集合中</span></span><br><span class="line">        list.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        list.add(<span class="string">"宋远桥"</span>);</span><br><span class="line">        list.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        list.add(<span class="string">"殷梨亭"</span>);</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        printArrayList(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArrayList</span><span class="params">(ArrayList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 拼接左括号</span></span><br><span class="line">        System.out.print(<span class="string">"&#123;"</span>);</span><br><span class="line">        <span class="comment">// 遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="comment">// 获取元素</span></span><br><span class="line">            String s = list.get(i);</span><br><span class="line">            <span class="comment">// 拼接@符号</span></span><br><span class="line">            <span class="keyword">if</span> (i != list.size() ‐ <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(s + <span class="string">"@"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 拼接右括号</span></span><br><span class="line">                System.out.print(s + <span class="string">"&#125;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="获取集合方法"><a href="#获取集合方法" class="headerlink" title="获取集合方法"></a>获取集合方法</h3><ul><li><p>定义获取所有偶数元素集合的方法(ArrayList类型作为返回值)</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04ArrayList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Random 对象</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">// 创建ArrayList 对象</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 添加随机数到集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = random.nextInt(<span class="number">1000</span>) + <span class="number">1</span>;</span><br><span class="line">            list.add(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用偶数集合的方法</span></span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = getArrayList(list);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">getArrayList</span><span class="params">(ArrayList&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建小集合,来保存偶数</span></span><br><span class="line">        ArrayList&lt;Integer&gt; smallList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 遍历list</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="comment">// 获取元素</span></span><br><span class="line">            Integer num = list.get(i);</span><br><span class="line">            <span class="comment">// 判断为偶数,添加到小集合中</span></span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                smallList.add(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回小集合</span></span><br><span class="line">        <span class="keyword">return</span> smallList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十章 2.Random类</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/10_2%20Random%E7%B1%BB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/10_2%20Random%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-2-Random类"><a href="#10-2-Random类" class="headerlink" title="10.2 Random类"></a>10.2 Random类</h1><h2 id="10-2-1-什么是Random类"><a href="#10-2-1-什么是Random类" class="headerlink" title="10.2.1 什么是Random类"></a>10.2.1 什么是Random类</h2><p>此类的实例用于生成伪随机数。</p><p>例如，以下代码使用户能够得到一个随机数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> i = r.nextInt();</span><br></pre></td></tr></table></figure><h2 id="10-2-2-Random使用步骤"><a href="#10-2-2-Random使用步骤" class="headerlink" title="10.2.2 Random使用步骤"></a>10.2.2 Random使用步骤</h2><h3 id="查看类"><a href="#查看类" class="headerlink" title="查看类"></a>查看类</h3><ul><li><strong><code>java.util.Random</code></strong>：该类需要import导入使后使用。</li></ul><h3 id="查看构造方法"><a href="#查看构造方法" class="headerlink" title="查看构造方法"></a>查看构造方法</h3><ul><li><strong><code>public Random()</code></strong>：创建一个新的随机数生成器。</li></ul><h3 id="查看成员方法"><a href="#查看成员方法" class="headerlink" title="查看成员方法"></a>查看成员方法</h3><ul><li><strong><code>public int nextInt(int n)</code></strong>：返回一个伪随机数，范围在 <em>0</em>（包括）和 <em>指定值n</em> （不包括）之间的<code>int</code>值。</li></ul><p>&emsp;&emsp;使用Random类，完成生成3个10以内的随机整数的操作，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_Random</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//2. 创建键盘录入数据的对象</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//3. 随机生成一个数据</span></span><br><span class="line">            <span class="keyword">int</span> number = r.nextInt(<span class="number">10</span>);</span><br><span class="line">            <span class="comment">//4. 输出数据</span></span><br><span class="line">            System.out.println(<span class="string">"number:"</span>+ number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>备注：创建一个<code>Random</code>对象，每次调用<code>nextInt()</code>方法，都会生成一个随机数。</p></blockquote><h2 id="10-2-2-练习"><a href="#10-2-2-练习" class="headerlink" title="10.2.2 练习"></a>10.2.2 练习</h2><h3 id="获取随机数"><a href="#获取随机数" class="headerlink" title="获取随机数"></a>获取随机数</h3><p>获取1-n之间的随机数，包含n，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01Random</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">50</span>;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">// 获取随机数</span></span><br><span class="line">        <span class="keyword">int</span> number = r.nextInt(n) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 输出随机数</span></span><br><span class="line">        System.out.println(<span class="string">"number:"</span> + number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="猜数字小游戏"><a href="#猜数字小游戏" class="headerlink" title="猜数字小游戏"></a>猜数字小游戏</h3><p>&emsp;&emsp;游戏开始时，会随机生成一个1-100之间的整数<code>number</code>。玩家猜测一个数字<code>guessNumber</code>，会与<code>number</code>作比较，系统提示大了或者小了，直到玩家猜中，游戏结束。</p><blockquote><p>小贴士：<br>&emsp;&emsp;先运行程序代码，理解此题需求，经过分析后，再编写代码 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02Random</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 系统产生一个随机数1‐100之间的。</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> number = r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 键盘录入我们要猜的数据</span></span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">"请输入你要猜的数字(1‐100)："</span>);</span><br><span class="line">            <span class="keyword">int</span> guessNumber = sc.nextInt();</span><br><span class="line">            <span class="comment">// 比较这两个数据(用if语句)</span></span><br><span class="line">            <span class="keyword">if</span> (guessNumber &gt; number) &#123;</span><br><span class="line">                System.out.println(<span class="string">"你猜的数据"</span> + guessNumber + <span class="string">"大了"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (guessNumber &lt; number) &#123;</span><br><span class="line">                System.out.println(<span class="string">"你猜的数据"</span> + guessNumber + <span class="string">"小了"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"恭喜你,猜中了"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第十章 1.Scanner类</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/10_1%20Scanner%E7%B1%BB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-19-/Java/java_basic/part02/10_1%20Scanner%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-1-Scanner类"><a href="#10-1-Scanner类" class="headerlink" title="10.1 Scanner类"></a>10.1 Scanner类</h1><h2 id="10-1-1-什么是Scanner类"><a href="#10-1-1-什么是Scanner类" class="headerlink" title="10.1.1 什么是Scanner类"></a>10.1.1 什么是Scanner类</h2><p>&emsp;&emsp;一个可以解析基本类型和字符串的简单文本扫描器。例如，以下代码使用户能够从<code>System.in</code>中读取一个数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> i = sc.nextInt();</span><br></pre></td></tr></table></figure><ul><li><strong>注意：</strong><code>System.in</code>系统输入指的是通过键盘录入数据。</li></ul><h2 id="10-1-2-引用类型使用步骤"><a href="#10-1-2-引用类型使用步骤" class="headerlink" title="10.1.2 引用类型使用步骤"></a>10.1.2 引用类型使用步骤</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><p>&emsp;&emsp;使用<code>import</code>关键字导包，在类的所有代码之前导包，引入要使用的类型，<code>java.lang</code>包下的所有类无需导入。 格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.类名;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.Scanner;</span><br></pre></td></tr></table></figure><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>使用该类的构造方法，创建一个该类的对象。 格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = <span class="keyword">new</span> 数据类型(参数列表);</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p>调用该类的成员方法，完成指定功能。 格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名.方法名();</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = sc.nextInt(); <span class="comment">// 接收一个键盘录入的整数</span></span><br></pre></td></tr></table></figure><h2 id="10-1-3-Scanner使用步骤"><a href="#10-1-3-Scanner使用步骤" class="headerlink" title="10.1.3 Scanner使用步骤"></a>10.1.3 Scanner使用步骤</h2><h3 id="查看类"><a href="#查看类" class="headerlink" title="查看类"></a>查看类</h3><ul><li><strong><code>java.util.Scanner</code></strong>：该类需要import导入后使用。</li></ul><h3 id="查看构造方法"><a href="#查看构造方法" class="headerlink" title="查看构造方法"></a>查看构造方法</h3><ul><li><strong><code>public Scanner(InputStream source)</code></strong>: 构造一个新的<code>Scanner</code>，它生成的值是从指定的输入流扫描的。</li></ul><h3 id="查看成员方法"><a href="#查看成员方法" class="headerlink" title="查看成员方法"></a>查看成员方法</h3><ul><li><p><strong><code>public int nextInt()</code></strong>：将输入信息的下一个标记扫描为一个<code>int</code>值。</p><p>使用<code>Scanner</code>类，完成接收键盘录入数据的操作，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_Scanner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//2. 创建键盘录入数据的对象</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//3. 接收数据</span></span><br><span class="line">        System.out.println(<span class="string">"请录入一个整数："</span>);</span><br><span class="line">        <span class="keyword">int</span> i = sc.nextInt();</span><br><span class="line">        <span class="comment">//4. 输出数据</span></span><br><span class="line">        System.out.println(<span class="string">"i:"</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 10.1.4 练习</span><br><span class="line"></span><br><span class="line">### 求和</span><br><span class="line"></span><br><span class="line">键盘录入两个数据并求和，代码如下：</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;java</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test01Scanner &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建对象</span><br><span class="line">        Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">        &#x2F;&#x2F; 接收数据</span><br><span class="line">        System.out.println(&quot;请输入第一个数据：&quot;);</span><br><span class="line">        int a &#x3D; sc.nextInt();</span><br><span class="line">        System.out.println(&quot;请输入第二个数据：&quot;);</span><br><span class="line">        int b &#x3D; sc.nextInt();</span><br><span class="line">        &#x2F;&#x2F; 对数据进行求和</span><br><span class="line">        int sum &#x3D; a + b;</span><br><span class="line">        System.out.println(&quot;sum:&quot; + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="取最值"><a href="#取最值" class="headerlink" title="取最值"></a>取最值</h3><p>键盘录入三个数据并获取最大值，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02Scanner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 接收数据</span></span><br><span class="line">        System.out.println(<span class="string">"请输入第一个数据："</span>);</span><br><span class="line">        <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"请输入第二个数据："</span>);</span><br><span class="line">        <span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"请输入第三个数据："</span>);</span><br><span class="line">        <span class="keyword">int</span> c = sc.nextInt();</span><br><span class="line">        <span class="comment">// 如何获取三个数据的最大值</span></span><br><span class="line">        <span class="keyword">int</span> temp = (a &gt; b ? a : b);</span><br><span class="line">        <span class="keyword">int</span> max = (temp &gt; c ? temp : c);</span><br><span class="line">        System.out.println(<span class="string">"max:"</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-1-5-匿名对象"><a href="#10-1-5-匿名对象" class="headerlink" title="10.1.5 匿名对象"></a>10.1.5 匿名对象</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>&emsp;&emsp;创建对象时，只有创建对象的语句，却没有把对象地址值赋值给某个变量。虽然是创建对象的简化写法，但是应用场景非常有限。</p><ul><li><p><strong>匿名对象 ：</strong>没有变量名的对象。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名(参数列表)；</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Scanner(System.in)；</span><br></pre></td></tr></table></figure></li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>创建匿名对象直接调用方法，没有变量名。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Scanner(System.in).nextInt();</span><br></pre></td></tr></table></figure><ol start="2"><li>一旦调用两次方法，就是创建了两个对象，造成浪费，请看如下代码。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Scanner(System.in).nextInt();</span><br><span class="line"><span class="keyword">new</span> Scanner(System.in).nextInt();</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：<br>&emsp;&emsp;一个匿名对象，只能使用一次。</p></blockquote><ol start="3"><li>匿名对象可以作为方法的参数和返回值</li></ol><ul><li>作为参数：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 普通方式</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        input(sc);</span><br><span class="line">        <span class="comment">//匿名对象作为方法接收的参数</span></span><br><span class="line">        input(<span class="keyword">new</span> Scanner(System.in));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Scanner sc)</span></span>&#123;</span><br><span class="line">        System.out.println(sc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>作为返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 普通方式</span></span><br><span class="line">        Scanner sc = getScanner();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Scanner <span class="title">getScanner</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//普通方式</span></span><br><span class="line">        <span class="comment">//Scanner sc = new Scanner(System.in);</span></span><br><span class="line">        <span class="comment">//return sc;</span></span><br><span class="line">        <span class="comment">//匿名对象作为方法返回值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第九章 7.标准的JavaBean代码</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-17-/Java/java_basic/part02/09_7%20%E6%A0%87%E5%87%86%E7%9A%84JavaBean%E4%BB%A3%E7%A0%81.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-17-/Java/java_basic/part02/09_7%20%E6%A0%87%E5%87%86%E7%9A%84JavaBean%E4%BB%A3%E7%A0%81.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-7-标准的JavaBean代码"><a href="#9-7-标准的JavaBean代码" class="headerlink" title="9.7 标准的JavaBean代码"></a>9.7 标准的JavaBean代码</h1><p><code>JavaBean</code>是 Java语言编写类的一种标准规范。符合<code>JavaBean</code>的类，要求类必须是具体的和公共的，并且具有无参数的构造方法，提供用来操作成员变量的<code>set</code>和<code>get</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="comment">//无参构造方法【必须】</span></span><br><span class="line">    <span class="comment">//有参构造方法【建议】</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="comment">//getXxx()</span></span><br><span class="line">    <span class="comment">//setXxx()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写符合<code>JavaBean</code> 规范的类，以学生类为例，标准代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function">publicvoid <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">publicvoid <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">publicint <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//无参构造使用</span></span><br><span class="line">        Student s= <span class="keyword">new</span> Student();</span><br><span class="line">        s.setName(<span class="string">"柳岩"</span>);</span><br><span class="line">        s.setAge(<span class="number">18</span>);</span><br><span class="line">        System.out.println(s.getName()+<span class="string">"‐‐‐"</span>+s.getAge());</span><br><span class="line">        <span class="comment">//带参构造使用</span></span><br><span class="line">        Student s2= <span class="keyword">new</span> Student(<span class="string">"赵丽颖"</span>,<span class="number">18</span>);</span><br><span class="line">        System.out.println(s2.getName()+<span class="string">"‐‐‐"</span>+s2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第九章 6.封装的优化</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-16-/Java/java_basic/part02/09_6%20%E5%B0%81%E8%A3%85%E7%9A%84%E4%BC%98%E5%8C%96.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-16-/Java/java_basic/part02/09_6%20%E5%B0%81%E8%A3%85%E7%9A%84%E4%BC%98%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-6-封装的优化"><a href="#9-6-封装的优化" class="headerlink" title="9.6 封装的优化"></a>9.6 封装的优化</h1><h2 id="9-6-1-this关键字"><a href="#9-6-1-this关键字" class="headerlink" title="9.6.1 this关键字"></a>9.6.1 this关键字</h2><p>&emsp;&emsp;我们发现 setXxx 方法中的形参名字并不符合见名知意的规定，那么如果修改与成员变量名一致，是否就见名知意了呢？代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;经过修改和测试，我们发现新的问题，成员变量赋值失败了。也就是说，在修改了<code>setXxx()</code> 的形参变量名后，方法并没有给成员变量赋值！这是由于形参变量名与成员变量名重名，导致成员变量名被隐藏，方法中的变量名，无法访问到成员变量，从而赋值失败。所以，我们只能使用<code>this</code>关键字，来解决这个重名问题。</p><h3 id="this的含义"><a href="#this的含义" class="headerlink" title="this的含义"></a>this的含义</h3><p>this代表所在类的当前对象的引用（地址值），即对象自己的引用。</p><blockquote><p>记住 ：方法被哪个对象调用，方法中的this就代表那个对象。即谁在调用，this就代表谁。</p></blockquote><h3 id="this使用格式"><a href="#this使用格式" class="headerlink" title="this使用格式"></a>this使用格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.成员变量名；</span><br></pre></td></tr></table></figure><p>使用 <code>this</code>修饰方法中的变量，解决成员变量被隐藏的问题，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//name = name;</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//age = age;</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：方法中只有一个变量名时，默认也是使用 <code>this</code>修饰，可以省略不写</p></blockquote><h2 id="9-6-2-构造方法"><a href="#9-6-2-构造方法" class="headerlink" title="9.6.2 构造方法"></a>9.6.2 构造方法</h2><p>当一个对象被创建时候，构造方法用来初始化该对象，给对象的成员变量赋初始值。</p><blockquote><p>贴士：无论你与否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个无参数构造方法，一旦自己定义了构造方法，Java自动提供的默认无参数构造方法就会失效。</p></blockquote><h3 id="构造方法的定义格式"><a href="#构造方法的定义格式" class="headerlink" title="构造方法的定义格式"></a>构造方法的定义格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 构造方法名(参数列表)&#123;</span><br><span class="line"><span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法的写法上，方法名与它所在的类名相同。它没有返回值，所以不需要返回值类型，甚至不需要void。使用构造方法后，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 无参数构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 有参数构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>如果你不提供构造方法，系统会给出无参数构造方法。</li><li>如果你提供了构造方法，系统将不再提供无参数构造方法。</li><li>构造方法是可以重载的，既可以定义参数，也可以不定义参数。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第九章 5.封装的操作</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-15-/Java/java_basic/part02/09_5%20%E5%B0%81%E8%A3%85%E7%9A%84%E6%93%8D%E4%BD%9C.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-15-/Java/java_basic/part02/09_5%20%E5%B0%81%E8%A3%85%E7%9A%84%E6%93%8D%E4%BD%9C.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-5-封装的操作"><a href="#9-5-封装的操作" class="headerlink" title="9.5 封装的操作"></a>9.5 封装的操作</h1><p>使用 <code>private</code> 关键字进行封装</p><h2 id="9-5-1-private的含义"><a href="#9-5-1-private的含义" class="headerlink" title="9.5.1 private的含义"></a>9.5.1 private的含义</h2><ol><li>private是一个权限修饰符，代表最小权限。</li><li>可以修饰成员变量和成员方法。</li><li>被private修饰后的成员变量和成员方法，只在本类中才能访问。</li></ol><h2 id="9-5-2-private的使用格式"><a href="#9-5-2-private的使用格式" class="headerlink" title="9.5.2 private的使用格式"></a>9.5.2 private的使用格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> 数据类型 变量名 ；</span><br></pre></td></tr></table></figure><ol><li><p>使用 <code>private</code>修饰成员变量，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供 <code>getXxx</code>方法 / <code>setXxx</code>方法，可以访问成员变量，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第九章 4.封装的概述</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-15-/Java/java_basic/part02/09_4%20%E5%B0%81%E8%A3%85%E6%A6%82%E8%BF%B0.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-15-/Java/java_basic/part02/09_4%20%E5%B0%81%E8%A3%85%E6%A6%82%E8%BF%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-4-封装概述"><a href="#9-4-封装概述" class="headerlink" title="9.4 封装概述"></a>9.4 封装概述</h1><h2 id="9-4-1-概述"><a href="#9-4-1-概述" class="headerlink" title="9.4.1 概述"></a>9.4.1 概述</h2><p>&emsp;&emsp;面向对象编程语言是对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界无法直接操作和修改。封装可以被认为是一个保护屏障，防止该类的代码和数据被其他类随意访问。要访问该类的数据，必须通过指定的方式。适当的封装可以让代码更容易理解与维护，也加强了代码的安全性。</p><h2 id="9-4-2-原则"><a href="#9-4-2-原则" class="headerlink" title="9.4.2 原则"></a>9.4.2 原则</h2><p>将<strong>属性隐藏</strong>起来，若需要访问某个属性，<strong>提供公共方法</strong>对其访问。</p><h2 id="9-4-3-封装的步骤"><a href="#9-4-3-封装的步骤" class="headerlink" title="9.4.3 封装的步骤"></a>9.4.3 封装的步骤</h2><ol><li>使用 <code>private</code>关键字来修饰成员变量。</li><li>对需要访问的成员变量，提供对应的一对 <code>getXxx</code>方法 、<code>setXxx</code>方法。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第九章 3.变量的区别</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-14-/Java/java_basic/part02/09_3%20%E5%8F%98%E9%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-14-/Java/java_basic/part02/09_3%20%E5%8F%98%E9%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-3-成员变量和局部变量区别"><a href="#9-3-成员变量和局部变量区别" class="headerlink" title="9.3 成员变量和局部变量区别"></a>9.3 成员变量和局部变量区别</h1><p>变量根据定义<strong>位置的不同</strong>，我们给变量起了不同的名字。如下图所示：</p><p><img src="//cdn.foreversfj.com/image/blog/20200302/0YRfVR15L7JN.jpg!blog" alt=""></p><ul><li><strong>在类中的位置不同</strong><ul><li>成员变量：类中，方法外</li><li>局部变量：方法中或者方法声明上(形式参数)</li></ul></li><li><strong>作用范围不一样</strong><ul><li>成员变量：类中</li><li>局部变量：方法中</li></ul></li><li><strong>初始化值的不同</strong><ul><li>成员变量：有默认值</li><li>局部变量：没有默认值。必须先定义，赋值，最后使用</li></ul></li><li><strong>在内存中的位置不同</strong><ul><li>成员变量：堆内存</li><li>局部变量：栈内存</li></ul></li><li><strong>生命周期不同</strong><ul><li>成员变量：随着对象的创建而存在，随着对象的消失而消失</li><li>局部变量：随着方法的调用而存在，随着方法的调用完毕而消失</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第九章 2.对象内存图</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-14-/Java/java_basic/part02/09_2%20%E7%90%86%E8%A7%A3%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%9B%BE.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-14-/Java/java_basic/part02/09_2%20%E7%90%86%E8%A7%A3%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%9B%BE.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-2-对象内存图"><a href="#9-2-对象内存图" class="headerlink" title="9.2 对象内存图"></a>9.2 对象内存图</h1><h3 id="9-2-1-一个对象，调用一个方法内存图"><a href="#9-2-1-一个对象，调用一个方法内存图" class="headerlink" title="9.2.1 一个对象，调用一个方法内存图"></a>9.2.1 一个对象，调用一个方法内存图</h3><p><img src="//cdn.foreversfj.com/image/blog/20200302/w89CtuNL0kvh.jpg!blog" alt=""></p><blockquote><p>通过上图，我们可以理解，在栈内存中运行的方法，遵循”先进后出，后进先出”的原则。变量p指向堆内存中的空间，寻找方法信息，去执行该方法。</p><p>但是，这里依然有问题存在。创建多个对象时，如果每个对象内部都保存一份方法信息，这就非常浪费内存了，因为所有对象的方法信息都是一样的。那么如何解决这个问题呢？请看如下图解。</p></blockquote><h3 id="9-2-2-两个对象，调用同一方法内存图"><a href="#9-2-2-两个对象，调用同一方法内存图" class="headerlink" title="9.2.2 两个对象，调用同一方法内存图"></a>9.2.2 两个对象，调用同一方法内存图</h3><p><img src="//cdn.foreversfj.com/image/blog/20200302/lr9PiJfBdnYx.jpg!blog" alt=""></p><blockquote><p>对象调用方法时，根据对象中方法标记（地址值），去类中寻找方法信息。这样哪怕是多个对象，方法信息只保存一份，节约内存空间。</p></blockquote><h3 id="9-2-3-一个引用，作为参数传递到方法中内存图"><a href="#9-2-3-一个引用，作为参数传递到方法中内存图" class="headerlink" title="9.2.3 一个引用，作为参数传递到方法中内存图"></a>9.2.3 一个引用，作为参数传递到方法中内存图</h3><p><img src="//cdn.foreversfj.com/image/blog/20200302/v3SYqXYlOL6a.jpg!blog" alt=""></p><blockquote><p>引用类型作为参数，传递的是地址值。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第九章 1.面向对象思想</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-13-/Java/java_basic/part02/09_1%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-13-/Java/java_basic/part02/09_1%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-1-面向对象思想"><a href="#9-1-面向对象思想" class="headerlink" title="9.1 面向对象思想"></a>9.1 面向对象思想</h1><h2 id="9-1-1-面向对象思想概述"><a href="#9-1-1-面向对象思想概述" class="headerlink" title="9.1.1 面向对象思想概述"></a>9.1.1 面向对象思想概述</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>&emsp;&emsp;Java语言是一种面向对象的程序设计语言，而面向对象思想是一种程序设计思想，我们在面向对象思想的指引下，使用Java语言去设计、开发计算机程序。 这里的对象泛指现实中一切事物，每种事物都具备自己的属性和行为。面向对象思想就是在计算机程序设计过程中，参照现实中事物，将事物的属性特征、行为特征抽象出来，描述成计算机事件的设计思想。 它区别于面向过程思想，强调的是通过调用对象的行为来实现功能，而不是自己一步一步的去操作实现。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>洗衣服:</p><ul><li>面向过程：把衣服脱下来–&gt;找一个盆–&gt;放点洗衣粉–&gt;加点水–&gt;浸泡10分钟–&gt;揉一揉–&gt;清洗衣服–&gt;拧干–&gt;晾起来</li><li>面向对象：把衣服脱下来–&gt;打开全自动洗衣机–&gt;扔衣服–&gt;按钮–&gt;晾起来</li></ul><p>区别:</p><ul><li>面向过程：强调步骤。</li><li>面向对象：强调对象，这里的对象就是洗衣机。</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>&emsp;&emsp;面向对象思想是一种更符合我们思考习惯的思想，它可以将复杂的事情简单化，并将我们从执行者变成了指挥者。面向对象的语言中，包含了三大基本特征，即封装、继承和多态。</p><h2 id="9-1-2-类和对象"><a href="#9-1-2-类和对象" class="headerlink" title="9.1.2 类和对象"></a>9.1.2 类和对象</h2><p>&emsp;&emsp;环顾周围，你会发现很多对象，比如桌子，椅子，同学，老师等。桌椅属于办公用品，师生都是人类。那么什么是类呢？什么是对象呢？</p><h3 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h3><ul><li><strong>类：</strong>是一组相关<strong>属性和行为</strong>的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该类事物。</li></ul><p>现实中，描述一类事物：</p><ul><li><strong>属性：</strong>就是该事物的状态信息。</li><li><strong>行为：</strong>就是该事物能够做什么。</li></ul><p>举例：小猫。</p><ul><li>属性：名字、体重、年龄、颜色。</li><li>行为：走、跑、叫。</li></ul><h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3><p>对象：是一类事物的具体体现。对象是类的一个实例（对象并不是找个女朋友），必然具备该类事物的属性和行为。</p><p>现实中，一类事物的一个实例：一只小猫。</p><p>举例：一只小猫。</p><p>属性：tom、5kg、2 years、yellow。<br>行为：溜墙根走、蹦跶的跑、喵喵叫。</p><h3 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h3><ul><li>类是对一类事物的描述，是<strong>抽象的</strong>。</li><li>对象是一类事物的实例，是<strong>具体的</strong>。</li><li><strong>类是对象的模板，对象是类的实体。</strong></li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190824/h1wA7LDtbPo0.jpg!blog" alt=""></p><h2 id="9-1-3-类的定义"><a href="#9-1-3-类的定义" class="headerlink" title="9.1.3 类的定义"></a>9.1.3 类的定义</h2><h3 id="事物与类的对比"><a href="#事物与类的对比" class="headerlink" title="事物与类的对比"></a>事物与类的对比</h3><p>现实世界的一类事物：</p><ul><li><p><strong>属性：</strong>事物的状态信息。 </p></li><li><p><strong>-行为：</strong>事物能够做什么。</p></li></ul><p>Java中用class描述事物也是如此：</p><ul><li><p><strong>成员变量：</strong>对应事物的属性 </p></li><li><p><strong>成员方法：</strong>对应事物的行为</p></li></ul><h3 id="类的定义格式"><a href="#类的定义格式" class="headerlink" title="类的定义格式"></a>类的定义格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>定义类：</strong>就是定义类的成员，包括<strong>成员变量和成员方法</strong>。</li><li><strong>成员变量：</strong>和以前定义变量几乎是一样的。只不过位置发生了改变。<strong>在类中，方法外</strong>。</li><li>成员方法：和以前定义方法几乎是一样的。只不过<strong>把static去掉</strong>。</li></ul><p>类的定义格式举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String name；<span class="comment">//姓名</span></span><br><span class="line">        <span class="keyword">int</span> age；<span class="comment">//年龄</span></span><br><span class="line">        <span class="comment">//成员方法</span></span><br><span class="line">        <span class="comment">//学习的方法</span></span><br><span class="line">        <span class="function">publicvoid <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"好好学习，天天向上"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//吃饭的方法</span></span><br><span class="line">    <span class="function">publicvoid <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学习饿了要吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-1-4-对象的使用"><a href="#9-1-4-对象的使用" class="headerlink" title="9.1.4 对象的使用"></a>9.1.4 对象的使用</h2><h3 id="对象的使用格式"><a href="#对象的使用格式" class="headerlink" title="对象的使用格式"></a>对象的使用格式</h3><p>创建对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名 = <span class="keyword">new</span> 类名();</span><br></pre></td></tr></table></figure><p>使用对象访问类中的成员:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象名.成员变量；</span><br><span class="line">对象名.成员方法()；</span><br></pre></td></tr></table></figure><p>对象的使用格式举例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01_Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象格式：类名 对象名 = new 类名();</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(<span class="string">"s:"</span>+s); <span class="comment">//cn.itcast.Student@100363</span></span><br><span class="line">        <span class="comment">//直接输出成员变量值</span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span>+s.name); <span class="comment">//null</span></span><br><span class="line">        System.out.println(<span class="string">"年龄："</span>+s.age); <span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line">        <span class="comment">//给成员变量赋值</span></span><br><span class="line">        s.name = <span class="string">"赵丽颖"</span>;</span><br><span class="line">        s.age = <span class="number">18</span>;</span><br><span class="line">        <span class="comment">//再次输出成员变量的值</span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span>+s.name); <span class="comment">//赵丽颖</span></span><br><span class="line">        System.out.println(<span class="string">"年龄："</span>+s.age); <span class="comment">//18</span></span><br><span class="line">        System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line">        <span class="comment">//调用成员方法</span></span><br><span class="line">        s.study(); <span class="comment">// "好好学习，天天向上"</span></span><br><span class="line">        s.eat(); <span class="comment">// "学习饿了要吃饭"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员变量的默认值"><a href="#成员变量的默认值" class="headerlink" title="成员变量的默认值"></a>成员变量的默认值</h3><table><thead><tr><th></th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>基本类型</td><td>整数（byte，short，int，long）</td><td>0</td></tr><tr><td></td><td>浮点数（float，double）</td><td>0.0</td></tr><tr><td></td><td>字符（char）</td><td>‘\u0000’</td></tr><tr><td></td><td>布尔（boolean）</td><td>false</td></tr><tr><td>引用类型</td><td>数组，类，接口</td><td>null</td></tr></tbody></table><h2 id="9-1-5-类与对象的练习"><a href="#9-1-5-类与对象的练习" class="headerlink" title="9.1.5 类与对象的练习"></a>9.1.5 类与对象的练习</h2><p>定义手机类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    String brand; <span class="comment">//品牌</span></span><br><span class="line">    <span class="keyword">int</span> price; <span class="comment">//价格</span></span><br><span class="line">    String color; <span class="comment">//颜色</span></span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    <span class="comment">//打电话</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给"</span>+name+<span class="string">"打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//发短信</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"群发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line">        <span class="comment">//输出成员变量值</span></span><br><span class="line">        System.out.println(<span class="string">"品牌："</span>+p.brand);<span class="comment">//null</span></span><br><span class="line">        System.out.println(<span class="string">"价格："</span>+p.price);<span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="string">"颜色："</span>+p.color);<span class="comment">//null</span></span><br><span class="line">        System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line">        <span class="comment">//给成员变量赋值</span></span><br><span class="line">        p.brand = <span class="string">"锤子"</span>;</span><br><span class="line">        p.price = <span class="number">2999</span>;</span><br><span class="line">        p.color = <span class="string">"棕色"</span>;</span><br><span class="line">        <span class="comment">//再次输出成员变量值</span></span><br><span class="line">        System.out.println(<span class="string">"品牌："</span>+p.brand);<span class="comment">//锤子</span></span><br><span class="line">        System.out.println(<span class="string">"价格："</span>+p.price);<span class="comment">//2999</span></span><br><span class="line">        System.out.println(<span class="string">"颜色："</span>+p.color);<span class="comment">//棕色</span></span><br><span class="line">        System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line">        <span class="comment">//调用成员方法</span></span><br><span class="line">        p.call(<span class="string">"紫霞"</span>);</span><br><span class="line">        p.sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第八章 数组（四）</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-05-/Java/java_basic/part02/08_4%20%E6%95%B0%E7%BB%84(%E5%9B%9B).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-05-/Java/java_basic/part02/08_4%20%E6%95%B0%E7%BB%84(%E5%9B%9B).html</url>
      
        <content type="html"><![CDATA[<h1 id="8-4-数组作为方法参数和返回值"><a href="#8-4-数组作为方法参数和返回值" class="headerlink" title="8.4 数组作为方法参数和返回值"></a>8.4 数组作为方法参数和返回值</h1><h2 id="8-4-1-数组作为方法参数"><a href="#8-4-1-数组作为方法参数" class="headerlink" title="8.4.1 数组作为方法参数"></a>8.4.1 数组作为方法参数</h2><ul><li><strong>数组作为方法参数传递，传递的参数是数组内存的地址。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    <span class="comment">//调用方法，传递数组</span></span><br><span class="line">    printArray(arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   创建方法，方法接收数组类型的参数</span></span><br><span class="line"><span class="comment"> *   进行数组的遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="//cdn.foreversfj.com/image/blog/20190804/dG7e2htRT1aS.jpg!blog" alt=""></p><h2 id="8-4-2-数组作为方法返回值"><a href="#8-4-2-数组作为方法返回值" class="headerlink" title="8.4.2 数组作为方法返回值"></a>8.4.2 数组作为方法返回值</h2><ul><li>数组作为方法的返回值，返回的是数组的内存地址</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用方法，接收数组的返回值</span></span><br><span class="line">    <span class="comment">//接收到的是数组的内存地址</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = getArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建方法，返回值是数组类型</span></span><br><span class="line"><span class="comment"> * return返回数组的地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getArray() &#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    <span class="comment">//返回数组的地址，返回到调用者</span></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="//cdn.foreversfj.com/image/blog/20190804/P7YGGQnF6y7k.jpg!blog" alt=""></p><h2 id="8-4-3-方法的参数类型区别"><a href="#8-4-3-方法的参数类型区别" class="headerlink" title="8.4.3 方法的参数类型区别"></a>8.4.3 方法的参数类型区别</h2><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><ol><li><p><strong>分析下列程序代码，计算输出结果。</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">    change(a, b);</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    a = a + b;</span><br><span class="line">    b = b + a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>分析下列程序代码，计算输出结果。</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    change(arr);</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结:<br>&emsp;&emsp;方法的参数为基本类型时,传递的是数据值. 方法的参数为引用类型时,传递的是地址值.</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第八章 数组（三）</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-04-/Java/java_basic/part02/08_3%20%E6%95%B0%E7%BB%84(%E4%B8%89).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-04-/Java/java_basic/part02/08_3%20%E6%95%B0%E7%BB%84(%E4%B8%89).html</url>
      
        <content type="html"><![CDATA[<h1 id="8-3-数组的常见操作"><a href="#8-3-数组的常见操作" class="headerlink" title="8.3 数组的常见操作"></a>8.3 数组的常见操作</h1><h2 id="8-3-1-数组越界异常"><a href="#8-3-1-数组越界异常" class="headerlink" title="8.3.1 数组越界异常"></a>8.3.1 数组越界异常</h2><p>&emsp;&emsp;观察一下代码，运行后会出现什么结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; </span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;创建数组，赋值3个元素，数组的索引就是0，1，2，没有3索引，因此我们不能访问数组中不存在的索引，程序运行后，将会抛出<code>ArrayIndexOutOfBoundsException</code>数组越界异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的源代码。</p><p><img src="//cdn.foreversfj.com/image/blog/20190804/CSN2eneShsrb.jpg!blog" alt=""></p><h2 id="8-3-2-数组空指针异常"><a href="#8-3-2-数组空指针异常" class="headerlink" title="8.3.2 数组空指针异常"></a>8.3.2 数组空指针异常</h2><p>&emsp;&emsp;观察一下代码，运行后会出现什么结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    arr = <span class="keyword">null</span>;</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>arr = null</code>这行代码，意味着变量arr将不会在保存数组的内存地址，也就不允许再操作数组了，因此运行的时候会抛出<code>NullPointerException</code>空指针异常。在开发中，数组的空指针异常是<strong>不能出现</strong>的，一旦出现了，就必须要修改我们编写的代码。</p><p><img src="//cdn.foreversfj.com/image/blog/20190804/bGeNkK52NG7B.jpg!blog" alt=""></p><p><strong>空指针异常在内存图中的表现</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190804/G1DONDe7tBXR.jpg!blog" alt=""></p><h2 id="8-3-3-数组遍历"><a href="#8-3-3-数组遍历" class="headerlink" title="8.3.3 数组遍历"></a>8.3.3 数组遍历</h2><p>&emsp;&emsp;<strong>数组遍历：</strong> 就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">4</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;以上代码是可以将数组中每个元素全部遍历出来，但是如果数组元素非常多，这种写法肯定不行，因此我们需要改造成循环的写法。数组的索引是 <code>0</code> 到<code>lenght-1</code> ，可以作为循环的条件出现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-4-数组获取最大值元素"><a href="#8-3-4-数组获取最大值元素" class="headerlink" title="8.3.4 数组获取最大值元素"></a>8.3.4 数组获取最大值元素</h2><ul><li><strong>最大值获取：</strong>从数组的所有元素中找出最大值。</li><li><strong>实现思路：</strong><ul><li>定义变量，保存数组0索引上的元素</li><li>遍历数组，获取出数组中的每个元素</li><li>将遍历到的元素和保存数组0索引上值的变量进行比较</li><li>如果数组元素的值大于了变量的值，变量记录住新的值</li><li>数组循环遍历结束，变量保存的就是数组中的最大值</li></ul></li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190804/Y8OSMJ5WPJf1.jpg!blog" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">5</span>, <span class="number">15</span>, <span class="number">2000</span>, <span class="number">10000</span>, <span class="number">100</span>, <span class="number">4000</span> &#125;;</span><br><span class="line">    <span class="comment">//定义变量，保存数组中0索引的元素</span></span><br><span class="line">    <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//遍历数组，取出每个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">//遍历到的元素和变量max比较</span></span><br><span class="line">        <span class="comment">//如果数组元素大于max</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">            <span class="comment">//max记录住大值</span></span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"数组最大值是： "</span> + max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-5-数组反转"><a href="#8-3-5-数组反转" class="headerlink" title="8.3.5 数组反转"></a>8.3.5 数组反转</h2><ul><li><strong>数组的反转：</strong> 数组中的元素颠倒顺序，例如原始数组为1,2,3,4,5，反转后的数组为5,4,3,2,1</li><li><strong>实现思想：</strong>数组最远端的元素互换位置。<ul><li>实现反转，就需要将数组最远端元素位置交换</li><li>定义两个变量，保存数组的最小索引和最大索引</li><li>两个索引上的元素交换位置</li><li>最小索引++，最大索引–，再次交换位置</li><li>最小索引超过了最大索引，数组反转操作结束</li></ul></li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190804/K6HTPBx3u4AA.jpg!blog" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 循环中定义变量min=0最小索引</span></span><br><span class="line"><span class="comment">    * max=arr.length‐1最大索引</span></span><br><span class="line"><span class="comment">    * min++,max‐‐</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> min = <span class="number">0</span>, max = arr.length ‐ <span class="number">1</span>; min &lt;= max; min++, max‐‐) &#123;</span><br><span class="line">        <span class="comment">//利用第三方变量完成数组中的元素交换</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[min];</span><br><span class="line">        arr[min] = arr[max];</span><br><span class="line">        arr[max] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反转后，遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第八章 数组（二）</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-02-/Java/java_basic/part02/08_2%20%E6%95%B0%E7%BB%84(%E4%BA%8C).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-02-/Java/java_basic/part02/08_2%20%E6%95%B0%E7%BB%84(%E4%BA%8C).html</url>
      
        <content type="html"><![CDATA[<h1 id="8-2-数组原理内存图"><a href="#8-2-数组原理内存图" class="headerlink" title="8.2 数组原理内存图"></a>8.2 数组原理内存图</h1><h2 id="8-2-1-内存概述"><a href="#8-2-1-内存概述" class="headerlink" title="8.2.1 内存概述"></a>8.2.1 内存概述</h2><p>&emsp;&emsp;内存是计算机中的重要原件，临时存储区域，作用是运行程序。我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的，必须放进内存中才能运行，运行完毕后会清空内存。</p><p>&emsp;&emsp;Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。</p><h2 id="8-2-2-Java虚拟机的内存划分"><a href="#8-2-2-Java虚拟机的内存划分" class="headerlink" title="8.2.2 Java虚拟机的内存划分"></a>8.2.2 Java虚拟机的内存划分</h2><p>&emsp;&emsp;为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p><ul><li><code>JVM</code>的内存划分：</li></ul><table><thead><tr><th align="left">区域名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">寄存器</td><td align="left">给CPU使用，和我们开发无关。</td></tr><tr><td align="left">本地方法栈</td><td align="left">JVM在使用操作系统功能的时候使用，和我们开发无关。</td></tr><tr><td align="left">方法区</td><td align="left">存储可以运行的class文件。</td></tr><tr><td align="left">堆内存</td><td align="left">存储对象或者数组，new来创建的，都存储在堆内存。</td></tr><tr><td align="left">方法栈</td><td align="left">方法运行时使用的内存，比如main方法运行，进入方法栈中执行。</td></tr></tbody></table><h2 id="8-2-3-数组在内存中的存储"><a href="#8-2-3-数组在内存中的存储" class="headerlink" title="8.2.3 数组在内存中的存储"></a>8.2.3 数组在内存中的存储</h2><h3 id="一个数组内存图"><a href="#一个数组内存图" class="headerlink" title="一个数组内存图"></a>一个数组内存图</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    System.out.println(arr);<span class="comment">//[I@5f150435</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;以上方法执行，输出的结果是<code>[I@5f150435</code>，这个是什么呢？是数组在内存中的地址。new出来的内容，都是在堆内存中存储的，而方法中的变量arr保存的是数组的地址。</p><p>&emsp;&emsp;<strong>输出arr[0]，就会输出arr保存的内存地址中数组中0索引上的元素</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190804/Ts4DUSlrzjhM.png!blog" alt=""></p><h3 id="两个数组内存图"><a href="#两个数组内存图" class="headerlink" title="两个数组内存图"></a>两个数组内存图</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    System.out.println(arr);</span><br><span class="line">    System.out.println(arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="//cdn.foreversfj.com/image/blog/20190804/Hqrk20byzMHB.png!blog" alt=""></p><h3 id="两个变量指向一个数组"><a href="#两个变量指向一个数组" class="headerlink" title="两个变量指向一个数组"></a>两个变量指向一个数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义数组，存储3个元素</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="comment">//数组索引进行赋值</span></span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line">    arr[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">    <span class="comment">//输出3个索引上的元素值</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">//定义数组变量arr2，将arr的地址赋值给arr2</span></span><br><span class="line">    <span class="keyword">int</span>[] arr2 = arr;</span><br><span class="line">    arr2[<span class="number">1</span>] = <span class="number">9</span>;</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="//cdn.foreversfj.com/image/blog/20190804/IaqvUfglBfLM.png!blog" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第八章 数组（一）</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-02-/Java/java_basic/part02/08_1%20%E6%95%B0%E7%BB%84(%E4%B8%80).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-08-02-/Java/java_basic/part02/08_1%20%E6%95%B0%E7%BB%84(%E4%B8%80).html</url>
      
        <content type="html"><![CDATA[<h1 id="8-1-数组的定义和访问"><a href="#8-1-数组的定义和访问" class="headerlink" title="8.1 数组的定义和访问"></a>8.1 数组的定义和访问</h1><h2 id="8-1-1-容器概述"><a href="#8-1-1-容器概述" class="headerlink" title="8.1.1 容器概述"></a>8.1.1 容器概述</h2><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>&emsp;&emsp;现在需要统计某公司员工的工资情况，例如计算平均工资、找到最高工资等。假设该公司有50名员工，用以前所学的知识，程序首先需要声明50个变量来分别记住每位员工的工资，然后在进行操作，这样做会显得很麻烦，而且错误率也会很高。因此我们可以使用容器进行操作。将所有的数据全部存储到一个容器中，统一操作。</p><h3 id="容器概念"><a href="#容器概念" class="headerlink" title="容器概念"></a>容器概念</h3><ul><li><strong>容器：</strong>是将多个数据存储到一起，每个数据称为该容器的元素。</li><li><strong>生活中的容器：</strong>水杯，衣柜，教室</li></ul><h2 id="8-1-2-数组概念"><a href="#8-1-2-数组概念" class="headerlink" title="8.1.2 数组概念"></a>8.1.2 数组概念</h2><ul><li><strong>数组概念：</strong>数组就是存储数据长度固定的容器，保证多个数据的数据类型要一致。</li></ul><h2 id="8-1-3-数组的定义"><a href="#8-1-3-数组的定义" class="headerlink" title="8.1.3 数组的定义"></a>8.1.3 数组的定义</h2><h3 id="方式一【动态初始化】"><a href="#方式一【动态初始化】" class="headerlink" title="方式一【动态初始化】"></a>方式一【动态初始化】</h3><ul><li><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组存储的数据类型[] 数组名字 = <span class="keyword">new</span> 数组存储的数据类型[长度];</span><br></pre></td></tr></table></figure></li><li><p><strong>数组定义格式详解：</strong></p><ul><li><em>数组存储的数据类型</em> ： 创建的数组容器可以存储什么数据类型。</li><li><em><code>[]</code></em> : 表示数组。</li><li><em>数组名字</em> ：为定义的数组起个变量名，满足标识符规范，可以使用名字操作数组。</li><li><em><code>new</code></em> ：关键字，创建数组使用的关键字。</li><li><em>数组存储的数据类型</em> ： 创建的数组容器可以存储什么数据类型。</li><li><code>_[长度]_</code>：数组的长度，表示数组容器中可以存储多少个元素。</li><li><em><strong>注意：数组有定长特性，长度一旦指定，不可更改。</strong></em><ul><li>和水杯道理相同，买了一个2升的水杯，总容量就是2升，不能多也不能少。</li></ul></li></ul></li><li><p><strong>举例：</strong></p><p>  定义可以存储3个整数的数组容器，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure></li></ul><h3 id="方式二-【静态初始化】"><a href="#方式二-【静态初始化】" class="headerlink" title="方式二 【静态初始化】"></a>方式二 【静态初始化】</h3><ul><li><p><strong>格式：</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>...&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>举例：</strong></p><p>  定义存储1，2，3，4，5整数的数组容器。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="方式三-【静态初始化的简化】"><a href="#方式三-【静态初始化的简化】" class="headerlink" title="方式三 【静态初始化的简化】"></a>方式三 【静态初始化的简化】</h3><ul><li><p><strong>格式：</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>...&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>举例：</strong></p><p>定义存储1，2，3，4，5整数的数组容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ul><li>静态初始化没有直接指定长度，但是仍然会自动推算得到长度。</li><li>静态初始化标准格式可以拆分成为两个步骤。</li><li>动态初始化也可以拆分成为两个步骤。</li><li>静态初始化一旦使用省略格式，就不能拆分成为两个步骤了。</li><li>使用建议：<ul><li>如果不确定数组当中的具体内容，用动态初始化；</li><li>否则，已经确定了具体的内容，用静态初始化。</li></ul></li></ul><h2 id="8-1-4-数组的访问"><a href="#8-1-4-数组的访问" class="headerlink" title="8.1.4 数组的访问"></a>8.1.4 数组的访问</h2><p>&emsp;&emsp;<strong>索引：</strong> 每一个存储到数组的元素，都会自动的拥有一个编号，从0开始，这个自动编号称为<strong>数组索引(<code>index</code>)</strong>，可以通过数组的索引访问到数组中的元素。</p><ul><li><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引]</span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;<strong>数组的长度：</strong> 每个数组都具有长度，而且是固定的，Java中赋予了数组的一个属性，可以获取到数组的长度，语句为：<code>数组名.length</code> ，属性length的执行结果是数组的长度，int类型结果。由次可以推断出，数组的最大索引值为<code>数组名.length-1</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">//打印数组的长度，输出结果是5</span></span><br><span class="line">    System.out.println(arr.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>索引访问数组中的元素：</strong></p><ul><li>数组名[索引] = 数值，为数组中的元素赋值</li><li>变量 = 数组名[索引]，获取出数组中的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义存储int类型数组，赋值元素1，2，3，4，5</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">//为0索引元素赋值为6</span></span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">//获取数组0索引上的元素</span></span><br><span class="line">    <span class="keyword">int</span> i = arr[<span class="number">0</span>];</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    <span class="comment">//直接输出数组0索引元素</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第七章 方法(二)</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-31-/Java/java_basic/part02/07_2%20%E6%96%B9%E6%B3%95(%E4%BA%8C).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-31-/Java/java_basic/part02/07_2%20%E6%96%B9%E6%B3%95(%E4%BA%8C).html</url>
      
        <content type="html"><![CDATA[<h1 id="7-5-定义方法练习"><a href="#7-5-定义方法练习" class="headerlink" title="7.5 定义方法练习"></a>7.5 定义方法练习</h1><h2 id="7-5-1-练习一"><a href="#7-5-1-练习一" class="headerlink" title="7.5.1 练习一"></a>7.5.1 练习一</h2><p><strong>比较两个整数是否相同</strong></p><ul><li>分析：定义方法实现功能，需要有两个明确，即<code>返回值</code> 和 <code>参数列表</code>。<ul><li>明确返回值：比较整数，比较的结果只有两种可能，相同或不同，因此结果是布尔类型，比较的结果相同为<code>true</code>。</li><li>明确参数列表：比较的两个整数不确定，所以默认定义两个<code>int</code>类型的参数。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method_Demo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法compare，传递两个整数</span></span><br><span class="line">        <span class="comment">//并接收方法计算后的结果，布尔值</span></span><br><span class="line">        <span class="keyword">boolean</span> bool = compare(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">        System.out.println(bool);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        定义比较两个整数是否相同的方法</span></span><br><span class="line"><span class="comment">        返回值类型，比较的结果布尔类型</span></span><br><span class="line"><span class="comment">        参数：不确定参与比较的两个整数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-5-2-练习二"><a href="#7-5-2-练习二" class="headerlink" title="7.5.2 练习二"></a>7.5.2 练习二</h2><p><strong>计算1+2+3+···+100的和</strong></p><ul><li><strong>分析：</strong>定义方法实现功能，需要有两个明确，即返回值和参数。<ul><li><strong>明确返回值：</strong>1~100的求和，计算后必然还是整数，返回值类型是int</li><li><strong>明确参数：</strong>需求中已知到计算的数据，没有未知的数据，不定义参数</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method_Demo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法getSum</span></span><br><span class="line">        <span class="comment">//并接收方法计算后的结果，整数</span></span><br><span class="line">        <span class="keyword">int</span> sum = getSum();</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        定义计算1~100的求和方法</span></span><br><span class="line"><span class="comment">        返回值类型，计算结果整数int</span></span><br><span class="line"><span class="comment">        参数：没有不确定数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义变量保存求和</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//从1开始循环，到100结束</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum = sum + i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-5-3-练习三"><a href="#7-5-3-练习三" class="headerlink" title="7.5.3 练习三"></a>7.5.3 练习三</h2><p><strong>实现不定次数打印</strong></p><ul><li><strong>分析：</strong>定义方法实现功能，需要有两个明确，即返回值和参数。<ul><li><strong>明确返回值：</strong>方法中打印出<code>HelloWorld</code>即可，没有计算结果，返回值类型<code>void</code>。</li><li><strong>明确参数：</strong>打印几次不清楚，参数定义一个整型参数</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method_Demo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法printHelloWorld，传递整数</span></span><br><span class="line">        printHelloWorld(<span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        定义打印HelloWorld方法</span></span><br><span class="line"><span class="comment">        返回值类型，计算没有结果 void</span></span><br><span class="line"><span class="comment">        参数：不确定打印几次</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printHelloWorld</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-6-定义方法的注意事项"><a href="#7-6-定义方法的注意事项" class="headerlink" title="7.6 定义方法的注意事项"></a>7.6 定义方法的注意事项</h1><ul><li><p>定义位置：在类中，在其他方法外面。</p></li><li><p>方法定义的前后顺序无所谓。</p></li><li><p>方法定义之后不会执行，如果希望执行，一定要调用：单独调用、打印调用、赋值调用。</p></li><li><p>返回值类型：</p><ul><li>如果方法有返回值，那么必须写上“return 返回值; ”，不能没有。</li><li>必须要和<code>return</code>语句返回的类型相同，否则编译失败 。</li><li>对于一个void没有返回值的方法，不能写return后面的返回值，只能写return自己。</li><li>对于void方法当中最后一行的return可以省略不写。</li><li>一个方法当中可以有多个return语句，但是必须保证同时只有一个会被执行到，两个return不能连写。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回值类型要求是int</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>;<span class="comment">// 正确，int类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.2</span>;<span class="comment">// 错误，类型不匹配</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">// 错误，类型不匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不能在<code>return</code>后面写代码，<code>return</code>意味着方法结束，所有后面的代码永远不会执行，属于无效代码。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">    <span class="comment">// 错误，return已经结束，这里不会执行，无效代码</span></span><br><span class="line">    System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="7-7-调用方法的三种形式"><a href="#7-7-调用方法的三种形式" class="headerlink" title="7.7 调用方法的三种形式"></a>7.7 调用方法的三种形式</h1><ul><li><strong>直接调用：</strong>直接写方法名调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    print();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"方法被调用"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>赋值调用：</strong>调用方法，在方法前面定义变量，接收方法返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = getSum(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>打印调用：</strong>在输出语句中调用方法，<code>System.out.println(方法名())</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(getSum(<span class="number">5</span>,<span class="number">6</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>不能用输出语句调用<code>void</code>类型的方法。因为方法执行后没有结果，也就打印不出任何内容。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 错误，不能输出语句调用void类型方法</span></span><br><span class="line">    System.out.println(printHello());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-8-方法重载"><a href="#7-8-方法重载" class="headerlink" title="7.8 方法重载"></a>7.8 方法重载</h1><ul><li><strong>方法重载：</strong>指在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可，与修饰符和返回值类型无关。</li><li><strong>参数列表：</strong>个数不同，数据类型不同，顺序不同。</li><li><strong>重载方法调用</strong>：JVM通过方法的参数列表，调用不同的方法。</li><li><strong>方法重载与下列因素相关：</strong><ul><li>参数个数不同</li><li>参数类型不同</li><li>参数的多类型顺序不同</li></ul></li><li><strong>方法重载与下列因素无关：</strong><ul><li>与参数的名称无关</li><li>与方法的返回值类型无关</li></ul></li></ul><h1 id="7-9-方法重载练习"><a href="#7-9-方法重载练习" class="headerlink" title="7.9 方法重载练习"></a>7.9 方法重载练习</h1><h2 id="7-9-1-练习一"><a href="#7-9-1-练习一" class="headerlink" title="7.9.1 练习一"></a>7.9.1 练习一</h2><p><strong>比较两个数据是否相等。参数类型分别为两个<code>byte</code>类型，两个<code>short</code>类型，两个<code>int</code>类型，两个<code>long</code>类型，并在<code>main</code>方法中进行测试。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method_Demo6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义不同数据类型的变量</span></span><br><span class="line">        <span class="keyword">byte</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">byte</span> b = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">short</span> c = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">short</span> d = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> e = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">long</span> g = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">long</span> h = <span class="number">20</span>;</span><br><span class="line">        <span class="comment">// 调用</span></span><br><span class="line">        System.out.println(compare(a, b));</span><br><span class="line">        System.out.println(compare(c, d));</span><br><span class="line">        System.out.println(compare(e, f));</span><br><span class="line">        System.out.println(compare(g, h));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 两个byte类型的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">byte</span> a, <span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"byte"</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 两个short类型的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">short</span> a, <span class="keyword">short</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"short"</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 两个int类型的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"int"</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 两个long类型的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"long"</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-9-2-练习二"><a href="#7-9-2-练习二" class="headerlink" title="7.9.2 练习二"></a>7.9.2 练习二</h2><p><strong>判断哪些方法是重载关系。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">double</span> b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">double</span> d)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OPEN</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="7-9-3-练习三"><a href="#7-9-3-练习三" class="headerlink" title="7.9.3 练习三"></a>7.9.3 练习三</h2><p><strong>模拟输出语句中的<code>println</code>方法效果，传递什么类型的数据就输出什么类型的数据，只允许定义一个方法名<code>println</code>。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method_Demo7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">byte</span> a)</span> </span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">short</span> a)</span> </span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">long</span> a)</span> </span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">float</span> a)</span> </span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">char</span> a)</span> </span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">boolean</span> a)</span> </span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第七章 方法(一)</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-31-/Java/java_basic/part02/07_1%20%E6%96%B9%E6%B3%95(%E4%B8%80).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-31-/Java/java_basic/part02/07_1%20%E6%96%B9%E6%B3%95(%E4%B8%80).html</url>
      
        <content type="html"><![CDATA[<h1 id="7-1-回顾–方法的定义和调用"><a href="#7-1-回顾–方法的定义和调用" class="headerlink" title="7.1 回顾–方法的定义和调用"></a>7.1 回顾–方法的定义和调用</h1><p>&emsp;&emsp;回顾–方法的定义和调用前面的学习中，使用过嵌套循环输出矩形，控制台打印出矩形就可以了，因此将方法定义为void ，没有返回值。在主方法main 中直接被调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method_Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        print();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>print</code>方法被<code>main</code>方法调用后直接输出结果，而<code>main</code>方法并不需要<code>print</code>方法的执行结果，所以被定义为<code>void</code>。</p><h1 id="7-2-定义方法的格式详解"><a href="#7-2-定义方法的格式详解" class="headerlink" title="7.2 定义方法的格式详解"></a>7.2 定义方法的格式详解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    <span class="comment">//代码省略...</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>修饰符：<code>public static</code>固定写法</p></li><li><p>返回值类型： 表示方法运行的结果的数据类型，方法执行后将结果返回到调用者</p></li><li><p>参数列表：方法在运算过程中的未知数据，调用者调用方法时传递</p></li><li><p>return：将方法执行后的结果带给调用者，方法执行到<code>return</code>，整体方法运行结束</p></li></ul><blockquote><p>小贴士：<br>return 结果; 这里的”结果”在开发中，我们正确的叫法成为方法的返回值</p></blockquote><h1 id="7-3-定义方法的两个明确"><a href="#7-3-定义方法的两个明确" class="headerlink" title="7.3 定义方法的两个明确"></a>7.3 定义方法的两个明确</h1><ul><li><strong>需求：</strong>定义方法实现两个整数的求和计算。<ul><li><strong>明确返回值类型：</strong>方法计算的是整数的求和，结果也必然是个整数，返回值类型定义为<code>int</code>类型。</li><li><strong>明确参数列表：</strong>计算哪两个整数的和，并不清楚，但可以确定是整数，参数列表可以定义两个int类型的</li><li><strong>变量，</strong>由调用者调用方法时传递</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method_Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用方法getSum，传递两个整数，这里传递的实际数据又称为实际参数</span></span><br><span class="line">        <span class="comment">// 并接收方法计算后的结果，返回值</span></span><br><span class="line">        <span class="keyword">int</span> sum = getSum(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">定义计算两个整数和的方法</span></span><br><span class="line"><span class="comment">返回值类型，计算结果是int</span></span><br><span class="line"><span class="comment">参数：不确定数据求和，定义int参数.参数又称为形式参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;程序执行，主方法<code>main</code>调用<code>getSum</code>方法，传递了实际数据<code>5和6</code>，两个变量<code>a和b</code>接收到的就是实际参数，并将计算后的结果返回，主方法<code>main</code>中的变量<code>sum</code>接收的就是方法的返回值。</p><h1 id="7-4-调用方法的流程图解"><a href="#7-4-调用方法的流程图解" class="headerlink" title="7.4 调用方法的流程图解"></a>7.4 调用方法的流程图解</h1><p><img src="//cdn.foreversfj.com/image/blog/20190730/3DzYDNP8sskI.jpg!blog" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第六章 开发工具IntelliJ IDEA（二）</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-31-/Java/java_basic/part02/06_2%20%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ%20IDEA(%E4%BA%8C).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-31-/Java/java_basic/part02/06_2%20%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ%20IDEA(%E4%BA%8C).html</url>
      
        <content type="html"><![CDATA[<h1 id="6-4-创建包和类"><a href="#6-4-创建包和类" class="headerlink" title="6.4 创建包和类"></a>6.4 创建包和类</h1><ol><li><p>展开创建的工程，在源代码目录<code>src</code>上，鼠标右键，选择<code>new-&gt;package</code>，键入包名<code>com.itheima.demo</code>，点击确定。</p><p><img src="//cdn.foreversfj.com/image/blog/20190730/YN4mJQLPzbas.jpg!blogy" alt=""></p><p><img src="//cdn.foreversfj.com/image/blog/20190730/2mNEh5djwUE8.jpg!blogy" alt=""></p></li></ol><ul><li><p>右键点击<code>com.itheima.demo</code>，选择<code>Show in Explorer</code>，会发现创建包的目录结构。</p><p><img src="//cdn.foreversfj.com/image/blog/20190730/prpxSgbn1pEI.jpg!blogy" alt=""></p></li><li><p>可见<code>com.itheima.demo</code>，表示创建了多级的文件夹。</p><blockquote><p>小贴士：所谓包，就是文件夹，用来对类文件进行管理。</p></blockquote></li></ul><ol start="2"><li><p>在创建好的包上，鼠标右键，选择<code>new-&gt;class</code>创建类，键入类名。</p><p> <img src="//cdn.foreversfj.com/image/blog/20190730/DA6gmzqhEixL.jpg!blogy" alt=""></p><p> <img src="//cdn.foreversfj.com/image/blog/20190730/MKn5LfxmxVCS.jpg!blogy" alt=""></p></li><li><p>在代码编辑区，键入主方法，并输出<code>HelloWorld</code>。</p><p> <img src="//cdn.foreversfj.com/image/blog/20190730/dLTVghIn5DE8.jpg!blogy" alt=""></p></li><li><p>运行程序，在代码编辑区鼠标右键，选择<code>Run HelloWorld</code>即可，或在菜单中选择<code>Run-&gt;Run HelloWorld</code>。</p><p> <img src="//cdn.foreversfj.com/image/blog/20190730/WKsxyysn2ms8.jpg!blogy" alt=""></p></li></ol><h1 id="6-5-字体设置"><a href="#6-5-字体设置" class="headerlink" title="6.5 字体设置"></a>6.5 字体设置</h1><p>&emsp;&emsp;IDEA工具的默认字体非常小，代码编辑器和控制台的输出字体都需要进行调整。</p><ul><li><p>点击菜单栏上的File-&gt;Settings-&gt;Editor-&gt;Font 修改字体。</p><p><img src="//cdn.foreversfj.com/image/blog/20190730/t3IM27yk43bS.jpg!blogy" alt=""></p><p><img src="//cdn.foreversfj.com/image/blog/20190730/9aNr5l3s6rUh.jpg!blogy" alt=""></p></li></ul><h1 id="6-6-IDEA的项目目录"><a href="#6-6-IDEA的项目目录" class="headerlink" title="6.6 IDEA的项目目录"></a>6.6 IDEA的项目目录</h1><ul><li>我们创建的项目，在<code>d:\ideawork</code>目录的<code>demo</code>下<ul><li>**<code>.idea</code>目录和<code>demo.iml</code>和我们开发无关，是<code>IDEA</code>工具自己使用的</li><li>**<code>out</code>目录是存储编译后的<code>.class</code>文件</li><li>**<code>src</code>目录是存储我们编写的<code>.java</code>源文件</li></ul></li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190730/hgGrtv2C0AJc.jpg!blogy" alt=""></p><h1 id="6-7-IDEA常用快捷键"><a href="#6-7-IDEA常用快捷键" class="headerlink" title="6.7 IDEA常用快捷键"></a>6.7 IDEA常用快捷键</h1><table><thead><tr><th align="left">快捷键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left"><code>Alt+Enter</code></td><td align="left">导入包，自动修正代码</td></tr><tr><td align="left"><code>Ctrl+Y</code></td><td align="left">删除光标所在行</td></tr><tr><td align="left"><code>Ctrl+D</code></td><td align="left">复制光标所在行的内容，插入光标位置下面</td></tr><tr><td align="left"><code>Ctrl+Alt+L</code></td><td align="left">格式化代码</td></tr><tr><td align="left"><code>Ctrl+/</code></td><td align="left">单行注释</td></tr><tr><td align="left"><code>Ctrl+Shift+/</code></td><td align="left">选中代码注释，多行注释，再按取消注释</td></tr><tr><td align="left"><code>Alt+Ins</code></td><td align="left">自动生成代码，<code>toString</code>，<code>get</code>，<code>set</code>等方法</td></tr><tr><td align="left"><code>Alt+Shift+</code></td><td align="left">上下箭头移动当前代码行</td></tr></tbody></table><h1 id="6-8-IDEA修改快捷键"><a href="#6-8-IDEA修改快捷键" class="headerlink" title="6.8 IDEA修改快捷键"></a>6.8 IDEA修改快捷键</h1><p>&emsp;&emsp;在<code>IDEA</code>工具中，<code>Ctrl+空格</code>的快捷键，可以帮助我们补全代码，但是这个快捷键和<code>Windows</code>中的输入法切换快捷键冲突，需要修改<code>IDEA</code>中的快捷键。</p><p><code>File-&gt;Settings-&gt;keymap-&gt;Main menu-&gt;code-&gt;Completion-&gt;Basic</code></p><p><img src="//cdn.foreversfj.com/image/blog/20190730/k4vc7u3Ird3B.jpg!blogy" alt=""></p><p>双击<code>Basic-&gt;remove-&gt;Ctrl+空格</code></p><p><img src="//cdn.foreversfj.com/image/blog/20190730/YAEzFSznJga4.jpg!blogy" alt=""></p><p>再次双击 <code>Basic-&gt;Add Keyboard-&gt;</code> 键入 <code>Alt+/-&gt;点击OK</code></p><p><img src="//cdn.foreversfj.com/image/blog/20190730/Drm031s4w0Kc.jpg!blogy" alt=""></p><h1 id="6-9-IDEA导入和关闭项目"><a href="#6-9-IDEA导入和关闭项目" class="headerlink" title="6.9 IDEA导入和关闭项目"></a>6.9 IDEA导入和关闭项目</h1><p>关闭IDEA中已经存在的项目，<code>File-&gt;Close Project</code></p><p><img src="//cdn.foreversfj.com/image/blog/20190730/wWDGxQ5CYelp.jpg!blogy" alt=""></p><p><code>File-&gt;Close Project</code> 这时IDEA回到了刚启动界面，点击项目上的<code>X</code>，IDEA中就没有这个项目了</p><p><img src="//cdn.foreversfj.com/image/blog/20190730/mppRQgSHyIum.jpg!blogy" alt=""></p><p>在IDEA的启动界面上，点击<code>OPEN</code>，选择项目目录即可</p><p><img src="//cdn.foreversfj.com/image/blog/20190730/FUWxl2ha53PL.jpg!blogy" alt=""></p><blockquote><p>若想通过IDEA同时开启多个项目，点击OPEN打开项目时，点击New Window按钮</p></blockquote><p><img src="//cdn.foreversfj.com/image/blog/20190730/Gub6hOGGFq5S.jpg!blogy" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第六章 开发工具IntelliJ IDEA（一）</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-30-/Java/java_basic/part02/06_1%20%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ%20IDEA(%E4%B8%80).html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-30-/Java/java_basic/part02/06_1%20%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ%20IDEA(%E4%B8%80).html</url>
      
        <content type="html"><![CDATA[<h1 id="6-1-开发工具概述"><a href="#6-1-开发工具概述" class="headerlink" title="6.1 开发工具概述"></a>6.1 开发工具概述</h1><p>&emsp;&emsp;<code>IDEA</code>是一个专门针对<code>Java</code>的集成开发工具(<code>IDE</code>)，由<code>Java</code>语言编写。所以，需要有<code>JRE</code>运行环境并配置好环境变量。它可以极大地提升我们的开发效率。可以自动编译，检查错误。一般在公司中，使用的就是<code>IDEA</code>进行开发。</p><p>&emsp;&emsp;<code>IDEA</code>有免费和付费两种版本，一般作为学习使用，免费社区版本就足够了</p><h1 id="6-2-IDEA软件安装"><a href="#6-2-IDEA软件安装" class="headerlink" title="6.2 IDEA软件安装"></a>6.2 IDEA软件安装</h1><h2 id="6-2-1-下载地址"><a href="#6-2-1-下载地址" class="headerlink" title="6.2.1 下载地址"></a>6.2.1 下载地址</h2><p><strong>地址：</strong><a href="http://www.jetbrains.com/idea/" target="_blank" rel="noopener">http://www.jetbrains.com/idea/</a></p><h2 id="6-2-2-开始安装"><a href="#6-2-2-开始安装" class="headerlink" title="6.2.2 开始安装"></a>6.2.2 开始安装</h2><ul><li>此软件集成了32位和64位，双击<code>ideaIU-2017.3.2.exe</code>进入安装。</li></ul><ol><li><p><strong>欢迎界面</strong></p><p> <img src="//cdn.foreversfj.com/image/blog/20190730/HS8dAwOBonkQ.png!blogy" alt=""></p></li><li><p>选择安装路径</p><p> <img src="//cdn.foreversfj.com/image/blog/20190730/NkSzzui4b44y.jpg!blogy" alt=""></p></li><li><p>配置安装选项</p><p> <img src="//cdn.foreversfj.com/image/blog/20190730/hoAm5KYX9BQt.jpg!blogy" alt=""></p></li><li><p>开始菜单</p><p> <img src="//cdn.foreversfj.com/image/blog/20190730/zzmDwNXntyOS.jpg!blogy" alt=""></p></li><li><p>安装完毕</p><p> <img src="//cdn.foreversfj.com/image/blog/20190730/5xYVyFWMTxoi.jpg!blogy" alt=""></p></li></ol><p>至此，IDEA开发工具安装完成</p><h1 id="6-3-IDEA首次启动"><a href="#6-3-IDEA首次启动" class="headerlink" title="6.3 IDEA首次启动"></a>6.3 IDEA首次启动</h1><ol><li><p>选择不导入任何设置，点击<code>OK</code></p><p> <img src="//cdn.foreversfj.com/image/blog/20190730/RTg4iqNF73df.jpg!blogy" alt=""></p></li><li><p>选择 <code>Create New Project</code></p><p> <img src="//cdn.foreversfj.com/image/blog/20190730/vWOBSrYlVVCm.jpg!blogy" alt=""></p></li><li><p>点击<code>new</code>按钮，配置安装的<code>JDK9</code>版本</p><p> <img src="//cdn.foreversfj.com/image/blog/20190730/KWePedJEb0Ad.jpg!blogy" alt=""></p><ul><li>选择<code>JDK9</code>目录，点击确定</li><li>这是我的<code>JDK</code>安装路径<br> <img src="//cdn.foreversfj.com/image/blog/20190730/UG7jKnoH3z1v.jpg!blogy" alt=""><br> <img src="//cdn.foreversfj.com/image/blog/20190730/xQrz4LSGLMAE.jpg!blogy" alt=""></li></ul></li><li><p>不使用模板</p><p> <img src="//cdn.foreversfj.com/image/blog/20190730/cU5yvjrB3Cj8.jpg!blogy" alt=""></p></li><li><p>为工程起名字 <code>demo</code>，并存储到<code>d:\ideawork\demo</code> 目录下，如果d盘没有这个目录，会自动创建。</p><blockquote><p>首次新建项目时，默认的Project Location路径有问题，如<code>c:\\xxx</code>，正确写法为<code>c:\xxx</code> 。更改后不会再出现此类问题。</p></blockquote><p> <img src="//cdn.foreversfj.com/image/blog/20190730/eh5ry1YKIkkf.jpg!blogy" alt=""></p></li><li><p>打开一个每日一帖对话框，勾掉每次启动显示，点击<code>close</code></p><p> <img src="//cdn.foreversfj.com/image/blog/20190730/FtK3RI6UFMi7.jpg!blogy" alt=""></p></li><li><p><code>IDEA</code>的工作界面，我们的项目已经创建好了，如果再新建项目，点击<code>File-&gt;new-&gt;Project</code></p><p> <img src="//cdn.foreversfj.com/image/blog/20190730/GRkyGo7a20AF.jpg!blogy" alt=""></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第五章 扩展知识点</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-30-/Java/java_basic/part02/05%20%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%E7%82%B9.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-30-/Java/java_basic/part02/05%20%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%E7%82%B9.html</url>
      
        <content type="html"><![CDATA[<h1 id="5-1-死循环"><a href="#5-1-死循环" class="headerlink" title="5.1 死循环"></a>5.1 死循环</h1><p>&emsp;&emsp;<strong>死循环：</strong>也就是循环中的条件永远为<code>true</code>，死循环的是永不结束的循环。例如：<code>while(true){}</code>。</p><p>&emsp;&emsp;在开发中，会出现需要使用死循环的场景，例如：我们需要读取用户输入的输入，但是用户输入多少数据我们并不清楚，也只能使用死循环，当用户不想输入数据了，就可以结束循环了，如何去结束一个死循环呢，就需要使用到跳出语句了。</p><h1 id="5-2-嵌套循环"><a href="#5-2-嵌套循环" class="headerlink" title="5.2 嵌套循环"></a>5.2 嵌套循环</h1><p>&emsp;&emsp;<strong>所谓嵌套循环，</strong>是指一个循环的循环体是另一个循环。比如for循环里面还有一个for循环，就是嵌套循环。总共的循环次数=外循环次数*内循环次数</p><ul><li><p><strong>嵌套循环格式：</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式①; 循环条件②; 步进表达式⑦) &#123;</span><br><span class="line">    <span class="keyword">for</span>(初始化表达式③; 循环条件④; 步进表达式⑥) &#123;</span><br><span class="line">        执行语句⑤;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>嵌套循环执行流程：</strong></p><ul><li>执行顺序：①②③④⑤⑥&gt;④⑤⑥&gt;⑦②③④⑤⑥&gt;④⑤⑥</li><li>外循环一次，内循环多次。</li><li>比如跳绳：一共跳5组，每组跳10个。5组就是外循环，10个就是内循环。</li></ul></li><li><p><strong>代码实例：</strong>使用嵌套循环，打印5*8的矩形</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//5*8的矩形，打印5行*号，每行8个</span></span><br><span class="line">    <span class="comment">//外循环5次，内循环8次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;</span><br><span class="line">            <span class="comment">//不换行打印星号</span></span><br><span class="line">            System.out.print(<span class="string">"*"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//内循环打印8个星号后，需要一次换行</span></span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第四章 循环语句</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-30-/Java/java_basic/part02/04%20%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-30-/Java/java_basic/part02/04%20%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5.html</url>
      
        <content type="html"><![CDATA[<h1 id="4-1-循环概述"><a href="#4-1-循环概述" class="headerlink" title="4.1 循环概述"></a>4.1 循环概述</h1><p>&emsp;&emsp;循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形成死循环。</p><h1 id="4-2-循环语句1——-gt-for"><a href="#4-2-循环语句1——-gt-for" class="headerlink" title="4.2 循环语句1——&gt; for"></a>4.2 循环语句1——&gt; for</h1><h2 id="4-2-1-for循环语句格式："><a href="#4-2-1-for循环语句格式：" class="headerlink" title="4.2.1 for循环语句格式："></a>4.2.1 for循环语句格式：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式①; 布尔表达式②; 步进表达式④)&#123;</span><br><span class="line">    循环体③</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-2-执行流程"><a href="#4-2-2-执行流程" class="headerlink" title="4.2.2 执行流程"></a>4.2.2 执行流程</h2><ul><li>执行顺序：①②③④&gt;②③④&gt;②③④…②不满足为止。</li><li>①负责完成循环变量初始化</li><li>②负责判断是否满足循环条件，不满足则跳出循环</li><li>③具体执行的语句</li><li>④循环后，循环条件所涉及变量的变化情况</li></ul><img src="//cdn.foreversfj.com/image/blog/20190730/MDSOkHJch2lr.png!blogy" style="zoom:70%"/><h2 id="4-2-3-代码实例"><a href="#4-2-3-代码实例" class="headerlink" title="4.2.3 代码实例"></a>4.2.3 代码实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//控制台输出10次HelloWorld，不使用循环</span></span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//用循环改进，循环10次</span></span><br><span class="line">    <span class="comment">//定义变量从0开始，循环条件为&lt;10</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld"</span>+x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>循环练习：使用循环，计算1-100之间的偶数和</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.定义一个初始化变量,记录累加求和,初始值为0</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//2.利用for循环获取1‐100之间的数字</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//3.判断获取的数组是奇数还是偶数</span></span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//4.如果是偶数就累加求和</span></span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.循环结束之后,打印累加结果</span></span><br><span class="line">    System.out.println(<span class="string">"sum:"</span>+sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-3-循环语句2——-gt-while"><a href="#4-3-循环语句2——-gt-while" class="headerlink" title="4.3 循环语句2——&gt; while"></a>4.3 循环语句2——&gt; while</h1><h2 id="4-3-1-while循环语句格式："><a href="#4-3-1-while循环语句格式：" class="headerlink" title="4.3.1 while循环语句格式："></a>4.3.1 while循环语句格式：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化表达式①</span><br><span class="line">  <span class="keyword">while</span>(布尔表达式②)&#123;</span><br><span class="line">    循环体③</span><br><span class="line">    步进表达式④</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-2-执行流程"><a href="#4-3-2-执行流程" class="headerlink" title="4.3.2 执行流程"></a>4.3.2 执行流程</h2><ul><li>执行顺序：①②③④&gt;②③④&gt;②③④…②不满足为止。</li><li>①负责完成循环变量初始化。</li><li>②负责判断是否满足循环条件，不满足则跳出循环。</li><li>③具体执行的语句。</li><li>④循环后，循环变量的变化情况。</li></ul><img src="//cdn.foreversfj.com/image/blog/20190730/JfSgonM3LXd3.png!blogy" style="zoom:70%"/><h2 id="4-3-3-代码实例"><a href="#4-3-3-代码实例" class="headerlink" title="4.3.3 代码实例:"></a>4.3.3 代码实例:</h2><ul><li><p><strong><code>while</code>循环输出10次<code>HelloWorld</code></strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//while循环实现打印10次HelloWorld</span></span><br><span class="line">    <span class="comment">//定义初始化变量</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//循环条件&lt;=10</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">        <span class="comment">//步进</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>while</code>循环计算1-100之间的和</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用while循环实现</span></span><br><span class="line">    <span class="comment">//定义一个变量,记录累加求和</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//定义初始化表达式</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//使用while循环让初始化表达式的值变化</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">        <span class="comment">//累加求和</span></span><br><span class="line">        sum += i ;</span><br><span class="line">        <span class="comment">//步进表达式改变变量的值</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印求和的变量</span></span><br><span class="line">    System.out.println(<span class="string">"1‐100的和是："</span>+sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="4-4-循环语句3——-gt-do···while"><a href="#4-4-循环语句3——-gt-do···while" class="headerlink" title="4.4 循环语句3——&gt; do···while"></a>4.4 循环语句3——&gt; do···while</h1><h2 id="4-4-1-do···while循环格式"><a href="#4-4-1-do···while循环格式" class="headerlink" title="4.4.1 do···while循环格式"></a>4.4.1 do···while循环格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化表达式①</span><br><span class="line">  <span class="keyword">do</span>&#123;</span><br><span class="line">    循环体③</span><br><span class="line">    步进表达式④</span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式②);</span><br></pre></td></tr></table></figure><h2 id="4-4-2-执行流程"><a href="#4-4-2-执行流程" class="headerlink" title="4.4.2 执行流程"></a>4.4.2 执行流程</h2><ul><li>执行顺序：①③④&gt;②③④&gt;②③④…②不满足为止。</li><li>①负责完成循环变量初始化。</li><li>②负责判断是否满足循环条件，不满足则跳出循环。</li><li>③具体执行的语句</li><li>④循环后，循环变量的变化情况</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190730/89m7x46sO0Ap.jpg!blog" alt=""></p><h2 id="4-4-3-代码实例"><a href="#4-4-3-代码实例" class="headerlink" title="4.4.3 代码实例:"></a>4.4.3 代码实例:</h2><ul><li><strong>输出10次<code>HelloWorld</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">        x++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(x&lt;=<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>do...while</code>循环的特点：无条件执行一次循环体，即使我们将循环条件直接写成<code>false</code>，也依然会循环一次。这样的循环具有一定的风险性，因此初学者不建议使用<code>do...while</code>循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"无条件执行一次"</span>);</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-5-循环语句的区别"><a href="#4-5-循环语句的区别" class="headerlink" title="4.5 循环语句的区别"></a>4.5 循环语句的区别</h1><h2 id="4-5-1-for-和-while-的小区别"><a href="#4-5-1-for-和-while-的小区别" class="headerlink" title="4.5.1 for 和 while 的小区别"></a>4.5.1 for 和 while 的小区别</h2><ul><li>控制条件语句所控制的那个变量，在for循环结束后，就不能再被访问到了，而while循环结束还可以继续使用，如果你想继续使用，就用while，否则推荐使用for。原因是for循环结束，该变量就从内存中消失，能够提高内存的使用效率。</li><li>在已知循环次数的时候使用推荐使用for，循环次数未知的时推荐使用while。</li></ul><h1 id="4-6-跳出语句"><a href="#4-6-跳出语句" class="headerlink" title="4.6 跳出语句"></a>4.6 跳出语句</h1><h2 id="4-6-1-break"><a href="#4-6-1-break" class="headerlink" title="4.6.1 break"></a>4.6.1 break</h2><ul><li><p>使用场景：终止switch或者循环</p><ul><li><p>在选择结构switch语句中</p></li><li><p>在循环语句中</p></li><li><p>离开使用场景的存在是没有意义的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=<span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//需求:打印完两次HelloWorld之后结束循环</span></span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld"</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="4-6-2-continue"><a href="#4-6-2-continue" class="headerlink" title="4.6.2 continue"></a>4.6.2 continue</h2><ul><li><strong>使用场景：结束本次循环，继续下一次的循环</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//需求:不打印第三次HelloWorld</span></span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld"</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第三章 选择语句</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-30-/Java/java_basic/part02/03%20%E9%80%89%E6%8B%A9%E8%AF%AD%E5%8F%A5.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-30-/Java/java_basic/part02/03%20%E9%80%89%E6%8B%A9%E8%AF%AD%E5%8F%A5.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-1-选择语句——switch"><a href="#3-1-选择语句——switch" class="headerlink" title="3.1 选择语句——switch"></a>3.1 选择语句——switch</h1><h2 id="3-1-1-switch语句格式："><a href="#3-1-1-switch语句格式：" class="headerlink" title="3.1.1 switch语句格式："></a>3.1.1 switch语句格式：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">1</span>:</span><br><span class="line">        语句体<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">2</span>:</span><br><span class="line">        语句体<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        语句体n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-1-2-执行流程"><a href="#3-1-2-执行流程" class="headerlink" title="3.1.2 执行流程"></a>3.1.2 执行流程</h2><ul><li>首先计算出表达式的值</li><li>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结束。</li><li>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190730/75LqkadWhBT9.jpg!blog" alt=""></p><h2 id="3-1-3-注意事项"><a href="#3-1-3-注意事项" class="headerlink" title="3.1.3 注意事项"></a>3.1.3 注意事项</h2><ul><li>多个case后面的数值不可以重复。</li><li>switch后面小括号当中只能是下列数据类型：</li><li>基本数据类型：byte/short/char/int</li><li>引用数据类型：String字符串、enum枚举</li><li>switch语句格式可以很灵活：前后顺序可以颠倒，而且break语句还可以省略【3.2】。</li></ul><h2 id="3-1-4-代码实例"><a href="#3-1-4-代码实例" class="headerlink" title="3.1.4 代码实例:"></a>3.1.4 代码实例:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义变量，判断是星期几</span></span><br><span class="line">    <span class="keyword">int</span> weekday = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">//switch语句实现选择</span></span><br><span class="line">    <span class="keyword">switch</span>(weekday) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            System.out.println(<span class="string">"星期一"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            System.out.println(<span class="string">"星期二"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            System.out.println(<span class="string">"星期三"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            System.out.println(<span class="string">"星期四"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            System.out.println(<span class="string">"星期五"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            System.out.println(<span class="string">"星期六"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            System.out.println(<span class="string">"星期日"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">"你输入的数字有误"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>switch</code>语句中，表达式的数据类型，可以是<code>byte</code>，<code>short</code>，<code>int</code>，<code>char</code>，<code>enum</code>（枚举），<code>JDK7</code>后可以接收字符串。</p><h1 id="3-2-case的穿透性"><a href="#3-2-case的穿透性" class="headerlink" title="3.2 case的穿透性"></a>3.2 case的穿透性</h1><p>&emsp;&emsp;在switch语句中，如果case的后面不写break，将出现穿透现象，也就是不会在判断下一个case的值，直接向后运行，直到遇到break，或者整体switch结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">switch</span> (i)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            System.out.println(<span class="string">"执行case0"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            System.out.println(<span class="string">"执行case5"</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            System.out.println(<span class="string">"执行case10"</span>);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">"执行default"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上述程序中，执行case5后，由于没有break语句，程序会一直向后走，不会在判断case，也不会理会break，直接运行完整体switch。</p><p>&emsp;&emsp;由于case存在穿透性，因此初学者在编写switch语句时，必须要写上break。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第二章 判断语句</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-29-/Java/java_basic/part02/02%20%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-29-/Java/java_basic/part02/02%20%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-1-判断语句1——-gt-if"><a href="#2-1-判断语句1——-gt-if" class="headerlink" title="2.1 判断语句1——&gt; if"></a>2.1 判断语句1——&gt; if</h1><h2 id="2-1-1-if语句第一种格式：if"><a href="#2-1-1-if语句第一种格式：if" class="headerlink" title="2.1.1 if语句第一种格式：if"></a>2.1.1 if语句第一种格式：if</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式)&#123;</span><br><span class="line">    语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-2-执行流程"><a href="#2-1-2-执行流程" class="headerlink" title="2.1.2 执行流程"></a>2.1.2 执行流程</h2><ul><li>首先判断关系表达式看其结果是true还是false</li><li>如果是true就执行语句体</li><li>如果是false就不执行语句体</li></ul><img src="//cdn.foreversfj.com/image/blog/20190729/Ix3hcDe4r1Sk.png!blog" style="zoom:70%;"><h2 id="2-1-3代码实例："><a href="#2-1-3代码实例：" class="headerlink" title="2.1.3代码实例："></a>2.1.3代码实例：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"开始"</span>);</span><br><span class="line">    <span class="comment">// 定义两个变量</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//变量使用if判断</span></span><br><span class="line">    <span class="keyword">if</span> (a == b)&#123;</span><br><span class="line">        System.out.println(<span class="string">"a等于b"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(a == c)&#123;</span><br><span class="line">        System.out.println(<span class="string">"a等于c"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"结束"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-2-判断语句2——-gt-if···else"><a href="#2-2-判断语句2——-gt-if···else" class="headerlink" title="2.2 判断语句2——&gt; if···else"></a>2.2 判断语句2——&gt; if···else</h1><h2 id="2-2-1-if语句第二种格式：-if···else"><a href="#2-2-1-if语句第二种格式：-if···else" class="headerlink" title="2.2.1 if语句第二种格式： if···else"></a>2.2.1 if语句第二种格式： if···else</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-2-执行流程"><a href="#2-2-2-执行流程" class="headerlink" title="2.2.2 执行流程"></a>2.2.2 执行流程</h2><ul><li>首先判断关系表达式看其结果是true还是false</li><li>如果是true就执行语句体1</li><li>如果是false就执行语句体2</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190730/LfMoThxe18JA.png!blog" alt=""></p><h2 id="2-2-3-代码实例"><a href="#2-2-3-代码实例" class="headerlink" title="2.2.3 代码实例"></a>2.2.3 代码实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判断给定的数据是奇数还是偶数</span></span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"a是偶数"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"a是奇数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"结束"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-3-判断语句3——-gt-if···else-if···else"><a href="#2-3-判断语句3——-gt-if···else-if···else" class="headerlink" title="2.3 判断语句3——&gt; if···else if···else"></a>2.3 判断语句3——&gt; if···else if···else</h1><h2 id="2-3-1-if语句第三种格式：if···else-if···else"><a href="#2-3-1-if语句第三种格式：if···else-if···else" class="headerlink" title="2.3.1 if语句第三种格式：if···else if···else"></a>2.3.1 if语句第三种格式：if···else if···else</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (判断条件<span class="number">1</span>) &#123;</span><br><span class="line">    执行语句<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (判断条件<span class="number">2</span>) &#123;</span><br><span class="line">    执行语句<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (判断条件n) &#123;</span><br><span class="line">    执行语句n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    执行语句n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-2-执行流程"><a href="#2-3-2-执行流程" class="headerlink" title="2.3.2 执行流程"></a>2.3.2 执行流程</h2><ul><li>首先判断关系表达式1看其结果是true还是false</li><li>如果是true就执行语句体1</li><li>如果是false就继续判断关系表达式2看其结果是true还是false</li><li>如果是true就执行语句体2</li><li>如果是false就继续判断关系表达式…看其结果是true还是false</li><li>…</li><li>如果没有任何关系表达式为true，就执行语句体n+1。</li></ul><img src="//cdn.foreversfj.com/image/blog/20190730/Bul9tAOudWL2.png!blog" style="zoom:70%;"><h2 id="2-3-3-代码实例："><a href="#2-3-3-代码实例：" class="headerlink" title="2.3.3 代码实例："></a>2.3.3 代码实例：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// x和y的关系满足如下：</span></span><br><span class="line">    <span class="comment">// x&gt;=3 y = 2x + 1;</span></span><br><span class="line">    <span class="comment">//‐1&lt;=x&lt;3 y = 2x;</span></span><br><span class="line">    <span class="comment">// x&lt;=‐1 y = 2x – 1;</span></span><br><span class="line">    <span class="comment">// 根据给定的x的值，计算出y的值并输出。</span></span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;= <span class="number">3</span>) &#123;</span><br><span class="line">        y = <span class="number">2</span> * x + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= ‐<span class="number">1</span> &amp;&amp; x &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        y = <span class="number">2</span> * x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y = <span class="number">2</span> * x ‐ <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"y的值是："</span>+y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-4-语句练习"><a href="#2-4-语句练习" class="headerlink" title="2.4 语句练习"></a>2.4 语句练习</h1><ul><li><p>指定考试成绩，判断学生等级</p><ul><li>90-100 优秀</li><li>80-89 好</li><li>70-79 良</li><li>60-69 及格</li><li>60以下 不及格</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span>(score&lt;<span class="number">0</span> || score&gt;<span class="number">100</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"你的成绩是错误的"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">90</span> &amp;&amp; score&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"你的成绩属于优秀"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span> &amp;&amp; score&lt;<span class="number">90</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"你的成绩属于好"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">70</span> &amp;&amp; score&lt;<span class="number">80</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"你的成绩属于良"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">60</span> &amp;&amp; score&lt;<span class="number">70</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"你的成绩属于及格"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"你的成绩属于不及格"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="2-5-if语句和三元运算符的互换"><a href="#2-5-if语句和三元运算符的互换" class="headerlink" title="2.5 if语句和三元运算符的互换"></a>2.5 if语句和三元运算符的互换</h1><p><strong>在某些简单的应用中，if语句是可以和三元运算符互换使用的。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//定义变量，保存a和b的较大值</span></span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">        c = a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可以上述功能改写为三元运算符形式</span></span><br><span class="line">    c = a &gt; b ? a:b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux端口配置</title>
      <link href="/%E6%8A%80%E8%83%BD/2019-07-28-/Linux/Linux%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE.html"/>
      <url>/%E6%8A%80%E8%83%BD/2019-07-28-/Linux/Linux%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-命令操作"><a href="#1-命令操作" class="headerlink" title="1. 命令操作"></a>1. 命令操作</h1><h2 id="1-1-顺序进行"><a href="#1-1-顺序进行" class="headerlink" title="1.1. 顺序进行"></a>1.1. 顺序进行</h2><h3 id="1-1-1-查看状态："><a href="#1-1-1-查看状态：" class="headerlink" title="1.1.1. 查看状态："></a>1.1.1. 查看状态：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><ul><li>如果是这样</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190728/VmVz0ULpnCsw.png!blog" alt=""></p><ul><li>就说明防火墙已打开，如果提示<code>not running</code>，添加端口完毕就需要打开防火墙</li></ul><h3 id="1-1-2-添加端口"><a href="#1-1-2-添加端口" class="headerlink" title="1.1.2. 添加端口"></a>1.1.2. 添加端口</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=<span class="keyword">public</span> --add-port=<span class="number">80</span>/tcp --permanent</span><br><span class="line">firewall-cmd --zone=<span class="keyword">public</span> --add-port=<span class="number">8080</span>/tcp --permanent</span><br><span class="line">firewall-cmd --zone=<span class="keyword">public</span> --add-port=<span class="number">8005</span>/tcp --permanent</span><br><span class="line">firewall-cmd --zone=<span class="keyword">public</span> --add-port=<span class="number">8009</span>/tcp --permanent</span><br></pre></td></tr></table></figure><p><font color=red><strong>注意：</strong></font><code>--permanent</code>表示永久生效，没有此参数系统重启后失效</p><h3 id="1-1-3-重新载入"><a href="#1-1-3-重新载入" class="headerlink" title="1.1.3. 重新载入"></a>1.1.3. 重新载入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="1-1-4-查看端口信息"><a href="#1-1-4-查看端口信息" class="headerlink" title="1.1.4. 查看端口信息"></a>1.1.4. 查看端口信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --<span class="built_in">list</span>-all</span><br></pre></td></tr></table></figure><p><img src="//cdn.foreversfj.com/image/blog/20190728/NFwJwCMAiVqs.png!blog" alt=""></p><p>说明端口已经开放</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看已开放端口</span><br><span class="line">firewall-cmd --<span class="built_in">list</span>-ports</span><br></pre></td></tr></table></figure><h2 id="1-2-附：其他防火墙命令"><a href="#1-2-附：其他防火墙命令" class="headerlink" title="1.2.附：其他防火墙命令"></a>1.2.附：其他防火墙命令</h2><ul><li><p><strong>启动</strong>：                    <code>systemctl start firewalld</code></p></li><li><p><strong>关闭</strong>：                   <code>systemctl stop firewalld</code></p></li><li><p><strong>查看状态：</strong>            <code>systemctl status firewalld</code></p></li><li><p><strong>开机禁用</strong>：            <code>systemctl disable firewalld</code></p></li><li><p><strong>开机启用：</strong>            <code>systemctl enable firewalld</code></p></li><li><p><strong>启动一个服务：</strong>            <code>systemctl start firewalld.service</code></p></li><li><p><strong>关闭一个服务：</strong>            <code>systemctl stop firewalld.service</code></p></li><li><p><strong>重启一个服务：</strong>            <code>systemctl restart firewalld.service</code></p></li><li><p><strong>显示一个服务的状态：</strong>        <code>systemctl status firewalld.service</code></p></li><li><p><strong>在开机时启用一个服务：</strong>        <code>systemctl enable firewalld.service</code></p></li><li><p><strong>在开机时禁用一个服务：</strong>        <code>systemctl disable firewalld.service</code></p></li><li><p><strong>查看服务是否开机启动：</strong>        <code>systemctl is-enabled firewalld.service</code></p></li><li><p><strong>查看已启动的服务列表：</strong>        <code>systemctl list-unit-files|grep enabled</code></p></li><li><p><strong>查看启动失败的服务列表：</strong>    <code>systemctl --failed</code></p></li><li><p><strong>查看版本：</strong>            <code>firewall-cmd --version</code></p></li><li><p><strong>查看帮助：</strong>            <code>firewall-cmd --help</code></p></li><li><p><strong>显示状态：</strong>            <code>firewall-cmd --state</code></p></li><li><p><strong>查看所有打开的端口：</strong>        <code>firewall-cmd --zone=public --list-ports</code></p></li><li><p><strong>更新防火墙规则：</strong>        <code>firewall-cmd --reload</code></p></li><li><p><strong>查看区域信息:</strong>             <code>firewall-cmd --get-active-zones</code></p></li><li><p><strong>查看指定接口所属区域：</strong>        <code>firewall-cmd --get-zone-of-interface=eth0</code></p></li><li><p><strong>拒绝所有包：</strong>            <code>firewall-cmd --panic-on</code></p></li><li><p><strong>取消拒绝状态</strong>：            <code>firewall-cmd --panic-off</code></p></li><li><p><strong>查看是否拒绝：</strong>            <code>firewall-cmd --query-panic</code></p></li><li><p><strong>添加</strong>                <code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code></p><p>  ​            <strong>（–permanent永久生效，没有此参数重启后失效）</strong></p></li><li><p><strong>重新载入</strong>            <code>firewall-cmd --reload</code></p></li><li><p><strong>查看</strong>                <code>firewall-cmd --zone=public --query-port=80/tcp</code></p></li><li><p><strong>删除</strong>                <code>firewall-cmd --zone=public --remove-port=80/tcp --permanent</code></p></li><li><p><strong>查看端口信息</strong>            <code>firewall-cmd --list-all</code></p></li><li><p><strong>查看已开放端口</strong>            <code>firewall-cmd --list-ports</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx+Tomcat配置多域名多项目</title>
      <link href="/%E6%8A%80%E8%83%BD/2019-07-28-/Linux/Linux%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA.html"/>
      <url>/%E6%8A%80%E8%83%BD/2019-07-28-/Linux/Linux%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA.html</url>
      
        <content type="html"><![CDATA[<p><strong>前提：</strong>已完成安装<code>Nginx</code>和<code>Tomcat</code>的环境，详见<a href="//blog.foreversfj.com/2019/07/26/Linux/Linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE(%E4%BA%8C)/">环境配置</a></p><h1 id="1-确定项目路径"><a href="#1-确定项目路径" class="headerlink" title="1. 确定项目路径"></a>1. 确定项目路径</h1><p>我的项目路径在<code>/var/local/路径</code>，这是我的项目<code>appBase</code></p><p>在此目录下发布我的不同项目<code>docBase</code>，如<code>/项目名1</code>、<code>/项目名2</code>等等</p><h1 id="2-修改Tomcat配置"><a href="#2-修改Tomcat配置" class="headerlink" title="2. 修改Tomcat配置"></a>2. 修改Tomcat配置</h1><ul><li><p>修改<code>service.xml</code>配置文件，添加Host节点【不用修改端口，使用默认8080，<a href="//blog.foreversfj.com/2019/07/28/Linux/Linux%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE/">端口配置</a></p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 保留原有的localhost节点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">pattern</span>=<span class="string">"%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加自己的域名节点 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件路径中注意不可使用中文 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 有几个项目就添加几个节点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"我的域名1"</span>  <span class="attr">appBase</span>=<span class="string">"/var/local/路径"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"/var/local/路径/项目名1"</span> <span class="attr">path</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">pattern</span>=<span class="string">"%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"我的域名2"</span>  <span class="attr">appBase</span>=<span class="string">"/var/local/路径"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"/var/local/路径/项目名2"</span> <span class="attr">path</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">pattern</span>=<span class="string">"%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="3-修改Nginx配置"><a href="#3-修改Nginx配置" class="headerlink" title="3. 修改Nginx配置"></a>3. 修改<code>Nginx</code>配置</h1><ul><li><p>配置文件路径在<code>/usr/local/webserver/nginx/conf</code></p></li><li><p>配置<code>nginx.conf</code>中的<code>service</code>节点，注意原有节点不要动，避免出错，在下方新增或开把原有的一个<code>service</code>放开注释</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  domain1;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            proxy_pass   http:&#x2F;&#x2F;domain1:8080;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  domain2;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            proxy_pass   http:&#x2F;&#x2F;domain2:8080;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>  <font color=red><strong>注意：</strong></font>这里的<code>proxy_pass</code>就是转发地址，必须写全，否则<code>nginx</code>会报错</p></li></ul><p>到此，配置完成</p><h1 id="4-后续项目变动"><a href="#4-后续项目变动" class="headerlink" title="4. 后续项目变动"></a>4. 后续项目变动</h1><ul><li>注意，当后续有项目内容需要变动时，最好先停止服务器的<code>Nginx</code>和<code>Tomcat</code>服务，待项目变动完成后，重新启动<code>Nginx</code>和<code>Tomcat</code></li></ul><h2 id="4-1-具体顺序"><a href="#4-1-具体顺序" class="headerlink" title="4.1 具体顺序"></a>4.1 具体顺序</h2><ul><li><p>停止项目</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shutdown.sh</span><br><span class="line">nginx -s quit</span><br></pre></td></tr></table></figure></li><li><p>进入项目路径</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;local&#x2F;项目webapps&#x2F;项目1docBase&#x2F;</span><br></pre></td></tr></table></figure><p>  然后进行更改，可以<code>git</code>，也可以使用<code>Filezilla</code>等手动更改</p></li><li><p>重启服务</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startup.sh</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境配置(二)</title>
      <link href="/%E6%8A%80%E8%83%BD/2019-07-26-/Linux/Linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE(%E4%BA%8C).html"/>
      <url>/%E6%8A%80%E8%83%BD/2019-07-26-/Linux/Linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE(%E4%BA%8C).html</url>
      
        <content type="html"><![CDATA[<h1 id="一-安装jdk"><a href="#一-安装jdk" class="headerlink" title="一. 安装jdk"></a>一. 安装jdk</h1><h2 id="1-下载jdk"><a href="#1-下载jdk" class="headerlink" title="1. 下载jdk"></a>1. 下载jdk</h2><h3 id="1-1-下载网站"><a href="#1-1-下载网站" class="headerlink" title="1.1 下载网站"></a>1.1 下载网站</h3><p><strong><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></strong></p><img src="//cdn.foreversfj.com/image/blog/20190727/yHjUrw0vaJBN.png!blog" style="zoom:73%"/><p><br/><br/></p>* 然后点击下载，选择`tar.gz`格式，等待下载成功<p><img src="//cdn.foreversfj.com/image/blog/20190727/0ep2Bs5X2Ech.png!blog" alt=""></p><h2 id="2-安装jdk"><a href="#2-安装jdk" class="headerlink" title="2. 安装jdk"></a>2. 安装jdk</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><ul><li><p>在Linux服务器的<code>/usr/local/</code>目录下新建<code>java</code>文件夹【注意：建议使用<code>Filezilla</code>或者<code>xftp</code>远程连接服务器，传递文件，使用<code>SecureCRT</code>或者<code>xshell</code>远程管理服务器，发布命令】</p></li><li><p>上传下载的<code>jdk</code>压缩包到这个文件夹<code>/usr/local/java</code></p></li><li><p>在服务器解压文件，并配置环境</p></li><li><p>解压命令：【文件名可能有所不同】</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-11.0.4_x64_bin.tar.gz</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-配置环境"><a href="#2-2-配置环境" class="headerlink" title="2.2 配置环境"></a>2.2 配置环境</h3><ul><li><strong>命令：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><ul><li><font color=red><strong>但是</strong></font>，建议在更改配置文件之前，先备份这个文件，避免后续出错，无法恢复。备份文件到一个专用的文件夹中，这个文件夹要先创建好</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/beifen/</span><br><span class="line">cp /etc/profile  /home/beifen/</span><br></pre></td></tr></table></figure><ul><li><strong>按<code>i</code>将下面的三行粘贴到<code>/etc/profile</code>末尾：[JAVA_HOME是自己jdk的安装路径]</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk-11.0.4</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><ul><li><strong>然后<code>esc</code>输入<code>:wq</code>保存关闭后，执行，让设置生效：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source  /etc/profile</span><br></pre></td></tr></table></figure><h3 id="2-3-检查"><a href="#2-3-检查" class="headerlink" title="2.3 检查"></a>2.3 检查</h3><p>输入以下命令，来确认是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line">java -vesion</span><br></pre></td></tr></table></figure><p>结果无误则说明安装成功</p><h1 id="二-安装Git"><a href="#二-安装Git" class="headerlink" title="二. 安装Git"></a>二. 安装Git</h1><h2 id="1-使用yum默认安装"><a href="#1-使用yum默认安装" class="headerlink" title="1. 使用yum默认安装"></a>1. 使用yum默认安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><ul><li><strong>安装界面如下</strong></li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190727/pVajenuadexh.png!blog" alt=""></p><ul><li><strong>出现询问是否下载时，输入y，点击回车，耐心等待安装完成：</strong></li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190727/KWUVm5p370gW.png!blog" alt=""></p><h2 id="2-验证安装结果"><a href="#2-验证安装结果" class="headerlink" title="2. 验证安装结果"></a>2. 验证安装结果</h2><p>输入命令：<code>git --version</code>，查看安装的Git版本，验证是否安装成功；</p><p><img src="//cdn.foreversfj.com/image/blog/20190727/VrxXEwE0qXHo.png!blog" alt=""></p><h1 id="三-安装Tomcat"><a href="#三-安装Tomcat" class="headerlink" title="三. 安装Tomcat"></a>三. 安装Tomcat</h1><h2 id="1-下载Tomcat"><a href="#1-下载Tomcat" class="headerlink" title="1. 下载Tomcat"></a>1. 下载Tomcat</h2><p>下载地址：<a href="https://archive.apache.org/dist/tomcat/tomcat-9/" target="_blank" rel="noopener">https://archive.apache.org/dist/tomcat/tomcat-9/</a></p><h2 id="2-上传解压【过程参考安装jdk】"><a href="#2-上传解压【过程参考安装jdk】" class="headerlink" title="2. 上传解压【过程参考安装jdk】"></a>2. 上传解压【过程参考安装jdk】</h2><ul><li><p><strong>我的<code>Tomcat</code>的安装目录在：<code>/usr/local/soft/apache-tomcat-9.0.8</code></strong></p></li><li><p><strong>重命名文件为<code>tomcat</code></strong></p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv apache-tomcat-9.0.8 tomcat</span><br></pre></td></tr></table></figure><h2 id="3-配置Tomcat到环境变量"><a href="#3-配置Tomcat到环境变量" class="headerlink" title="3. 配置Tomcat到环境变量"></a>3. 配置Tomcat到环境变量</h2><ul><li><strong>命令：</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><ul><li><strong>在末尾添加：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export CATALINA_HOME=/usr/local/soft/tomcat</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$CATALINA_HOME/lib</span><br><span class="line">export PATH=$PATH:$CATALINA_HOME/bin</span><br></pre></td></tr></table></figure><ul><li><strong>保存退出，然后重启配置文件</strong></li></ul><h2 id="4-检查"><a href="#4-检查" class="headerlink" title="4. 检查"></a>4. 检查</h2><p><strong>命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version.sh</span><br></pre></td></tr></table></figure><p><img src="//cdn.foreversfj.com/image/blog/20190727/YwuSmL0Visr3.png!blog" alt=""></p><p><strong>我的<code>tomcat</code>版本是9.0.8</strong>，出现上图则说明已经配置到环境变量成功！！</p><h1 id="四-安装Nginx"><a href="#四-安装Nginx" class="headerlink" title="四. 安装Nginx"></a>四. 安装Nginx</h1><h2 id="1-确认gcc、g-开发类库是否已安装"><a href="#1-确认gcc、g-开发类库是否已安装" class="headerlink" title="1. 确认gcc、g++开发类库是否已安装"></a>1. 确认gcc、g++开发类库是否已安装</h2><ul><li><p><strong>安装make</strong></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure></li><li><p><strong>安装g++</strong></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc gcc-c++</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-开始安装"><a href="#2-开始安装" class="headerlink" title="2. 开始安装"></a>2. 开始安装</h2><p>选定安装目录，我的<code>Nginx</code>安装在<code>/usr/local/soft</code>，依赖包安装在<code>/usr/local/src</code></p><p>依赖包先下载到本地，然后使用<code>Filezilla</code>上传到<code>/usr/local/src</code></p><h3 id="2-1-安装PCRE依赖库"><a href="#2-1-安装PCRE依赖库" class="headerlink" title="2.1 安装PCRE依赖库"></a>2.1 安装<code>PCRE</code>依赖库</h3><p><a href="ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/">在这里</a>下载最新的<code>PCRE</code>源码包，使用下面命令下载编译和安装<code>PCRE</code>包：【我的是8.38版本】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">tar -zxvf pcre-8.38.tar.gz</span><br><span class="line">cd pcre-8.38</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><font color=red>以上命令只能逐条执行！！！</font></p><h3 id="2-2-安装zlib依赖库"><a href="#2-2-安装zlib依赖库" class="headerlink" title="2.2 安装zlib依赖库"></a>2.2 安装<code>zlib</code>依赖库</h3><p><a href="http://zlib.net/" target="_blank" rel="noopener">在这里</a>下载最新的<code>zlib</code>源码包，使用下面命令下载编译和安装<code>zlib</code>包【我选择<code>zlib-1.2.11.tar.gz</code> 】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">tar -zxvf zlib-1.2.11.tar.gz</span><br><span class="line">cd zlib-1.2.11</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><font color=red>以上命令只能逐条执行！！！</font></p><h3 id="2-3-安装openssl依赖库"><a href="#2-3-安装openssl依赖库" class="headerlink" title="2.3 安装openssl依赖库"></a>2.3 安装<code>openssl</code>依赖库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">tar -zxvf openssl-1.0.1t.tar.gz</span><br><span class="line">cd openssl-1.0.1t</span><br><span class="line">./config</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><font color=red>以上命令只能逐条执行！！！</font></p><h3 id="2-4-安装Nginx"><a href="#2-4-安装Nginx" class="headerlink" title="2.4 安装Nginx"></a>2.4 安装<code>Nginx</code></h3><ul><li>先解压安装包，然后重命名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/soft/</span><br><span class="line">tar zxvf nginx-1.9.1.tar.gz</span><br><span class="line">mv nginx-1.9.1 nginx</span><br></pre></td></tr></table></figure><ul><li>编译安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd nginx</span><br><span class="line">./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.38 --with-zlib=/usr/local/src/zlib-1.2.11 --with-openssl=/usr/local/src/openssl-1.0.1t</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><ul><li>等待执行完成之后，查看<code>Nginx</code>版本【<code>webservice</code>是<code>Nginx</code>自动生成的目录】</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/webserver/nginx/sbin/nginx -v</span><br></pre></td></tr></table></figure><h2 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h2><ul><li><strong>命令：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/webserver/nginx/sbin/nginx /usr/local/bin/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> /usr/<span class="built_in">local</span>/bin/就是环境变量目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 原理就是在此目录添加nginx的配置文件的映射，相当于一个快捷方式</span></span><br></pre></td></tr></table></figure><ul><li><strong>检查：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p>结果显示出nginx的版本，及说明安装成功</p><p><img src="//cdn.foreversfj.com/image/blog/20190727/5LFvh4rfSiEF.png!blog" alt=""></p><p><strong>至此，所有环境已经安装完成！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境配置(一)</title>
      <link href="/%E6%8A%80%E8%83%BD/2019-07-26-/Linux/Linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE(%E4%B8%80).html"/>
      <url>/%E6%8A%80%E8%83%BD/2019-07-26-/Linux/Linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE(%E4%B8%80).html</url>
      
        <content type="html"><![CDATA[<p>前提条件：虚拟机已安装好CentOs7，安装指导：</p><h1 id="1-网卡配置"><a href="#1-网卡配置" class="headerlink" title="1. 网卡配置"></a>1. 网卡配置</h1><ul><li><p>使用用户名/密码登录：root/root</p></li><li><p>查看本地ip地址<br><strong><code>ip addr</code></strong></p></li><li><p>结果显示<br><img src="//cdn.foreversfj.com/image/blog/20190727/qCGbeitgtRNG.png!blogw" alt=""><br>  说明本地网卡没有启用，则启动网卡：</p><ul><li><p>命令：<br><code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></p></li><li><p>结果：</p><p><img src="//cdn.foreversfj.com/image/blog/20190727/MnMvmG3MLIeO.png!blog" alt=""></p><p>  说明网卡没有启用，使用vim编辑，把no改为yes即可</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">按下i进入插入命令</span><br><span class="line">移动光标到no处，删除no，改为yes</span><br><span class="line">按esc退出编辑，输出:wq保存并退出</span><br></pre></td></tr></table></figure></li><li><p>重启网卡服务</p><p>  <code>sudo service network restart</code></p><p>  <img src="//cdn.foreversfj.com/image/blog/20190727/AukOaXjXr7K0.png!blog" alt=""></p></li></ul></li><li><p>此时再次查看，即可发现网卡已经启用</p><p>  <img src="//cdn.foreversfj.com/image/blog/20190727/UKxjn2VX1Ul2.png!blog" alt=""></p></li></ul><h1 id="2-远程连接"><a href="#2-远程连接" class="headerlink" title="2. 远程连接"></a>2. 远程连接</h1><p>由于<code>Linux</code>使用时，各种路径转换极为不便，一般情况下都是用远程连接进行操作。</p><p>一般使用<code>SecureCRT</code>或者<code>xshell</code>进行远程控制，使用<code>Filezilla</code>或者<code>xftp</code>进行文件传输</p><p>我使用的是<code>SecureCRT</code>和<code>Filezilla</code>进行远程操作</p><h2 id="2-1-SecureCRT连接"><a href="#2-1-SecureCRT连接" class="headerlink" title="2.1. SecureCRT连接"></a>2.1. <code>SecureCRT</code>连接</h2><ul><li>文件/连接</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190727/nfkKSc1JUElX.png!blog" alt=""></p><ul><li>新建会话</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190727/wYwjpQTTYoFR.png!blog" alt=""></p><ul><li><p>基本一路<code>下一步</code>，遇到有填的就填一下</p><p>  <img src="//cdn.foreversfj.com/image/blog/20190727/45RkmaGDzquU.png!blog" alt=""></p></li><li><p>填主机名和用户名</p><p>  <img src="//cdn.foreversfj.com/image/blog/20190727/gKNbVjszjLU6.png!blog" alt=""></p></li><li><p>下一步</p><p>  <img src="//cdn.foreversfj.com/image/blog/20190727/OdXpWYWw40F7.png!blog" alt=""></p></li><li><p>点击完成，然后连接刚行创建的会话</p><p>  <img src="//cdn.foreversfj.com/image/blog/20190727/SRk6LIyrTDok.png!blog" alt=""></p></li><li><p>输入密码，完成连接</p></li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190727/yAfFRo5JLtzW.png!blog" alt=""></p><h2 id="2-2-Filezilla连接"><a href="#2-2-Filezilla连接" class="headerlink" title="2.2. Filezilla连接"></a>2.2. <code>Filezilla</code>连接</h2><ul><li><p>文件/站点管理器</p><p>  <img src="//cdn.foreversfj.com/image/blog/20190727/KRHw0rJk4Eer.png!blog" alt=""></p></li><li><p>新建站点</p><p>  <img src="//cdn.foreversfj.com/image/blog/20190727/X0rmecjiOSgF.png!blog" alt=""></p></li><li><p>填写相关信息</p><p>  <img src="//cdn.foreversfj.com/image/blog/20190727/y4hqK9k4JzEq.png!blog" alt=""></p></li><li><p>完成创建，然后点击连接即可</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二部分 第一章 流程控制</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-01-/Java/java_basic/part02/01%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-01-/Java/java_basic/part02/01%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h1><p>&emsp;&emsp;在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。也就是说，程序的流程对运行结果有直接的影响。所以，我们必须清楚每条语句的执行流程。而且，很多时候我们要通过控制语句的执行顺序来实现我们要完成的功能。</p><h1 id="1-2-顺序结构"><a href="#1-2-顺序结构" class="headerlink" title="1.2 顺序结构"></a>1.2 顺序结构</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//顺序执行，根据编写的顺序，从上到下运行</span></span><br><span class="line">    System.out.println(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-1-流程图"><a href="#1-2-1-流程图" class="headerlink" title="1.2.1 流程图"></a>1.2.1 流程图</h2><p><img src="//cdn.foreversfj.com/image/blog/20190730/q5H1XT4lsbih.png!blog" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一部分 小结</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-01-/Java/java_basic/part01/10.%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E5%B0%8F%E7%BB%93.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-01-/Java/java_basic/part01/10.%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E5%B0%8F%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-符号的扩展"><a href="#1-符号的扩展" class="headerlink" title="1. +=符号的扩展"></a>1. +=符号的扩展</h1><p>下面的程序有问题吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> s = <span class="number">1</span>;</span><br><span class="line">    s+=<span class="number">1</span>;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;分析：<code>s += 1</code>逻辑上看作是<code>s = s + 1</code>计算结果被提升为int类型，再向short类型赋值时发生错误，因为不能将取值范围大的类型赋值到取值范围小的类型。但是，<code>s=s+1</code>进行两次运算，<code>+=</code>是一个运算符，只运算一次，并带有强制转换的特点，也就是说<code>s += 1</code>就是<code>s = (short)(s + 1)</code>，因此程序没有问题编译通过，运行结果是2.</p><h1 id="2-常量和变量的运算"><a href="#2-常量和变量的运算" class="headerlink" title="2. 常量和变量的运算"></a>2. 常量和变量的运算</h1><p>下面的程序有问题吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">byte</span> b1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">byte</span> b2=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">byte</span> b3=<span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">byte</span> b4=b1 + b2;</span><br><span class="line">    System.out.println(b3);</span><br><span class="line">    System.out.println(b4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;分析：<code>b3 = 1 + 2</code>，<code>1</code>和<code>2</code>是常量，为固定不变的数据，在编译的时候（编译器javac），已经确定了<code>1+2</code>的结果并没有超过byte类型的取值范围，可以赋值给变量<code>b3</code>，因此<code>b3=1 + 2</code>是正确的。</p><p>&emsp;&emsp;反之，<code>b4 = b2 + b3</code>，<code>b2</code>和<code>b3</code>是变量，变量的值是可能变化的，在编译的时候，编译器<code>javac</code>不确定<code>b2+b3</code>的结果是什么，因此会将结果以int类型进行处理，所以int类型不能赋值给byte类型，因此编译失败。</p><p>在jshell中体现：</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/8APk78vdor7e.jpg!blogw" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一部分 第九章 JShell脚本工具</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-01-/Java/java_basic/part01/09.JShell%E8%84%9A%E6%9C%AC%E5%B7%A5%E5%85%B7.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-01-/Java/java_basic/part01/09.JShell%E8%84%9A%E6%9C%AC%E5%B7%A5%E5%85%B7.html</url>
      
        <content type="html"><![CDATA[<h1 id="JShell脚本工具是JDK9的新特性"><a href="#JShell脚本工具是JDK9的新特性" class="headerlink" title="JShell脚本工具是JDK9的新特性"></a>JShell脚本工具是JDK9的新特性</h1><p>&emsp;&emsp;什么时候会用到<code>JShell</code>工具呢，当我们编写的代码非常少的时候，而又不愿意编写类，<code>main</code>方法，也不愿意去编译和运行，这个时候可以使用JShell工具。</p><p>&emsp;&emsp;启动JShell工具，在DOS命令行直接输入JShell命令。</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/WQJSJwxgkYFb.jpg!blogw" alt=""></p><p>&emsp;&emsp;接下来可以编写Java代码，无需写类和方法，直接写方法中的代码即可，同时无需编译和运行，直接回车即可</p><p><img src="//cdn.foreversfj.com/image/blog/20190824/HgsLTjQJnirQ.jpg!blogw" alt=""></p><blockquote><p>小贴士:<br>&emsp;&emsp;JShell工具，只适合片段代码的测试，开发更多内容，建议编写在方法中。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一部分 第八章 方法入门</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-01-/Java/java_basic/part01/08.%E6%96%B9%E6%B3%95%E5%85%A5%E9%97%A8.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-01-/Java/java_basic/part01/08.%E6%96%B9%E6%B3%95%E5%85%A5%E9%97%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="8-1-概述"><a href="#8-1-概述" class="headerlink" title="8.1 概述"></a>8.1 概述</h1><p>&emsp;&emsp;我们在学习运算符的时候，都为每个运算符单独的创建一个新的类和<code>main</code>方法，我们会发现这样编写代码非常的繁琐，而且重复的代码过多。能否避免这些重复的代码呢，就需要使用方法来实现。</p><ul><li><strong>方法：</strong>就是将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。</li></ul><p>&emsp;&emsp;当我们需要这个功能的时候，就可以去调用。这样即实现了代码的复用性，也解决了代码冗余的现象。</p><h1 id="8-2-方法的定义"><a href="#8-2-方法的定义" class="headerlink" title="8.2 方法的定义"></a>8.2 方法的定义</h1><ul><li><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名 （参数列表）｛</span><br><span class="line">    代码...</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure></li><li><p>定义格式解释：</p><ul><li>修饰符： 目前固定写法<code>public static</code> 。</li><li>返回值类型： 目前固定写法<code>void</code>，其他返回值类型在后面的课程讲解。</li><li>方法名：为我们定义的方法起名，满足标识符的规范，用来调用方法。</li><li>参数列表：目前无参数，带有参数的方法在后面的课程讲解。</li><li>return：方法结束。因为返回值类型是<code>void</code>，方法大括号内的<code>return</code>可以不写。</li></ul></li><li><p>举例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"这是一个方法"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-3-方法的调用"><a href="#8-3-方法的调用" class="headerlink" title="8.3 方法的调用"></a>8.3 方法的调用</h1><p>&emsp;&emsp;方法在定义完毕后，方法不会自己运行，必须被调用才能执行，我们可以在主方法main中来调用我们自己定义好的方法。在主方法中，直接写要调用的方法名字就可以调用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用定义的方法method</span></span><br><span class="line">    method();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义方法，被main方法调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"自己定义的方法，需要被main调用运行"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-4-调用练习"><a href="#8-4-调用练习" class="headerlink" title="8.4 调用练习"></a>8.4 调用练习</h1><p>将三元运算符代码抽取到自定义的方法中，并调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用定义的方法operator</span></span><br><span class="line">    operator();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义方法，方法中定义三元运算符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    i = (<span class="number">1</span>==<span class="number">2</span> ? <span class="number">100</span>:<span class="number">200</span>);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span> ;</span><br><span class="line">    j = (<span class="number">3</span>&lt;=<span class="number">4</span> ? <span class="number">500</span>:<span class="number">600</span>);</span><br><span class="line">    System.out.println(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-5-注意事项"><a href="#8-5-注意事项" class="headerlink" title="8.5 注意事项"></a>8.5 注意事项</h1><ul><li><p>方法定义注意事项：</p><ul><li>方法定义的先后顺序无所谓</li><li>方法的定义不能产生嵌套包含关系</li></ul></li><li><p>方法必须定义在类中、方法外</p><ul><li>方法定义好了之后，不会执行的。如果要想执行，一定要进行方法的<strong>调用</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11Method</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        farmer(); <span class="comment">// 调用农民的方法</span></span><br><span class="line">        seller(); <span class="comment">// 调用小商贩的方法</span></span><br><span class="line">cook(); <span class="comment">// 调用厨子的方法</span></span><br><span class="line">        me(); <span class="comment">// 调用我自己的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 厨子</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"洗菜"</span>);</span><br><span class="line">        System.out.println(<span class="string">"切菜"</span>);</span><br><span class="line">        System.out.println(<span class="string">"炒菜"</span>);</span><br><span class="line">        System.out.println(<span class="string">"装盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">me</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 小商贩</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">seller</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"运输到农贸市场"</span>);</span><br><span class="line">        System.out.println(<span class="string">"抬高价格"</span>);</span><br><span class="line">        System.out.println(<span class="string">"吆喝"</span>);</span><br><span class="line">        System.out.println(<span class="string">"卖给厨子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 农民伯伯</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">farmer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"播种"</span>);</span><br><span class="line">        System.out.println(<span class="string">"浇水"</span>);</span><br><span class="line">        System.out.println(<span class="string">"施肥"</span>);</span><br><span class="line">        System.out.println(<span class="string">"除虫"</span>);</span><br><span class="line">        System.out.println(<span class="string">"收割"</span>);</span><br><span class="line">        System.out.println(<span class="string">"卖给小商贩"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一部分 第七章 运算符</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-01-/Java/java_basic/part01/07.%E8%BF%90%E7%AE%97%E7%AC%A6.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-01-/Java/java_basic/part01/07.%E8%BF%90%E7%AE%97%E7%AC%A6.html</url>
      
        <content type="html"><![CDATA[<h1 id="7-1-算数运算符"><a href="#7-1-算数运算符" class="headerlink" title="7.1 算数运算符"></a>7.1 算数运算符</h1><p>Java中，整数使用以下运算符，无论怎么计算，也不会得到小数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1234</span>;</span><br><span class="line">    System.out.println(i/<span class="number">1000</span>*<span class="number">1000</span>);<span class="comment">//计算结果是1000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">算数运算符包括：</th><th align="left"></th></tr></thead><tbody><tr><td align="left"><code>+</code></td><td align="left">加法运算，字符串连接运算</td></tr><tr><td align="left"><code>-</code></td><td align="left">减法运算</td></tr><tr><td align="left"><code>*</code></td><td align="left">乘法运算</td></tr><tr><td align="left"><code>/</code></td><td align="left">除法运算</td></tr><tr><td align="left"><code>%</code></td><td align="left">取模运算，两个数字相除取余数</td></tr><tr><td align="left"><code>++</code>、<code>--</code></td><td align="left">自增自减运算</td></tr></tbody></table><ul><li><strong><code>++</code>运算，</strong>变量自己增长1<strong>。反之，<code>--</code> 运算，变量自己</strong>减少1**，用法与<code>++</code>一致。<ul><li>独立运算：<ul><li>变量在独立运算时， 前<code>++</code>和后<code>++</code> 没有区别 。</li><li>变量<code>前++</code>**：例如<code>++i</code>。</li><li>变量<code>后++</code>**：例如<code>i++</code> 。``</li></ul></li><li>混合运算：<ul><li>其他变量放在一起，<code>前++</code>和<code>后++</code>就产生了不同。</li><li>变量<code>前++</code>**：变量a自己加1，将加1后的结果赋值给b，也就是说a先计算。a和b的结果都是2。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = ++a;</span><br><span class="line">    System.out.println(a);<span class="comment">//计算结果是2</span></span><br><span class="line">    System.out.println(b);<span class="comment">//计算结果是2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>变量<code>后++</code>**：变量a先把自己的值1，赋值给变量b，此时变量b的值就是1，变量a自己再加1。a的结果是2，b的结果是1。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = a++;</span><br><span class="line">    System.out.println(a);<span class="comment">//计算结果是2</span></span><br><span class="line">    System.out.println(b);<span class="comment">//计算结果是1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>*<code>+</code> 符号在字符串中的操作：</p><ul><li><strong><code>+</code>符号在遇到字符串的时候，表示</strong>连接、拼接**的含义。</li><li>“a”+”b”的结果是“ab”，连接含义<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"5+5="</span>+<span class="number">5</span>+<span class="number">5</span>);<span class="comment">//输出5+5=55</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="7-2-赋值运算符"><a href="#7-2-赋值运算符" class="headerlink" title="7.2. 赋值运算符"></a>7.2. 赋值运算符</h1><table><thead><tr><th align="left">赋值运算符包括：</th><th align="left"></th></tr></thead><tbody><tr><td align="left"><code>=</code></td><td align="left">等于号</td></tr><tr><td align="left"><code>+=</code></td><td align="left">加等于</td></tr><tr><td align="left"><code>-=</code></td><td align="left">减等于</td></tr><tr><td align="left"><code>*=</code></td><td align="left">乘等于</td></tr><tr><td align="left"><code>/=</code></td><td align="left">除等于</td></tr><tr><td align="left"><code>%=</code></td><td align="left">取模等</td></tr></tbody></table><ul><li>赋值运算符，就是将符号右边的值，赋给左边的变量。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">    i+=<span class="number">5</span>;<span class="comment">//计算方式 i=i+5 变量i先加5，再赋值变量i</span></span><br><span class="line">    System.out.println(i); <span class="comment">//输出结果是10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-3-比较运算符"><a href="#7-3-比较运算符" class="headerlink" title="7.3. 比较运算符"></a>7.3. 比较运算符</h1><table><thead><tr><th align="left">比较运算符包括：</th><th align="left"></th></tr></thead><tbody><tr><td align="left"><code>==</code></td><td align="left">比较符号两边数据是否相等，相等结果是true。</td></tr><tr><td align="left"><code>&lt;</code></td><td align="left">比较符号左边的数据是否小于右边的数据，如果小于结果是true。</td></tr><tr><td align="left"><code>&gt;</code></td><td align="left">比较符号左边的数据是否大于右边的数据，如果大于结果是true。</td></tr><tr><td align="left"><code>&lt;=</code></td><td align="left">比较符号左边的数据是否小于或者等于右边的数据，如果小于结果是true。</td></tr><tr><td align="left"><code>&gt;=</code></td><td align="left">比较符号左边的数据是否大于或者等于右边的数据，如果小于结果是true。</td></tr><tr><td align="left"><code>!=</code></td><td align="left">不等于符号 ，如果符号两边的数据不相等，结果是true。</td></tr></tbody></table><ul><li>比较运算符，是两个数据之间进行比较的运算，运算结果都是布尔值<code>true</code>或者<code>false</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="number">1</span>==<span class="number">1</span>);<span class="comment">//true</span></span><br><span class="line">    System.out.println(<span class="number">1</span>&lt;<span class="number">2</span>);<span class="comment">//true</span></span><br><span class="line">    System.out.println(<span class="number">3</span>&gt;<span class="number">4</span>);<span class="comment">//false</span></span><br><span class="line">    System.out.println(<span class="number">3</span>&lt;=<span class="number">4</span>);<span class="comment">//true</span></span><br><span class="line">    System.out.println(<span class="number">3</span>&gt;=<span class="number">4</span>);<span class="comment">//false</span></span><br><span class="line">    System.out.println(<span class="number">3</span>!=<span class="number">4</span>);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-4-逻辑运算符"><a href="#7-4-逻辑运算符" class="headerlink" title="7.4. 逻辑运算符"></a>7.4. 逻辑运算符</h1><table><thead><tr><th align="left">逻辑运算符包括：</th><th align="left"></th></tr></thead><tbody><tr><td align="left"><code>&amp;&amp;</code>短路与</td><td align="left">1. 两边都是true，结果是true<br/>2. 一边是false，结果是false<br/>短路特点：符号左边是false，右边不再运算</td></tr><tr><td align="left">`</td><td align="left"></td></tr><tr><td align="left"><code>！</code> 取反</td><td align="left">1. ! true 结果是false<br/>2. ! false结果是true</td></tr></tbody></table><ul><li>逻辑运算符，是用来连接两个布尔类型结果的运算符，运算结果都是布尔值<code>true</code>或者<code>false</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="keyword">true</span> &amp;&amp; <span class="keyword">true</span>);<span class="comment">//true</span></span><br><span class="line">    System.out.println(<span class="keyword">true</span> &amp;&amp; <span class="keyword">false</span>);<span class="comment">//false</span></span><br><span class="line">    System.out.println(<span class="keyword">false</span> &amp;&amp; <span class="keyword">true</span>);<span class="comment">//false，右边不计算</span></span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="keyword">false</span> || <span class="keyword">false</span>);<span class="comment">//falase</span></span><br><span class="line">    System.out.println(<span class="keyword">false</span> || <span class="keyword">true</span>);<span class="comment">//true</span></span><br><span class="line">    System.out.println(<span class="keyword">true</span> || <span class="keyword">false</span>);<span class="comment">//true，右边不计算</span></span><br><span class="line">    </span><br><span class="line">    System.out.println(!<span class="keyword">false</span>);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-5-三元运算符"><a href="#7-5-三元运算符" class="headerlink" title="7.5. 三元运算符"></a>7.5. 三元运算符</h1><ul><li>三元运算符格式：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 &#x3D; 布尔类型表达式？结果1：结果2</span><br></pre></td></tr></table></figure><ul><li>三元运算符计算方式：<ul><li>布尔类型表达式结果是true，三元运算符整体结果为结果1，赋值给变量。</li><li>布尔类型表达式结果是false，三元运算符整体结果为结果2，赋值给变量。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = (<span class="number">1</span>==<span class="number">2</span> ? <span class="number">100</span> : <span class="number">200</span>);</span><br><span class="line">    System.out.println(i);<span class="comment">//200</span></span><br><span class="line">    <span class="keyword">int</span> j = (<span class="number">3</span>&lt;=<span class="number">4</span> ? <span class="number">500</span> : <span class="number">600</span>);</span><br><span class="line">    System.out.println(j);<span class="comment">//500</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一部分 第六章 数据类型转换</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-01-/Java/java_basic/part01/06.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-07-01-/Java/java_basic/part01/06.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;Java程序中要求参与的计算的数据，必须要保证数据类型的一致性，如果数据类型不一致将发生类型的转换。</p><h1 id="6-1-自动转换"><a href="#6-1-自动转换" class="headerlink" title="6.1. 自动转换"></a>6.1. 自动转换</h1><p>&emsp;&emsp;一个<code>int</code>类型变量和一个<code>byte</code>类型变量进行加法运算，结果会是什么数据类型？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>运算结果，变量的类型将是<code>int</code>类型，这就是出现了数据类型的自动类型转换现象。</p><ul><li><strong>自动转换</strong>：<em>将取值范围小的类型</em> 自动提升为 <em>取值范围大的类型</em> 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">byte</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// byte x = b + i; // 报错</span></span><br><span class="line">    <span class="comment">//int类型和byte类型运算，结果是int类型</span></span><br><span class="line">    <span class="keyword">int</span> j = b + i;</span><br><span class="line">    System.out.println(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-1-1-转换原理图解"><a href="#6-1-1-转换原理图解" class="headerlink" title="6.1.1 转换原理图解"></a>6.1.1 转换原理图解</h2><p><code>byte</code> 类型内存占有1个字节，在和<code>int</code>类型运算时会提升为<code>int</code>类型 ，自动补充3个字节，因此计算后的结果还是<code>int</code>类型。</p><p><img src="//cdn.foreversfj.com/image/blog/20190729/UpMh0pSJ4Inx.png!blog" alt=""></p><p>同样道理，当一个<code>int</code>类型变量和一个<code>double</code>变量运算时，<code>int</code>类型将会自动提升为<code>double</code>类型进行运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">2.5</span>;</span><br><span class="line">    <span class="comment">//int类型和double类型运算，结果是double类型</span></span><br><span class="line">    <span class="comment">//int类型会提升为double类型</span></span><br><span class="line">    <span class="keyword">double</span> e = d+i;</span><br><span class="line">    System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-1-2-转换规则"><a href="#6-1-2-转换规则" class="headerlink" title="6.1.2 转换规则"></a>6.1.2 转换规则</h2><p>范围小的类型向范围大的类型提升，<code>byte</code>、<code>short</code>、<code>char</code>运算时直接提升为<code>int</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">char</span>‐‐&gt;<span class="keyword">int</span>‐‐&gt;<span class="keyword">long</span>‐‐&gt;<span class="keyword">float</span>‐‐&gt;<span class="keyword">double</span></span><br></pre></td></tr></table></figure><h1 id="6-2-强制转换"><a href="#6-2-强制转换" class="headerlink" title="6.2. 强制转换"></a>6.2. 强制转换</h1><p>将<code>1.5</code> 赋值到<code>int</code>类型变量会发生什么？产生编译失败，肯定无法赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1.5</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p><code>double</code>类型内存8个字节，<code>int</code>类型内存4个字节。<code>1.5</code>是<code>double</code>类型，取值范围大于<code>int</code>。可以理解为<code>double</code>是8升的水壶，<code>int</code>是4升的水壶，不能把大水壶中的水直接放进小水壶去。</p><p>想要赋值成功，只有通过强制类型转换，将<code>double</code>类型强制转换成int 类型才能赋值。</p><ul><li><strong>强制类型转换：</strong>将<code>取值范围大</code>的类型强制转换成<code>取值范围小</code>的类型。</li></ul><p>比较而言，自动转换是Java自动执行的，而强制转换需要我们自己手动执行。</p><h2 id="6-2-1-转换格式："><a href="#6-2-1-转换格式：" class="headerlink" title="6.2.1. 转换格式："></a>6.2.1. 转换格式：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = （数据类型）被转数据值；</span><br></pre></td></tr></table></figure><p>将<code>1.5</code>赋值到<code>int</code>类型，代码修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// double类型数据强制转成int类型，直接去掉小数点。</span></span><br><span class="line"><span class="keyword">int</span> i = (<span class="keyword">int</span>)<span class="number">1.5</span>;</span><br></pre></td></tr></table></figure><p>同样道理，当一个类型与1 相加，我们知道会类型提升，但是还想给结果赋值给<code>short</code>类型变量，就需要强制转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//short类型变量，内存中2个字节</span></span><br><span class="line">    <span class="keyword">short</span> s = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        出现编译失败</span></span><br><span class="line"><span class="comment">        s和1做运算的时候，1是int类型，s会被提升为int类型</span></span><br><span class="line"><span class="comment">        s+1后的结果是int类型，将结果在赋值会short类型时发生错误</span></span><br><span class="line"><span class="comment">        short内存2个字节，int类型4个字节</span></span><br><span class="line"><span class="comment">        必须将int强制转成short才能完成赋值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    s = s + <span class="number">1</span>；<span class="comment">//编译失败</span></span><br><span class="line">        s = (<span class="keyword">short</span>)(s+<span class="number">1</span>);<span class="comment">//编译成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-2-转换原理图解"><a href="#6-2-2-转换原理图解" class="headerlink" title="6.2.2. 转换原理图解"></a>6.2.2. 转换原理图解</h2><p><img src="//cdn.foreversfj.com/image/blog/20190729/d9PGUSPVoSea.png!blog" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽样与中心极限定理</title>
      <link href="/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/2019-06-18-/Course/ManagementStatistics/%E6%8A%BD%E6%A0%B7%E4%B8%8E%E4%B8%AD%E5%BF%83%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86.html"/>
      <url>/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/2019-06-18-/Course/ManagementStatistics/%E6%8A%BD%E6%A0%B7%E4%B8%8E%E4%B8%AD%E5%BF%83%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-抽样方法"><a href="#1-抽样方法" class="headerlink" title="1. 抽样方法"></a>1. 抽样方法</h1><h2 id="1-1-抽样的理由"><a href="#1-1-抽样的理由" class="headerlink" title="1.1. 抽样的理由"></a>1.1. 抽样的理由</h2><ul><li>联系总体将会花费大量的时间</li><li>对总体的所有项目进行研究的成本过高</li><li>对总体的所有项目进行检验实际不可能</li><li>一些检验实验具有破坏性</li><li>样本结果是充分的</li></ul><h2 id="1-2-简单随机抽样"><a href="#1-2-简单随机抽样" class="headerlink" title="1.2. 简单随机抽样"></a>1.2. 简单随机抽样</h2><p><strong>简单随机抽样</strong>：使得总体中的每个单元或者个体都有相同的机会被选中的方法抽取的一个样本。</p><p><img src="//cdn.foreversfj.com/image/blog/20190714/b6MnIalaQvj3.jpg!blog" alt=""></p><h2 id="1-3-系统随机抽样"><a href="#1-3-系统随机抽样" class="headerlink" title="1.3. 系统随机抽样"></a>1.3. 系统随机抽样</h2><p><strong>系统随机抽样</strong>：随机选取一个起始点，然后每第k 个总体单位被抽去出来进入样本。</p><h2 id="1-4-分层随机抽样"><a href="#1-4-分层随机抽样" class="headerlink" title="1.4. 分层随机抽样"></a>1.4. 分层随机抽样</h2><p><strong>分层随机抽样</strong>：总体被分成若干个组，每一组被称作一层，并且从每一层里随机的抽取一个样本。</p><p><img src="//cdn.foreversfj.com/image/blog/20190714/AzluTGBTyFBM.jpg!blog" alt=""></p><h2 id="1-5-整群抽样"><a href="#1-5-整群抽样" class="headerlink" title="1.5. 整群抽样"></a>1.5. 整群抽样</h2><p><strong>整群抽样</strong>：利用自然形成的地理的或其他的界限将总体分成群。然后，随机地抽取若干群并且从每个群里随机的抽取一个样本。</p><img src="//cdn.foreversfj.com/image/blog/20190714/UD00RtfbO3ya.jpg!blog" style="zoom:50%"/><h1 id="2-抽样误差"><a href="#2-抽样误差" class="headerlink" title="2. 抽样误差"></a>2. 抽样误差</h1><p><strong>抽样误差：一个样本统计量与其所对应的总体参数之间的差异。</strong></p><h1 id="3-样本均值的抽样分布"><a href="#3-样本均值的抽样分布" class="headerlink" title="3. 样本均值的抽样分布"></a>3. 样本均值的抽样分布</h1><p>一个给定样本容量的所有可能的样本均值的概率分布。</p><img src="//cdn.foreversfj.com/image/blog/20190714/C3tMuWosDsVW.jpg!blog" style="zoom:50%"/><h2 id="3-1-中心极限定理"><a href="#3-1-中心极限定理" class="headerlink" title="3.1. 中心极限定理"></a>3.1. 中心极限定理</h2><h3 id="3-2-定理"><a href="#3-2-定理" class="headerlink" title="3.2. 定理"></a>3.2. 定理</h3><p>中心极限定理(central limit theorem)：设从均值为 $\mu$，方差为 $\sigma ^ 2$ 的任意一个总体中抽取样本容量为 $n$ 的随机样本，则当 $n$ 充分大时，样本均值 $\bar X$ 的抽样分布近似满足均值为 $\mu$，方差为 $\sigma ^ 2/n$ 的正态分布。</p><h3 id="3-3-正态分布-高斯分布"><a href="#3-3-正态分布-高斯分布" class="headerlink" title="3.3. 正态分布(高斯分布)"></a>3.3. 正态分布(高斯分布)</h3><ul><li><p><strong><font color="red">正态分布的密度函数：</font></strong>：$f(x)=\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$，$\sigma&gt;0$</p></li><li><p><strong><font color="red">正态分布的期望和方差：</font></strong>：$E(X)=\mu$，$Var(X)=\sigma^2$</p></li></ul><h3 id="3-4-中心极限定理的说明"><a href="#3-4-中心极限定理的说明" class="headerlink" title="3.4. 中心极限定理的说明"></a>3.4. 中心极限定理的说明</h3><ul><li>当总体服从正态分布时，无论样本大小，中心极限定理均适用；</li><li>当 $n \geq 15$ 时，对于分布较为对称的总体，中心极限定理适用；</li><li>当 $n \geq 30$ 时，无论总体分布形态如何，中心极限定理均适用；</li><li>从一个给定的总体中，抽取容量相同的所有可能的样本，样本均值（抽样分布的平均值）恰好等于总体均值。即：$\mu = \mu \bar X$；</li><li>样本均值抽样分布的离散程度将会比总体的离散程度小。并且，随着样本容量的增大，样本均值分布的标准差将减少。</li></ul><h1 id="4-样本均值抽样分布的应用"><a href="#4-样本均值抽样分布的应用" class="headerlink" title="4. 样本均值抽样分布的应用"></a>4. 样本均值抽样分布的应用</h1><ul><li><strong>抽样的均值服从正态分布</strong><img src="//cdn.foreversfj.com/image/blog/20190728/w30nk23SwsNb.png" style="zoom:80%"/></li></ul>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率分布</title>
      <link href="/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/2019-06-18-/Course/ManagementStatistics/%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83.html"/>
      <url>/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/2019-06-18-/Course/ManagementStatistics/%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-二项分布"><a href="#1-二项分布" class="headerlink" title="1. 二项分布"></a>1. 二项分布</h1><h2 id="1-1-二项分布公式"><a href="#1-1-二项分布公式" class="headerlink" title="1.1. 二项分布公式"></a>1.1. 二项分布公式</h2><p><strong><font color="red">二项分布的密度函数：</font></strong><br>&emsp;&emsp;$P(X=k)={C_n^k}{p^k}{(1-p)^{n-k}}，k=0,1,2,…，n$</p><p><strong><font color="red">二项分布$B(n,p) $的期望和方差：</font></strong><br>&emsp;&emsp;$E(X)=np, Var(X)=npq$</p><h2 id="1-2-二项分布归纳"><a href="#1-2-二项分布归纳" class="headerlink" title="1.2. 二项分布归纳"></a>1.2. 二项分布归纳</h2><p>如果 $\pi$  保持不变，随着 $n$ 的增加，分布的形状变得越来越对称。</p><h1 id="2-超几何分布"><a href="#2-超几何分布" class="headerlink" title="2. 超几何分布"></a>2. 超几何分布</h1><h2 id="2-1-超几何概率试验"><a href="#2-1-超几何概率试验" class="headerlink" title="2.1. 超几何概率试验"></a>2.1. 超几何概率试验</h2><ul><li>一个试验过程中每次试验的结果必然属于成功和失败这两个互不相容类别中的一个；</li><li>在一个试验次数固定的试验过程中，随机变量就是成功的次数；</li><li>试验不是独立的；</li><li>假设样本是从有限总体中无放回抽取的，且$n/N &gt; 0.05$。因此，每次试验中成功的概率会发生变化。</li></ul><p><strong><font color="red">超几何分布的公式：</font></strong></p><p>$P(x)=\frac{C_S^xC_{N-S}^{m-x}}{C_N^m}$</p><p>当 $n/N &lt; 0.05$，二项分布可以用来近似超几何分布。也就是说：当样本容量小于总体容量的 $5%$ 时，二项分布就足够了。</p><h1 id="3-泊松分布"><a href="#3-泊松分布" class="headerlink" title="3. 泊松分布"></a>3. 泊松分布</h1><h2 id="3-1-泊松分布公式"><a href="#3-1-泊松分布公式" class="headerlink" title="3.1 泊松分布公式"></a>3.1 泊松分布公式</h2><p><strong><font color="red">泊松分布的密度函数：</font></strong><br>&emsp;&emsp;&emsp;&emsp;$P(X=k)=\frac{\lambda^k}{k!}e^{-\lambda}$</p><p><strong><font color="red">泊松分布的期望和方差：</font></strong><br>&emsp;&emsp;&emsp;&emsp;$E(X)=\lambda$，$Var(X)=\lambda$</p><h2 id="3-2-泊松分布举例"><a href="#3-2-泊松分布举例" class="headerlink" title="3.2. 泊松分布举例"></a>3.2. 泊松分布举例</h2><p><strong>假设到图书馆上自习的同学有一定固定频率，比如平均每个小时 $\lambda$ 人。请问下一个小时有多少同学到图书馆上自习？</strong></p><ul><li><strong>假设平均每个小时有6 个同学到来，未来一小时没有同学$(k = 0)$ 到来的概率是多少？</strong></li></ul><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;$P(X=k)=\frac{\lambda^k}{k!}{e^{-\lambda}}=\frac{6^0}{0!}{e^{-6}}=0.002478752$</p><ul><li><strong>未来2 小时至少有2 个同学$(k &gt; 2) $来访的概率是多少？这里需要将泊松分布公式改写一下，加入时间t：</strong></li></ul><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;$P(X(t) = k) =\frac{(\lambda t)^k}{k!}{e^{-\lambda t}}$</p><p><strong>则有：</strong></p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;$P(X(t) &gt;2) = 1-P(X(t) = 1,0) = 0.9999201$</p><h1 id="4-指数分布"><a href="#4-指数分布" class="headerlink" title="4. 指数分布"></a>4. 指数分布</h1><h2 id="4-1-指数分布公式"><a href="#4-1-指数分布公式" class="headerlink" title="4.1 指数分布公式"></a>4.1 指数分布公式</h2><ul><li><p><strong><font color="red">指数分布的密度函数：</font></strong>：$f(x)={\lambda e}^{-\lambda x}, \lambda&gt;0$</p></li><li><p><strong><font color="red">指数分布的期望和方差：</font></strong>：$E(X)={\frac 1 \lambda}, Var(X)={\frac 1 \lambda}$</p></li><li><p><strong><font color="red">指数分布$E(\lambda) $概率函数：</font></strong>：$P(X \leq t)=1-P(X &gt; t)=1-e^{-\lambda t}$</p></li></ul><h2 id="4-2-指数分布举例"><a href="#4-2-指数分布举例" class="headerlink" title="4.2. 指数分布举例"></a>4.2. 指数分布举例</h2><ul><li><strong>未来10 分钟，有同学到来的概率：</strong></li></ul><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;$P(X \leq\frac 1 6)=1-e^{-6 \times \frac 1 6}=0.6321206$</p><ul><li><strong>未来10 分钟到30 分钟，有同学到来的概率</strong></li></ul><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;$P(\frac 1 6 \leq  X \leq \frac 1 2)=(1-e^{-6 \times \frac 1 2})-(1-e^{-6 \times \frac 1 6})=0.3180924$</p><h2 id="4-3-指数分布与泊松分布的关系"><a href="#4-3-指数分布与泊松分布的关系" class="headerlink" title="4.3. 指数分布与泊松分布的关系"></a>4.3. 指数分布与泊松分布的关系</h2><ul><li><strong>泊松分布是单位时间内独立事件发生次数的概率分布；</strong></li><li><strong>指数分布是独立事件的时间间隔的概率分布。</strong></li></ul><h1 id="5-以上分布的R函数表示"><a href="#5-以上分布的R函数表示" class="headerlink" title="5. 以上分布的R函数表示"></a>5. 以上分布的R函数表示</h1><table><thead><tr><th align="left">Distribution</th><th align="left">R name</th><th align="left">additional arguments</th></tr></thead><tbody><tr><td align="left">beta</td><td align="left">beta</td><td align="left">shape1，shape2，ncp</td></tr><tr><td align="left">binomial</td><td align="left">binom</td><td align="left">size，prob</td></tr><tr><td align="left">Cauchy</td><td align="left">cauchy</td><td align="left">location，scale</td></tr><tr><td align="left">chi-squared</td><td align="left">chisq</td><td align="left">df，ncp</td></tr><tr><td align="left">exponential</td><td align="left">exp</td><td align="left">rate</td></tr><tr><td align="left">F</td><td align="left">f</td><td align="left">df1，df2，ncp</td></tr><tr><td align="left">gamma</td><td align="left">gamma</td><td align="left">shape，scale</td></tr><tr><td align="left">geometric</td><td align="left">geom</td><td align="left">prob</td></tr><tr><td align="left">hyper geometric</td><td align="left">hyper</td><td align="left">m，n，k</td></tr><tr><td align="left">log-normal</td><td align="left">lnorm</td><td align="left">meanlog，sdlog</td></tr><tr><td align="left">logistic</td><td align="left">logis</td><td align="left">location，scale</td></tr><tr><td align="left">negative binomial</td><td align="left">nbinom</td><td align="left">size，prob</td></tr><tr><td align="left">normal</td><td align="left">norm</td><td align="left">mean，sd</td></tr><tr><td align="left">Poisson</td><td align="left">pois</td><td align="left">lambda</td></tr><tr><td align="left">signed rank</td><td align="left">signrank</td><td align="left">n</td></tr><tr><td align="left">Student’st</td><td align="left">t</td><td align="left">df，ncp</td></tr><tr><td align="left">uniform</td><td align="left">unif</td><td align="left">min，max</td></tr><tr><td align="left">Weibull</td><td align="left">weibull</td><td align="left">shape，scale</td></tr><tr><td align="left">Wilcox on</td><td align="left">wilcox</td><td align="left">m，n</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R语言的基础</title>
      <link href="/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/2019-06-18-/Course/ManagementStatistics/R%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80.html"/>
      <url>/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/2019-06-18-/Course/ManagementStatistics/R%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-R-初步"><a href="#1-R-初步" class="headerlink" title="1. R 初步"></a>1. R 初步</h1><p><strong>R 语言的入门，文档下载</strong></p><p>链接：<a href="https://pan.baidu.com/s/1Hidv00Yp-_iatDf-HXDEJQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1Hidv00Yp-_iatDf-HXDEJQ</a> </p><p>提取码：<code>1dzb</code></p><h2 id="1-1-R-绘图-graphics"><a href="#1-1-R-绘图-graphics" class="headerlink" title="1.1. R 绘图 graphics"></a>1.1. R 绘图 graphics</h2><img src="//cdn.foreversfj.com/image/blog/20190714/LdDs4wJodRXq.png!blog" style="zoom:50%;"><table >    <tr>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/EoxiHIzbX8AT.png!blog" style="zoom:50%; ">        </td>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/DDqlDaR2DRrT.png!blog" style="zoom:50%; ">        </td>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/IIiD01YSywMm.png!blog" style="zoom:50%; ">        </td>    </tr>    <tr>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/aQq8fAT6XPs9.png!blog" style="zoom:50%; ">        </td>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/tIIfVIC3wFMj.png!blog" style="zoom:50%;">        </td>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/VoQsFF7UBrrR.png!blog" style="zoom:50%; ">        </td>    </tr></table><h2 id="1-2-计算功能"><a href="#1-2-计算功能" class="headerlink" title="1.2. 计算功能"></a>1.2. 计算功能</h2><ul><li><p><strong>赋值:</strong></p><ul><li>简单算术运算功能，输入运算式得到结果:</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">2</span>+<span class="number">2</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">4</span></span><br><span class="line"></span><br><span class="line">&gt; exp(-<span class="number">2</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">0.1353353</span></span><br><span class="line"></span><br><span class="line">&gt; rnorm(<span class="number">15</span>)</span><br><span class="line">[<span class="number">1</span>] -<span class="number">1.475349131</span> -<span class="number">0.420342363</span>  <span class="number">1.650538466</span> -<span class="number">0.350305530</span> -<span class="number">1.514609697</span>  <span class="number">0.894449245</span></span><br><span class="line">[<span class="number">7</span>] -<span class="number">0.052745967</span> -<span class="number">1.353221501</span> -<span class="number">1.305113978</span> -<span class="number">1.574893823</span> -<span class="number">0.476416373</span> -<span class="number">0.600568454</span></span><br><span class="line">[<span class="number">13</span>]  <span class="number">0.001433752</span> -<span class="number">0.285181931</span>  <span class="number">1.364441405</span></span><br></pre></td></tr></table></figure><ul><li>R语言中的赋值:</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; x&lt;- -<span class="number">2</span></span><br><span class="line"></span><br><span class="line">&gt; x</span><br><span class="line">[<span class="number">1</span>] -<span class="number">2</span></span><br><span class="line"></span><br><span class="line">&gt; x+x</span><br><span class="line">[<span class="number">1</span>] -<span class="number">4</span></span><br></pre></td></tr></table></figure><ul><li>不要以空格和点号作为名称的开头。</li><li>名称是区分大小写的。</li><li>最好不要以单个字母来命名。</li><li><code>F</code> 和 <code>T</code> 是FALSE和TRUE的标准缩写。</li></ul></li><li><p><strong>向量计算 Vectorized arithmetic</strong></p></li></ul><p>【例题：判断身体质量指数是否满足标准】</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; weight &lt;- c(<span class="number">60</span>, <span class="number">72</span>, <span class="number">57</span>, <span class="number">90</span>, <span class="number">95</span>, <span class="number">72</span>)</span><br><span class="line">&gt; weight</span><br><span class="line">[<span class="number">1</span>] <span class="number">60</span> <span class="number">72</span> <span class="number">57</span> <span class="number">90</span> <span class="number">95</span> <span class="number">72</span></span><br><span class="line">&gt; height &lt;- c(<span class="number">1.75</span>, <span class="number">1.80</span>, <span class="number">1.65</span>, <span class="number">1.90</span>, <span class="number">1.74</span>, <span class="number">1.91</span>)</span><br><span class="line">&gt; bmi &lt;- weight/height^<span class="number">2</span></span><br><span class="line">&gt; bmi</span><br><span class="line">[<span class="number">1</span>] <span class="number">19.59184</span> <span class="number">22.22222</span> <span class="number">20.93664</span> <span class="number">24.93075</span> <span class="number">31.37799</span> <span class="number">19.73630</span></span><br></pre></td></tr></table></figure><ul><li>计算均值和标准差：$SD=\sqrt{\sum(X_i-\overline{X})^2/(n-1)}$</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; sum(weight)</span><br><span class="line">[<span class="number">1</span>] <span class="number">446</span></span><br><span class="line">&gt; sum(weight)/length(weight)</span><br><span class="line">[<span class="number">1</span>] <span class="number">74.33333</span></span><br><span class="line">&gt; xbar &lt;- sum(weight)/length(weight)</span><br><span class="line">&gt; weight - xbar</span><br><span class="line">[<span class="number">1</span>] -<span class="number">14.333333</span>  -<span class="number">2.333333</span> -<span class="number">17.333333</span>  <span class="number">15.666667</span>  <span class="number">20.666667</span></span><br><span class="line">[<span class="number">6</span>]  -<span class="number">2.333333</span></span><br><span class="line">&gt; (weight - xbar)^<span class="number">2</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">205.444444</span>   <span class="number">5.444444</span> <span class="number">300.444444</span> <span class="number">245.444444</span> <span class="number">427.111111</span></span><br><span class="line">[<span class="number">6</span>]   <span class="number">5.444444</span></span><br><span class="line">&gt; sum((weight - xbar)^<span class="number">2</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1189.333</span></span><br><span class="line">&gt; sqrt(sum((weight - xbar)^<span class="number">2</span>)/(length(weight)-<span class="number">1</span>))</span><br><span class="line">[<span class="number">1</span>] <span class="number">15.42293</span></span><br><span class="line">&gt; mean(weight)</span><br><span class="line">[<span class="number">1</span>] <span class="number">74.33333</span></span><br><span class="line">&gt; sd(weight)</span><br><span class="line">[<span class="number">1</span>] <span class="number">15.42293</span></span><br></pre></td></tr></table></figure><p>检查<code>bmi</code>身体重量指数是否瞒住标准（标准<code>bmi</code>指数为20-25，均值为22.5）</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; t.test(bmi, mu = <span class="number">22.5</span>)</span><br><span class="line">    One Sample t-test</span><br><span class="line">data:  bmi</span><br><span class="line">t = <span class="number">0.34488</span>, df = <span class="number">5</span>, p-value = <span class="number">0.7442</span></span><br><span class="line">alternative hypothesis: true mean is not equal to <span class="number">22.5</span></span><br><span class="line"><span class="number">95</span> percent confidence interval:</span><br><span class="line"> <span class="number">18.41734</span> <span class="number">27.84791</span></span><br><span class="line">sample estimates:</span><br><span class="line">mean of x </span><br><span class="line"> <span class="number">23.13262</span></span><br></pre></td></tr></table></figure><h1 id="2-R语言基础"><a href="#2-R语言基础" class="headerlink" title="2. R语言基础"></a>2. R语言基础</h1><h2 id="2-1-函数及参数-functions-and-arguments"><a href="#2-1-函数及参数-functions-and-arguments" class="headerlink" title="2.1 函数及参数 functions and arguments"></a>2.1 函数及参数 functions and arguments</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- <span class="number">10086</span></span><br><span class="line"><span class="comment"># 对数</span></span><br><span class="line">log(x)</span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">plot(height, weight)</span><br><span class="line">plot(height, weight, pch=<span class="number">2</span>)</span><br><span class="line">plot(x=height, y=weight)</span><br><span class="line"><span class="comment"># 列出当前已保存并可使用的所有参数</span></span><br><span class="line">ls()</span><br><span class="line"><span class="comment"># 打印目标信息</span></span><br><span class="line">args(plot.default)</span><br></pre></td></tr></table></figure><h2 id="2-2-向量-vectors"><a href="#2-2-向量-vectors" class="headerlink" title="2.2 向量 vectors"></a>2.2 向量 vectors</h2><ul><li><strong>创建简单向量</strong></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建简单向量</span></span><br><span class="line">c(<span class="string">"Huey"</span>, <span class="string">"Dewey"</span>, <span class="string">"Louie"</span>)</span><br><span class="line">c(<span class="literal">T</span>, <span class="literal">T</span>, <span class="literal">F</span>, <span class="literal">T</span>)</span><br><span class="line">bmi &gt; <span class="number">25</span></span><br><span class="line"><span class="comment">## c()函数创建向量</span></span><br><span class="line">x &lt;- c(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">y &lt;- c(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment">## 向量拼接</span></span><br><span class="line">c(x, y, <span class="number">5</span>)</span><br><span class="line"><span class="comment">## 创建二维向量</span></span><br><span class="line">x &lt;- c(red=<span class="string">"Huey"</span>, blue=<span class="string">"Dewey"</span>, green=<span class="string">"Louie"</span>)</span><br><span class="line"><span class="comment">## 打印向量x的每一维的name</span></span><br><span class="line">names(x)</span><br><span class="line"><span class="comment">## 自动匹配并转化数据类型</span></span><br><span class="line">c(<span class="literal">FALSE</span>, <span class="number">3</span>)</span><br><span class="line">c(pi, <span class="string">"abc"</span>)</span><br><span class="line">c(<span class="literal">FALSE</span>, <span class="string">"abc"</span>)</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; c(<span class="string">"Huey"</span>, <span class="string">"Dewey"</span>, <span class="string">"Louie"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"Huey"</span>  <span class="string">"Dewey"</span> <span class="string">"Louie"</span></span><br><span class="line">&gt; c(<span class="literal">T</span>, <span class="literal">T</span>, <span class="literal">F</span>, <span class="literal">T</span>)</span><br><span class="line">[<span class="number">1</span>]  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span></span><br><span class="line">&gt; bmi &gt; <span class="number">25</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span></span><br><span class="line">&gt; <span class="comment"># c()函数创建向量</span></span><br><span class="line">&gt; x &lt;- c(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&gt; y &lt;- c(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">&gt; c(x, y, <span class="number">5</span>)</span><br><span class="line">[<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span> <span class="number">10</span> <span class="number">20</span>  <span class="number">5</span></span><br><span class="line">&gt; <span class="comment"># </span></span><br><span class="line">&gt; x &lt;- c(red=<span class="string">"Huey"</span>, blue=<span class="string">"Dewey"</span>, green=<span class="string">"Louie"</span>)</span><br><span class="line">&gt; x</span><br><span class="line">    red    blue   green </span><br><span class="line"> <span class="string">"Huey"</span> <span class="string">"Dewey"</span> <span class="string">"Louie"</span> </span><br><span class="line">&gt; names(x)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"red"</span>   <span class="string">"blue"</span>  <span class="string">"green"</span></span><br><span class="line">&gt; c(<span class="literal">FALSE</span>, <span class="number">3</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">0</span> <span class="number">3</span></span><br><span class="line">&gt; c(pi, <span class="string">"abc"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"3.14159265358979"</span> <span class="string">"abc"</span>             </span><br><span class="line">&gt; c(<span class="literal">FALSE</span>, <span class="string">"abc"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"FALSE"</span> <span class="string">"abc"</span></span><br></pre></td></tr></table></figure><ul><li><strong>使用函数创建向量</strong></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># 使用seq(),rep()函数创建向量</span></span><br><span class="line">&gt; <span class="comment">## 创建连续数值向量</span></span><br><span class="line">&gt; seq(<span class="number">4</span>, <span class="number">9</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line">&gt; <span class="number">4</span>:<span class="number">9</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line">&gt; <span class="comment">## 创建等距向量</span></span><br><span class="line">&gt; seq(<span class="number">4</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">[<span class="number">1</span>]  <span class="number">4</span>  <span class="number">6</span>  <span class="number">8</span> <span class="number">10</span></span><br><span class="line">&gt; <span class="comment">## 向量复制</span></span><br><span class="line">&gt; oops &lt;- c(<span class="number">7</span>, <span class="number">9</span>, <span class="number">13</span>)</span><br><span class="line">&gt; rep(oops, <span class="number">3</span>)</span><br><span class="line">[<span class="number">1</span>]  <span class="number">7</span>  <span class="number">9</span> <span class="number">13</span>  <span class="number">7</span>  <span class="number">9</span> <span class="number">13</span>  <span class="number">7</span>  <span class="number">9</span> <span class="number">13</span></span><br><span class="line">&gt; <span class="comment">## 按倍次复制</span></span><br><span class="line">&gt; rep(oops, <span class="number">1</span>:<span class="number">3</span>)</span><br><span class="line">[<span class="number">1</span>]  <span class="number">7</span>  <span class="number">9</span>  <span class="number">9</span> <span class="number">13</span> <span class="number">13</span> <span class="number">13</span></span><br><span class="line">&gt; <span class="comment">## 批量复制</span></span><br><span class="line">&gt; rep(<span class="number">1</span>:<span class="number">2</span>, c(<span class="number">10</span>, <span class="number">15</span>))</span><br><span class="line"> [<span class="number">1</span>] <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="2-3-矩阵与数组-matrics-and-arrays"><a href="#2-3-矩阵与数组-matrics-and-arrays" class="headerlink" title="2.3. 矩阵与数组 matrics and arrays"></a>2.3. 矩阵与数组 matrics and arrays</h2><ul><li><strong>创建矩阵</strong></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># 创建矩阵</span></span><br><span class="line">&gt; <span class="comment">## 简单创建</span></span><br><span class="line">&gt; x &lt;- <span class="number">1</span>:<span class="number">12</span></span><br><span class="line">&gt; dim(x) &lt;- c(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&gt; x</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">4</span>    <span class="number">7</span>   <span class="number">10</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">5</span>    <span class="number">8</span>   <span class="number">11</span></span><br><span class="line">[<span class="number">3</span>,]    <span class="number">3</span>    <span class="number">6</span>    <span class="number">9</span>   <span class="number">12</span></span><br><span class="line">&gt; <span class="comment">## 使用函数创建</span></span><br><span class="line">&gt; matrix(<span class="number">1</span>:<span class="number">12</span>, nrow = <span class="number">3</span>, byrow = <span class="literal">T</span>)</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span>    <span class="number">4</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">5</span>    <span class="number">6</span>    <span class="number">7</span>    <span class="number">8</span></span><br><span class="line">[<span class="number">3</span>,]    <span class="number">9</span>   <span class="number">10</span>   <span class="number">11</span>   <span class="number">12</span></span><br></pre></td></tr></table></figure><ul><li><strong>矩阵行列名及转置</strong></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># 矩阵行列名及转置</span></span><br><span class="line">&gt; <span class="comment">## 矩阵行列名</span></span><br><span class="line">&gt; y &lt;- matrix(<span class="number">1</span>:<span class="number">12</span>, nrow = <span class="number">3</span>, byrow = <span class="literal">T</span>)</span><br><span class="line">&gt; rownames(y) &lt;- LETTERS[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">&gt; y</span><br><span class="line">  [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">A    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span>    <span class="number">4</span></span><br><span class="line">B    <span class="number">5</span>    <span class="number">6</span>    <span class="number">7</span>    <span class="number">8</span></span><br><span class="line">C    <span class="number">9</span>   <span class="number">10</span>   <span class="number">11</span>   <span class="number">12</span></span><br><span class="line">&gt; <span class="comment">## 使用函数转置</span></span><br><span class="line">&gt; t(y)</span><br><span class="line">     A B  C</span><br><span class="line">[<span class="number">1</span>,] <span class="number">1</span> <span class="number">5</span>  <span class="number">9</span></span><br><span class="line">[<span class="number">2</span>,] <span class="number">2</span> <span class="number">6</span> <span class="number">10</span></span><br><span class="line">[<span class="number">3</span>,] <span class="number">3</span> <span class="number">7</span> <span class="number">11</span></span><br><span class="line">[<span class="number">4</span>,] <span class="number">4</span> <span class="number">8</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><ul><li><strong>行组合与列组合</strong></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># ⾏组合与列组合</span></span><br><span class="line">&gt; <span class="comment">## ⾏组合</span></span><br><span class="line">&gt; cbind(A=<span class="number">1</span>:<span class="number">4</span>, B=<span class="number">5</span>:<span class="number">8</span>, C=<span class="number">9</span>:<span class="number">12</span>)</span><br><span class="line">     A B  C</span><br><span class="line">[<span class="number">1</span>,] <span class="number">1</span> <span class="number">5</span>  <span class="number">9</span></span><br><span class="line">[<span class="number">2</span>,] <span class="number">2</span> <span class="number">6</span> <span class="number">10</span></span><br><span class="line">[<span class="number">3</span>,] <span class="number">3</span> <span class="number">7</span> <span class="number">11</span></span><br><span class="line">[<span class="number">4</span>,] <span class="number">4</span> <span class="number">8</span> <span class="number">12</span></span><br><span class="line">&gt; <span class="comment">## 列组合</span></span><br><span class="line">&gt; rbind(A=<span class="number">1</span>:<span class="number">4</span>, B=<span class="number">5</span>:<span class="number">8</span>, C=<span class="number">9</span>:<span class="number">12</span>)</span><br><span class="line">  [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">A    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span>    <span class="number">4</span></span><br><span class="line">B    <span class="number">5</span>    <span class="number">6</span>    <span class="number">7</span>    <span class="number">8</span></span><br><span class="line">C    <span class="number">9</span>   <span class="number">10</span>   <span class="number">11</span>   <span class="number">12</span></span><br></pre></td></tr></table></figure><h2 id="2-4-因子-factors"><a href="#2-4-因子-factors" class="headerlink" title="2.4. 因子 factors"></a>2.4. 因子 factors</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; pain &lt;- c(<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">&gt; fpain &lt;- factor(pain, levels = <span class="number">0</span>:<span class="number">3</span>)</span><br><span class="line">&gt; levels(fpain) &lt;- c(<span class="string">"none"</span>, <span class="string">"mild"</span>, <span class="string">"medium"</span>, <span class="string">"severe"</span>)</span><br><span class="line">&gt; fpain</span><br><span class="line">[<span class="number">1</span>] none   severe medium medium mild  </span><br><span class="line">Levels: none mild medium severe</span><br><span class="line">&gt; as.numeric(fpain)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line">&gt; levels(fpain)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"none"</span>   <span class="string">"mild"</span>   <span class="string">"medium"</span> <span class="string">"severe"</span></span><br></pre></td></tr></table></figure><h2 id="2-5-列表-lists"><a href="#2-5-列表-lists" class="headerlink" title="2.5. 列表 lists"></a>2.5. 列表 lists</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># 创建数据</span></span><br><span class="line">&gt; intake.pre &lt;- c(<span class="number">5260</span>,<span class="number">5470</span>,<span class="number">5640</span>,<span class="number">6180</span>,<span class="number">6390</span>,<span class="number">6515</span>,<span class="number">6805</span>,<span class="number">7515</span>,<span class="number">7515</span>,<span class="number">8230</span>,<span class="number">8770</span>)</span><br><span class="line">&gt; intake.post &lt;- c(<span class="number">3910</span>,<span class="number">4220</span>,<span class="number">3885</span>,<span class="number">5160</span>,<span class="number">5645</span>,<span class="number">4680</span>,<span class="number">5260</span>,<span class="number">5975</span>,<span class="number">6790</span>,<span class="number">6900</span>,<span class="number">7335</span>)</span><br><span class="line">&gt; <span class="comment"># 对数据排序</span></span><br><span class="line">&gt; mylist &lt;- list(before = intake.pre, after = intake.post)</span><br><span class="line">&gt; mylist</span><br><span class="line">$before</span><br><span class="line"> [<span class="number">1</span>] <span class="number">5260</span> <span class="number">5470</span> <span class="number">5640</span> <span class="number">6180</span> <span class="number">6390</span> <span class="number">6515</span> <span class="number">6805</span> <span class="number">7515</span> <span class="number">7515</span> <span class="number">8230</span> <span class="number">8770</span></span><br><span class="line">$after</span><br><span class="line"> [<span class="number">1</span>] <span class="number">3910</span> <span class="number">4220</span> <span class="number">3885</span> <span class="number">5160</span> <span class="number">5645</span> <span class="number">4680</span> <span class="number">5260</span> <span class="number">5975</span> <span class="number">6790</span> <span class="number">6900</span> <span class="number">7335</span></span><br></pre></td></tr></table></figure><h2 id="2-6-数据框-data-frames"><a href="#2-6-数据框-data-frames" class="headerlink" title="2.6. 数据框 data frames"></a>2.6. 数据框 data frames</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; d &lt;- data.frame(intake.pre, intake.post)</span><br><span class="line">&gt; d</span><br><span class="line">   intake.pre intake.post</span><br><span class="line"><span class="number">1</span>        <span class="number">5260</span>        <span class="number">3910</span></span><br><span class="line"><span class="number">2</span>        <span class="number">5470</span>        <span class="number">4220</span></span><br><span class="line"><span class="number">3</span>        <span class="number">5640</span>        <span class="number">3885</span></span><br><span class="line"><span class="number">4</span>        <span class="number">6180</span>        <span class="number">5160</span></span><br><span class="line"><span class="number">5</span>        <span class="number">6390</span>        <span class="number">5645</span></span><br><span class="line"><span class="number">6</span>        <span class="number">6515</span>        <span class="number">4680</span></span><br><span class="line"><span class="number">7</span>        <span class="number">6805</span>        <span class="number">5260</span></span><br><span class="line"><span class="number">8</span>        <span class="number">7515</span>        <span class="number">5975</span></span><br><span class="line"><span class="number">9</span>        <span class="number">7515</span>        <span class="number">6790</span></span><br><span class="line"><span class="number">10</span>       <span class="number">8230</span>        <span class="number">6900</span></span><br><span class="line"><span class="number">11</span>       <span class="number">8770</span>        <span class="number">7335</span></span><br><span class="line">&gt; d$intake.pre</span><br><span class="line"> [<span class="number">1</span>] <span class="number">5260</span> <span class="number">5470</span> <span class="number">5640</span> <span class="number">6180</span> <span class="number">6390</span> <span class="number">6515</span> <span class="number">6805</span> <span class="number">7515</span> <span class="number">7515</span> <span class="number">8230</span> <span class="number">8770</span></span><br></pre></td></tr></table></figure><h2 id="2-7-索引-indexing"><a href="#2-7-索引-indexing" class="headerlink" title="2.7. 索引 indexing"></a>2.7. 索引 indexing</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># 索引</span></span><br><span class="line">&gt; intake.pre[<span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>] <span class="number">6390</span></span><br><span class="line">&gt; intake.pre[c(<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>)]</span><br><span class="line">[<span class="number">1</span>] <span class="number">5640</span> <span class="number">6390</span> <span class="number">6805</span></span><br><span class="line">&gt; v &lt;- c(<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br><span class="line">&gt; intake.pre[v]</span><br><span class="line">[<span class="number">1</span>] <span class="number">5640</span> <span class="number">6390</span> <span class="number">6805</span></span><br><span class="line">&gt; intake.pre[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>] <span class="number">5260</span> <span class="number">5470</span> <span class="number">5640</span> <span class="number">6180</span> <span class="number">6390</span></span><br></pre></td></tr></table></figure><h2 id="2-8-条件筛选-Conditional-selection"><a href="#2-8-条件筛选-Conditional-selection" class="headerlink" title="2.8. 条件筛选 Conditional selection"></a>2.8. 条件筛选 Conditional selection</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># 条件筛选</span></span><br><span class="line">&gt; intake.post[intake.pre &gt; <span class="number">7000</span>]</span><br><span class="line">[<span class="number">1</span>] <span class="number">5975</span> <span class="number">6790</span> <span class="number">6900</span> <span class="number">7335</span></span><br><span class="line">&gt; intake.post[intake.pre &gt; <span class="number">7000</span> &amp; intake.pre &lt;= <span class="number">8000</span>]</span><br><span class="line">[<span class="number">1</span>] <span class="number">5975</span> <span class="number">6790</span></span><br><span class="line">&gt; intake.pre &gt; <span class="number">7000</span> &amp; intake.pre &lt;= <span class="number">8000</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br></pre></td></tr></table></figure><h2 id="2-9-数据框索引"><a href="#2-9-数据框索引" class="headerlink" title="2.9. 数据框索引"></a>2.9. 数据框索引</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># 数据框索引</span></span><br><span class="line">&gt; d &lt;- data.frame(intake.pre, intake.post)</span><br><span class="line">&gt; d[<span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>] <span class="number">6390</span></span><br><span class="line">&gt; d[<span class="number">5</span>, ]</span><br><span class="line">  intake.pre intake.post</span><br><span class="line"><span class="number">5</span>       <span class="number">6390</span>        <span class="number">5645</span></span><br><span class="line">&gt; d[d$intake.pre &gt; <span class="number">7000</span>, ]</span><br><span class="line">   intake.pre intake.post</span><br><span class="line"><span class="number">8</span>        <span class="number">7515</span>        <span class="number">5975</span></span><br><span class="line"><span class="number">9</span>        <span class="number">7515</span>        <span class="number">6790</span></span><br><span class="line"><span class="number">10</span>       <span class="number">8230</span>        <span class="number">6900</span></span><br><span class="line"><span class="number">11</span>       <span class="number">8770</span>        <span class="number">7335</span></span><br><span class="line">&gt; d[<span class="number">1</span>:<span class="number">2</span>, ]</span><br><span class="line">  intake.pre intake.post</span><br><span class="line"><span class="number">1</span>       <span class="number">5260</span>        <span class="number">3910</span></span><br><span class="line"><span class="number">2</span>       <span class="number">5470</span>        <span class="number">4220</span></span><br><span class="line">&gt; sel &lt;- d$intake.pre &gt; <span class="number">7000</span></span><br><span class="line">&gt; sel</span><br><span class="line"> [<span class="number">1</span>] <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></span><br><span class="line">&gt; d[sel, ]</span><br><span class="line">   intake.pre intake.post</span><br><span class="line"><span class="number">8</span>        <span class="number">7515</span>        <span class="number">5975</span></span><br><span class="line"><span class="number">9</span>        <span class="number">7515</span>        <span class="number">6790</span></span><br><span class="line"><span class="number">10</span>       <span class="number">8230</span>        <span class="number">6900</span></span><br><span class="line"><span class="number">11</span>       <span class="number">8770</span>        <span class="number">7335</span></span><br><span class="line">&gt; head(d)</span><br><span class="line">  intake.pre intake.post</span><br><span class="line"><span class="number">1</span>       <span class="number">5260</span>        <span class="number">3910</span></span><br><span class="line"><span class="number">2</span>       <span class="number">5470</span>        <span class="number">4220</span></span><br><span class="line"><span class="number">3</span>       <span class="number">5640</span>        <span class="number">3885</span></span><br><span class="line"><span class="number">4</span>       <span class="number">6180</span>        <span class="number">5160</span></span><br><span class="line"><span class="number">5</span>       <span class="number">6390</span>        <span class="number">5645</span></span><br><span class="line"><span class="number">6</span>       <span class="number">6515</span>        <span class="number">4680</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是统计学</title>
      <link href="/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/2019-06-18-/Course/ManagementStatistics/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E6%A6%82%E5%BF%B5.html"/>
      <url>/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/2019-06-18-/Course/ManagementStatistics/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E6%A6%82%E5%BF%B5.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-为什么学习统计学"><a href="#1-为什么学习统计学" class="headerlink" title="1. 为什么学习统计学"></a>1. 为什么学习统计学</h1><ul><li>数字化信息无处不在：CPI，季节性波动，GDP，美国大选民调，销售增长，股指…</li><li>对我们日常生活产生影响的各种决策经常需要利用统计技术。</li><li>学习统计方法能够帮助你了解决策是怎么做出的，并使你清楚这些决策会对你产⽣什么影响。</li></ul><h2 id="1-1-为了做出明智的决策，你需要："><a href="#1-1-为了做出明智的决策，你需要：" class="headerlink" title="1.1. 为了做出明智的决策，你需要："></a>1.1. 为了做出明智的决策，你需要：</h2><ul><li>确定现在信息是否充分，是否需要额外的信息</li><li>如果需要收集额外的信息，确保不被这些信息误导</li><li>将信息以有效且直观的形式加以汇总</li><li>对可得信息进行分析</li><li>得出结论并进行推断，同时对错误结果的风险进行评价</li></ul><h1 id="2-统计学的含义"><a href="#2-统计学的含义" class="headerlink" title="2. 统计学的含义"></a>2. 统计学的含义</h1><ul><li>统计学是一门收集、组织、展示、分析和解释数据，以帮助人们更有效的进行决策的科学。</li><li><strong>描述统计学</strong>：以某种便于提供信息的方式对数据进行整理、概括和展示的一组方法</li><li><strong>推断统计学</strong>：基于样本估计和推断总体属性的一组方法</li><li><strong>总体</strong>：全部个体、对象的集合，或来自全部个体、对象的测量值。</li><li><strong>样本</strong>：总体中的一部分。</li></ul><h1 id="2-1-统计变量和计量尺度"><a href="#2-1-统计变量和计量尺度" class="headerlink" title="2.1. 统计变量和计量尺度"></a>2.1. 统计变量和计量尺度</h1><ul><li><p>定性变量：电脑的品牌、婚姻状况、头发的颜⾊</p></li><li><p>定量变量：1）离散型：拥有一本书；2）连续型：身高，收入。</p></li><li><p>定类（nominal-level）计量：对数据进行无序的分类或分组</p></li><li><p>定序（ordinal－level）计量：将统计数据按照客观的某种无须确认的顺序进行排列</p></li><li><p>定距（interval-level）计量：对事物类别和次序之间的差距的确认</p></li><li><p>定比（ratio－level）计量：有固定起点的定距计量</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>符号说明</title>
      <link href="/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/2019-06-11-/Course/ManagementStatistics/%E7%AC%A6%E5%8F%B7%E8%AF%B4%E6%98%8E.html"/>
      <url>/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/2019-06-11-/Course/ManagementStatistics/%E7%AC%A6%E5%8F%B7%E8%AF%B4%E6%98%8E.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-F分布"><a href="#1-F分布" class="headerlink" title="1. F分布"></a>1. F分布</h1><h2 id="1-1-符号说明"><a href="#1-1-符号说明" class="headerlink" title="1.1. 符号说明"></a>1.1. 符号说明</h2><ul><li>$\sigma^2_i$：正态总体 $i$ 方差</li><li>$ s^2$：样本方差</li><li>$H_0$：零假设</li><li>$Ｈ_1$：备择假设</li><li>$n$：表示样本总个数，或者叫做样本的观测值个数</li><li>$N$：总体个数</li><li>$df$：自由度</li><li>$\bar X_G $：总体的平均值</li><li>$\bar X_c $：表示处理 <code>c</code> 的样本均值</li><li>$X \&amp; x$：样本观测值</li><li>$\mu_n$：区组 $n$ 的处理均值</li><li>$b$：区组的个数</li><li>$\bar X_b$：区组 $b$ 的样本均值</li></ul><h2 id="1-2-公式说明"><a href="#1-2-公式说明" class="headerlink" title="1.2. 公式说明"></a>1.2. 公式说明</h2><table><thead><tr><th>公式</th><th>说明</th></tr></thead><tbody><tr><td>$F=\frac{S_1^2}{S_2^2}$</td><td>比较两方差的检验统计量</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="1-3-ANOVA检验"><a href="#1-3-ANOVA检验" class="headerlink" title="1.3. ANOVA检验"></a>1.3. <code>ANOVA</code>检验</h2><h3 id="1-3-1-ANOVA表"><a href="#1-3-1-ANOVA表" class="headerlink" title="1.3.1. ANOVA表"></a>1.3.1. <code>ANOVA</code>表</h3><table><thead><tr><th align="center">方差来源</th><th align="left">平方和</th><th align="left">自由度</th><th align="left">均方</th><th align="left">F</th></tr></thead><tbody><tr><td align="center">处理</td><td align="left">$SST$</td><td align="left">$k-1$</td><td align="left">$SST/(k-1)=MST$</td><td align="left">$MST/MSE$</td></tr><tr><td align="center">误差</td><td align="left">$SSE$</td><td align="left">$(k-1)(b-1)$</td><td align="left">$SSE/(k-1)(b-1)=MSE$</td><td align="left"></td></tr><tr><td align="center">总和</td><td align="left">$SS\ total$</td><td align="left">$n-1$</td><td align="left"></td><td align="left"></td></tr></tbody></table><ul><li>总体平方和：$SS\ total=\sum(X-\bar X_G )^2$====&gt;X表示每个样本观测值，$\bar X_G$表示总平均值</li><li>误差平方和：$SSE=\sum(X-\bar X_c )^2$====&gt;$\bar X_c$表示处理c的样本均值</li><li>处理平方和：$SST=SS\ total-SSE$</li></ul><h3 id="双因素方差分析"><a href="#双因素方差分析" class="headerlink" title="双因素方差分析"></a>双因素方差分析</h3><table><thead><tr><th align="center">方差来源</th><th align="left">平方和</th><th align="left">自由度</th><th align="left">均方</th><th align="left">F</th></tr></thead><tbody><tr><td align="center">处理</td><td align="left">$SST$</td><td align="left">$k-1$</td><td align="left">$SST/(k-1)=MST$</td><td align="left">$MST/MSE$</td></tr><tr><td align="center">区组</td><td align="left">$SSB$</td><td align="left">$b-1$</td><td align="left">$SSB/(b-1)=MSB$</td><td align="left">$MSB/MSE$</td></tr><tr><td align="center">误差</td><td align="left">$SSE$</td><td align="left">$(k-1)(b-1)$</td><td align="left">$SSE/(k-1)(b-1)=MSE$</td><td align="left"></td></tr><tr><td align="center">总和</td><td align="left">$SS\ total$</td><td align="left">$n-1$</td><td align="left"></td><td align="left"></td></tr></tbody></table><ul><li>总体平方和：$SS\ total=\sum(X-\bar X_G )^2$====&gt;X表示每个样本观测值，$\bar X_G$表示总平均值</li><li>误差平方和：$SSE=SS\ total-SST-SSB$====&gt;$\bar X_c$表示处理c的样本均值</li><li>处理平方和：$SST=\sum(\bar X_c-\bar X_G )^2=SS\ total-SSE-SSB$</li><li>区组平方和：$SSB=k\sum(\bar X_b-\bar X_G)^2$====&gt; $k$ 表示处理的个数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方差分析</title>
      <link href="/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/2019-06-11-/Course/ManagementStatistics/%E6%96%B9%E5%B7%AE%E5%88%86%E6%9E%90.html"/>
      <url>/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/2019-06-11-/Course/ManagementStatistics/%E6%96%B9%E5%B7%AE%E5%88%86%E6%9E%90.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-F分布"><a href="#1-F分布" class="headerlink" title="1. F分布"></a>1. F分布</h1><h2 id="1-1-F-分布的概念"><a href="#1-1-F-分布的概念" class="headerlink" title="1.1. F 分布的概念"></a>1.1. F 分布的概念</h2><ul><li>F分布是以现代统计学的奠基人<a href="https://baike.baidu.com/item/R.A.Fisher/8606035?fr=aladdin" target="_blank" rel="noopener">R.Fisher</a>命名的。</li><li>对于以下两种情况，我们用F概率分布作为检验统计量： <ul><li>用于检验样本是否来自具有相同方差的总体</li><li>比较⼏个总体的均值<code>anova</code></li></ul></li><li>前提条件：总体必须满足<code>正态分布</code> 。</li></ul><h2 id="1-2-F分布的特征"><a href="#1-2-F分布的特征" class="headerlink" title="1.2. F分布的特征"></a>1.2. F分布的特征</h2><ul><li><p>F分布是一族分布，F分布族的一个特定的分布是由两个参数确定：</p><p><strong><code>分⼦的自由度</code></strong> 和 <strong><code>分母的自由度</code></strong> 。</p></li><li><p>F分布是连续的，数值∈ [0,∞）</p></li><li><p>F分布不能是负值，最小值可以假定是0</p></li><li><p>F分布是右偏分布，长尾在右侧，随着分子和分母自由度的增加，F分布近似于一个<code>正态分布</code></p></li><li><p>F分布是渐近分布, 随着X的增加，F曲线趋向于X轴，但绝不与X轴相交</p></li></ul><img src="//cdn.foreversfj.com/image/blog/20190714/oosIlw5wuod4.png!blog" style="zoom:50%" ><h1 id="2-比较两总体的⽅差"><a href="#2-比较两总体的⽅差" class="headerlink" title="2. 比较两总体的⽅差"></a>2. 比较两总体的⽅差</h1><h2 id="2-1-统计量"><a href="#2-1-统计量" class="headerlink" title="2.1. 统计量"></a>2.1. 统计量</h2><ul><li><p>F分布用于检验：一个正态总体的方差与另一个正态总体的方差相等。</p></li><li><p>假设条件：$H_0: \alpha_1^2=\alpha_2^2$，$H_1: \alpha_1^2≠\alpha_2^2$</p></li><li><p>统计量：$F(n_1,n_2) = \frac{S_1^2}{S_2^2}$</p></li><li><p>为了减少临界值表的大小，通常将较大的样本方差放在分子位置。</p></li><li><p>所以，对于一个双侧检验，通常只需要右侧的临界值。</p></li></ul><h1 id="3-ANOVA检验"><a href="#3-ANOVA检验" class="headerlink" title="3. ANOVA检验"></a>3. ANOVA检验</h1><h2 id="3-1-检验条件"><a href="#3-1-检验条件" class="headerlink" title="3.1. 检验条件"></a>3.1. 检验条件</h2><ul><li>anova用于检验3个或3个以上的总体的均值是否相等</li><li>假设条件：<ul><li>总体服从正态分布；</li><li>总体标准差相等；</li><li>总体是独立的。</li></ul></li><li>anova允许我们同时比较多个样本的均值和避免犯第⼀类错误可能性的叠加。</li></ul><h2 id="公式概念"><a href="#公式概念" class="headerlink" title="公式概念"></a>公式概念</h2><ul><li>$处理平方和=\sum_{处理个数}{(区组个数)*(处理的每一个值-处理均值)^2}$</li><li>$F统计量的临界值：F(显著性水平)=\frac {分子自由度} {分母自由度}$</li><li>$分子自由度：处理个数k减1，k-1$</li><li>$分母自由度：观测值的总个数n减处理个数k，n-k$</li></ul><h1 id="双因素方差分析"><a href="#双因素方差分析" class="headerlink" title="双因素方差分析"></a>双因素方差分析</h1>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一部分 第五章 变量和数据类型</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-06-10-/Java/java_basic/part01/05.%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-06-10-/Java/java_basic/part01/05.%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</url>
      
        <content type="html"><![CDATA[<h2 id="5-1-变量概述"><a href="#5-1-变量概述" class="headerlink" title="5.1 变量概述"></a>5.1 变量概述</h2><ul><li>变量：常量是固定不变的数据，那么在程序中可以变化的量称为变量。</li></ul><p>&emsp;&emsp;Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。</p><p>&emsp;&emsp;数学中，可以使用字母代替数字运算,例如 x=1+5 或者 6=x+5。</p><p>&emsp;&emsp;程序中，可以使用字母保存数字的方式进行运算，提高计算能力，可以解决更多的问题。比如x保存5，x也可以保存6，这样x保存的数据是可以改变的，也就是我们所讲解的变量。</p><h2 id="5-2-数据类型"><a href="#5-2-数据类型" class="headerlink" title="5.2 数据类型"></a>5.2 数据类型</h2><h3 id="5-2-1-数据类型分类"><a href="#5-2-1-数据类型分类" class="headerlink" title="5.2.1 数据类型分类"></a>5.2.1 数据类型分类</h3><p>Java的数据类型分为两大类：</p><ul><li><strong>基本数据类型：</strong>包括 <code>整数</code>、<code>浮点数</code>、<code>字符</code>、<code>布尔</code>。</li><li><strong>引用数据类型：</strong>包括 <code>类</code>、<code>数组</code>、<code>接口</code>。</li></ul><h3 id="5-2-2-基本数据类型"><a href="#5-2-2-基本数据类型" class="headerlink" title="5.2.2 基本数据类型"></a>5.2.2 基本数据类型</h3><p>四类八种基本数据类型：</p><table><thead><tr><th align="left">数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td align="left">字节型</td><td>byte</td><td>1个字节</td><td>$-128 \sim 127$</td></tr><tr><td align="left">短整型</td><td>short</td><td>2个字节</td><td>$-32768 \sim 32767$</td></tr><tr><td align="left">整型</td><td>int（默认）</td><td>4个字节</td><td>$-2^{31} \sim 2^{31}-1$</td></tr><tr><td align="left">长整型</td><td>long</td><td>8个字节</td><td>$-2^{63} \sim 2^{63}-1$</td></tr><tr><td align="left">单精度浮点数</td><td>float</td><td>4个字节</td><td>$1.4013E-45 \sim 3.4028E+38$</td></tr><tr><td align="left">双精度浮点数</td><td>double（默认）</td><td>8个字节</td><td>$4.9E-324 \sim 1.7977E+308$</td></tr><tr><td align="left">字符型</td><td>char</td><td>2个字节</td><td>$0 \sim 65535$</td></tr><tr><td align="left">布尔类型</td><td>boolean</td><td>1个字节</td><td>true，false</td></tr></tbody></table><blockquote><p>Java中的默认类型：整数类型是<code>int</code> 、浮点类型是<code>double</code> 。</p></blockquote><h2 id="5-3-变量的定义"><a href="#5-3-变量的定义" class="headerlink" title="5.3 变量的定义"></a>5.3 变量的定义</h2><p>变量定义的格式包括三个要素：<code>数据类型</code> 、<code>变量名</code> 、<code>数据值</code> 。</p><h3 id="5-3-1-格式"><a href="#5-3-1-格式" class="headerlink" title="5.3.1 格式"></a>5.3.1 格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 &#x3D; 数据值;</span><br></pre></td></tr></table></figure><h3 id="5-3-2-练习"><a href="#5-3-2-练习" class="headerlink" title="5.3.2 练习"></a>5.3.2 练习</h3><p>定义所有基本数据类型的变量，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义字节型变量</span></span><br><span class="line">        <span class="keyword">byte</span> b = <span class="number">100</span>;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        <span class="comment">//定义短整型变量</span></span><br><span class="line">        <span class="keyword">short</span> s = <span class="number">1000</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="comment">//定义整型变量</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">123456</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">//定义长整型变量</span></span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">12345678900L</span>;</span><br><span class="line">        System.out.println(l);</span><br><span class="line">        <span class="comment">//定义单精度浮点型变量</span></span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">5.5F</span>;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">        <span class="comment">//定义双精度浮点型变量</span></span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">8.5</span>;</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        <span class="comment">//定义布尔型变量</span></span><br><span class="line">        <span class="keyword">boolean</span> bool = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(bool);</span><br><span class="line">        <span class="comment">//定义字符型变量</span></span><br><span class="line">        <span class="keyword">char</span> c = <span class="string">'A'</span>;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>long类型：建议数据后加L表示。<br>float类型：建议数据后加F表示。</p></blockquote><h2 id="5-4-注意事项"><a href="#5-4-注意事项" class="headerlink" title="5.4 注意事项"></a>5.4 注意事项</h2><ul><li>变量名称：在同一个大括号范围内，变量的名字不可以相同。</li><li>变量赋值：定义的变量，不赋值不能使用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一部分 第四章 常量</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-06-10-/Java/java_basic/part01/04.%E5%B8%B8%E9%87%8F.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-06-10-/Java/java_basic/part01/04.%E5%B8%B8%E9%87%8F.html</url>
      
        <content type="html"><![CDATA[<h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p><strong>常量：是指在Java程序中固定不变的量。</strong></p><h2 id="4-2-分类"><a href="#4-2-分类" class="headerlink" title="4.2 分类"></a>4.2 分类</h2><table><thead><tr><th align="left">类型</th><th align="left">含义</th><th align="center">数据举例</th></tr></thead><tbody><tr><td align="left">整数常量</td><td align="left">直接写上的数字，没有小数点</td><td align="center">0，1， 567， -9</td></tr><tr><td align="left">浮点数常量</td><td align="left">直接写上的数字，有小数点</td><td align="center">0.0， -0.1， 2.55</td></tr><tr><td align="left">字符常量</td><td align="left">单引号引起来，只能写一个字符，必须有内容</td><td align="center">‘a’ ， ‘ ‘， ‘好’</td></tr><tr><td align="left">字符串常量</td><td align="left">双引号引起来，可以写多个字符，也可以不写</td><td align="center">“A” ，”Hello” ，”你好” ，””</td></tr><tr><td align="left">布尔常量</td><td align="left">只有两个值</td><td align="center">true ， false</td></tr><tr><td align="left">空常量</td><td align="left">只有一个值</td><td align="center">null</td></tr></tbody></table><h2 id="4-3-练习"><a href="#4-3-练习" class="headerlink" title="4.3 练习"></a>4.3 练习</h2><p>需求：输出各种类型的常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//输出字符串常量</span></span><br><span class="line">        System.out.println(<span class="string">"ABC"</span>);</span><br><span class="line">        System.out.println(<span class="string">""</span>);<span class="comment">//字符串两个双引号之间可以不写</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出整数常量</span></span><br><span class="line">        System.out.println(<span class="number">123</span>);</span><br><span class="line">        System.out.println(-<span class="number">1203</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出浮点数常量</span></span><br><span class="line">        System.out.println(-<span class="number">0.125</span>);</span><br><span class="line">        System.out.println(<span class="number">10.135</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出字符常量</span></span><br><span class="line">        System.out.println(<span class="string">'A'</span>);</span><br><span class="line">        System.out.println(<span class="string">'6'</span>);</span><br><span class="line">        <span class="comment">//System.out.println('');//两个单引号中间必须有且仅有一个字符，没有就不行</span></span><br><span class="line">        <span class="comment">//System.out.println('AB');//两个单引号中间必须有且仅有一个字符，有两个也就不行</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出布尔常量</span></span><br><span class="line">        System.out.println(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="keyword">false</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//空常量不能直接打印</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一部分 第三章 Hello World入门程序</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-06-10-/Java/java_basic/part01/03.Hello%20World%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-06-10-/Java/java_basic/part01/03.Hello%20World%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F.html</url>
      
        <content type="html"><![CDATA[<h2 id="3-1-程序开发步骤说明"><a href="#3-1-程序开发步骤说明" class="headerlink" title="3.1 程序开发步骤说明"></a>3.1 程序开发步骤说明</h2><p>开发环境已经搭建完毕，可以开发我们第一个Java程序了。</p><p>Java程序开发三步骤：<strong>编写、编译、运行</strong>。</p><p><img src="//cdn.foreversfj.com/image/blog/20190714/XNPwnbGqCqG5.jpg!blogy" alt=""></p><h2 id="3-2-编写Java源程序"><a href="#3-2-编写Java源程序" class="headerlink" title="3.2 编写Java源程序"></a>3.2 编写Java源程序</h2><ol><li><p>在<code>d:\day01</code>目录下新建文本文件，完整的文件名修改为<code>HelloWorld.java</code> ，其中文件名为<code>HelloWorld</code>，后缀名必须为<code>.java</code> 。</p></li><li><p>用记事本打开</p><blockquote><p>使用notepad++记事本软件。</p></blockquote></li><li><p>在文件中键入文本并保存，代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>文件名必须是<code>HelloWorld</code>，保证文件名和类的名字是一致的，注意大小写。<br>每个字母和符号必须与示例代码一模一样。</p></blockquote><p>&emsp;&emsp;第一个<code>HelloWord</code> 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的<code>Java源文件</code>编译成JVM可以看懂的<b>字节码文件</b>。</p><h2 id="3-3-编译Java源文件"><a href="#3-3-编译Java源文件" class="headerlink" title="3.3 编译Java源文件"></a>3.3 编译Java源文件</h2><p>在DOS命令行中，<strong>进入Java源文件的目录</strong>，使用<code>javac</code>命令进行编译。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Java源文件名.后缀名</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure><p><img src="//cdn.foreversfj.com/image/blog/20190714/h7EByLUFfgM2.jpg!blog" alt=""></p><p>&emsp;&emsp;编译成功后，命令行没有任何提示。打开<code>d:\day01</code>目录，发现产生了一个新的文件<code>HelloWorld.class</code>，该文件就是编译后的文件，是Java的可运行文件，称为<strong>字节码文件</strong>，有了字节码文件，就可以运行程序了。</p><blockquote><p>Java源文件的编译工具<code>javac.exe</code>，在JDK安装目录的bin目录下。但是由于配置了环境变量，可以再任意目录下使用。</p></blockquote><h2 id="3-4-运行Java程序"><a href="#3-4-运行Java程序" class="headerlink" title="3.4 运行Java程序"></a>3.4 运行Java程序</h2><p>在DOS命令行中，<strong>进入Java源文件的目录</strong>，使用<code>java</code> 命令进行运行。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java 类名字</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure><blockquote><p><strong>java HelloWord</strong> <code>不要写</code> <code>不要写</code> <code>不要写</code> .class</p></blockquote><p><img src="//cdn.foreversfj.com/image/blog/20190714/xwcoJK9cwAIu.jpg!blog" alt=""></p><blockquote><p>Java程序<code>.class文件</code>的运行工具<code>java.exe</code> ，在JDK安装目录的bin目录下。但是由于配置了环境变量，可以再任意目录下使用。</p></blockquote><h2 id="3-5-入门程序说明"><a href="#3-5-入门程序说明" class="headerlink" title="3.5 入门程序说明"></a>3.5 入门程序说明</h2><h3 id="编译和运行是两回事"><a href="#编译和运行是两回事" class="headerlink" title="编译和运行是两回事"></a>编译和运行是两回事</h3><ul><li><strong>编译：</strong>是指将我们编写的Java源文件翻译成JVM认识的class文件，在这个过程中， <code>javac</code> 编译器会检查我们所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。</li><li><strong>运行：</strong>是指将<code>class文件</code> 交给JVM去运行，此时JVM就会去执行我们编写的程序了。</li></ul><h3 id="关于main方法"><a href="#关于main方法" class="headerlink" title="关于main方法"></a>关于main方法</h3><ul><li><strong>main方法：</strong>称为主方法。写法是<strong>固定格式</strong>不可以更改。main方法是程序的入口点或起始点，无论我们编写多少程序，JVM在运行的时候，都会从main方法这里开始执行。</li></ul><h2 id="3-6-添加注释comment"><a href="#3-6-添加注释comment" class="headerlink" title="3.6 添加注释comment"></a>3.6 添加注释comment</h2><ul><li><strong>注释：</strong>就是对代码的解释和说明。其目的是让人们能够更加轻松地了解代码。为代码添加注释，是十分必须要的，它不影响程序的编译和运行。</li><li>Java中有单行注释和多行注释<ul><li>单行注释以 //开头 换行结束</li><li>多行注释以 /<em>开头 以</em>/结束</li></ul></li></ul><h2 id="3-7-关键字keywords"><a href="#3-7-关键字keywords" class="headerlink" title="3.7 关键字keywords"></a>3.7 关键字keywords</h2><ul><li><strong>关键字：</strong>是指在程序中，Java已经定义好的单词，具有特殊含义。<ul><li>HelloWorld案例中，出现的关键字有<code>public</code> 、<code>class</code> 、 <code>static</code> 、 <code>void</code> 等，这些单词已经被Java定义好，全部都是小写字母，notepad++中颜色特殊。</li><li>关键字比较多，不能死记硬背，学到哪里记到哪里即可。</li></ul></li></ul><h2 id="3-8-标识符"><a href="#3-8-标识符" class="headerlink" title="3.8 标识符"></a>3.8 标识符</h2><ul><li><strong>标识符：</strong>是指在程序中，我们自己定义内容。比如类的名字、方法的名字和变量的名字等等，都是标识符。<ul><li>HelloWorld案例中，出现的标识符有类名字<code>HelloWorld</code> 。</li></ul></li><li><strong>命名规则： <code>硬性要求</code></strong><ul><li>标识符可以包含<code>英文字母26个(区分大小写)</code>、<code>0-9数字</code> 、<code>$（美元符号）</code> 和<code>_（下划线）</code> 。</li><li>标识符不能以数字开头。</li><li>标识符不能是关键字。</li></ul></li><li><strong>命名规范： <code>软性建议</code></strong><ul><li>类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）。</li><li>变量名规范： 首字母小写，后面每个单词首字母大写（小驼峰式）。</li><li>方法名规范：同变量名。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一部分 第二章 Java语言开发环境搭建</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-06-10-/Java/java_basic/part01/02.Java%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-06-10-/Java/java_basic/part01/02.Java%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</url>
      
        <content type="html"><![CDATA[<h2 id="2-1-Java虚拟机——JVM"><a href="#2-1-Java虚拟机——JVM" class="headerlink" title="2.1 Java虚拟机——JVM"></a>2.1 Java虚拟机——JVM</h2><p>&emsp;&emsp;<strong>JVM</strong>（Java Virtual Machine ）：Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是Java程序的运行环境，是Java 最具吸引力的特性之一。我们编写的Java代码，都运行在<code>JVM</code> 之上。<br>&emsp;&emsp;<strong>跨平台：</strong>任何软件的运行，都必须要运行在操作系统之上，而我们用Java编写的软件可以运行在任何的操作系统上，这个特性称为<strong>Java语言的跨平台特性</strong>。该特性是由JVM实现的，我们编写的程序运行在JVM上，而JVM运行在操作系统上。</p><p><img src="//cdn.foreversfj.com/image/blog/20190714/Ahqu27JfsyHz.jpg!blogy" alt=""></p><p>&emsp;&emsp;如图所示，Java的虚拟机本身不具备跨平台功能的，每个操作系统下都有不同版本的虚拟机。</p><h2 id="2-2-JRE-和-JDK"><a href="#2-2-JRE-和-JDK" class="headerlink" title="2.2 JRE 和 JDK"></a>2.2 JRE 和 JDK</h2><ul><li><strong>JRE</strong> ( <i>Java Runtime Environment</i> )：是<code>Java</code>程序的运行时环境，包含<code>JVM</code>和运行时所需要的核心类库 。</li><li><strong>JDK</strong> ( <i>Java Development Kit</i> )：是<code>Java</code>程序开发工具包，包含<code>JRE</code>和开发人员使用的工具。</li></ul><p>我们想要运行一个已有的<code>Java</code>程序，那么只需安装<code>JRE</code> 即可。</p><p>我们想要开发一个全新的<code>Java</code>程序，那么必须安装<code>JDK</code>。</p><p><img src="//cdn.foreversfj.com/image/blog/20190714/8eWsHRzb8SCH.jpg!blog" alt=""></p><blockquote><p>小贴士：<br>三者关系： JDK &gt; JRE &gt; JVM</p></blockquote><h2 id="2-3-JDK9安装图解"><a href="#2-3-JDK9安装图解" class="headerlink" title="2.3 JDK9安装图解"></a>2.3 JDK9安装图解</h2><p><img src="//cdn.foreversfj.com/image/blog/20190714/52P3EqXa93Yu.jpg!blog" alt=""></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/uLQf3w0L7nK5.jpg!blog" alt=""></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/QBmBM62va5mh.jpg!blog" alt=""></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/fAx8R7n1Q8Am.jpg!blog" alt=""></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/ulf1Nd3PPURU.jpg!blog" alt=""></p><blockquote><p>小贴士：<br>安装路径中，不要包含中文和空格。</p></blockquote><h2 id="2-4-JAVA-HOME环境变量的配置"><a href="#2-4-JAVA-HOME环境变量的配置" class="headerlink" title="2.4 JAVA_HOME环境变量的配置"></a>2.4 JAVA_HOME环境变量的配置</h2><h3 id="2-4-1-配置环境变量作用"><a href="#2-4-1-配置环境变量作用" class="headerlink" title="2.4.1 配置环境变量作用"></a>2.4.1 配置环境变量作用</h3><p>开发<code>Java</code>程序，需要使用JDK中提供的工具，工具在JDK9安装目录的<code>bin</code> 目录下。</p><p><img src="//cdn.foreversfj.com/image/blog/20190714/3cHhHMRvnrUx.jpg!blog" alt=""></p><p>在<code>DOS</code>命令行下使用这些工具，就要先进入到JDK的<code>bin</code>目录下，这个过程就会非常的麻烦。</p><p><img src="//cdn.foreversfj.com/image/blog/20190714/349zCLSUuXVI.jpg!blog" alt=""></p><p>不进入JDK的<code>bin</code> 目录，这些工具就不能使用，会报错。</p><p><img src="//cdn.foreversfj.com/image/blog/20190714/G5RtbIYaPmJa.jpg!blog" alt=""></p><p>&emsp;&emsp;为了开发方便，我们想在<strong>任意的目录下都可以使用JDK的开发工具</strong>，则必须要<code>配置环境变量</code>，配置环境变量的意义在于告诉操作系统，我们使用的JDK开发工具在哪个目录下。</p><h3 id="2-4-2-配置环境变量步骤"><a href="#2-4-2-配置环境变量步骤" class="headerlink" title="2.4.2 配置环境变量步骤"></a>2.4.2 配置环境变量步骤</h3><h4 id="Windows-7-8版本"><a href="#Windows-7-8版本" class="headerlink" title="Windows 7,8版本"></a>Windows 7,8版本</h4><ol><li>计算机鼠标右键,选择<code>属性</code></li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190714/Hv4jJUr2Kkzg.jpg!blog" alt=""></p><ol start="2"><li>选择<code>高级系统设置</code></li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190714/XylwKi00wFb8.jpg!blog" alt=""></p><ol start="3"><li><code>高级</code>项卡，点击<code>环境变量</code></li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190714/I1ldBuWEomQN.jpg!blog" alt=""></p><ol start="4"><li>点击<code>新建</code>，创建新的环境变量</li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190714/pPNl3Uv9fllO.jpg!blog" alt=""></p><ol start="5"><li>变量名输入<code>JAVA_HOME</code> ，变量值输入JDK9的安装目录<code>c:\Java9\jdk-9.0.1</code></li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190714/1yAoQmCU02A5.jpg!blog" alt=""></p><ol start="6"><li>选中<code>Path</code> 环境变量， <code>双击</code>或者点击<code>编辑</code></li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190714/lTgeuDvUEiOp.jpg!blog" alt=""></p><ol start="7"><li>在变量值的最前面，键入<code>%JAVA_HOME%\bin;</code>分号必须要写，必须是英文格式。</li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190714/30HaspIGUxqq.jpg!blog" alt=""></p><ol start="8"><li>环境变量配置完成，重新开启DOS命令行，在任意目录下输入<code>javac</code> 命令，运行成功。</li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190714/940cvVa9Dpio.jpg!blog" alt=""></p><h4 id="Windows-10-版本"><a href="#Windows-10-版本" class="headerlink" title="Windows 10 版本"></a>Windows 10 版本</h4><ol><li>文件资源管理器 → 此电脑鼠标右键 →选择<code>属性</code></li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190714/RsNegdO6gDE9.jpg!blog" alt=""></p><ol start="2"><li>选择<code>高级系统设置</code>  → 选择<code>环境变量</code></li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190714/9r2KczFyXQRA.jpg!blog" alt=""></p><ol start="3"><li>点击下方系统变量的<code>新建</code>，创建新的环境变量，变量名输入<code>JAVA_HOME</code>，变量值输入JDK9的安装目录<code>D:\02_DevelopTools\Java\jdk-9.0.1</code></li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190714/wQ6NAynQqL2P.jpg!blog" alt=""></p><ol start="4"><li>选中<code>Path</code>环境变量， <code>双击</code>或者<code>点击编辑</code></li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190714/YWGjlKT9dzYA.jpg!blog" alt=""></p><ol start="5"><li>点击新建，键入<code>%JAVA_HOME%\bin</code>，必须是英文格式。选中该行，上移到最上方，点击确定。</li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190714/8AkWrd3vPIdW.jpg!blog" alt=""></p><ol start="6"><li>环境变量配置完成，重新开启DOS命令行，在任意目录下输入<code>javac</code> 命令。</li></ol><p><img src="//cdn.foreversfj.com/image/blog/20190714/YG1xAaKD4jJc.jpg!blog" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一部分 第一章 java开发前言</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-06-10-/Java/java_basic/part01/01.java%E5%BC%80%E5%8F%91%E5%89%8D%E8%A8%80.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-06-10-/Java/java_basic/part01/01.java%E5%BC%80%E5%8F%91%E5%89%8D%E8%A8%80.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-Java语言概述"><a href="#1-1-Java语言概述" class="headerlink" title="1.1 Java语言概述"></a>1.1 Java语言概述</h2><h3 id="1-1-1-什么是Java语言"><a href="#1-1-1-什么是Java语言" class="headerlink" title="1.1.1 什么是Java语言"></a>1.1.1 什么是Java语言</h3><p>&emsp;&emsp;Java语言是美国Sun公司（<i>Stanford University Network</i>），在1995年推出的高级的编程语言。所谓编程语言，是计算机的语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。</p><h3 id="1-1-2-Java语言发展历史"><a href="#1-1-2-Java语言发展历史" class="headerlink" title="1.1.2 Java语言发展历史"></a>1.1.2 Java语言发展历史</h3><ul><li>1995年Sun公司发布 Java1.0 版本</li><li>1997年发布Java 1.1 版本</li><li>1998年发布Java 1.2 版本</li><li>2000年发布Java 1.3 版本</li><li>2002年发布Java 1.4 版本</li><li>2004年发布Java 5 版本</li><li>2006年发布Java 6 版本</li><li>2009年Oracle甲骨文公司收购Sun公司，并于2011发布Java 7 版本</li><li>2014年发布Java 8 版本</li><li>2017年发布Java 9 版本</li><li>2018年发布Java 10 版本</li></ul><h3 id="1-1-3-Java语言能做什么"><a href="#1-1-3-Java语言能做什么" class="headerlink" title="1.1.3 Java语言能做什么"></a>1.1.3 Java语言能做什么</h3><p>&emsp;&emsp;Java语言主要应用在互联网程序的开发领域。常见的互联网程序比如天猫、京东、物流系统、网银系统等，以及服务器后台处理大数据的存储、查询、数据挖掘等也有很多应用。</p><p><img src="//cdn.foreversfj.com/image/blog/20190714/b37HnX32ShCx.jpg!blog" alt=""></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/Hp1lz1rdbfqE.jpg!blog" alt=""></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/lKADBl0hbpdq.jpg!blog" alt=""></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/cutpAswKN2as.jpg!blog" alt=""></p><h2 id="1-2-计算机基础知识"><a href="#1-2-计算机基础知识" class="headerlink" title="1.2 计算机基础知识"></a>1.2 计算机基础知识</h2><h3 id="1-2-1-二进制"><a href="#1-2-1-二进制" class="headerlink" title="1.2.1 二进制"></a>1.2.1 二进制</h3><p>&emsp;&emsp;计算机中的数据不同于人们生活中的数据，人们生活采用十进制数，而计算机中全部采用二进制数表示，它只包含0、1两个数，逢二进一，1+1=10。每一个0或者每一个1，叫做一个bit（比特）。</p><p>下面了解一下十进制和二进制数据之间的转换计算。</p><ul><li><strong>十进制数据转成二进制数据：</strong>使用除以2获取余数的方式</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190714/GhBobEAODKMt.jpg!blog" alt=""></p><ul><li><strong>二进制数据转成十进制数据：</strong>使用8421编码的方式</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190714/JAK3KWSwB8jO.jpg!blog" alt=""></p><blockquote><p>小贴士：<br>二进制数系统中，每个0或1就是一个位，叫做<code>bit</code>（比特）。</p></blockquote><h3 id="1-2-2-字节"><a href="#1-2-2-字节" class="headerlink" title="1.2.2 字节"></a>1.2.2 字节</h3><p>&emsp;&emsp;字节是我们常见的计算机中最小存储单元。计算机存储任何的数据，都是以字节的形式存储，右键点击文件属性，我们可以查看文件的字节大小。<br>8个bit（二进制位） 0000-0000表示为1个字节，写成1<strong> byte</strong>或者1<strong> B</strong>。</p><ul><li>8 bit = 1 B</li><li>1024 B =1 KB</li><li>1024 KB =1 MB</li><li>1024 MB =1 GB</li><li>1024 GB = 1 TB</li></ul><h3 id="1-2-3-常用DOS命令"><a href="#1-2-3-常用DOS命令" class="headerlink" title="1.2.3 常用DOS命令"></a>1.2.3 常用DOS命令</h3><p>&emsp;&emsp;Java语言的初学者，学习一些DOS命令，会非常有帮助。DOS是一个早期的操作系统，现在已经被Windows系统取代，对于我们开发人员，目前需要在DOS中完成一些事情，因此就需要掌握一些必要的命令。</p><ul><li><p>进入DOS操作窗口</p><ul><li><p>按下Windows+R键盘，打开运行窗口，输入cmd回车，进入到DOS的操作窗口。</p><p><img src="//cdn.foreversfj.com/image/blog/20190714/kJb52qgtqQhE.jpg!blog" alt=""></p></li><li><p>打开DOS命令行后，看到一个路径 c:\user 就表示我们现在操作的磁盘是c盘。</p><p><img src="//cdn.foreversfj.com/image/blog/20190714/TY6Fc0Hn0YWD.jpg!blog" alt=""></p></li></ul></li><li><p>常用命令</p></li></ul><table><thead><tr><th align="center">命令</th><th align="center">操作符号</th></tr></thead><tbody><tr><td align="center">盘符切换命令</td><td align="center"><code>盘符名:</code></td></tr><tr><td align="center">查看当前文件夹</td><td align="center"><code>dir</code></td></tr><tr><td align="center">进入文件夹命令</td><td align="center"><code>cd 文件夹命</code></td></tr><tr><td align="center">退出文件夹命令</td><td align="center"><code>cd ..</code></td></tr><tr><td align="center">退出到磁盘根目录</td><td align="center"><code>cd\</code></td></tr><tr><td align="center">清屏</td><td align="center"><code>cls</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate级联操作cascade及inverse</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/%E7%BA%A7%E8%81%94%E6%93%8D%E4%BD%9Ccascade%E5%8F%8Ainverse.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/%E7%BA%A7%E8%81%94%E6%93%8D%E4%BD%9Ccascade%E5%8F%8Ainverse.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>1、cascade时级联操作，使得在操作一端数据时，可以级联操作被关联的另外一端的数据。</p></li><li><p>2、在多对一的关系中，多的一端不能操作级联为delete。一般在多的一端设为save-update.</p></li><li><p>3、在一对多的关系中，如果一的一端设置为delete时，多的一端不能指明外键为非空。</p></li><li><p>4、Inverse设置关系维护方。当inverse=”false”时，谁管理关系谁维护。如果都管理了，那么都维护。当关系由多的一端来维护时，效率较高。当关系由一的一端来维护时。会多执行update语句。</p></li><li><p>5、Inverse=”true”时，关系由另一端管理。不管一的一端是否指明关系，一的一端都不会去维护关系。都由多的一端负责。建议inverse=”true”.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate双向一对多的关联映射</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/%E5%8F%8C%E5%90%91%E4%B8%80%E5%AF%B9%E5%A4%9A%E7%9A%84%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/%E5%8F%8C%E5%90%91%E4%B8%80%E5%AF%B9%E5%A4%9A%E7%9A%84%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-学生表student-和年级表-grade"><a href="#1-学生表student-和年级表-grade" class="headerlink" title="1. 学生表student 和年级表 grade"></a>1. 学生表student 和年级表 grade</h1><p><img src="//cdn.foreversfj.com/image/blog/20190714/VzJMLlFC0Inj.png!blogy" alt=""></p><h1 id="2-类Student-和Grade类"><a href="#2-类Student-和Grade类" class="headerlink" title="2. 类Student 和Grade类"></a>2. 类Student 和Grade类</h1><ul><li>Student</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Grade grade;</span><br><span class="line">    <span class="comment">//get…set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Grande</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Student&gt; students = <span class="keyword">new</span> HashSet&lt;Student&gt;(<span class="number">0</span>);    </span><br><span class="line">    <span class="comment">//get…set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-映射文件"><a href="#3-映射文件" class="headerlink" title="3. 映射文件"></a>3. 映射文件</h1><ul><li>Grade.hbm.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.siggy.pojo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Grade"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- set是 Grade中的集合属性  name属性名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"students"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- key表示外键  column外键列名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"grade_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- one-to-many 一对多  类Grade 中  students 所表示类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"Student"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Student.hbm.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.siggy.pojo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"grade"</span> <span class="attr">class</span>=<span class="string">"Grade"</span> <span class="attr">column</span>=<span class="string">"grade_id"</span> <span class="attr">not-null</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-测试代码"><a href="#4-测试代码" class="headerlink" title="4. 测试代码"></a>4. 测试代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException, SerialException, SQLException</span>&#123;</span><br><span class="line">    Session session = <span class="keyword">null</span>;</span><br><span class="line">    Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        session = HibernateUtil.getSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        Grade grade = <span class="keyword">new</span> Grade();</span><br><span class="line">        grade.setName(<span class="string">"基础"</span>);</span><br><span class="line"></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.setName(<span class="string">"张三疯"</span>);</span><br><span class="line">        stu.setAge(<span class="number">22</span>);</span><br><span class="line">        stu.setGrade(grade);</span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">        stu1.setName(<span class="string">"老王"</span>);</span><br><span class="line">        stu1.setAge(<span class="number">23</span>);</span><br><span class="line">        stu1.setGrade(grade);</span><br><span class="line">        <span class="comment">//关联</span></span><br><span class="line">        <span class="comment">//保存数据的顺序 是根据外键的配置来决定的</span></span><br><span class="line">        <span class="comment">//如果外键不能为null,那么先保存一的一端</span></span><br><span class="line">        <span class="comment">//如果外键可以为null,则可以随意保存</span></span><br><span class="line">        session.save(grade);</span><br><span class="line">        session.save(stu);</span><br><span class="line">        session.save(stu1);</span><br><span class="line"></span><br><span class="line">        tx.commit();</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tx!=<span class="keyword">null</span>)</span><br><span class="line">            tx.rollback();</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        HibernateUtil.closeSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session session = <span class="keyword">null</span>;</span><br><span class="line">    Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        session = HibernateUtil.getSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        <span class="comment">//取数据</span></span><br><span class="line">        Grade grade = (Grade)session.get(Grade<span class="class">.<span class="keyword">class</span>, 2)</span>;</span><br><span class="line">        System.out.println(<span class="string">"gradeName="</span>+grade.getName());</span><br><span class="line">        System.out.println(<span class="string">"grade所对应的多的一端的数据"</span>);</span><br><span class="line">        Iterator&lt;Student&gt; iter = grade.getStudents().iterator();</span><br><span class="line">        <span class="keyword">for</span>(;iter.hasNext();)&#123;</span><br><span class="line">            Student temp = iter.next();</span><br><span class="line">            System.out.println(<span class="string">"name="</span>+temp.getName()+<span class="string">"\tage="</span>+temp.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"========================"</span>);</span><br><span class="line">        Student stu = (Student)session.get(Student<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line">        System.out.println(<span class="string">"studentname="</span>+stu.getName()+<span class="string">"gradeName="</span>+</span><br><span class="line">            stu.getGrade().getName());</span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tx!=<span class="keyword">null</span>)</span><br><span class="line">            tx.rollback();</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        HibernateUtil.closeSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>&emsp;&emsp;<strong>在双向的一对多关联映射中，注意一的一端的配置：&lt;key&gt;中不用指定非空not-null;如果想要一的一端来维护关系，那么在多的一端不用指定关联列非空。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate大对象映射</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/%E5%A4%A7%E5%AF%B9%E8%B1%A1%E6%98%A0%E5%B0%84.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/%E5%A4%A7%E5%AF%B9%E8%B1%A1%E6%98%A0%E5%B0%84.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、在pojo类中-用Blob类和Clob"><a href="#1、在pojo类中-用Blob类和Clob" class="headerlink" title="1、在pojo类中 用Blob类和Clob"></a>1、在pojo类中 用Blob类和Clob</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//存放大数据  可以存放4G的内容</span></span><br><span class="line">    <span class="keyword">private</span> Blob image;</span><br><span class="line">    <span class="keyword">private</span> Clob introduce;</span><br><span class="line">    <span class="comment">//省略get/set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、在hbm文件中，需指定对应类型"><a href="#2、在hbm文件中，需指定对应类型" class="headerlink" title="2、在hbm文件中，需指定对应类型"></a>2、在hbm文件中，需指定对应类型</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.siggy.pojo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"image"</span> <span class="attr">type</span>=<span class="string">"java.sql.Blob"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"introduce"</span> <span class="attr">type</span>=<span class="string">"java.sql.Clob"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3、-构造对象-测试"><a href="#3、-构造对象-测试" class="headerlink" title="3、  构造对象, 测试"></a>3、  构造对象, 测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException, SerialException, SQLException</span>&#123;</span><br><span class="line">    Session session = <span class="keyword">null</span>;</span><br><span class="line">    Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        session = HibernateUtil.getSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.setName(<span class="string">"尹志平"</span>);</span><br><span class="line">        stu.setAge(<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">        Blob blob = <span class="keyword">new</span> SerialBlob(<span class="string">"ttt"</span>.getBytes());</span><br><span class="line">        Clob clob = <span class="keyword">new</span> SerialClob(<span class="string">"sss"</span>.toCharArray());</span><br><span class="line">        stu.setImage(blob);</span><br><span class="line">        stu.setIntroduce(clob);</span><br><span class="line">        session.save(stu);</span><br><span class="line"></span><br><span class="line">        tx.commit();</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tx!=<span class="keyword">null</span>)</span><br><span class="line">            tx.rollback();</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        HibernateUtil.closeSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate组合主键映射</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/%E7%BB%84%E5%90%88%E4%B8%BB%E9%94%AE%E6%98%A0%E5%B0%84.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/%E7%BB%84%E5%90%88%E4%B8%BB%E9%94%AE%E6%98%A0%E5%B0%84.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、编写组合主键的类"><a href="#1、编写组合主键的类" class="headerlink" title="1、编写组合主键的类"></a>1、编写组合主键的类</h1><ul><li>该类必须实现<code>Serializable</code>接口;</li><li>生成对应的<code>get/set</code>方法；</li><li>最好实现<code>equals</code>和<code>hashCode</code>方法;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreId</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stuId;<span class="comment">//学生编号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> subjectId;<span class="comment">//科目编号</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStuId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stuId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuId</span><span class="params">(<span class="keyword">int</span> stuId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stuId = stuId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSubjectId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subjectId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubjectId</span><span class="params">(<span class="keyword">int</span> subjectId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subjectId = subjectId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、在主类中引用对应组件"><a href="#2、在主类中引用对应组件" class="headerlink" title="2、在主类中引用对应组件"></a>2、在主类中引用对应组件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 成绩</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Score</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ScoreId scoreId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> result;<span class="comment">//成绩</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScoreId <span class="title">getScoreId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> scoreId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScoreId</span><span class="params">(ScoreId scoreId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.scoreId = scoreId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResult</span><span class="params">(<span class="keyword">double</span> result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、映射文件的编写"><a href="#3、映射文件的编写" class="headerlink" title="3、映射文件的编写"></a>3、映射文件的编写</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.siggy.pojo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Score"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">composite-id</span> <span class="attr">name</span>=<span class="string">"scoreId"</span> <span class="attr">class</span>=<span class="string">"ScoreId"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key-property</span> <span class="attr">name</span>=<span class="string">"stuId"</span>&gt;</span><span class="tag">&lt;/<span class="name">key-property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key-property</span> <span class="attr">name</span>=<span class="string">"subjectId"</span>&gt;</span><span class="tag">&lt;/<span class="name">key-property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">composite-id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"result"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4、测试代码"><a href="#4、测试代码" class="headerlink" title="4、测试代码"></a>4、测试代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException</span>&#123;</span><br><span class="line">    Session session = <span class="keyword">null</span>;</span><br><span class="line">    Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        session = HibernateUtil.getSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        Score s = <span class="keyword">new</span> Score();</span><br><span class="line">        ScoreId sid = <span class="keyword">new</span> ScoreId();</span><br><span class="line">        sid.setStuId(<span class="number">2</span>);</span><br><span class="line">        sid.setSubjectId(<span class="number">6</span>);</span><br><span class="line">        s.setResult(<span class="number">89</span>);</span><br><span class="line">        s.setScoreId(sid);</span><br><span class="line"></span><br><span class="line">        session.save(s);</span><br><span class="line"></span><br><span class="line">        tx.commit();</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tx!=<span class="keyword">null</span>)</span><br><span class="line">            tx.rollback();</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        HibernateUtil.closeSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate组件映射</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/%E7%BB%84%E4%BB%B6%E6%98%A0%E5%B0%84.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/%E7%BB%84%E4%BB%B6%E6%98%A0%E5%B0%84.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、类Teacher"><a href="#1、类Teacher" class="headerlink" title="1、类Teacher"></a>1、类Teacher</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="comment">//省略get/set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、类Teacher的组件-Address"><a href="#2、类Teacher的组件-Address" class="headerlink" title="2、类Teacher的组件 Address"></a>2、类Teacher的组件 Address</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String addr1;</span><br><span class="line">    <span class="keyword">private</span> String addr2;</span><br><span class="line">    <span class="keyword">private</span> String addr3;</span><br><span class="line">    <span class="comment">//省略get/set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、Teacher-hbm-xml"><a href="#3、Teacher-hbm-xml" class="headerlink" title="3、Teacher.hbm.xml"></a>3、Teacher.hbm.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.siggy.pojo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"Address"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addr1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addr2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addr3"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException, SerialException, SQLException</span>&#123;</span><br><span class="line">    Session session = <span class="keyword">null</span>;</span><br><span class="line">    Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        session = HibernateUtil.getSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        Teacher t = <span class="keyword">new</span> Teacher();</span><br><span class="line">        t.setName(<span class="string">"老裴"</span>);</span><br><span class="line">        t.setSex(<span class="string">"男"</span>);</span><br><span class="line">        Address address = <span class="keyword">new</span> Address();</span><br><span class="line">        address.setAddr1(<span class="string">"西三旗"</span>);</span><br><span class="line">        address.setAddr2(<span class="string">"西直门"</span>);</span><br><span class="line">        address.setAddr3(<span class="string">"南六环"</span>);</span><br><span class="line">        t.setAddress(address);</span><br><span class="line"></span><br><span class="line">        session.save(t);</span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tx!=<span class="keyword">null</span>)</span><br><span class="line">            tx.rollback();</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        HibernateUtil.closeSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate对象生命周期及crud操作</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/%E5%AF%B9%E8%B1%A1%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%8F%8Acrud%E6%93%8D%E4%BD%9C.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/%E5%AF%B9%E8%B1%A1%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%8F%8Acrud%E6%93%8D%E4%BD%9C.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、对象状态及生命周期"><a href="#1、对象状态及生命周期" class="headerlink" title="1、对象状态及生命周期"></a>1、对象状态及生命周期</h1><ul><li>瞬时状态：</li><li>持久状态：</li><li>游离状态：</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190714/drm0teWQMYHR.png!blogy" alt=""></p><h1 id="2、new→save→close→update"><a href="#2、new→save→close→update" class="headerlink" title="2、new→save→close→update"></a>2、new→save→close→update</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session session=<span class="keyword">null</span>;</span><br><span class="line">    Transaction tx=<span class="keyword">null</span>;</span><br><span class="line">    User user=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = HibernateUtil.getSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        <span class="comment">//构造对象--瞬时状态</span></span><br><span class="line">        user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"刘德华"</span>);</span><br><span class="line">        user.setPwd(<span class="string">"2222"</span>);</span><br><span class="line">        <span class="comment">//持久状态，user被session管理，并且id有值--oid</span></span><br><span class="line">        session.save(user);</span><br><span class="line">        <span class="comment">//在持久状态下；脏数据检查：当提交事务，清理缓存时发现session中数据</span></span><br><span class="line">        <span class="comment">//和数据库中数据不一致时，将会把session中的数据更新到数据库中</span></span><br><span class="line">        user.setName(<span class="string">"学友"</span>);</span><br><span class="line">        <span class="comment">//在保存以后 再修改对象 那么将会产生2条sql语句，那么效率较低，建议在save前修改</span></span><br><span class="line">        session.flush();</span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        tx.rollback();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        HibernateUtil.closeSession();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//user:游离状态</span></span><br><span class="line">    System.out.println(<span class="string">"姓名："</span>+user.getName());</span><br><span class="line">    user.setName(<span class="string">"朝伟"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = HibernateUtil.getSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        <span class="comment">//持久状态</span></span><br><span class="line">        session.update(user);</span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        tx.rollback();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        HibernateUtil.closeSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、get-load-持久-→delete-瞬时-；get-load-持久-→colse-游离"><a href="#3、get-load-持久-→delete-瞬时-；get-load-持久-→colse-游离" class="headerlink" title="3、get/load(持久)→delete(瞬时)；get/load(持久)→colse(游离)"></a>3、get/load(持久)→delete(瞬时)；get/load(持久)→colse(游离)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoad</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session session=<span class="keyword">null</span>;</span><br><span class="line">    Transaction tx=<span class="keyword">null</span>;</span><br><span class="line">    User user=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = HibernateUtil.getSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        <span class="comment">//持久状态</span></span><br><span class="line">        <span class="comment">//load方法 相当于 之前的getById</span></span><br><span class="line">        <span class="comment">//如果load查询的数据不存在，那么 抛出异常</span></span><br><span class="line">        <span class="comment">//load不会立即查询数据，当使用的时候再查找数据</span></span><br><span class="line">        user = (User)session.load(User<span class="class">.<span class="keyword">class</span>,1) </span>;</span><br><span class="line">        <span class="comment">//System.out.println(user);</span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span>+user.getName());</span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        tx.rollback();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        HibernateUtil.closeSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session session=<span class="keyword">null</span>;</span><br><span class="line">    Transaction tx=<span class="keyword">null</span>;</span><br><span class="line">    User user=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = HibernateUtil.getSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        <span class="comment">//持久状态</span></span><br><span class="line">        <span class="comment">//get方法 相当于 之前的getById</span></span><br><span class="line">        <span class="comment">//如果get查询的数据不存在，那么返回null</span></span><br><span class="line">        <span class="comment">//get方法会立即查询数据(session--数据库)</span></span><br><span class="line">        user = (User)session.get(User<span class="class">.<span class="keyword">class</span>, 1) </span>;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        user.setName(<span class="string">"张三"</span>);</span><br><span class="line">        <span class="comment">//System.out.println("姓名："+user.getName());</span></span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        tx.rollback();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//关闭session</span></span><br><span class="line">        HibernateUtil.closeSession();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//游离状态</span></span><br><span class="line">    user.setName(<span class="string">"siggy"</span>);</span><br><span class="line">    System.out.println(<span class="string">"============"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = HibernateUtil.getSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        <span class="comment">//持久</span></span><br><span class="line">        session.update(user);</span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        tx.rollback();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//关闭session</span></span><br><span class="line">        HibernateUtil.closeSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session session=<span class="keyword">null</span>;</span><br><span class="line">    Transaction tx=<span class="keyword">null</span>;</span><br><span class="line">    User user=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = HibernateUtil.getSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        <span class="comment">//持久状态</span></span><br><span class="line">        <span class="comment">//get方法 相当于 之前的getById</span></span><br><span class="line">        <span class="comment">//如果get查询的数据不存在，那么返回null</span></span><br><span class="line">        <span class="comment">//get方法会立即查询数据(session--数据库)</span></span><br><span class="line">        user = (User)session.get(User<span class="class">.<span class="keyword">class</span>, 2) </span>;</span><br><span class="line">        session.delete(user);</span><br><span class="line">        <span class="comment">//瞬时状态</span></span><br><span class="line">        user.setName(<span class="string">"王五"</span>);</span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        tx.rollback();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//关闭session</span></span><br><span class="line">        HibernateUtil.closeSession();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//瞬时状态</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4、update方法：先获取对象再更新"><a href="#4、update方法：先获取对象再更新" class="headerlink" title="4、update方法：先获取对象再更新"></a>4、update方法：先获取对象再更新</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session session=<span class="keyword">null</span>;</span><br><span class="line">    Transaction tx=<span class="keyword">null</span>;</span><br><span class="line">    User user=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = HibernateUtil.getSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        <span class="comment">//手动创建对象 可以被更新，需要指定id</span></span><br><span class="line">        <span class="comment">//当指定id不存在时 会抛异常</span></span><br><span class="line">        user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">10</span>);</span><br><span class="line">        user.setName(<span class="string">"paul"</span>);</span><br><span class="line">        session.update(user);</span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        tx.rollback();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//关闭session</span></span><br><span class="line">        HibernateUtil.closeSession();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//瞬时状态</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session session=<span class="keyword">null</span>;</span><br><span class="line">    Transaction tx=<span class="keyword">null</span>;</span><br><span class="line">    User user=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = HibernateUtil.getSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        <span class="comment">//手动创建对象 可以被更新，需要指定id</span></span><br><span class="line">        <span class="comment">//当指定id不存在时 会抛异常</span></span><br><span class="line">        user = (User)session.get(User<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line">        user.setName(<span class="string">"t_bag"</span>);</span><br><span class="line">        user.setPwd(<span class="string">"3333"</span>);</span><br><span class="line">        session.update(user);</span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        tx.rollback();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//关闭session</span></span><br><span class="line">        HibernateUtil.closeSession();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//瞬时状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5、delete方法：先更新，再删除→可以避免异常"><a href="#5、delete方法：先更新，再删除→可以避免异常" class="headerlink" title="5、delete方法：先更新，再删除→可以避免异常"></a>5、delete方法：先更新，再删除→可以避免异常</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session session=<span class="keyword">null</span>;</span><br><span class="line">    Transaction tx=<span class="keyword">null</span>;</span><br><span class="line">    User user=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = HibernateUtil.getSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        <span class="comment">//手动构建对象 并指定id可以从数据库删除</span></span><br><span class="line">        <span class="comment">//如果指定id不存在 将抛异常</span></span><br><span class="line">        user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">3</span>);</span><br><span class="line">        session.delete(user);</span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        tx.rollback();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//关闭session</span></span><br><span class="line">        HibernateUtil.closeSession();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//瞬时状态</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session session=<span class="keyword">null</span>;</span><br><span class="line">    Transaction tx=<span class="keyword">null</span>;</span><br><span class="line">    User user=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = HibernateUtil.getSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        user = (User)session.get(User<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line">        <span class="keyword">if</span>(user!=<span class="keyword">null</span>)</span><br><span class="line">            session.delete(user);</span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        tx.rollback();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//关闭session</span></span><br><span class="line">        HibernateUtil.closeSession();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//瞬时状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate日志及配置文件</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/Hibernate%E6%97%A5%E5%BF%97%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/Hibernate%E6%97%A5%E5%BF%97%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、选择日志"><a href="#1、选择日志" class="headerlink" title="1、选择日志"></a>1、选择日志</h1><p>&emsp;&emsp;<strong>确定要使用日志的实现log4j</strong></p><h1 id="2、导入jar包"><a href="#2、导入jar包" class="headerlink" title="2、导入jar包"></a>2、导入jar包</h1><p>&emsp;&emsp;<strong>Slf4japi.jar和log4j的jar包放入classpath,(slf4j-log4j.jar)</strong></p><h1 id="3、编写log4j-properties"><a href="#3、编写log4j-properties" class="headerlink" title="3、编写log4j.properties"></a>3、编写<code>log4j.properties</code></h1><h1 id="4、hibernate-cfg-xml讲解"><a href="#4、hibernate-cfg-xml讲解" class="headerlink" title="4、hibernate.cfg.xml讲解"></a>4、<code>hibernate.cfg.xml</code>讲解</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据库连接信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- url 相当于：jdbc:mysql://localhost:3306/hibernate4--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.url"</span>&gt;</span>jdbc:mysql:///hibernate4<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- hibernate可选项信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库方言 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span>&gt;</span>org.hibernate.dialect.MySQL5Dialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 是否打印sql语句 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 格式化sql语句 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库更新方式：</span></span><br><span class="line"><span class="comment">        create：每次执行 都先把原有数据表删除，然后创建该表</span></span><br><span class="line"><span class="comment">         create-drop：使用 create-drop时,在显式关闭SessionFactory时，</span></span><br><span class="line"><span class="comment">         将drop掉数据库schema(表). </span></span><br><span class="line"><span class="comment">         validate：检测</span></span><br><span class="line"><span class="comment">         update：如果表不存在, 则创建，有就不用创建</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 映射文件信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/forever/pojo/User.hbm.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5、-hbm-xml讲解"><a href="#5、-hbm-xml讲解" class="headerlink" title="5、*.hbm.xml讲解"></a>5、<code>*.hbm.xml</code>讲解</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- package声明pojo类所在的包，如果不写 那么在class中需要指明pojo类所在的包</span></span><br><span class="line"><span class="comment">         schema指数据库模式 一个模式下可以有多张表</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.forever.pojo"</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- class指映射一个pojo类</span></span><br><span class="line"><span class="comment">        提供了公共的无参构造方法-通过反射产生对象</span></span><br><span class="line"><span class="comment">        属性用private修饰，并且生成对应的get/set方法</span></span><br><span class="line"><span class="comment">        类不能用final来修饰-hibernate会产生代理类（cglib）</span></span><br><span class="line"><span class="comment">        类需要指明标识</span></span><br><span class="line"><span class="comment">        name表示pojo类名</span></span><br><span class="line"><span class="comment">        table表示pojo类对应数据库中的表名；如果不写默认是类名</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"User"</span> <span class="attr">table</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            id表示实体类的标识(OID)</span></span><br><span class="line"><span class="comment">            对应数据库表中的主键</span></span><br><span class="line"><span class="comment">            name指实体类的标识属性名</span></span><br><span class="line"><span class="comment">            column表示对应数据库表的列名：如果不写 则数据库表中列名和属性名一致</span></span><br><span class="line"><span class="comment">            length表示数据库表中 对应数据类型的长度 ，如果不写有默认长度</span></span><br><span class="line"><span class="comment">            type表示类型如果不写hibernate可以找到对应pojo类的属性的类型</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 主键生成策略</span></span><br><span class="line"><span class="comment">                increment 用于为long, short或者int类型生成 唯一标识。</span></span><br><span class="line"><span class="comment">                只有在没有其他进程往同一张表中插入数据时才能使用。 在集群下不要使用</span></span><br><span class="line"><span class="comment">                (mysql,ms sql)</span></span><br><span class="line"><span class="comment">                identity 对DB2,MySQL, MS SQL Server, Sybase和HypersonicSQL</span></span><br><span class="line"><span class="comment">                的内置标识字段提供支持。 返回的标识符是long, short 或者int类型的。 </span></span><br><span class="line"><span class="comment">                sequence 在支持序列的数据库中使用 oracle</span></span><br><span class="line"><span class="comment">                &lt;generator class="sequence"&gt;</span></span><br><span class="line"><span class="comment">                    &lt;param name="sequence"&gt;user_seq&lt;/param&gt;</span></span><br><span class="line"><span class="comment">                &lt;/generator&gt;</span></span><br><span class="line"><span class="comment">                uuid UUID被编码为一个32位16进制数字的字符串。 </span></span><br><span class="line"><span class="comment">                native 根据底层数据库的能力选择identity, sequence 或者hilo中的一个。</span></span><br><span class="line"><span class="comment">                assigned 自己指定主键</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 实体类的属性 </span></span><br><span class="line"><span class="comment">            name:指明 pojo类属性名称（区分大小写）</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pwd"</span>/&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello_Hibernate详解</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/Hello_Hibernate%E8%AF%A6%E8%A7%A3.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/Hello_Hibernate%E8%AF%A6%E8%A7%A3.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、Configuration读取配置文件"><a href="#1、Configuration读取配置文件" class="headerlink" title="1、Configuration读取配置文件"></a>1、Configuration读取配置文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取src下hibernate.properties,不推荐使用</span></span><br><span class="line">Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line"><span class="comment">//如果hibernate的核心配置文件 不叫 hibernate.cfg.xml </span></span><br><span class="line">Configuration cfg1 = <span class="keyword">new</span> Configuration().configure(<span class="string">"hb.cfg.xml"</span>);</span><br><span class="line"><span class="comment">//可编程式  可以不使用配置文件 【已经很少使用了】</span></span><br><span class="line"><span class="comment">//cfg.addProperties();</span></span><br><span class="line"><span class="comment">//cfg.addResource()</span></span><br></pre></td></tr></table></figure><p><code>Configuration</code>在一个应用中，最好写一个。通过<code>configuration</code>来创建<code>SessionFactory</code>对象【即使用单例】</p><h1 id="2、SessionFactory对象"><a href="#2、SessionFactory对象" class="headerlink" title="2、SessionFactory对象"></a>2、SessionFactory对象</h1><p>是一个session工厂。是一个重量级对象。在一个应用中最好也是单列的。是一个线程安全的。属于进程级别的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.通过Configuration创建SessionFactory对象</span></span><br><span class="line"><span class="comment">//在hibernate3.x中是这种写法</span></span><br><span class="line"><span class="comment">//SessionFactory sf = cfg.buildSessionFactory();</span></span><br><span class="line"><span class="comment">//hibernate4.3之前~hibernate4.0</span></span><br><span class="line"><span class="comment">//    ServiceRegistry sr = new ServiceRegistryBuilder()</span></span><br><span class="line"><span class="comment">//                          .applySettings(cfg.getProperties())</span></span><br><span class="line"><span class="comment">//                          .buildServiceRegistry();</span></span><br><span class="line"><span class="comment">//hibernate4.3</span></span><br><span class="line">ServiceRegistry registry = <span class="keyword">new</span> StandardServiceRegistryBuilder()</span><br><span class="line">                            .applySettings(cfg.getProperties())</span><br><span class="line">                            .build();</span><br><span class="line">SessionFactory sf = cfg.buildSessionFactory(registry);</span><br></pre></td></tr></table></figure><h1 id="3、Session对象"><a href="#3、Session对象" class="headerlink" title="3、Session对象"></a>3、Session对象</h1><ul><li>使用hibernate进行数据库操作，主要使用session。</li><li>Session可以理解为对Connection对象的一个包装。</li><li>Session对象中提供了对数据库的crud操作。</li><li>Session是一个<font color=red>线程不安全的对象。</font></li><li>生命周期非常短暂，一般和事务一一对应。</li><li>Session又称为hibernate中的一级缓存。</li><li>Session又是transaction对象的工厂。</li></ul><h1 id="4、Transaction对象"><a href="#4、Transaction对象" class="headerlink" title="4、Transaction对象"></a>4、Transaction对象</h1><p>事务管理对象。通过session来获取到该对象。包括了事务的开启，事务的提交，事务的回滚。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种写法</span></span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line">Transaction tran = session.getTransaction();</span><br><span class="line">tran.begin();</span><br></pre></td></tr></table></figure><p>事务和异常处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Configuration cfg = <span class="keyword">null</span>;</span><br><span class="line">    SessionFactory sf = <span class="keyword">null</span>;</span><br><span class="line">    Session session = <span class="keyword">null</span>;</span><br><span class="line">    Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        cfg = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">        ServiceRegistry registry = <span class="keyword">new</span> StandardServiceRegistryBuilder()</span><br><span class="line">                              .applySettings(cfg.getProperties())</span><br><span class="line">                              .build();</span><br><span class="line">        sf = cfg.buildSessionFactory(registry);</span><br><span class="line">        session = sf.openSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        User u  = (User)session.get(User<span class="class">.<span class="keyword">class</span>, 2)</span>;</span><br><span class="line">        System.out.println(<span class="string">"name="</span>+u.getName());</span><br><span class="line">        <span class="comment">//6.提交事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">//回滚事务</span></span><br><span class="line">        tx.rollback();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//7.关闭session</span></span><br><span class="line">        <span class="keyword">if</span>(session!=<span class="keyword">null</span>&amp;&amp;session.isOpen())</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5、Query对象：条件查询"><a href="#5、Query对象：条件查询" class="headerlink" title="5、Query对象：条件查询"></a>5、Query对象：条件查询</h1><p>使用SQL语句进行数据库的crud语句操作</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate的第一个程序</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/Hello_Hibernate.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/Hello_Hibernate.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载资源："><a href="#1-下载资源：" class="headerlink" title="1. 下载资源："></a>1. 下载资源：</h2><ul><li><a href="http://www.hibernate.org" target="_blank" rel="noopener">www.hibernate.org</a></li></ul><h2 id="2-资源介绍"><a href="#2-资源介绍" class="headerlink" title="2.  资源介绍"></a>2.  资源介绍</h2><ul><li>hibernate-release-X.X.XX.Final<ul><li>documentation  相关文档</li><li>lib 相关jar包</li><li>project相关资源文件，模板文件，源码等</li></ul></li></ul><h2 id="3-搭建hibernate环境"><a href="#3-搭建hibernate环境" class="headerlink" title="3. 搭建hibernate环境:"></a>3. 搭建hibernate环境:</h2><h3 id="3-1-新建一个java项目"><a href="#3-1-新建一个java项目" class="headerlink" title="3.1 新建一个java项目"></a>3.1 新建一个java项目</h3><h3 id="3-2-导入相关jar包"><a href="#3-2-导入相关jar包" class="headerlink" title="3.2 导入相关jar包"></a>3.2 导入相关jar包</h3><p><strong>【./lib/required】和SQL包</strong></p><ul><li><strong>antlr-2.7.7.jar</strong></li><li><strong>dom4j-1.6.1.jar</strong></li><li><strong>hibernate-commons-annotations-x.x.xx.Final.jar</strong></li><li><strong>hibernate-core-x.x.xx.Final.jar</strong></li><li><strong>hibernate-jpa-2.1-api-1.0.0.Final.jar</strong></li><li><strong>jandex-x.x.xx.Final.jar</strong></li><li><strong>javassist-3.18.1-GA.jar</strong></li><li><strong>jboss-logging-x.x.x..Final.jar</strong></li><li><font color=red><strong>mysql-connector-java-5.1.20-bin.jar</strong></font></li></ul><h2 id="4-编写配置文件hibernate-cfg-xml文件"><a href="#4-编写配置文件hibernate-cfg-xml文件" class="headerlink" title="4. 编写配置文件hibernate.cfg.xml文件"></a>4. 编写配置文件hibernate.cfg.xml文件</h2><p><strong>提取hibernate-release-x.x.xx.Final\project\etc\hibernate.cfg.xml   放入到项目中src下：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">n</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ame</span>=<span class="string">"connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/hibernate4<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库方言 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span>&gt;</span>org.hibernate.dialect.MySQL5Dialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-创建数据库表，以及对应的pojo对象"><a href="#5-创建数据库表，以及对应的pojo对象" class="headerlink" title="5. 创建数据库表，以及对应的pojo对象"></a>5. 创建数据库表，以及对应的pojo对象</h2><h3 id="5-1-pojo对象"><a href="#5-1-pojo对象" class="headerlink" title="5.1 pojo对象"></a>5.1 pojo对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-User表：user"><a href="#5-2-User表：user" class="headerlink" title="5.2 User表：user"></a>5.2 User表：user</h3><table><thead><tr><th>id</th><th>name</th><th>pwd</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="6-编辑-hbm-xml文件"><a href="#6-编辑-hbm-xml文件" class="headerlink" title="6. 编辑*.hbm.xml文件"></a>6. 编辑<code>*.hbm.xml</code>文件</h2><p>文件名一般为pojo类的名称<code>User.hbm.xml</code>，放在pojo类所在的包下，头文件可以在project下查找，也可拷贝。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 类路径和表名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.forever.pojo.User"</span> <span class="attr">table</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 主键生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 实体类的属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pwd"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-将-hbm-xml配置文件加入到hibernate-cfg-xml中"><a href="#7-将-hbm-xml配置文件加入到hibernate-cfg-xml中" class="headerlink" title="7. 将*.hbm.xml配置文件加入到hibernate.cfg.xml中"></a>7. 将*.hbm.xml配置文件加入到<code>hibernate.cfg.xml</code>中</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在hibernate.cfg.xml文件中的<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span>中添加映射，resource值为*.hbm.xml文件的路径</span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/forever/pojo/User.hbm.xml"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-测试："><a href="#8-测试：" class="headerlink" title="8. 测试："></a>8. 测试：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.加载Hibernate的核心配置文件</span></span><br><span class="line">    Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">    <span class="comment">// 手动加载映射</span></span><br><span class="line">    <span class="comment">// configuration.addResource("com/forever/pojo/User.hbm.xml");</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.创建一个SessionFactory对象：类似于JDBC中连接池</span></span><br><span class="line">    <span class="comment">// 【3.x以前的写法】</span></span><br><span class="line"><span class="comment">//    SessionFactory sessionFactory = configuration.buildSessionFactory();</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 【4.0~4.3的用法】</span></span><br><span class="line"><span class="comment">//    ServiceRegistry sr = new ServiceRegistryBuilder()</span></span><br><span class="line"><span class="comment">//                            .applySettings(configuration.getProperties())</span></span><br><span class="line"><span class="comment">//                            .buildServiceRegistry();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 【4.3之后的用法】</span></span><br><span class="line">    ServiceRegistry registry = <span class="keyword">new</span> StandardServiceRegistryBuilder()</span><br><span class="line">                              .applySettings(configuration.getProperties())</span><br><span class="line">                              .build();</span><br><span class="line">    SessionFactory sf = configuration.buildSessionFactory(registry);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.通过SessionFactory获取到Session对象：类似于JDBC中Connection</span></span><br><span class="line">    Session session = sessionFactory.openSession();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.手动开启事务：</span></span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.保存数据</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"张三疯"</span>);</span><br><span class="line">    user.setPwd(<span class="string">"1111"</span>);</span><br><span class="line">    session.save(user);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//6.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//7.关闭session</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate初识</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/Hibernate%E5%88%9D%E8%AF%86.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-10-/Hibernate/Hibernate%E5%88%9D%E8%AF%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-持久化"><a href="#1-持久化" class="headerlink" title="1. 持久化"></a>1. 持久化</h1><ul><li>侠义概念：数据存储在物理存储介质不会丢失。</li><li>广义概念：也就是对数据的crud操作都叫持久化。</li><li>加载：hibernate里的，数据从数据库中加载到session</li></ul><h1 id="2-ORM（Object-Relation-Mapping）对象关系映射"><a href="#2-ORM（Object-Relation-Mapping）对象关系映射" class="headerlink" title="2. ORM（Object Relation Mapping）对象关系映射"></a>2. ORM（Object Relation Mapping）对象关系映射</h1><p><img src="//cdn.foreversfj.com/image/blog/20190714/hAFmwJ9qMlWR.png!blog" alt=""></p><ul><li><p>阻抗不匹配：对象和关系数据库不匹配</p></li><li><p>没有侵入性：在代码中不用去继承hibernate类或实现hibernate提供接口</p></li><li><p>Hibernate:是一个orm的轻量级框架；解决持久化操作，使得程序员可以从编写繁复的jdbc工作中解放出来。专注于业务。提高程序员开发效率。移植性。</p></li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190714/U0bJaES6OdfT.png!blog" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate单向多对一的关联映射</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-08-/Hibernate/%E5%8D%95%E5%90%91%E5%A4%9A%E5%AF%B9%E4%B8%80%E7%9A%84%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-06-08-/Hibernate/%E5%8D%95%E5%90%91%E5%A4%9A%E5%AF%B9%E4%B8%80%E7%9A%84%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、学生表student和年级表grade"><a href="#1、学生表student和年级表grade" class="headerlink" title="1、学生表student和年级表grade"></a>1、学生表<code>student</code>和年级表<code>grade</code></h1><p><img src="//cdn.foreversfj.com/image/blog/20190714/VzJMLlFC0Inj.png!blogy" alt=""></p><h1 id="2、类Student和Grade类"><a href="#2、类Student和Grade类" class="headerlink" title="2、类Student和Grade类"></a>2、类<code>Student</code>和<code>Grade</code>类</h1><ul><li><strong><code>Student</code>:</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Grade grade;</span><br><span class="line">    <span class="comment">//get…set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>Grande</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//get…set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、映射文件"><a href="#3、映射文件" class="headerlink" title="3、映射文件"></a>3、映射文件</h1><ul><li><code>Grade.hbm.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.siggy.pojo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Grade"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Student.hbm.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.siggy.pojo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 多对一  name表示属性名</span></span><br><span class="line"><span class="comment">                    class 指明属性对应的类</span></span><br><span class="line"><span class="comment">                    column指 数据库表中的列名</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"grade"</span> <span class="attr">class</span>=<span class="string">"Grade"</span> <span class="attr">column</span>=<span class="string">"grade_id"</span> <span class="attr">foreign-key</span>=<span class="string">"fk_grade"</span> <span class="attr">not-null</span>=<span class="string">"true"</span>/&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4、测试代码"><a href="#4、测试代码" class="headerlink" title="4、测试代码"></a>4、测试代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException, SerialException, SQLException</span>&#123;</span><br><span class="line">    Session session = <span class="keyword">null</span>;</span><br><span class="line">    Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        session = HibernateUtil.getSession();</span><br><span class="line">        tx = session.beginTransaction();</span><br><span class="line">        Grade grade = <span class="keyword">new</span> Grade();</span><br><span class="line">        grade.setName(<span class="string">"基础"</span>);</span><br><span class="line">        session.save(grade);</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.setName(<span class="string">"张三疯"</span>);</span><br><span class="line">        stu.setAge(<span class="number">22</span>);</span><br><span class="line">        stu.setGrade(grade);</span><br><span class="line">        session.save(stu);</span><br><span class="line"></span><br><span class="line">        tx.commit();</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tx!=<span class="keyword">null</span>)</span><br><span class="line">            tx.rollback();</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        HibernateUtil.closeSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记——定时器</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-06-03-/JavaScript/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%AE%9A%E6%97%B6%E5%99%A8.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/2019-06-03-/JavaScript/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%AE%9A%E6%97%B6%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><ul><li>setInterval：每隔多少毫秒执行一次函数</li><li>setTimeout：多少毫秒之后执行一次函数</li><li>clearInterval：</li><li>clearTimeout：</li></ul><h3 id="广告弹出"><a href="#广告弹出" class="headerlink" title="广告弹出"></a>广告弹出</h3><ul><li>显示广告：<code>img.style.display = &quot;block&quot;</code></li><li>隐藏广告：<code>img.style.display = &quot;none&quot;</code></li></ul><h3 id="广告弹出实例"><a href="#广告弹出实例" class="headerlink" title="广告弹出实例"></a>广告弹出实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        setTimeout(<span class="string">"showAD()"</span>,<span class="number">3000</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">showAD</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//首先要获取要操作的img</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"img1"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//显示广告</span></span></span><br><span class="line"><span class="actionscript">        img.style.display = <span class="string">"block"</span>;        </span></span><br><span class="line"><span class="actionscript">        <span class="comment">//再开启定时器,关闭广告</span></span></span><br><span class="line"><span class="actionscript">        setTimeout(<span class="string">"hideAD()"</span>,<span class="number">3000</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">hideAD</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//首先要获取要操作的img</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"img1"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//隐藏广告</span></span></span><br><span class="line"><span class="actionscript">        img.style.display = <span class="string">"none"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过本地连接华为云数据库MySQL</title>
      <link href="/%E6%8A%80%E8%83%BD/2019-04-22-/MySQL/%E9%80%9A%E8%BF%87%E6%9C%AC%E5%9C%B0%E8%BF%9E%E6%8E%A5%E5%8D%8E%E4%B8%BA%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93MySQL.html"/>
      <url>/%E6%8A%80%E8%83%BD/2019-04-22-/MySQL/%E9%80%9A%E8%BF%87%E6%9C%AC%E5%9C%B0%E8%BF%9E%E6%8E%A5%E5%8D%8E%E4%B8%BA%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93MySQL.html</url>
      
        <content type="html"><![CDATA[<p>买了一个华为云数据库MySQL,但是整了10来天还是没用啊,一直无法在本地Navicat连接上去,麻烦了客服好多次,也没整明白,就在网上各种搜教程,踩了N个坑还是没用,基本都要放弃了,突发奇想之下,使用了远程连接后面自动生成的ip,居然成功了,汗</p><p><strong>不多说了,上图!!</strong></p><ul><li>进入自己买的数据库的管理控制台界面,滑到”连接信息”处</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190714/simVhBA8NJc3.png!blog" alt=""></p><ul><li><p>开启远程连接,这一步需要验证,验证一下就行</p></li><li><p>开启远程连接之后,后面会自动生成一个ip地址</p></li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190714/mI1ekreyESDz.png!blog" alt=""></p><ul><li>设置远程连接白名单,如果是使用公网的话,建议使用0.0.0.0/0,私网的话就使用自己本地ip</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190714/0GSkkTJCaO3E.png!blog" alt=""></p><ul><li>之后确定,然后就可以在自己本地通过Navicat连接到这个云数据库了</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190714/eAzlXJSh2FuF.png!blog" alt=""></p><p><strong>只有两点需要注意:</strong></p><ol><li><p>在管理控制台中允许远程连接和设置白名单;</p></li><li><p>连接数据库使用的是主机ip号是允许远程连接后自动生成的ip地址,而且每次关闭开启后生成的ip都不相同,需要注意;使用上面的以168开头的内网地址ip,我们本地远程连接会报2003错误</p></li></ol><p><em>很简单的两步,结果踩了这么多坑,就是因为使用的是那个168的<code>ip</code>,笑死!!</em></p>]]></content>
      
      
      <categories>
          
          <category> 技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL语句</title>
      <link href="/%E6%8A%80%E8%83%BD/2019-04-21-/MySQL/MySQL%E8%AF%AD%E5%8F%A5.html"/>
      <url>/%E6%8A%80%E8%83%BD/2019-04-21-/MySQL/MySQL%E8%AF%AD%E5%8F%A5.html</url>
      
        <content type="html"><![CDATA[<h2 id="命令行SQL语句"><a href="#命令行SQL语句" class="headerlink" title="命令行SQL语句"></a>命令行SQL语句</h2><h3 id="数据库的操作"><a href="#数据库的操作" class="headerlink" title="数据库的操作"></a>数据库的操作</h3><ol><li><strong>连接数据库：</strong> <code>mysql -uroot -proot</code>;<br>1.1. 我的数据库用户名和密码都是root,中间有空格</li><li><strong>数据库的创建：</strong> create database [数据库的名] character set [字符集] collate [校对规则];<br>2.1.  例如: create database db_test character set utf8 collate utf8_bin</li><li><strong>数据库的删除：</strong> drop database 数据库名;<br>3.1. 例如:<code>drop database db_test</code></li><li><strong>修改：</strong>alter database 数据库名 character set 字符集;<br>4.1. 例如:<code>alter database db_test character set gbk</code></li><li><strong>查看服务器现有数据库：</strong> <code>show databases;</code></li><li><strong>查看数据库创建过程：</strong> <code>show create database [数据库的名字];</code></li><li><strong>查询当前所使用的数据库：</strong> <code>select database();</code></li><li><strong>切换数据库：</strong> <code>use [数据库的名字];</code></li></ol><h3 id="表结构的操作"><a href="#表结构的操作" class="headerlink" title="表结构的操作"></a>表结构的操作</h3><ul><li><strong>创建：</strong>create table 表名(列名 列的类型 列的约束,列名 列的类型 列的约)<ul><li>列的类型: char / varchar</li><li>列的约束:<ul><li>primary key 主键约束</li><li>unique : 唯一约束</li><li>not null 非空约束</li></ul></li><li>自动增长 : auto_increment</li></ul></li><li><strong>删除：</strong> drop table 表名</li><li><strong>修改：</strong><ul><li>修改表中的列:alter table 表名[(add, modify, change , drop)修改列]</li><li>修改表名: rename table 旧表名 to 新表名</li><li>修改表的字符集:alter table 表名 character set 字符集</li></ul></li><li><strong>查询表结构：</strong><ul><li>show tables; 查询出所有的表</li><li>show create table 表名: 查询表的创建语句, 表的定义</li><li>desc 表名:　查询表的结构</li></ul></li></ul><h3 id="表中数据的操作"><a href="#表中数据的操作" class="headerlink" title="表中数据的操作"></a>表中数据的操作</h3><ol><li><strong>插入：</strong> <code>insert into [表名(列名,列名)] values [(值1,值2)]</code>;</li><li><strong>删除：</strong> <code>delete from 表名 [where 条件]</code></li><li><strong>修改：</strong> <code>update 表名 set 列名=&#39;值&#39; ,列名=&#39;值&#39; [where 条件]</code>;</li><li><strong>查询：</strong> <code>select [distinct] * [列名1,列名2] from 表名 [where 条件]</code></li></ol><h3 id="特殊语句"><a href="#特殊语句" class="headerlink" title="特殊语句:"></a>特殊语句:</h3><ol><li>as关键字: 别名</li><li>where条件后面:<ol><li>关系运算符: &gt; &gt;= &lt; &lt;= != &lt;&gt;</li><li>–判断某一列是否为空: is null is not null</li><li>in 在某范围内</li><li>between…and</li><li>逻辑运算符: and or not</li><li>模糊查询: like</li><li>_ : 代表单个字符</li><li>%: 代表的是多个字符</li></ol></li><li>分组: group by</li><li>分组之后条件过滤: having</li><li>聚合函数: sum() ,avg() , count() ,max(), min()</li><li>排序: order by (asc 升序, desc 降序)</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h3><ol><li>命令行执行SQL语句时，连接数据库操作中,mysql -uroot -proot后面不能加分号;</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap学习笔记——padding和margin对栅栏的影响</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-04-17-/Bootstrap/Bootstrap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94padding%E5%92%8Cmargin%E5%AF%B9%E6%A0%85%E6%A0%8F%E7%9A%84%E5%BD%B1%E5%93%8D.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/2019-04-17-/Bootstrap/Bootstrap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94padding%E5%92%8Cmargin%E5%AF%B9%E6%A0%85%E6%A0%8F%E7%9A%84%E5%BD%B1%E5%93%8D.html</url>
      
        <content type="html"><![CDATA[<h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p><img src="//cdn.foreversfj.com/image/blog/20190714/hpIWaOoLrJKw.png!blog" alt=""></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/fTj2z0M0Ao1j.png!blog" alt=""></p><h2 id="HTMl代码"><a href="#HTMl代码" class="headerlink" title="HTMl代码"></a>HTMl代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>padding和margin对栅栏的影响<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../css/style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container height_max"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid navy;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_blue"</span>&gt;</span></span><br><span class="line">                第一栏</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_green"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1 inherit_h_100 bor_black"</span>&gt;</span>对比<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1 inherit_h_100 bor_black"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1 inherit_h_100 bor_black"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1 inherit_h_100 bor_black"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1 inherit_h_100 bor_black"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1 inherit_h_100 bor_black"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1 inherit_h_100 bor_black"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1 inherit_h_100 bor_black"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1 inherit_h_100 bor_black"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1 inherit_h_100 bor_black"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1 inherit_h_100 bor_black"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1 inherit_h_100 bor_black"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--**************************************************************************************************************--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span> <span class="attr">size</span>=<span class="string">"24px"</span>&gt;</span>重<span class="symbol">&amp;nbsp;</span>点：<span class="tag">&lt;/<span class="name">font</span>&gt;</span>.row的行内元素宽高不是固定的，而是随其边距(padding和margin)而改变【此行内元素指的是col元素】<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>格子测试<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_red"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 inherit_h_100 bor_black"</span>&gt;</span>col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 inherit_h_100 bor_black"</span>&gt;</span>col-md-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_red"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 inherit_h_100 bor_black"</span>&gt;</span>col-md-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 inherit_h_100 bor_black"</span>&gt;</span>col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_red"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 inherit_h_100 bor_black"</span>&gt;</span>col-md-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 inherit_h_100 bor_black"</span>&gt;</span>col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 inherit_h_100 bor_black"</span>&gt;</span>col-md-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--**************************************************************************************************************--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>padding控制行内部大小<span class="tag">&lt;<span class="name">small</span>&gt;</span>padding使用在<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>row<span class="tag">&lt;/<span class="name">font</span>&gt;</span>中<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_yellow"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 inherit_h_100 bor_black"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inherit_100 bg_red"</span> &gt;</span>不使用任何边距(padding和margin)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 inherit_h_100 bor_black"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inherit_100 bg_red"</span> &gt;</span>内部div默认就是padding：0px 15px;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_black"</span> <span class="attr">style</span>=<span class="string">"padding: 0px 40px;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 inherit_h_100 bor_blue"</span>&gt;</span>使用style="padding: 0px 40px;"<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 inherit_h_100 bor_green"</span>&gt;</span>使这一整行的行内元素继承的宽度左右减少 了40px，但还是可以等分成12份<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_yellow"</span> <span class="attr">style</span>=<span class="string">"padding: 10px 0;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 inherit_h_100 bor_black"</span>&gt;</span>使用style="padding: 10px 0;"<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 inherit_h_100 bor_black"</span>&gt;</span>使这一行的行内元素继承的高度上下被减去了10px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--**************************************************************************************************************--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>padding控制列内部大小<span class="tag">&lt;<span class="name">small</span>&gt;</span>padding使用在<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>col<span class="tag">&lt;/<span class="name">font</span>&gt;</span>中<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_yellow"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 inherit_h_100 bor_black"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inherit_100 bg_red"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 inherit_h_100 bor_black"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inherit_100 bg_red"</span> &gt;</span>内部div默认就是padding：0px 15px;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_black"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 inherit_h_100 bor_black"</span> <span class="attr">style</span>=<span class="string">"padding: 0px 15px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inherit_100 bg_red"</span> &gt;</span>看，使用了padding：15，就是这么大吧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 inherit_h_100 bor_black"</span> <span class="attr">style</span>=<span class="string">"padding: 0;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inherit_100 bg_red"</span> &gt;</span>改变padding：0使内部空间变化<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">                        style="padding: 0;"<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_yellow "</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 inherit_h_100 bor_black"</span> <span class="attr">style</span>=<span class="string">"padding: 10px 15px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inherit_100 bg_red"</span> &gt;</span>style="padding: 10px 15px;"<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 inherit_h_100 bor_black"</span> <span class="attr">style</span>=<span class="string">"padding: 0px 80px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inherit_100 bg_red"</span> &gt;</span>style="padding: 0px 80px;"<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--**************************************************************************************************************--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>margin控制每行的间距<span class="tag">&lt;<span class="name">small</span>&gt;</span>margin使用在<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>row<span class="tag">&lt;/<span class="name">font</span>&gt;</span>中<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_green"</span>&gt;</span>啥都没用，这是个对比，行内的元素完全继承了宽高<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_black"</span> <span class="attr">style</span>=<span class="string">"margin: 0;"</span>&gt;</span></span><br><span class="line">                style="margin: 0;"<span class="tag">&lt;<span class="name">br</span> /&gt;</span>一旦改变了.row的默认样式(padding和margin)，其内部就会默认使用padding:0px 15px;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_green"</span> <span class="attr">style</span>=<span class="string">"margin: 15px 0px;"</span>&gt;</span></span><br><span class="line">                style="margin: 15px 0px;"<span class="tag">&lt;<span class="name">br</span> /&gt;</span>使这一行与上间距15px，与下间距15px</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_black"</span> <span class="attr">style</span>=<span class="string">"margin: 0px -15px;"</span>&gt;</span></span><br><span class="line">                style="margin: 0px -15px;"<span class="tag">&lt;<span class="name">br</span> /&gt;</span>使用margin左右-15px抵消了padding的左右15px；相当于没有操作</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_black"</span> <span class="attr">style</span>=<span class="string">"margin: 0px -15px;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 inherit_h_100 bor_black"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 inherit_h_100 bor_black"</span>&gt;</span>这一行说明了上面一行的结论<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--**************************************************************************************************************--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>margin控制每行的间距<span class="tag">&lt;<span class="name">small</span>&gt;</span>margin使用在<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>col<span class="tag">&lt;/<span class="name">font</span>&gt;</span>中<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_green"</span>&gt;</span>啥都没用，这是个对比，行内的元素完全继承了宽高<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_yellow"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 inherit_h_100 bor_black"</span> <span class="attr">style</span>=<span class="string">"margin: 0;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inherit_100 bg_red"</span> &gt;</span>style="margin: 0;"<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 inherit_h_100 bor_black"</span> <span class="attr">style</span>=<span class="string">"margin: 0;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inherit_100 "</span> &gt;</span>style="margin: 0;"<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_black"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 inherit_h_100 bor_black"</span> <span class="attr">style</span>=<span class="string">"margin: 15px 0px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inherit_100 bor_blue"</span> &gt;</span>style="margin: 15px 0px;"<span class="tag">&lt;<span class="name">br</span> /&gt;</span>使这个小格子与上下间隔了15px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 inherit_h_100 bor_black"</span> <span class="attr">style</span>=<span class="string">"margin: 0px 15px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inherit_100 "</span> &gt;</span>style="margin: 0px 15px;"<span class="tag">&lt;<span class="name">br</span> /&gt;</span>使这个小格子与左右间隔了15px，原来的位置放不下了，就自动换行，把下面的格子压到后面去了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_yellow "</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>这个row还在这里，但里面的格子被压下去了。row还在这里是因为没有对row进行padding和margin操作<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-9 inherit_h_100 bor_blue"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inherit_100"</span> &gt;</span>我们兄弟被压到这里来了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 inherit_h_100 bor_blue"</span> <span class="attr">style</span>=<span class="string">"padding: 0px 80px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inherit_100 "</span> &gt;</span>我们反抗不了，回不去的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row height_50 bor_yellow"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">s</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"yellowgreen"</span>&gt;</span>这是下一行row，但是由于上面一行row没动，所以要紧贴上一行row，但是自己的col-*-*已经没有地方了，只能跟着上一行的，继续往下压<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--**************************************************************************************************************--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span> <span class="attr">style</span>=<span class="string">"margin-top: 50px;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>总结<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"5"</span> &gt;</span>栅栏系统就是一行行的格子，padding和margin对谁（行row和列col）操作，谁就受影响<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">18px</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.row</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bor_yellow</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid yellow;</span><br><span class="line">    <span class="attribute">background-color</span>: whitesmoke;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bor_green</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid lightgreen;</span><br><span class="line">    <span class="attribute">background-color</span>: wheat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bor_red</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bor_blue</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">    <span class="attribute">background-color</span>: rosybrown;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bor_black</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">background-color</span>: azure;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.height_max</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.height_900</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">900px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.height_600</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.height_300</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.height_100</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.height_50</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inherit_h_100</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inherit_w_100</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inherit_100</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bg_red</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bg_blue</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#dedef8</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">1px</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="number">#444</span>, inset -<span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#444</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">td</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">141</span>,<span class="number">141</span>,<span class="number">141</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: whitesmoke;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.col1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">160px</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.col2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.col3</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/ *小白一个，仅留做自我学习记忆，时常修改，有不对不全之处还望不吝赐教！* /</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jeesite学习笔记——新增一条信息时同步创建用户</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-10-27-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%96%B0%E5%A2%9E%E4%B8%80%E6%9D%A1%E4%BF%A1%E6%81%AF%E6%97%B6%E5%90%8C%E6%AD%A5%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-10-27-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%96%B0%E5%A2%9E%E4%B8%80%E6%9D%A1%E4%BF%A1%E6%81%AF%E6%97%B6%E5%90%8C%E6%AD%A5%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-效果"><a href="#1-效果" class="headerlink" title="1. 效果"></a>1. 效果</h1><h2 id="截图-（添加一条个人信息时同步创建它的用户信息）"><a href="#截图-（添加一条个人信息时同步创建它的用户信息）" class="headerlink" title="截图:（添加一条个人信息时同步创建它的用户信息）"></a>截图:（添加一条个人信息时同步创建它的用户信息）</h2><p><img src="//cdn.foreversfj.com/image/blog/20190714/Yv7mWC8TdRE7.png!blog" alt=""></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/dyaDmvEAPwDI.png!blog" alt=""></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/KhfegdsDlCTt.png!blog" alt=""></p><h1 id="2-部分代码展示"><a href="#2-部分代码展示" class="headerlink" title="2. 部分代码展示"></a>2. 部分代码展示</h1><p><strong>因为要为个人同步创建，主体在“个人信息”模块，与“用户信息”添加模块无关，只会调用它的部分方法，所以所有代码都在“个人信息”模块进行操作。</strong></p><h2 id="2-1-因为操作涉及到两个数据库（expert和user），所以实体表要保存expert的用户id，同时还要在xml中进行链接。"><a href="#2-1-因为操作涉及到两个数据库（expert和user），所以实体表要保存expert的用户id，同时还要在xml中进行链接。" class="headerlink" title="2.1 因为操作涉及到两个数据库（expert和user），所以实体表要保存expert的用户id，同时还要在xml中进行链接。"></a>2.1 因为操作涉及到两个数据库（<code>expert</code>和<code>user</code>），所以实体表要保存<code>expert</code>的用户<code>id</code>，同时还要在<code>xml</code>中进行链接。</h2><h3 id="2-1-1-实体层expert-java需要插入："><a href="#2-1-1-实体层expert-java需要插入：" class="headerlink" title="2.1.1 实体层expert.java需要插入："></a>2.1.1 实体层<code>expert.java</code>需要插入：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> User user;                    <span class="comment">//专家的用户信息</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-dao层expertDao-xml的链接"><a href="#2-1-2-dao层expertDao-xml的链接" class="headerlink" title="2.1.2 dao层expertDao.xml的链接"></a>2.1.2 dao层<code>expertDao.xml</code>的链接</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"expertColumns"</span>&gt;</span></span><br><span class="line">    ..</span><br><span class="line">    ..</span><br><span class="line">    ..</span><br><span class="line">    a.userId AS "user.id",</span><br><span class="line">    ..</span><br><span class="line">    ..</span><br><span class="line">    ..</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"expertJoins"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    LEFT JOIN sys_user su ON su.id = a.userId</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUser"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    SELECT *</span><br><span class="line">    FROM sys_user su</span><br><span class="line">    WHERE su.login_name = #&#123;string&#125; AND su.del_flag = 0</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findTheData"</span> <span class="attr">resultType</span>=<span class="string">"Expert"</span>&gt;</span></span><br><span class="line">    SELECT </span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"expertColumns"</span>/&gt;</span></span><br><span class="line">    FROM expert a</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"expertJoins"</span>/&gt;</span></span><br><span class="line">    WHERE a.userId = #&#123;user.id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">后面的insert和update部分参照sql，省略..</span><br></pre></td></tr></table></figure><h3 id="2-2-2-controller层expertController-java协调调用，但主要方法都在service层，所以新增用户的方法写在expertService-java中"><a href="#2-2-2-controller层expertController-java协调调用，但主要方法都在service层，所以新增用户的方法写在expertService-java中" class="headerlink" title="2.2.2 controller层expertController.java协调调用，但主要方法都在service层，所以新增用户的方法写在expertService.java中"></a>2.2.2 <code>controller</code>层<code>expertController.java</code>协调调用，但主要方法都在service层，所以新增用户的方法写在<code>expertService.java</code>中</h3><h4 id="这是save方法"><a href="#这是save方法" class="headerlink" title="这是save方法"></a>这是<code>save</code>方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Expert expert)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//新增专家时插入“已分配论文数”为0</span></span><br><span class="line">    <span class="keyword">if</span>(expert.getDistributeNum() == <span class="keyword">null</span> || expert.getDistributeNum() &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        expert.setDistributeNum(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    User expertUser = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="keyword">if</span>(expert.getUser() == <span class="keyword">null</span>)&#123;                <span class="comment">//用户信息为空，</span></span><br><span class="line">        expertUser = addUser(expert);            <span class="comment">//新增一条专家的用户信息并返回这条信息</span></span><br><span class="line">        expert.setUser(expertUser);                <span class="comment">//将这条信息插入专家信息中</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        expertUser = <span class="keyword">this</span>.updateExpertUser(expert);            <span class="comment">//更新用户信息并返回</span></span><br><span class="line">        expert.setUser(expertUser);                            <span class="comment">//保存更新后的用户信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    encryption(expert);</span><br><span class="line">    <span class="keyword">super</span>.save(expert);                            <span class="comment">//保存**专家表**中的专家信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="这是addUser方法，这里默认使用手机号作为登录名，手机号后六位作为登录密码"><a href="#这是addUser方法，这里默认使用手机号作为登录名，手机号后六位作为登录密码" class="headerlink" title="这是addUser方法，这里默认使用手机号作为登录名，手机号后六位作为登录密码"></a>这是<code>addUser</code>方法，这里默认使用手机号作为登录名，手机号后六位作为登录密码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新生成一条专家数据时自动生成一个用户</span></span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">addUser</span><span class="params">(Expert expert)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(IdGen.uuid());</span><br><span class="line">    Office company = <span class="keyword">new</span> Office();</span><br><span class="line">    Office office = <span class="keyword">new</span> Office();</span><br><span class="line">    <span class="comment">//根据专家类型分配用户归属（校内1和校外5）</span></span><br><span class="line">    <span class="keyword">if</span>(expert.getExpertType().equals(<span class="string">"0"</span>)) &#123;</span><br><span class="line">        company.setId(<span class="string">"1"</span>);</span><br><span class="line">        office.setId(<span class="string">"2"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        company.setId(<span class="string">"5"</span>);</span><br><span class="line">        office.setId(<span class="string">"6"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据用户类型获取一整条数据</span></span><br><span class="line">    company = officeService.findTheData(company);</span><br><span class="line">    office = officeService.findTheData(office);</span><br><span class="line">    user.setCompany(company);</span><br><span class="line">    user.setOffice(office);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//新用户默认用手机号作为登录名</span></span><br><span class="line">    user.setLoginName(expert.getPhone());</span><br><span class="line">    <span class="comment">//用手机号后6位作为登录密码</span></span><br><span class="line">    user.setPassword(<span class="keyword">this</span>.getUserPassword(expert.getPhone()));</span><br><span class="line">    user.setNo(expert.getId());</span><br><span class="line">    user.setName(expert.getExpertName());</span><br><span class="line">    user.setEmail(expert.getEmail());</span><br><span class="line">    user.setPhone(expert.getPhone());</span><br><span class="line">    user.setUserType(<span class="string">"2"</span>);</span><br><span class="line">    user.setUpdateDate(<span class="keyword">new</span> Date());</span><br><span class="line">    user.setCreateDate(user.getUpdateDate());</span><br><span class="line">    user.setCreateBy(UserUtils.getUser());</span><br><span class="line">    user.setUpdateBy(UserUtils.getUser());</span><br><span class="line">    </span><br><span class="line">    userDao.insert(user);</span><br><span class="line">    <span class="comment">//角色数据有效性验证，过滤不在授权内的角色</span></span><br><span class="line">    List&lt;Role&gt; roleList = Lists.newArrayList();</span><br><span class="line">    Role r = <span class="keyword">new</span> Role();</span><br><span class="line">    r.setId(Expert_Role);</span><br><span class="line">    roleList.add(r);</span><br><span class="line">    user.setRoleList(roleList);</span><br><span class="line">            </span><br><span class="line">    systemService.saveUser(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getUserPassword</span><span class="params">(String phone_num)</span></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(phone_num != <span class="keyword">null</span> &amp;&amp; phone_num.length() &gt; <span class="number">6</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> SystemService.entryptPassword(phone_num.substring(phone_num.length()-<span class="number">6</span>));    </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> SystemService.entryptPassword(<span class="string">"123456"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="这是updateExpertUser方法，用于更新用户信息"><a href="#这是updateExpertUser方法，用于更新用户信息" class="headerlink" title="这是updateExpertUser方法，用于更新用户信息"></a>这是<code>updateExpertUser</code>方法，用于更新用户信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新**用户表**中的专家用户信息，返回更新后的用户信息</span></span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">updateExpertUser</span><span class="params">(Expert expert)</span> </span>&#123;</span><br><span class="line">    User expertUser = systemService.getUser(expert.getUser().getId());        <span class="comment">//获取**用户表**中该专家的用户数据</span></span><br><span class="line">    expertUser.setName(expert.getExpertName());</span><br><span class="line">    expertUser.setLoginName(expert.getPhone());                                <span class="comment">//更新登录名</span></span><br><span class="line">    expertUser.setPhone(expert.getPhone());                                    <span class="comment">//更新手机号</span></span><br><span class="line">    expertUser.setEmail(expert.getEmail());                                    <span class="comment">//更新邮箱</span></span><br><span class="line">    systemService.saveUser(expertUser);                                        <span class="comment">//更新**用户表**中的用户信息</span></span><br><span class="line">    <span class="keyword">return</span> expertUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="同时，还要注意，在删除该个人信息时还要同步删除他的用户信息"><a href="#同时，还要注意，在删除该个人信息时还要同步删除他的用户信息" class="headerlink" title="同时，还要注意，在删除该个人信息时还要同步删除他的用户信息"></a>同时，还要注意，在删除该个人信息时还要同步删除他的用户信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Expert expert)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.delete(expert);</span><br><span class="line">    <span class="keyword">this</span>.deleteUser(expert);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除一条专家数据时同步删除该用户数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Expert expert)</span> </span>&#123;</span><br><span class="line">    User user = expert.getUser();</span><br><span class="line">    systemService.deleteUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>到此，同步新增用户基本结束了，但如果使用该用户登录时，还要注意个人信息与用户信息的同步</strong></p><h1 id="3、个人登录时对个人信息的修改"><a href="#3、个人登录时对个人信息的修改" class="headerlink" title="3、个人登录时对个人信息的修改"></a>3、个人登录时对个人信息的修改</h1><h2 id="3-1首先，使用个人用户信息登录时的首页，要在菜单项中设置好链接和角色权限"><a href="#3-1首先，使用个人用户信息登录时的首页，要在菜单项中设置好链接和角色权限" class="headerlink" title="3.1首先，使用个人用户信息登录时的首页，要在菜单项中设置好链接和角色权限"></a>3.1首先，使用个人用户信息登录时的首页，要在菜单项中设置好链接和角色权限</h2><p><img src="//cdn.foreversfj.com/image/blog/20190714/Lrk7LcLXi1Jm.png!blog" alt=""></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/FVIyuolVFdtd.png!blog" alt=""></p><h2 id="3-2-controller层调转到jsp"><a href="#3-2-controller层调转到jsp" class="headerlink" title="3.2 controller层调转到jsp"></a>3.2 <code>controller</code>层调转到jsp</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"jwcmis:expert:view"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"expertLogin"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">expertLogin</span><span class="params">(Expert expert, Model model)</span> </span>&#123;                        <span class="comment">//专家通过账号信息登录</span></span><br><span class="line">    expert.setUser(UserUtils.getUser());                                    <span class="comment">//把当前登录的用户信息放入登录的专家个人信息中</span></span><br><span class="line">    expert = expertService.findTheData(expert);                                <span class="comment">//通过用户信息找到该专家的所有个人信息,但此时用户信息中被覆盖只有用户id</span></span><br><span class="line">    expert.setUser(UserUtils.getUser());                                    <span class="comment">//重新插入登录的用户信息</span></span><br><span class="line">    expert = expertService.decryption(expert);                                <span class="comment">//对个人信息解密</span></span><br><span class="line">    model.addAttribute(<span class="string">"expert"</span>, expert);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"imd/jwcmis/expertUpdate"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//登录用户信息更新</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"jwcmis:expert:edit"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"updateToSave"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateToSave</span><span class="params">(Expert expert, String oldPhone, Model model, RedirectAttributes redirectAttributes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!beanValidator(model, expert))&#123;</span><br><span class="line">        <span class="keyword">return</span> form(expert, model);</span><br><span class="line">    &#125;</span><br><span class="line">    expertService.save(expert);</span><br><span class="line">    expertService.decryption(expert);</span><br><span class="line">    <span class="keyword">if</span>(!expert.getPhone().equals(oldPhone)) &#123;        <span class="comment">//由于手机号作为登录名，当手机号改变时，保存后需要重新登录</span></span><br><span class="line">        UserUtils.getSubject().logout();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:"</span> + adminPath + <span class="string">"/login"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        addMessage(redirectAttributes, <span class="string">"已成功保存您的个人信息！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:"</span>+Global.getAdminPath()+<span class="string">"/jwcmis/expert/expertLogin"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-jsp层展示个人信息（这个文件需要自己在from文件相同位置处新增，可以复制form的部分代码）"><a href="#3-3-jsp层展示个人信息（这个文件需要自己在from文件相同位置处新增，可以复制form的部分代码）" class="headerlink" title="3.3 jsp层展示个人信息（这个文件需要自己在from文件相同位置处新增，可以复制form的部分代码）"></a>3.3 jsp层展示个人信息（这个文件需要自己在from文件相同位置处新增，可以复制form的部分代码）</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">"/WEB-INF/views/include/taglib.jsp"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;专家信息管理&lt;/title&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"decorator"</span> content=<span class="string">"default"</span> charset=<span class="string">"UTF-8"</span> /&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="keyword">var</span> emailOld = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> phoneOld = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> bankCardNumberOld = <span class="string">""</span>;</span><br><span class="line">        $(document).ready(function() &#123;</span><br><span class="line">            $(<span class="string">"#inputForm"</span>).validate(&#123;</span><br><span class="line">                submitHandler: function (form)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(checkEmail())&#123;</span><br><span class="line">                        <span class="keyword">if</span>(checkPhone()) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(checkBankCardNumber())&#123;</span><br><span class="line">                                loading(<span class="string">'正在提交，请稍等...'</span>);</span><br><span class="line">                                form.submit();</span><br><span class="line">                            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                alert(<span class="string">"银行卡号验证未通过! "</span>);</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            alert(<span class="string">"手机号码验证未通过! "</span>);</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        alert(<span class="string">"邮箱验证未通过! "</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                errorContainer: <span class="string">"#messageBox"</span>,</span><br><span class="line">                errorPlacement: function(error, element) &#123;</span><br><span class="line">                    $(<span class="string">"#messageBox"</span>).text(<span class="string">"输入有误，请先更正。"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (element.is(<span class="string">":checkbox"</span>)||element.is(<span class="string">":radio"</span>)||element.parent().is(<span class="string">".input-append"</span>))&#123;</span><br><span class="line">                        error.appendTo(element.parent().parent());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        error.insertAfter(element);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;); </span><br><span class="line">            <span class="comment">//已分配论文数填充</span></span><br><span class="line">            <span class="keyword">var</span> distributeNum = $(<span class="string">"#distributeNum"</span>).val();</span><br><span class="line">            <span class="keyword">if</span>(distributeNum == <span class="keyword">null</span> || distributeNum == <span class="string">""</span>)&#123;</span><br><span class="line">                $(<span class="string">"#distributeNum"</span>).val(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取原有的用户名、邮箱、手机号、银行卡号</span></span><br><span class="line">            emailOld = $(<span class="string">"#email"</span>).val();</span><br><span class="line">            phoneOld = $(<span class="string">"#phone"</span>).val();</span><br><span class="line">            bankCardNumberOld = $(<span class="string">"#bankCardNumber"</span>).val();</span><br><span class="line">        &#125;);    </span><br><span class="line"></span><br><span class="line">        <span class="comment">/*这一部分是邮箱、手机号、银行卡号的验证，可以参照我的其他笔记*/</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"nav nav-tabs"</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="$&#123;ctx&#125;/jwcmis/expert/expertLogin"&gt;基本信息修改&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;&lt;br/&gt;</span><br><span class="line">    &lt;form:form id=<span class="string">"inputForm"</span> modelAttribute=<span class="string">"expert"</span> action=<span class="string">"$&#123;ctx&#125;/jwcmis/expert/updateToSave?oldPhone=$&#123;expert.phone&#125;"</span> method=<span class="string">"post"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-horizontal"</span>&gt;</span><br><span class="line">        &lt;form:hidden path=<span class="string">"id"</span> /&gt;</span><br><span class="line">        &lt;sys:message content=<span class="string">"$&#123;message&#125;"</span> /&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-group"</span>&gt;</span><br><span class="line">            &lt;label class="control-label"&gt;专家姓名：&lt;/label&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"controls"</span>&gt;</span><br><span class="line">                &lt;span class="help-inline"&gt;&lt;font color="black" size="4" &gt;$&#123;expert.expertName&#125;&lt;/font&gt;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-group"</span>&gt;</span><br><span class="line">            &lt;label class="control-label"&gt;专业：&lt;/label&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"controls"</span>&gt;</span><br><span class="line">                &lt;form:input path=<span class="string">"major"</span> htmlEscape=<span class="string">"false"</span> maxlength=<span class="string">"64"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-xlarge required"</span> /&gt;</span><br><span class="line">                &lt;span class="help-inline"&gt;&lt;font color="red"&gt;*&lt;/font&gt; &lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-group"</span>&gt;</span><br><span class="line">            &lt;label class="control-label"&gt;研究方向：&lt;/label&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"controls"</span>&gt;</span><br><span class="line">                &lt;form:input path=<span class="string">"researchName"</span> htmlEscape=<span class="string">"false"</span> maxlength=<span class="string">"64"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-xlarge required"</span> /&gt;</span><br><span class="line">                &lt;span class="help-inline"&gt;&lt;font color="red"&gt;*&lt;/font&gt; &lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-group"</span>&gt;</span><br><span class="line">            &lt;label class="control-label"&gt;专家类型：&lt;/label&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"controls"</span>&gt;</span><br><span class="line">                &lt;form:radiobuttons path=<span class="string">"expertType"</span> id=<span class="string">"expertType"</span> items=<span class="string">"$&#123;fns:getDictList('expertType')&#125;"</span> itemLabel=<span class="string">"label"</span> itemValue=<span class="string">"value"</span> htmlEscape=<span class="string">"false"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"required"</span> /&gt;</span><br><span class="line">                &lt;span class="help-inline"&gt;&lt;font color="red"&gt;*&lt;/font&gt; &lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-group"</span>&gt;</span><br><span class="line">            &lt;label class="control-label"&gt;已分配论文数：&lt;/label&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"controls"</span>&gt;</span><br><span class="line">                &lt;span class="help-inline"&gt;&lt;font color="black"&gt;$&#123;expert.distributeNum&#125;&lt;/font&gt; &lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-group"</span>&gt;</span><br><span class="line">            &lt;label class="control-label"&gt;邮箱：&lt;/label&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"controls"</span>&gt;</span><br><span class="line">                &lt;form:input path=<span class="string">"email"</span> id=<span class="string">"email"</span> value=<span class="string">""</span> oninput=<span class="string">"checkEmail()"</span> htmlEscape=<span class="string">"false"</span> maxlength=<span class="string">"64"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-xlarge required"</span> /&gt;</span><br><span class="line">                &lt;span class="help-inline" id="email_notice"&gt;&lt;font color="red"&gt;*&lt;/font&gt; &lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-group"</span>&gt;</span><br><span class="line">            &lt;label class="control-label"&gt;手机号：&lt;/label&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"controls"</span>&gt;</span><br><span class="line">                &lt;form:input path=<span class="string">"phone"</span> id=<span class="string">"phone"</span> value=<span class="string">""</span> oninput=<span class="string">"checkPhone()"</span> htmlEscape=<span class="string">"false"</span> maxlength=<span class="string">"11"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-xlarge required"</span> /&gt;</span><br><span class="line">                &lt;span class="help-inline" id="phone_notice"&gt;&lt;font color="red"&gt;*&lt;/font&gt; &lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-group"</span>&gt;</span><br><span class="line">            &lt;label class="control-label"&gt;银行卡号：&lt;/label&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"controls"</span>&gt;</span><br><span class="line">                &lt;form:input path=<span class="string">"bankCardNumber"</span> id=<span class="string">"bankCardNumber"</span> oninput=<span class="string">"checkBankCardNumber()"</span> htmlEscape=<span class="string">"false"</span> maxlength=<span class="string">"64"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-xlarge required"</span> /&gt;</span><br><span class="line">                &lt;span class="help-inline" id="bankCardNumber_notice"&gt;&lt;font color="red"&gt;*&lt;/font&gt; &lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-group"</span>&gt;</span><br><span class="line">            &lt;label class="control-label"&gt;单位：&lt;/label&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"controls"</span>&gt;</span><br><span class="line">                &lt;form:input path=<span class="string">"place"</span> htmlEscape=<span class="string">"false"</span> maxlength=<span class="string">"64"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-xlarge required"</span> /&gt;</span><br><span class="line">                &lt;span class="help-inline"&gt;&lt;font color="red"&gt;*&lt;/font&gt; &lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-group"</span>&gt;</span><br><span class="line">            &lt;label class="control-label"&gt;备注信息：&lt;/label&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"controls"</span>&gt;</span><br><span class="line">                &lt;form:textarea path=<span class="string">"remarks"</span> htmlEscape=<span class="string">"false"</span> rows=<span class="string">"4"</span> maxlength=<span class="string">"255"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-xxlarge "</span> /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-actions"</span>&gt;</span><br><span class="line">            &lt;shiro:hasPermission name=<span class="string">"jwcmis:expert:edit"</span>&gt;</span><br><span class="line">                &lt;input id=<span class="string">"btnSubmit"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary"</span> type=<span class="string">"submit"</span> value=<span class="string">"保 存"</span> /&gt;&amp;nbsp;</span><br><span class="line">            &lt;/shiro:hasPermission&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4-service层用户信息调用"><a href="#3-4-service层用户信息调用" class="headerlink" title="3.4 service层用户信息调用"></a>3.4 <code>service</code>层用户信息调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据登录名返回用户数据 </span></span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Expert <span class="title">findTheData</span><span class="params">(Expert expert)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> expertDao.findTheData(expert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-xml中的sql语言上面已经列出"><a href="#3-5-xml中的sql语言上面已经列出" class="headerlink" title="3.5 xml中的sql语言上面已经列出"></a>3.5 xml中的sql语言上面已经列出</h2><p><strong>该功能的代码差不多就是这样了，有错误红叉的地方可以根据错误提示修改</strong></p><p>/ *小白一个，仅留做自我学习记忆，时常修改，有不对不全之处还望不吝赐教！* /</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jeesite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jeesite学习笔记——使用Ajax查重</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-09-10-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8Ajax%E6%9F%A5%E9%87%8D.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-09-10-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8Ajax%E6%9F%A5%E9%87%8D.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、效果："><a href="#1、效果：" class="headerlink" title="1、效果："></a>1、效果：</h1><p><img src="//cdn.foreversfj.com/image/blog/20190714/wOmUrko2pX7n.png!blog" alt=""></p><h1 id="2、代码展示："><a href="#2、代码展示：" class="headerlink" title="2、代码展示："></a>2、代码展示：</h1><h2 id="2-1、由于邮箱、手机号、银行卡号都在一个页面中查重，所以共用一个验证传值变量名"><a href="#2-1、由于邮箱、手机号、银行卡号都在一个页面中查重，所以共用一个验证传值变量名" class="headerlink" title="2.1、由于邮箱、手机号、银行卡号都在一个页面中查重，所以共用一个验证传值变量名"></a>2.1、由于邮箱、手机号、银行卡号都在一个页面中查重，所以共用一个验证传值变量名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是controller文件</span></span><br><span class="line"><span class="comment">//checkRepeat邮箱、手机号、银行卡号查重</span></span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"gsmis:expert:edit"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"checkRepeat"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">checkRepeat</span><span class="params">(String checkString)</span> </span>&#123;</span><br><span class="line">    Expert expert = <span class="keyword">new</span> Expert();</span><br><span class="line">    String result = <span class="string">"0"</span>;</span><br><span class="line">    <span class="comment">//获取expert现有数据</span></span><br><span class="line">    List&lt;Expert&gt; list = expertService.findList(expert);</span><br><span class="line">    <span class="comment">//遍历查重，一旦重复就break跳出循环，直接返回</span></span><br><span class="line">    <span class="keyword">for</span>(Expert e:list) &#123;</span><br><span class="line">        <span class="keyword">if</span>(checkString.equals(e.getEmail())) &#123;                        <span class="comment">//邮箱查重</span></span><br><span class="line">            result = <span class="string">"1"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(checkString.equals(e.getPhone())) &#123;                <span class="comment">//手机号查重</span></span><br><span class="line">            result = <span class="string">"2"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(checkString.equals(e.getBankCardNumber())) &#123;        <span class="comment">//银行卡号查重</span></span><br><span class="line">            result = <span class="string">"3"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2、邮箱实时查重：（附带正则验证）"><a href="#2-2、邮箱实时查重：（附带正则验证）" class="headerlink" title="2.2、邮箱实时查重：（附带正则验证）"></a>2.2、邮箱实时查重：（附带正则验证）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是jsp文件</span></span><br><span class="line"><span class="comment">//全局变量，用于传送需要查重的邮箱、手机号、银行卡号值</span></span><br><span class="line"><span class="keyword">var</span> checkString = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//邮箱验证</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkEmail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//邮箱的正则表达式</span></span><br><span class="line">    <span class="keyword">var</span> emailReg = <span class="regexp">/^\w+@[a-zA-Z0-9]&#123;2,10&#125;(?:\.[a-z]&#123;2,4&#125;)&#123;1,3&#125;$/</span>;</span><br><span class="line">    <span class="comment">//实时获取邮箱</span></span><br><span class="line">    <span class="keyword">var</span> emailNew = email.value;</span><br><span class="line">    <span class="comment">//标志变量</span></span><br><span class="line">    <span class="keyword">var</span> checkResult = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(emailOld != emailNew &amp;&amp; emailNew != <span class="literal">null</span> &amp; emailNew != <span class="string">""</span>)&#123;        <span class="comment">//判断是否更改</span></span><br><span class="line">        <span class="keyword">if</span>(emailReg.test(emailNew))&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                <span class="keyword">async</span>:<span class="literal">false</span>,</span><br><span class="line">                type:<span class="string">"post"</span>,</span><br><span class="line">                url:<span class="string">"$&#123;ctx&#125;/gsmis/expert/checkRepeat?checkString="</span> + emailNew,</span><br><span class="line">                dataType:<span class="string">'html'</span>,</span><br><span class="line">                error : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    alert(<span class="string">'请求失败！请刷新页面重试！ '</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (data == <span class="number">0</span>) &#123;</span><br><span class="line">                        email_notice.innerHTML = <span class="string">'邮箱验证通过！'</span>;</span><br><span class="line">                        email_notice.style.color = <span class="string">'green'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        email_notice.innerHTML = <span class="string">"邮箱已经被占用!"</span>;</span><br><span class="line">                        email_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">                        checkResult = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            email_notice.innerHTML = <span class="string">'邮箱验证未通过，请重新输入！'</span>;</span><br><span class="line">            email_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">            checkResult = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(emailNew != <span class="literal">null</span> &amp; emailNew != <span class="string">""</span>)&#123;</span><br><span class="line">        email_notice.innerHTML = <span class="string">'邮箱验证通过！'</span>;</span><br><span class="line">        email_notice.style.color = <span class="string">'green'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            email_notice.innerHTML = <span class="string">'请输入邮箱！'</span>;</span><br><span class="line">            email_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">            checkResult = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> checkResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3、手机号实时查重：（附带正则验证）"><a href="#2-3、手机号实时查重：（附带正则验证）" class="headerlink" title="2.3、手机号实时查重：（附带正则验证）"></a>2.3、手机号实时查重：（附带正则验证）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是jsp文件</span></span><br><span class="line"><span class="comment">//手机号码验证</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPhone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//手机号的正则表达式</span></span><br><span class="line">    <span class="keyword">var</span> phoneReg = <span class="regexp">/^(13[0-9]&#123;9&#125;)|(18[0-9]&#123;9&#125;)|(14[0-9]&#123;9&#125;)|(17[0-9]&#123;9&#125;)|(15[0-9]&#123;9&#125;)$/</span>;</span><br><span class="line">    <span class="comment">//实时获取手机号</span></span><br><span class="line">    <span class="keyword">var</span> phoneNew = phone.value;</span><br><span class="line">    <span class="keyword">var</span> checkResult = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(phoneOld != phoneNew &amp;&amp; phoneNew != <span class="literal">null</span> &amp;&amp; phoneNew != <span class="string">""</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(phoneReg.test(phoneNew))&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                <span class="keyword">async</span>:<span class="literal">false</span>,</span><br><span class="line">                type:<span class="string">"post"</span>,</span><br><span class="line">                url:<span class="string">"$&#123;ctx&#125;/gsmis/expert/checkRepeat?checkString="</span> + phoneNew,</span><br><span class="line">                dataType:<span class="string">'html'</span>,</span><br><span class="line">                error : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    alert(<span class="string">'请求失败！请刷新页面重试！ '</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (data == <span class="number">0</span>) &#123;</span><br><span class="line">                        phone_notice.innerHTML = <span class="string">'手机号码验证通过！'</span>;</span><br><span class="line">                        phone_notice.style.color = <span class="string">'green'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        phone_notice.innerHTML = <span class="string">"手机号码已经被占用!"</span>;</span><br><span class="line">                        phone_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">                        checkResult = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            phone_notice.innerHTML = <span class="string">'手机号码验证未通过！'</span>;</span><br><span class="line">            phone_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">            checkResult = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(phoneNew != <span class="literal">null</span> &amp;&amp; phoneNew != <span class="string">""</span>)&#123;</span><br><span class="line">        phone_notice.innerHTML = <span class="string">'手机号码验证通过！'</span>;</span><br><span class="line">           phone_notice.style.color = <span class="string">'green'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            phone_notice.innerHTML = <span class="string">'请输入手机号码！'</span>;</span><br><span class="line">            phone_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">            checkResult = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> checkResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4、银行卡号实时查重：（附带Luhm验证）"><a href="#2-4、银行卡号实时查重：（附带Luhm验证）" class="headerlink" title="2.4、银行卡号实时查重：（附带Luhm验证）"></a>2.4、银行卡号实时查重：（附带Luhm验证）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是jsp文件</span></span><br><span class="line"><span class="comment">//银行卡号验证</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkBankCardNumber</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//实时获取银行卡号</span></span><br><span class="line">    <span class="keyword">var</span> bankCardNumberNew = bankCardNumber.value;</span><br><span class="line">    <span class="keyword">if</span>(bankCardNumberOld != bankCardNumberNew &amp;&amp; bankCardNumberNew != <span class="literal">null</span> &amp;&amp; bankCardNumberNew != <span class="string">""</span>)&#123;</span><br><span class="line">        <span class="comment">//长度校验</span></span><br><span class="line">        <span class="keyword">if</span>(bankCardNumberNew == <span class="string">""</span> || bankCardNumberNew.length &lt; <span class="number">16</span> || bankCardNumberNew.length &gt; <span class="number">19</span>) &#123;</span><br><span class="line">            bankCardNumber_notice.innerHTML = <span class="string">"银行卡号位数必须在16~19之间，请完整输入银行卡号！"</span>;</span><br><span class="line">            bankCardNumber_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//开头6位校验</span></span><br><span class="line">        <span class="keyword">var</span> strBin=<span class="string">"10,18,30,35,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,62,65,68,69,84,87,88,94,95,98,99"</span>;    </span><br><span class="line">        <span class="keyword">if</span>(strBin.indexOf(bankCardNumberNew.substring(<span class="number">0</span>, <span class="number">2</span>)) == <span class="number">-1</span>) &#123;</span><br><span class="line">            bankCardNumber_notice.innerHTML = <span class="string">"银行卡号开头6位不符合规范，请检查后重新输入！"</span>;</span><br><span class="line">            bankCardNumber_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全数字校验</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="regexp">/^\d*$/</span>;</span><br><span class="line">        <span class="keyword">if</span>( !num.exec(bankCardNumberNew)) &#123;</span><br><span class="line">            bankCardNumber_notice.innerHTML = <span class="string">"银行卡号必须全为数字，请检查后重新输入！"</span>;</span><br><span class="line">            bankCardNumber_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Luhm验证</span></span><br><span class="line">        <span class="keyword">var</span> lastNum = bankCardNumberNew.substr(bankCardNumberNew.length<span class="number">-1</span>, <span class="number">1</span>);<span class="comment">//取出最后一位（与luhm进行比较）</span></span><br><span class="line">        <span class="keyword">var</span> first15Num = bankCardNumberNew.substr(<span class="number">0</span>, bankCardNumberNew.length<span class="number">-1</span>);<span class="comment">//前15或18位</span></span><br><span class="line">        <span class="keyword">var</span> newArr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = first15Num.length<span class="number">-1</span>; i &gt; <span class="number">-1</span>; i --)&#123;    <span class="comment">//前15或18位倒序存进数组</span></span><br><span class="line">            newArr.push(first15Num.substr(i, <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> arrJiShu = <span class="keyword">new</span> <span class="built_in">Array</span>();                    <span class="comment">//奇数位*2的积 &lt;9</span></span><br><span class="line">        <span class="keyword">var</span> arrJiShu2 = <span class="keyword">new</span> <span class="built_in">Array</span>();                <span class="comment">//奇数位*2的积 &gt;9</span></span><br><span class="line">        <span class="keyword">var</span> arrOuShu = <span class="keyword">new</span> <span class="built_in">Array</span>();                    <span class="comment">//偶数位数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; newArr.length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>( (j+<span class="number">1</span>)%<span class="number">2</span> == <span class="number">1</span>) &#123;                            <span class="comment">//奇数位</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">parseInt</span>(newArr[j]) * <span class="number">2</span> &lt; <span class="number">9</span>)</span><br><span class="line">                    arrJiShu.push(<span class="built_in">parseInt</span>(newArr[j]) * <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    arrJiShu2.push(<span class="built_in">parseInt</span>(newArr[j]) * <span class="number">2</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>                                    <span class="comment">//偶数位</span></span><br><span class="line">                arrOuShu.push(newArr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> jishu_child1 = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//奇数位*2 &gt;9 的分割之后的数组个位数</span></span><br><span class="line">        <span class="keyword">var</span> jishu_child2 = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//奇数位*2 &gt;9 的分割之后的数组十位数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> h = <span class="number">0</span>; h &lt; arrJiShu2.length; h++) &#123;</span><br><span class="line">            jishu_child1.push(<span class="built_in">parseInt</span>(arrJiShu2[h]) % <span class="number">10</span>);</span><br><span class="line">            jishu_child2.push(<span class="built_in">parseInt</span>(arrJiShu2[h]) / <span class="number">10</span>);</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">var</span> sumJiShu = <span class="number">0</span>; <span class="comment">//奇数位*2 &lt; 9 的数组之和</span></span><br><span class="line">        <span class="keyword">var</span> sumOuShu = <span class="number">0</span>; <span class="comment">//偶数位数组之和</span></span><br><span class="line">        <span class="keyword">var</span> sumJiShuChild1 = <span class="number">0</span>; <span class="comment">//奇数位*2 &gt;9 的分割之后的数组个位数之和</span></span><br><span class="line">        <span class="keyword">var</span> sumJiShuChild2 = <span class="number">0</span>; <span class="comment">//奇数位*2 &gt;9 的分割之后的数组十位数之和</span></span><br><span class="line">        <span class="keyword">var</span> sumTotal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> m = <span class="number">0</span>; m&lt;arrJiShu.length; m++)&#123;</span><br><span class="line">            sumJiShu = sumJiShu+<span class="built_in">parseInt</span>(arrJiShu[m]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; arrOuShu.length; n++)&#123;</span><br><span class="line">            sumOuShu = sumOuShu+<span class="built_in">parseInt</span>(arrOuShu[n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> p = <span class="number">0</span>; p &lt; jishu_child1.length; p++) &#123;</span><br><span class="line">            sumJiShuChild1 = sumJiShuChild1 + <span class="built_in">parseInt</span>(jishu_child1[p]);</span><br><span class="line">            sumJiShuChild2 = sumJiShuChild2 + <span class="built_in">parseInt</span>(jishu_child2[p]);</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="comment">//计算总和</span></span><br><span class="line">        sumTotal = <span class="built_in">parseInt</span>(sumJiShu) + <span class="built_in">parseInt</span>(sumOuShu) + <span class="built_in">parseInt</span>(sumJiShuChild1) + <span class="built_in">parseInt</span>(sumJiShuChild2);</span><br><span class="line">        <span class="comment">//计算Luhm值</span></span><br><span class="line">        <span class="keyword">var</span> k = <span class="built_in">parseInt</span>(sumTotal)%<span class="number">10</span>==<span class="number">0</span>?<span class="number">10</span>:<span class="built_in">parseInt</span>(sumTotal)%<span class="number">10</span>;        </span><br><span class="line">        <span class="keyword">var</span> luhm= <span class="number">10</span>-k;</span><br><span class="line">        <span class="keyword">if</span>(lastNum == luhm)&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                <span class="keyword">async</span>:<span class="literal">false</span>,</span><br><span class="line">                type:<span class="string">"post"</span>,</span><br><span class="line">                url:<span class="string">"$&#123;ctx&#125;/gsmis/expert/checkRepeat?checkString="</span> + bankCardNumberNew,</span><br><span class="line">                dataType:<span class="string">'html'</span>,</span><br><span class="line">                error : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    alert(<span class="string">'请求失败！请刷新页面重试！ '</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (data == <span class="number">0</span>) &#123;</span><br><span class="line">                        bankCardNumber_notice.innerHTML =<span class="string">"银行卡号验证通过！"</span>;</span><br><span class="line">                        bankCardNumber_notice.style.color = <span class="string">'green'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        bankCardNumber_notice.innerHTML =<span class="string">"银行卡号已被占用！"</span>;</span><br><span class="line">                        bankCardNumber_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            bankCardNumber_notice.innerHTML =<span class="string">"银行卡号不合法，请检查后重新输入！"</span>;</span><br><span class="line">            bankCardNumber_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>( bankCardNumberNew != <span class="literal">null</span> &amp;&amp; bankCardNumberNew != <span class="string">""</span>)&#123;</span><br><span class="line">        bankCardNumber_notice.innerHTML =<span class="string">"银行卡号验证通过！"</span>;</span><br><span class="line">           bankCardNumber_notice.style.color = <span class="string">'green'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            bankCardNumber_notice.innerHTML =<span class="string">"请输入银行卡号！"</span>;</span><br><span class="line">            bankCardNumber_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5、由于Ajax传值时会出现中文传值乱码，需要先转译为内码，在进行传值查重。所以先在jsp中转码，然后在控制台controller中验证"><a href="#2-5、由于Ajax传值时会出现中文传值乱码，需要先转译为内码，在进行传值查重。所以先在jsp中转码，然后在控制台controller中验证" class="headerlink" title="2.5、由于Ajax传值时会出现中文传值乱码，需要先转译为内码，在进行传值查重。所以先在jsp中转码，然后在控制台controller中验证"></a>2.5、由于Ajax传值时会出现中文传值乱码，需要先转译为内码，在进行传值查重。<font color=red>所以先在jsp中转码，然后在控制台controller中验证</font></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是jsp文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkMajorName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> majorNew = major.value;</span><br><span class="line">    <span class="keyword">var</span> checkResult = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> majorName = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span>(majorOld != majorNew &amp;&amp; majorNew != <span class="literal">null</span> &amp;&amp; majorNew != <span class="string">""</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(majorNew)&#123;</span><br><span class="line">            <span class="comment">//由于Ajax中文传值会乱码，所以需要先翻译成utf-8内码，然后在控制台转成中文，这种转译需要连URL一起转译</span></span><br><span class="line">            <span class="keyword">var</span> url = <span class="string">"$&#123;ctx&#125;/gsmis/major/checkMajorName?majorName="</span> + majorNew;</span><br><span class="line">            url = <span class="built_in">encodeURI</span>(<span class="built_in">encodeURI</span>(url));</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                <span class="keyword">async</span>:<span class="literal">false</span>,</span><br><span class="line">                type:<span class="string">"post"</span>,</span><br><span class="line">                url:url,</span><br><span class="line">                contentType:<span class="string">"application/x-www-form-urlencoded; charset=utf-8"</span>,</span><br><span class="line">                dataType:<span class="string">"json"</span>,</span><br><span class="line">                error : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    alert(<span class="string">'请求失败！请刷新页面重试！ '</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (data == <span class="number">0</span>) &#123;</span><br><span class="line">                        major_notice.innerHTML = <span class="string">"验证通过!"</span>;</span><br><span class="line">                        major_notice.style.color = <span class="string">'green'</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        major_notice.innerHTML = <span class="string">"专业已经存在!"</span>;</span><br><span class="line">                        major_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">                        checkResult = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(majorNew != <span class="literal">null</span> &amp;&amp; majorNew != <span class="string">""</span>)&#123;</span><br><span class="line">        major_notice.innerHTML = <span class="string">"验证通过!"</span>;</span><br><span class="line">           major_notice.style.color = <span class="string">'green'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            major_notice.innerHTML = <span class="string">"请输入专业信息!"</span>;</span><br><span class="line">            major_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">            checkResult = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> checkResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是controller文件</span></span><br><span class="line"><span class="comment">//手动添加major查重</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"gsmis:major:edit"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"checkMajorName"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">checkMajorName</span><span class="params">(String majorName)</span> <span class="keyword">throws</span> UnsupportedEncodingException</span>&#123;</span><br><span class="line">    String result = <span class="string">"0"</span>;</span><br><span class="line">    majorName = URLDecoder.decode(majorName,<span class="string">"UTF-8"</span>); </span><br><span class="line">    <span class="comment">//---由于数据中对major的xml中对name是模糊匹配的，为防止列表数据过多，先进行筛选，经过模糊匹配后再进行查重</span></span><br><span class="line">    Major majorMatch = <span class="keyword">new</span> Major();</span><br><span class="line">    majorMatch.setName(majorName);</span><br><span class="line">    List&lt;Major&gt; list = majorService.findList(majorMatch);</span><br><span class="line">    <span class="keyword">for</span>(Major m:list) &#123;</span><br><span class="line">        <span class="keyword">if</span>(majorName.equals(m.getName())) &#123;</span><br><span class="line">            result = <span class="string">"1"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、上面在手动添加文件时查重，下面附带导入文件的查重"><a href="#3、上面在手动添加文件时查重，下面附带导入文件的查重" class="headerlink" title="3、上面在手动添加文件时查重，下面附带导入文件的查重"></a>3、上面在手动添加文件时查重，下面附带导入文件的查重</h1><h2 id="3-1、导入不需要加密的文件的查重"><a href="#3-1、导入不需要加密的文件的查重" class="headerlink" title="3.1、导入不需要加密的文件的查重"></a>3.1、导入不需要加密的文件的查重</h2><h3 id="3-1-1、controller层的导入方法"><a href="#3-1-1、controller层的导入方法" class="headerlink" title="3.1.1、controller层的导入方法"></a>3.1.1、controller层的导入方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"gsmis:research:edit"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"import"</span>, method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">importFile</span><span class="params">(MultipartFile file, RedirectAttributes redirectAttributes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Global.isDemoMode())&#123;</span><br><span class="line">        addMessage(redirectAttributes, <span class="string">"演示模式，不允许操作！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:"</span> + adminPath + <span class="string">"/gsmis/research/?repage"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> successNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> failureNum = <span class="number">0</span>;</span><br><span class="line">        StringBuilder failureMsg = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        ImportExcel ei = <span class="keyword">new</span> ImportExcel(file, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        List&lt;Research&gt; list = ei.getDataList(Research<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (Research rNew : list)&#123;                </span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(researchService.importCheckRepeat(rNew)) &#123;</span><br><span class="line">                    researchService.save(rNew);</span><br><span class="line">                    successNum++;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    failureMsg.append(<span class="string">"&lt;br/&gt;研究方向: "</span> + rNew.getName()+</span><br><span class="line">                            <span class="string">"&lt;pre style='display:inline; background-color:rgba(0,0,0,0); border:0;'&gt;            &lt;/pre&gt;原因： 数据重复，导入失败！"</span>);</span><br><span class="line">                    failureNum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(ConstraintViolationException ex)&#123;</span><br><span class="line">                failureMsg.append(<span class="string">"&lt;br/&gt;研究方向: "</span> + rNew.getName()+<span class="string">" 导入失败："</span>);</span><br><span class="line">                List&lt;String&gt; messageList = BeanValidators.extractPropertyAndMessageAsList(ex, <span class="string">": "</span>);  <span class="comment">//告诉你出错原因</span></span><br><span class="line">                <span class="keyword">for</span> (String message : messageList)&#123;</span><br><span class="line">                    failureMsg.append(message+<span class="string">"; "</span>);</span><br><span class="line">                    failureNum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                failureMsg.append(<span class="string">"&lt;br/&gt;研究方向: "</span>+rNew.getName()+<span class="string">" 导入失败："</span>+ex.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (failureNum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            failureMsg.insert(<span class="number">0</span>, <span class="string">"，失败 "</span>+failureNum+<span class="string">" 条信息，导入信息如下："</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        addMessage(redirectAttributes, <span class="string">"已成功导入 "</span>+successNum+<span class="string">" 条信息"</span>+failureMsg);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        addMessage(redirectAttributes, <span class="string">"导入研究方向信息失败！失败信息："</span>+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:"</span> + adminPath + <span class="string">"/gsmis/research/list?repage"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2、service层的查重方法"><a href="#3-1-2、service层的查重方法" class="headerlink" title="3.1.2、service层的查重方法"></a>3.1.2、service层的查重方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入数据时的查重</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">importCheckRepeat</span><span class="params">(Research research)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> checkRepeat = <span class="keyword">true</span>;                                    <span class="comment">//查重结果，true表示没有重复，false表示重复</span></span><br><span class="line">    <span class="comment">//---由于数据中对research的xml中对name是模糊匹配的，为防止列表数据过多，先进行筛选，经过模糊匹配后再进行查重</span></span><br><span class="line">    Research researchMatch = <span class="keyword">new</span> Research();</span><br><span class="line">    researchMatch.setName(research.getName());</span><br><span class="line">    List&lt;Research&gt; researchMatchList = findList(researchMatch);</span><br><span class="line">    <span class="keyword">if</span>(researchMatchList != <span class="keyword">null</span> &amp;&amp; researchMatchList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(Research rOld : researchMatchList) &#123;                <span class="comment">//先遍历researchOldList数据库已有的数据</span></span><br><span class="line">            <span class="keyword">if</span>(research.getName().equals(rOld.getName())) &#123;</span><br><span class="line">                checkRepeat = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span> checkRepeat;                                <span class="comment">//一旦找到重复的，就返回false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;            </span><br><span class="line">    <span class="keyword">return</span> checkRepeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2、导入需要加密的文件的查重"><a href="#3-2、导入需要加密的文件的查重" class="headerlink" title="3.2、导入需要加密的文件的查重"></a>3.2、导入需要加密的文件的查重</h2><h3 id="3-2-1、controller层方法"><a href="#3-2-1、controller层方法" class="headerlink" title="3.2.1、controller层方法"></a>3.2.1、controller层方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"gsmis:expert:edit"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"import"</span>, method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">importFile</span><span class="params">(MultipartFile file, RedirectAttributes redirectAttributes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Global.isDemoMode())&#123;</span><br><span class="line">        addMessage(redirectAttributes, <span class="string">"演示模式，不允许操作！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:"</span> + adminPath + <span class="string">"/gsmis/expert/?repage"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> successNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> failureNum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//定义failureMsg失败信息的字符串</span></span><br><span class="line">        StringBuilder failureMsg = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//定义文件接收对象，存储导入的文件信息</span></span><br><span class="line">        ImportExcel ei = <span class="keyword">new</span> ImportExcel(file, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//将导入的文件的每一条数据取出放入链表</span></span><br><span class="line">        List&lt;Expert&gt; list = ei.getDataList(Expert<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Major major = <span class="keyword">new</span> Major();</span><br><span class="line">        <span class="comment">//遍历链表中的每一条数据，相当于每一个eNew就是一条expert数据，这条数据是未经加密的</span></span><br><span class="line">        <span class="keyword">for</span> (Expert eNew : list)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;    </span><br><span class="line">                <span class="comment">//把专家的专业转化为专业表对应的id</span></span><br><span class="line">                major.setName(eNew.getMajor());</span><br><span class="line">                major = majorService.findByName(major);</span><br><span class="line">                eNew.setMajor(major.getId());</span><br><span class="line">                <span class="comment">//将导入的专家类型转换为字典的值</span></span><br><span class="line">                String expertType = DictUtils.getDictValue(eNew.getExpertType(), <span class="string">"expertType"</span>, <span class="string">""</span>);</span><br><span class="line">                eNew.setExpertType(expertType);</span><br><span class="line">                <span class="comment">//导入查重，如果重复，就不保存</span></span><br><span class="line">                <span class="keyword">if</span>(expertService.importCheckRepeat(eNew)) &#123;</span><br><span class="line">                    expertService.save(eNew);</span><br><span class="line">                    successNum++;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    failureMsg.append(<span class="string">"&lt;br/&gt;姓名: "</span> + eNew.getExpertName()+ </span><br><span class="line">                            <span class="string">"&lt;pre style='display:inline; background-color:rgba(0,0,0,0); border:0;'&gt;                &lt;/pre&gt;原因： 数据重复，导入失败！"</span>);</span><br><span class="line">                    failureNum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(ConstraintViolationException ex)&#123;</span><br><span class="line">                failureMsg.append(<span class="string">"&lt;br/&gt;姓名: "</span> + eNew.getExpertName()+<span class="string">" 导入失败："</span>);</span><br><span class="line">                List&lt;String&gt; messageList = BeanValidators.extractPropertyAndMessageAsList(ex, <span class="string">": "</span>);  </span><br><span class="line">                <span class="keyword">for</span> (String message : messageList)&#123;</span><br><span class="line">                    failureMsg.append(message+<span class="string">"; "</span>);</span><br><span class="line">                    failureNum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                failureMsg.append(<span class="string">"&lt;br/&gt;姓名: "</span> + eNew.getExpertName()+<span class="string">" 导入失败："</span> + ex.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (failureNum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            failureMsg.insert(<span class="number">0</span>, <span class="string">"，失败 "</span>+failureNum+<span class="string">" 条信息，导入信息如下："</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        addMessage(redirectAttributes, <span class="string">"已成功导入 "</span>+successNum+<span class="string">" 条信息"</span>+failureMsg);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        addMessage(redirectAttributes, <span class="string">"导入专家信息失败！失败信息："</span>+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:"</span> + adminPath + <span class="string">"/gsmis/expert/list?repage"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2service层加密查重"><a href="#3-2-2service层加密查重" class="headerlink" title="3.2.2service层加密查重"></a>3.2.2service层加密查重</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入数据时的查重</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">importCheckRepeat</span><span class="params">(Expert expert)</span> </span>&#123;                <span class="comment">//这里的expert是导入文件的内容，是未加密的</span></span><br><span class="line">    <span class="keyword">boolean</span> checkRepeat = <span class="keyword">true</span>;                                    <span class="comment">//查重结果，true表示没有重复，false表示重复</span></span><br><span class="line">    Expert expertOld = <span class="keyword">new</span> Expert();</span><br><span class="line">    expertOld.setExpertName(expert.getExpertName());</span><br><span class="line">    expertOld.setEmail(expert.getEmail());</span><br><span class="line">    expertOld.setPhone(expert.getPhone());</span><br><span class="line">    expertOld.setBankCardNumber(expert.getBankCardNumber());</span><br><span class="line">    encryption(expertOld);</span><br><span class="line">    List&lt;Expert&gt; expertOldList = findList(expertOld);            <span class="comment">//这里的expertOld是数据库已有的内容，是已经加密的</span></span><br><span class="line">    <span class="keyword">if</span>(expertOldList != <span class="keyword">null</span> &amp;&amp; expertOldList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果数据库中存在一条邮箱、手机号、银行卡号都相同的数据，就说明重复，返回false</span></span><br><span class="line">        checkRepeat = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> checkRepeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加密单条数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Expert <span class="title">encryption</span><span class="params">(Expert expert)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//对专家姓名、手机号、邮箱、银行卡号进行AES加密</span></span><br><span class="line">    expert.setExpertName(Cryptos.aesEncrypt(expert.getExpertName()));</span><br><span class="line">    expert.setEmail(Cryptos.aesEncrypt(expert.getEmail()));</span><br><span class="line">    expert.setPhone(Cryptos.aesEncrypt(expert.getPhone()));</span><br><span class="line">    expert.setBankCardNumber(Cryptos.aesEncrypt(expert.getBankCardNumber()));</span><br><span class="line">    <span class="keyword">return</span> expert;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解密单条数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Expert <span class="title">decryption</span><span class="params">(Expert expert)</span> </span>&#123;</span><br><span class="line">    expert.setExpertName(Cryptos.aesDecrypt(expert.getExpertName()));</span><br><span class="line">    expert.setEmail(Cryptos.aesDecrypt(expert.getEmail()));</span><br><span class="line">    expert.setPhone(Cryptos.aesDecrypt(expert.getPhone()));</span><br><span class="line">    expert.setBankCardNumber(Cryptos.aesDecrypt(expert.getBankCardNumber()));</span><br><span class="line">    <span class="keyword">return</span> expert;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/ *小白一个，仅留做自我学习记忆，时常修改，有不对不全之处还望不吝赐教！* /</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jeesite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jeesite学习笔记——页面添加表单</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-08-30-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0%E8%A1%A8%E5%8D%95.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-08-30-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0%E8%A1%A8%E5%8D%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、需求效果："><a href="#一、需求效果：" class="headerlink" title="一、需求效果："></a>一、需求效果：</h1><p><strong>在系统页面中显示表单信息，如下图：</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/xOgUkUb67EWo.png!blog" alt=""></p><h1 id="二、步骤："><a href="#二、步骤：" class="headerlink" title="二、步骤："></a>二、步骤：</h1><h2 id="1-在添加前需要先清楚表单栏目的作用，如下图所示："><a href="#1-在添加前需要先清楚表单栏目的作用，如下图所示：" class="headerlink" title="1.在添加前需要先清楚表单栏目的作用，如下图所示："></a>1.在添加前需要先清楚表单栏目的作用，如下图所示：</h2><p><img src="//cdn.foreversfj.com/image/blog/20190714/irqSNvqGpDAg.png!blog" alt=""></p><p><strong>一级菜单为导航栏，二级菜单为左侧栏目名，三级菜单是表单名，一般需要显示的表单内容的链接都放在三级菜单中。</strong></p><h2 id="2-添加表单链接和权限："><a href="#2-添加表单链接和权限：" class="headerlink" title="2.添加表单链接和权限："></a>2.添加表单链接和权限：</h2><p><strong>系统设置→系统设置→菜单设置中</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/yOO2CVGlPrEW.png!blog" alt=""></p><p><strong>controller表的路径地址：</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/tytIgHo2kVgc.png!blog" alt=""></p><p><strong>controller中的权限：</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/WhIFw9Hj5HWI.png!blog" alt=""></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/ADomoYPzq1lK.png!blog" alt=""></p><h1 id="三、更改登录用户权限："><a href="#三、更改登录用户权限：" class="headerlink" title="三、更改登录用户权限："></a>三、更改登录用户权限：</h1><p><strong>在“角色管理”中修改自己登录的角色的权限，在“角色授权”中打钩即可</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/hH1CkTw2LL5l.png!blog" alt=""></p><p><strong>最后重启eclipse的服务器即可</strong></p><p>/ *小白一个，仅留做自我学习记忆，时常修改，有不对不全之处还望不吝赐教！* /</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jeesite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jeesite学习笔记——加密解密功能</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-08-29-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E5%8A%9F%E8%83%BD.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-08-29-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E5%8A%9F%E8%83%BD.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、需求："><a href="#一、需求：" class="headerlink" title="一、需求："></a>一、需求：</h1><p><strong>数据库中存储的数据为加密后的结果，而在后台页面中显示的是解密的结果，由于是双向加密（对称加密），所以MD5不适合，采用AES加密，这种加密方法jeesite自带！！</strong></p><h2 id="1-数据库截图："><a href="#1-数据库截图：" class="headerlink" title="1.数据库截图："></a>1.数据库截图：</h2><p><img src="//cdn.foreversfj.com/image/blog/20190714/WMJ4q6xySMSb.png!blog" alt=""></p><h2 id="2-页面截图："><a href="#2-页面截图：" class="headerlink" title="2.页面截图："></a>2.页面截图：</h2><p><img src="//cdn.foreversfj.com/image/blog/20190714/4mDd4xku4c61.png!blog" alt=""></p><h1 id="二、代码展示："><a href="#二、代码展示：" class="headerlink" title="二、代码展示："></a>二、代码展示：</h1><h2 id="1-由于保存进数据库时，是对后台的操作，所以在Service层中的save方法进行加密"><a href="#1-由于保存进数据库时，是对后台的操作，所以在Service层中的save方法进行加密" class="headerlink" title="1.由于保存进数据库时，是对后台的操作，所以在Service层中的save方法进行加密"></a>1.由于保存进数据库时，是对后台的操作，所以在Service层中的save方法进行加密</h2><p><img src="//cdn.foreversfj.com/image/blog/20190714/lsspTiih4cxi.png!blog" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Expert expert)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//对专家姓名、手机号、邮箱、银行卡号进行AES加密</span></span><br><span class="line">    expert.setExpertname(Cryptos.aesEncrypt(expert.getExpertname()));</span><br><span class="line">    expert.setEmail(Cryptos.aesEncrypt(expert.getEmail()));</span><br><span class="line">    expert.setPhone(Cryptos.aesEncrypt(expert.getPhone()));</span><br><span class="line">    expert.setBankcardnumber(Cryptos.aesEncrypt(expert.getBankcardnumber()));</span><br><span class="line">    <span class="keyword">super</span>.save(expert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-在数据库中取出数据即是从后台取，所以在Service层中解密"><a href="#2-在数据库中取出数据即是从后台取，所以在Service层中解密" class="headerlink" title="2.在数据库中取出数据即是从后台取，所以在Service层中解密"></a>2.在数据库中取出数据即是从后台取，所以在Service层中解密</h2><p><img src="//cdn.foreversfj.com/image/blog/20190714/GGbOvtEmUO4f.png!blog" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Expert <span class="title">get</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//从数据库中读取数据，由于数据库中的数据已经加密，读取时需要解密，然后返回解密后的数据</span></span><br><span class="line">    Expert e = <span class="keyword">super</span>.get(id);</span><br><span class="line">    e.setExpertname(Cryptos.aesDecrypt(e.getExpertname()));</span><br><span class="line">    e.setEmail(Cryptos.aesDecrypt(e.getEmail()));</span><br><span class="line">    e.setPhone(Cryptos.aesDecrypt(e.getPhone()));</span><br><span class="line">    e.setBankcardnumber(Cryptos.aesDecrypt(e.getBankcardnumber()));</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Expert&gt; <span class="title">findList</span><span class="params">(Expert expert)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//解密可以放入findlist，也可以放在fandpage中的fandlist</span></span><br><span class="line">    List&lt;Expert&gt; experts = <span class="keyword">super</span>.findList(expert);</span><br><span class="line">    <span class="keyword">for</span>(Expert k : experts ) &#123;</span><br><span class="line">        k.setExpertname(Cryptos.aesDecrypt(k.getExpertname()));</span><br><span class="line">        k.setEmail(Cryptos.aesDecrypt(k.getEmail()));</span><br><span class="line">        k.setPhone(Cryptos.aesDecrypt(k.getPhone()));</span><br><span class="line">        k.setBankcardnumber(Cryptos.aesDecrypt(k.getBankcardnumber()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> experts;</span><br><span class="line">    <span class="comment">//return super.findList(expert);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Expert&gt; <span class="title">findPage</span><span class="params">(Page&lt;Expert&gt; page, Expert expert)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*List&lt;Expert&gt; experts = findList(expert);</span></span><br><span class="line"><span class="comment">    for(Expert k : experts ) &#123;</span></span><br><span class="line"><span class="comment">        k.setExpertname(Cryptos.aesDecrypt(k.getExpertname()));</span></span><br><span class="line"><span class="comment">        k.setEmail(Cryptos.aesDecrypt(k.getEmail()));</span></span><br><span class="line"><span class="comment">        k.setPhone(Cryptos.aesDecrypt(k.getPhone()));</span></span><br><span class="line"><span class="comment">        k.setBankcardnumber(Cryptos.aesDecrypt(k.getBankcardnumber()));</span></span><br><span class="line"><span class="comment">        page.setList(findList(k));</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    page.setList(experts);</span></span><br><span class="line"><span class="comment">    return super.findPage(page, expert);*/</span></span><br><span class="line">    expert.setPage(page);</span><br><span class="line">    page.setList(findList(expert));</span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;<strong>注意：</strong><br/>由于需要在list页面中和修改页面中都需要显示解密结果，所以需要重写geiId和findPage两个方法，而findPage中的解密可以直接修改findList（注释中的内容），也可以直接重写findList方法<br>&emsp;&emsp;各个文件都有其前后台功能，相应的操作最好写在相应的文件中，避免代码的重复</p></blockquote><p>/ <em>小白一个，仅留做自我学习记忆，时常修改，有不对不全之处还望不吝赐教！</em> /</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jeesite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jeesite学习笔记——常见问题与解决</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-08-29-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-08-29-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3.html</url>
      
        <content type="html"><![CDATA[<h2 id="Q1-☆HV000030-找不到类型为-java-lang-Long的验证器"><a href="#Q1-☆HV000030-找不到类型为-java-lang-Long的验证器" class="headerlink" title="Q1:☆HV000030:找不到类型为:java.lang.Long的验证器"></a>Q1:☆HV000030:找不到类型为:java.lang.Long的验证器</h2><p><b><font color=red>没有找到验证器用于约束检查<code>******</code> 的配置</font></b></p><p>这种问题是由于在实体表中为不是字符串或整数的属性添加了注释，如：</p><p><img src="//cdn.foreversfj.com/image/blog/20190714/oXPX9uIbSx3u.png!blog" alt=""></p><p>此时，删除注释@Length就好了</p><h2 id="Q2-pom-xml报错红叉，提示缺少jar10-0-2-4-0"><a href="#Q2-pom-xml报错红叉，提示缺少jar10-0-2-4-0" class="headerlink" title="Q2:pom.xml报错红叉，提示缺少jar10.0.2.4.0"></a>Q2:pom.xml报错红叉，提示缺少<code>jar10.0.2.4.0</code></h2><p><b>这个jar包是oracle的非免费包，eclipse不能自动下载，手动网上下载这个jar包后，把这个包放入本地maven仓库中即可！</b></p><h2 id="Q3-提示“页面不存在”"><a href="#Q3-提示“页面不存在”" class="headerlink" title="Q3:提示“页面不存在”"></a>Q3:提示“页面不存在”</h2><ul><li><strong>方式1：检查菜单的页面路径和用户权限是否正确</strong></li></ul><p>&emsp;&emsp;需要确保页面菜单中对应的链接地址是对应文件的controller文件中的@RequestMapping(value = “${adminPath}/***“)这里面的地址，然后添加权限标识为controller文件中<font color=red>@RequiresPermissions</font>中的值，view代表查看，edit代表修改；</p><p>&emsp;&emsp;还需要在角色管理里面的对应角色的角色授权添加对该菜单的查看权限；</p><p>  <b>最后重启服务器即可。</b></p><ul><li><strong>方式2：是否修改了默认的生成包路径</strong></li></ul><p>&emsp;&emsp;如果在生成代码时修改了com.thinkgem.jeesite以外的生成包路径，则需要在spring-mvx.xml文件中添加这个包路径，具体添加位置是在context:component-scan标签中，按照提示添加路径</p><p>&emsp;&emsp;然后还需要在spring-context.xml文件中也添加这个包路径，具体位置在context:component-scan和bean这两个标签中</p><p>&emsp;&emsp;总的说，就是在所有com.thinkgem.jeesite的路径后面都需要添加自己新增的包路径，中间用<font color=red>英文逗号隔开</font></p><h2 id="Q4"><a href="#Q4" class="headerlink" title="Q4:"></a>Q4:</h2><p>/ <em>小白一个，仅留做自我学习记忆，时常修改，有不对不全之处还望不吝赐教！</em> /</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jeesite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jeesite学习笔记——焦点弹出窗口</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-08-29-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%84%A6%E7%82%B9%E5%BC%B9%E5%87%BA%E7%AA%97%E5%8F%A3.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-08-29-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%84%A6%E7%82%B9%E5%BC%B9%E5%87%BA%E7%AA%97%E5%8F%A3.html</url>
      
        <content type="html"><![CDATA[<h1 id="一，效果需求："><a href="#一，效果需求：" class="headerlink" title="一，效果需求："></a>一，效果需求：</h1><table>    <tr>        <td width=60%>            <img src="//cdn.foreversfj.com/image/blog/20190714/GBn0qiDhhjYq.png!blog">        </td>        <td>          当鼠标点击文本框或者标签后焦点移动到文本框时，弹出一个新的窗口，里面为多选框，然后还有查询和添加按钮，点击添加能添加内容，同时，在文本框中显示多选框的选择结果        </td>    </tr>    <tr>        <td colspan=2>            <img src="//cdn.foreversfj.com/image/blog/20190714/YKR6nWtKiL9J.png!blog">        </td>    </tr></table><h1 id="二，部分代码展示："><a href="#二，部分代码展示：" class="headerlink" title="二，部分代码展示："></a>二，部分代码展示：</h1><h2 id="1-由于是在添加内容模块弹出面板，所以要在form-jsp文件中给文本框添加焦点事件"><a href="#1-由于是在添加内容模块弹出面板，所以要在form-jsp文件中给文本框添加焦点事件" class="headerlink" title="1.由于是在添加内容模块弹出面板，所以要在form.jsp文件中给文本框添加焦点事件;"></a>1.由于是在添加内容模块弹出面板，所以要在form.jsp文件中给文本框添加焦点事件;</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-group"</span>&gt;</span><br><span class="line">    &lt;label <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-label"</span>&gt;研究方向：&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="controls"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;form:input path="researchname" id="researchname" onfocus="choseResearchList()" htmlEscape="false" maxlength="64" class="input-xlarge required"/</span>&gt;</span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"help-inline"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span> &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            //定义数组用于保存复选框选中的结果</span></span><br><span class="line"><span class="string">            var researchSelect = [];</span></span><br><span class="line"><span class="string">            //将复选框的结果存入数组</span></span><br><span class="line"><span class="string">            function researchSelectAddOrDel(id,researchname) &#123;</span></span><br><span class="line"><span class="string">                //定义标志变量，用于确定复选框是否选中</span></span><br><span class="line"><span class="string">                var isExtents = false, index = 0;</span></span><br><span class="line"><span class="string">                for (var i=0; i&lt;researchSelect.length; i++)&#123;</span></span><br><span class="line"><span class="string">                    if (researchSelect[i][1]==researchname)&#123;</span></span><br><span class="line"><span class="string">                        //如果数组中已有选中的结果，标志为true</span></span><br><span class="line"><span class="string">                        isExtents = true;</span></span><br><span class="line"><span class="string">                        index = i;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                if(isExtents)&#123;</span></span><br><span class="line"><span class="string">                    //标志为true，即数组中已有，就删除原来的，然后把现在选中的加进去</span></span><br><span class="line"><span class="string">                    researchSelect.splice(index,1);</span></span><br><span class="line"><span class="string">                &#125;else&#123;</span></span><br><span class="line"><span class="string">                    //标志为false，即数组中没有选中的结果，就把它加入数组</span></span><br><span class="line"><span class="string">                    researchSelect.push([id,researchname]);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                //每次更改就需要调用更新方法</span></span><br><span class="line"><span class="string">                researchSelectRefresh();</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            //researchName字符串更新（即文本框内容更新）</span></span><br><span class="line"><span class="string">            function researchSelectRefresh()&#123;</span></span><br><span class="line"><span class="string">                var researchName = "</span><span class="string">";</span></span><br><span class="line"><span class="string">                var researchDataRelation = "</span><span class="string">";</span></span><br><span class="line"><span class="string">                //提取research添加到researchName后面（即把数组内容用逗号隔开，合并成一个字符串）</span></span><br><span class="line"><span class="string">                for (var i=0; i&lt;researchSelect.length; i++)&#123;</span></span><br><span class="line"><span class="string">                    researchName += researchSelect[i][1] + "</span>,<span class="string">";</span></span><br><span class="line"><span class="string">                    researchDataRelation += researchSelect[i][0] + "</span>,<span class="string">";</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                //删除合并字符串researchName的最后一个逗号</span></span><br><span class="line"><span class="string">                researchName = researchName.substr(0, researchName.length - 1); </span></span><br><span class="line"><span class="string">                //由于第一次需要也会执行，此时数组为空，所以合并字符串中第一个位置为空，后面跟的逗号需要删除，否则合并字符串首位就有逗号</span></span><br><span class="line"><span class="string">                if(researchName.indexOf("</span>,<span class="string">") == 0)&#123;</span></span><br><span class="line"><span class="string">                    researchName = researchName.substr(1); </span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                //把最后拼接所得的researchName字符串值传递给表单数据researchname</span></span><br><span class="line">                $("#researchname").val(researchName);</span><br><span class="line">                $(<span class="string">"#researchDataRelation"</span>).val(researchDataRelation);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把researchName字符串分割成数组，以便在弹出的selectList面板中对比，已有的自动勾选</span></span><br><span class="line">            <span class="keyword">var</span> temp = $(<span class="string">"#researchname"</span>).val().split(<span class="string">","</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; temp.length ; i++)&#123;</span><br><span class="line">                <span class="comment">//把分割完成的数组顺序放入researchSelect数组</span></span><br><span class="line">                researchSelect.push([i,temp[i]]);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//弹出研究方向选择面板</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">choseResearchList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">//由于是弹出的面板，所以要自己写一个jsp</span></span><br><span class="line">                top.$.jBox.open(<span class="string">"iframe:$&#123;ctx&#125;/gsmis/research/selectList?pageSize=8"</span>, <span class="string">"添加研究方向"</span>,$(top.document).width()<span class="number">-700</span>,$(top.document).height()<span class="number">-165</span>,&#123;                            </span><br><span class="line">                    buttons:&#123;<span class="string">"确定"</span>:<span class="literal">true</span>&#125;, </span><br><span class="line">                    loaded:<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">                        $(<span class="string">".jbox-content"</span>, top.document).css(<span class="string">"overflow-y"</span>,<span class="string">"hidden"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;;</span><br><span class="line">        &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-弹出面板的JSP"><a href="#2-弹出面板的JSP" class="headerlink" title="2.弹出面板的JSP"></a>2.弹出面板的JSP</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> %&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">"/WEB-INF/views/include/taglib.jsp"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"decorator"</span> content=<span class="string">"default"</span>/&gt;</span><br><span class="line">    &lt;title&gt;研究方向选择&lt;/title&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        $(document).ready(function() &#123;</span><br><span class="line">            $(<span class="string">"input[name=id]"</span>).each(function()&#123;</span><br><span class="line">                <span class="comment">//定义变量（其实就是主面板的数组）用于接收主面板的文本框的传值</span></span><br><span class="line">                <span class="keyword">var</span> researchSelect = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//判断复面板（即弹出的面板）传值</span></span><br><span class="line">                <span class="keyword">if</span> (top.mainFrame.cmsMainFrame)&#123;</span><br><span class="line">                    <span class="comment">//如果复面板有值存在，就把它的值重新赋给researchSelect，即researchSelect自我更新</span></span><br><span class="line">                    researchSelect = top.mainFrame.cmsMainFrame.researchSelect;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">                    <span class="comment">//否则就把主面板的值赋给researchSelect</span></span><br><span class="line">                    researchSelect = top.mainFrame.researchSelect;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//遍历researchSelect，如果文本框中存在复选框的值，就勾选它</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;researchSelect.length; i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (researchSelect[i][<span class="number">1</span>]==$(<span class="keyword">this</span>).attr(<span class="string">"title"</span>))&#123;</span><br><span class="line">                        <span class="keyword">this</span>.checked = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//点击确定按钮返回复面板的值</span></span><br><span class="line">                $(<span class="keyword">this</span>).click(function()&#123;</span><br><span class="line">                    <span class="keyword">var</span> id = $(<span class="keyword">this</span>).val(), name = $(<span class="keyword">this</span>).attr(<span class="string">"title"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (top.mainFrame.cmsMainFrame)&#123;</span><br><span class="line">                        top.mainFrame.cmsMainFrame.researchSelectAddOrDel(id, name);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        top.mainFrame.researchSelectAddOrDel(id, name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="function">function <span class="title">page</span><span class="params">(n,s)</span></span>&#123;</span><br><span class="line">            $(<span class="string">"#pageNo"</span>).val(n);</span><br><span class="line">            $(<span class="string">"#pageSize"</span>).val(s);</span><br><span class="line">            $(<span class="string">"#searchForm"</span>).submit();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">function <span class="title">addNewResearch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            top.$.jBox.open(<span class="string">"iframe:$&#123;ctx&#125;/gsmis/research/form"</span>, <span class="string">"新增研究方向"</span>,$(top.document).width()-<span class="number">700</span>,$(top.document).height()-<span class="number">165</span>,&#123;                            </span><br><span class="line">                buttons:&#123;<span class="string">"确定"</span>:<span class="keyword">true</span>&#125;, </span><br><span class="line">                loaded:function(h)&#123;</span><br><span class="line">                    $(<span class="string">".jbox-content"</span>, top.document).css(<span class="string">"overflow-y"</span>,<span class="string">"hidden"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div style=<span class="string">"margin:10px;"</span>&gt;</span><br><span class="line">    &lt;form:form id=<span class="string">"searchForm"</span> modelAttribute=<span class="string">"research"</span> action=<span class="string">"$&#123;ctx&#125;/gsmis/research/selectList"</span> method=<span class="string">"post"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"breadcrumb form-search"</span>&gt;</span><br><span class="line">        &lt;input id=<span class="string">"pageNo"</span> name=<span class="string">"pageNo"</span> type=<span class="string">"hidden"</span> value=<span class="string">"$&#123;page.pageNo&#125;"</span>/&gt;</span><br><span class="line">        &lt;input id=<span class="string">"pageSize"</span> name=<span class="string">"pageSize"</span> type=<span class="string">"hidden"</span> value=<span class="string">"$&#123;page.pageSize&#125;"</span>/&gt;</span><br><span class="line">        &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"ul-form"</span>&gt;</span><br><span class="line">            &lt;li&gt;&lt;label&gt;研究方向：&lt;/label&gt;</span><br><span class="line">                &lt;form:input path=<span class="string">"name"</span> htmlEscape=<span class="string">"false"</span> maxlength=<span class="string">"50"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-small"</span>/&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"btns"</span>&gt;</span><br><span class="line">                &lt;input id=<span class="string">"btnSubmit"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary"</span> type=<span class="string">"submit"</span> value=<span class="string">"查询"</span>/&gt;</span><br><span class="line">                &lt;input id=<span class="string">"btnSubmit"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary"</span> type=<span class="string">"submit"</span> onclick=<span class="string">"addNewResearch()"</span> value=<span class="string">"添加"</span> /&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li class="clearfix"&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/form:form&gt;</span><br><span class="line">    &lt;table id=<span class="string">"contentTable"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"table table-striped table-bordered table-condensed"</span>&gt;</span><br><span class="line">        &lt;thead&gt;&lt;tr&gt;</span><br><span class="line">            &lt;th style="text-align:center;"&gt;选择&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;研究方向&lt;/th&gt;        </span><br><span class="line">         &lt;/tr&gt;&lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;c:forEach items=<span class="string">"$&#123;page.list&#125;"</span> <span class="keyword">var</span>=<span class="string">"research"</span>&gt;&lt;tr&gt;</span><br><span class="line">                &lt;td style=<span class="string">"text-align:center;"</span>&gt;</span><br><span class="line">                    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"id"</span> value=<span class="string">"$&#123;research.id&#125;"</span> title=<span class="string">"$&#123;fns:abbr(research.name,40)&#125;"</span> /&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td id="researchlabel"&gt;$&#123;research.name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;&lt;/c:forEach&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;div class="pagination"&gt;$&#123;page&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>/ <em>小白一个，仅留做自我学习记忆，时常修改，有不对不全之处还望不吝赐教！</em> /</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jeesite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jeesite学习笔记——邮箱、手机号和银行卡号验证</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-08-29-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E9%82%AE%E7%AE%B1%E3%80%81%E6%89%8B%E6%9C%BA%E5%8F%B7%E5%92%8C%E9%93%B6%E8%A1%8C%E5%8D%A1%E5%8F%B7%E9%AA%8C%E8%AF%81.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-08-29-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E9%82%AE%E7%AE%B1%E3%80%81%E6%89%8B%E6%9C%BA%E5%8F%B7%E5%92%8C%E9%93%B6%E8%A1%8C%E5%8D%A1%E5%8F%B7%E9%AA%8C%E8%AF%81.html</url>
      
        <content type="html"><![CDATA[<h1 id="一，邮箱验证"><a href="#一，邮箱验证" class="headerlink" title="一，邮箱验证"></a>一，邮箱验证</h1><h2 id="1-body部分："><a href="#1-body部分：" class="headerlink" title="1.body部分："></a>1.body部分：</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-group"</span>&gt;</span><br><span class="line">    &lt;label class="control-label"&gt;邮箱：&lt;/label&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"controls"</span>&gt;</span><br><span class="line">        &lt;form:input path=<span class="string">"email"</span> id=<span class="string">"email"</span> value=<span class="string">""</span> oninput=<span class="string">"checkEmail()"</span> htmlEscape=<span class="string">"false"</span> maxlength=<span class="string">"64"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-xlarge required"</span>/&gt;</span><br><span class="line">        &lt;span class="help-inline" id="email_notice" &gt;&lt;font color="red"&gt;*&lt;/font&gt; &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="2-函数方法："><a href="#2-函数方法：" class="headerlink" title="2.函数方法："></a>2.函数方法：</h2><p><b>正则表达式为：<code>emailReg = /^\w+@[a-zA-Z0-9]{2,10}(?:\.[a-z]{2,4}){1,3}$/;</code> </b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//邮箱验证</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkEmail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> emailReg = <span class="regexp">/^\w+@[a-zA-Z0-9]&#123;2,10&#125;(?:\.[a-z]&#123;2,4&#125;)&#123;1,3&#125;$/</span>;</span><br><span class="line">    <span class="keyword">var</span> emailResult = email.value;</span><br><span class="line">    <span class="keyword">if</span>(emailReg.test(emailResult))&#123;</span><br><span class="line">        email_notice.innerHTML = <span class="string">'邮箱验证通过！'</span>;</span><br><span class="line">        email_notice.style.color = <span class="string">'green'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        email_notice.innerHTML = <span class="string">'邮箱验证未通过，请重新输入！'</span>;</span><br><span class="line">        email_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二，手机号验证"><a href="#二，手机号验证" class="headerlink" title="二，手机号验证"></a>二，手机号验证</h1><h2 id="1-body部分：-1"><a href="#1-body部分：-1" class="headerlink" title="1.body部分："></a>1.body部分：</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-group"</span>&gt;</span><br><span class="line">    &lt;label class="control-label"&gt;手机号：&lt;/label&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"controls"</span>&gt;</span><br><span class="line">        &lt;form:input path=<span class="string">"phone"</span> id=<span class="string">"phone"</span> value=<span class="string">""</span> oninput=<span class="string">"checkPhone()"</span> htmlEscape=<span class="string">"false"</span> maxlength=<span class="string">"11"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-xlarge required"</span>/&gt;</span><br><span class="line">        &lt;span class="help-inline" id="phone_notice" &gt;&lt;font color="red"&gt;*&lt;/font&gt; &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="2-函数方法：-1"><a href="#2-函数方法：-1" class="headerlink" title="2.函数方法："></a>2.函数方法：</h2><p><b>正则表达式为：</b><br/><b><code>phoneReg = /^(13[0-9]{9})|(18[0-9]{9})|(14[0-9]{9})|(17[0-9]{9})|(15[0-9]{9})$/;</code></b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手机号码验证</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPhone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> phoneReg = <span class="regexp">/^(13[0-9]&#123;9&#125;)|(18[0-9]&#123;9&#125;)|(14[0-9]&#123;9&#125;)|(17[0-9]&#123;9&#125;)|(15[0-9]&#123;9&#125;)$/</span>;</span><br><span class="line">    <span class="keyword">var</span> phoneResult = phone.value;</span><br><span class="line">    <span class="keyword">if</span>(phoneReg.test(phoneResult))&#123;</span><br><span class="line">        phone_notice.innerHTML = <span class="string">'手机号码验证通过！'</span>;</span><br><span class="line">        phone_notice.style.color = <span class="string">'green'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        phone_notice.innerHTML = <span class="string">'手机号码验证未通过！'</span>;</span><br><span class="line">        phone_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三，银行卡号验证："><a href="#三，银行卡号验证：" class="headerlink" title="三，银行卡号验证："></a>三，银行卡号验证：</h1><h2 id="1-body部分：-2"><a href="#1-body部分：-2" class="headerlink" title="1.body部分："></a>1.body部分：</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-group"</span>&gt;</span><br><span class="line">    &lt;label class="control-label"&gt;银行卡号：&lt;/label&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"controls"</span>&gt;</span><br><span class="line">        &lt;form:input path=<span class="string">"bankcardnumber"</span> id=<span class="string">"bankcardnumber"</span> oninput=<span class="string">"checkBankCardNumber()"</span> htmlEscape=<span class="string">"false"</span> maxlength=<span class="string">"64"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-xlarge required"</span>/&gt;</span><br><span class="line">        &lt;span class="help-inline" id="bankcardnumber_notice" &gt;&lt;font color="red"&gt;*&lt;/font&gt; &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="2-函数方法-包含Luhm验证）"><a href="#2-函数方法-包含Luhm验证）" class="headerlink" title="2.函数方法:(包含Luhm验证）"></a>2.函数方法:(包含Luhm验证）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//银行卡号验证</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkBankCardNumber</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//长度校验</span></span><br><span class="line">    <span class="keyword">var</span> bankcardnumberResult = bankcardnumber.value;</span><br><span class="line">    <span class="keyword">if</span>(bankcardnumberResult == <span class="string">""</span> || bankcardnumberResult.length &lt; <span class="number">16</span> || bankcardnumberResult.length &gt; <span class="number">19</span>) &#123;</span><br><span class="line">        bankcardnumber_notice.innerHTML = <span class="string">"银行卡号位数必须在16~19之间，请完整输入银行卡号！"</span>;</span><br><span class="line">        bankcardnumber_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开头6位校验</span></span><br><span class="line">    <span class="keyword">var</span> strBin=<span class="string">"10,18,30,35,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,62,65,68,69,84,87,88,94,95,98,99"</span>;    </span><br><span class="line">    <span class="keyword">if</span>(strBin.indexOf(bankcardnumberResult.substring(<span class="number">0</span>, <span class="number">2</span>)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        bankcardnumber_notice.innerHTML = <span class="string">"银行卡号开头6位不符合规范，请检查后重新输入！"</span>;</span><br><span class="line">        bankcardnumber_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//全数字校验</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="regexp">/^\d*$/</span>;</span><br><span class="line">    <span class="keyword">if</span>(!num.exec(bankcardnumberResult)) &#123;</span><br><span class="line">        bankcardnumber_notice.innerHTML = <span class="string">"银行卡号必须全为数字，请检查后重新输入！"</span>;</span><br><span class="line">        bankcardnumber_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Luhm验证</span></span><br><span class="line">    <span class="keyword">var</span> lastNum=bankcardnumberResult.substr(bankcardnumberResult.length<span class="number">-1</span>,<span class="number">1</span>);<span class="comment">//取出最后一位（与luhm进行比较）</span></span><br><span class="line">    <span class="keyword">var</span> first15Num=bankcardnumberResult.substr(<span class="number">0</span>,bankcardnumberResult.length<span class="number">-1</span>);<span class="comment">//前15或18位</span></span><br><span class="line">    <span class="keyword">var</span> newArr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=first15Num.length<span class="number">-1</span>;i&gt;<span class="number">-1</span>;i--)&#123;    <span class="comment">//前15或18位倒序存进数组</span></span><br><span class="line">        newArr.push(first15Num.substr(i,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arrJiShu = <span class="keyword">new</span> <span class="built_in">Array</span>();                    <span class="comment">//奇数位*2的积 &lt;9</span></span><br><span class="line">    <span class="keyword">var</span> arrJiShu2 = <span class="keyword">new</span> <span class="built_in">Array</span>();                <span class="comment">//奇数位*2的积 &gt;9</span></span><br><span class="line">    <span class="keyword">var</span> arrOuShu = <span class="keyword">new</span> <span class="built_in">Array</span>();                    <span class="comment">//偶数位数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; newArr.length; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>( (j+<span class="number">1</span>)%<span class="number">2</span> == <span class="number">1</span>) &#123;                            <span class="comment">//奇数位</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">parseInt</span>(newArr[j])*<span class="number">2</span> &lt; <span class="number">9</span>)</span><br><span class="line">                arrJiShu.push(<span class="built_in">parseInt</span>(newArr[j])*<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                arrJiShu2.push(<span class="built_in">parseInt</span>(newArr[j])*<span class="number">2</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>                                    <span class="comment">//偶数位</span></span><br><span class="line">            arrOuShu.push(newArr[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> jishu_child1 = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//奇数位*2 &gt;9 的分割之后的数组个位数</span></span><br><span class="line">    <span class="keyword">var</span> jishu_child2 = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//奇数位*2 &gt;9 的分割之后的数组十位数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> h=<span class="number">0</span>; h&lt;arrJiShu2.length; h++) &#123;</span><br><span class="line">        jishu_child1.push(<span class="built_in">parseInt</span>(arrJiShu2[h])%<span class="number">10</span>);</span><br><span class="line">        jishu_child2.push(<span class="built_in">parseInt</span>(arrJiShu2[h])/<span class="number">10</span>);</span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">var</span> sumJiShu = <span class="number">0</span>; <span class="comment">//奇数位*2 &lt; 9 的数组之和</span></span><br><span class="line">    <span class="keyword">var</span> sumOuShu = <span class="number">0</span>; <span class="comment">//偶数位数组之和</span></span><br><span class="line">    <span class="keyword">var</span> sumJiShuChild1 = <span class="number">0</span>; <span class="comment">//奇数位*2 &gt;9 的分割之后的数组个位数之和</span></span><br><span class="line">    <span class="keyword">var</span> sumJiShuChild2 = <span class="number">0</span>; <span class="comment">//奇数位*2 &gt;9 的分割之后的数组十位数之和</span></span><br><span class="line">    <span class="keyword">var</span> sumTotal = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> m = <span class="number">0</span>; m&lt;arrJiShu.length; m++)&#123;</span><br><span class="line">        sumJiShu=sumJiShu+<span class="built_in">parseInt</span>(arrJiShu[m]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> n=<span class="number">0</span>; n&lt;arrOuShu.length; n++)&#123;</span><br><span class="line">        sumOuShu = sumOuShu+<span class="built_in">parseInt</span>(arrOuShu[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> p=<span class="number">0</span>; p&lt;jishu_child1.length; p++) &#123;</span><br><span class="line">        sumJiShuChild1 = sumJiShuChild1 + <span class="built_in">parseInt</span>(jishu_child1[p]);</span><br><span class="line">        sumJiShuChild2 = sumJiShuChild2 + <span class="built_in">parseInt</span>(jishu_child2[p]);</span><br><span class="line">    &#125;      </span><br><span class="line">    <span class="comment">//计算总和</span></span><br><span class="line">    sumTotal = <span class="built_in">parseInt</span>(sumJiShu) + <span class="built_in">parseInt</span>(sumOuShu) + <span class="built_in">parseInt</span>(sumJiShuChild1) + <span class="built_in">parseInt</span>(sumJiShuChild2);</span><br><span class="line">    <span class="comment">//计算Luhm值</span></span><br><span class="line">    <span class="keyword">var</span> k= <span class="built_in">parseInt</span>(sumTotal)%<span class="number">10</span>==<span class="number">0</span>?<span class="number">10</span>:<span class="built_in">parseInt</span>(sumTotal)%<span class="number">10</span>;        </span><br><span class="line">    <span class="keyword">var</span> luhm= <span class="number">10</span>-k;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(lastNum==luhm)&#123;</span><br><span class="line">        bankcardnumber_notice.innerHTML =<span class="string">"银行卡号验证通过！"</span>;</span><br><span class="line">        bankcardnumber_notice.style.color = <span class="string">'green'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        bankcardnumber_notice.innerHTML =<span class="string">"银行卡号不合法，请检查后重新输入！"</span>;</span><br><span class="line">        bankcardnumber_notice.style.color = <span class="string">'red'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、添加提交条件"><a href="#四、添加提交条件" class="headerlink" title="四、添加提交条件"></a>四、添加提交条件</h1><p><strong>验证符合则提交，不符合则返回</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">submitHandler: <span class="function"><span class="keyword">function</span> (<span class="params">form</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(checkEmail())&#123;</span><br><span class="line">        <span class="keyword">if</span>(checkPhone()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(checkBankCardNumber())&#123;</span><br><span class="line">                loading(<span class="string">'正在提交，请稍等...'</span>);</span><br><span class="line">                form.submit();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">"银行卡号验证未通过! "</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">"手机号码验证未通过! "</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">"邮箱验证未通过! "</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/ <em>小白一个，仅留做自我学习记忆，时常修改，有不对不全之处还望不吝赐教！</em> /</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jeesite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jeesite学习笔记——页面美化</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-08-17-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-08-17-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<h1 id="一，下拉列表："><a href="#一，下拉列表：" class="headerlink" title="一，下拉列表："></a>一，下拉列表：</h1><h2 id="1-文本框加长："><a href="#1-文本框加长：" class="headerlink" title="1.文本框加长："></a>1.文本框加长：</h2><p><img src="//cdn.foreversfj.com/image/blog/20190714/XFcm4QAVkJ9Y.png!blog" alt=""></p><p><strong>此处文本框较短，原因是代码中选择的类控制为输入迷你</strong></p><p><strong>将其改为输入XLARGE后变长</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/UhYkmWFtktrH.png!blog" alt=""></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-group"</span>&gt;</span><br><span class="line">    &lt;label class="control-label"&gt;专业：&lt;/label&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"controls"</span>&gt;</span><br><span class="line">        &lt;form:select path=<span class="string">"major"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-xlarge"</span> &gt;</span><br><span class="line">            &lt;form:options items=<span class="string">"$&#123;majorname&#125;"</span> itemLabel=<span class="string">"name"</span> itemValue=<span class="string">"id"</span> htmlEscape=<span class="string">"false"</span> /&gt;</span><br><span class="line">        &lt;/form:select&gt;                </span><br><span class="line">        &lt;span class="help-inline"&gt;&lt;font color="red"&gt;*&lt;/font&gt; &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="2。"><a href="#2。" class="headerlink" title="2。"></a>2。</h2><p>/ <em>小白一个，仅留做自我学习记忆，时常修改，有不对不全之处还望不吝赐教！</em> /</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jeesite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jeesite学习笔记——导入与导出功能</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-07-19-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA%E5%8A%9F%E8%83%BD.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-07-19-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA%E5%8A%9F%E8%83%BD.html</url>
      
        <content type="html"><![CDATA[<h1 id="导出功能"><a href="#导出功能" class="headerlink" title="导出功能"></a>导出功能</h1><h2 id="1-在List-jsp文件的头部添加按钮触发事件"><a href="#1-在List-jsp文件的头部添加按钮触发事件" class="headerlink" title="1.在List.jsp文件的头部添加按钮触发事件"></a>1.在<code>List.jsp</code>文件的头部添加按钮触发事件</h2><p><img src="//cdn.foreversfj.com/image/blog/20190714/jpHObsdmtUV6.png!blog" alt=""></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    $(document).ready(function() &#123;</span><br><span class="line">        $(<span class="string">"#btnExport"</span>).click(function()&#123;</span><br><span class="line">            top.$.jBox.confirm(<span class="string">"确认要导出报名信息数据吗？"</span>,<span class="string">"系统提示"</span>,function(v,h,f)&#123;</span><br><span class="line">                <span class="keyword">if</span>(v==<span class="string">"ok"</span>)&#123;</span><br><span class="line">                    $(<span class="string">"#searchForm"</span>).attr(<span class="string">"action"</span>,<span class="string">"$&#123;ctx&#125;/test/testMeet/export"</span>);</span><br><span class="line">                    $(<span class="string">"#searchForm"</span>).submit();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,&#123;buttonsFocus:<span class="number">1</span>&#125;);</span><br><span class="line">            top.$(<span class="string">'.jbox-body .jbox-icon'</span>).css(<span class="string">'top'</span>,<span class="string">'55px'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">"#btnImport"</span>).click(function()&#123;</span><br><span class="line">            $.jBox($(<span class="string">"#importBox"</span>).html(), &#123;title:<span class="string">"导入数据"</span>, buttons:&#123;<span class="string">"关闭"</span>:<span class="keyword">true</span>&#125;, </span><br><span class="line">                bottomText:<span class="string">"导入文件不能超过5M，仅允许导入“xls”或“xlsx”格式文件！"</span>&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-在controller-java文件中添加“导出”方法"><a href="#2-在controller-java文件中添加“导出”方法" class="headerlink" title="2.在controller.java文件中添加“导出”方法"></a>2.在<code>controller.java</code>文件中添加“导出”方法</h2><p><img src="//cdn.foreversfj.com/image/blog/20190714/Ed2p1nMqxVtx.png!blog" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导出报名信息数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redirectAttributes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"test:testMeet:view"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"export"</span>, method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">exportFile</span><span class="params">(TestMeet testMeet, HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String fileName = <span class="string">"报名信息数据"</span>+DateUtils.getDate(<span class="string">"yyyyMMddHHmmss"</span>)+<span class="string">".xlsx"</span>;</span><br><span class="line">        Page&lt;TestMeet&gt; page = testMeetService.findPage(<span class="keyword">new</span> Page&lt;TestMeet&gt;(request, response, -<span class="number">1</span>), testMeet);</span><br><span class="line">        <span class="keyword">new</span> ExportExcel(<span class="string">"报名信息数据"</span>, TestMeet<span class="class">.<span class="keyword">class</span>).<span class="title">setDataList</span>(<span class="title">page</span>.<span class="title">getList</span>()).<span class="title">write</span>(<span class="title">response</span>, <span class="title">fileName</span>).<span class="title">dispose</span>()</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        addMessage(redirectAttributes, <span class="string">"导出报名信息失败！失败信息："</span>+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:"</span> + adminPath + <span class="string">"/test/testMeet/?repage"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-在实体类-entity-中的对应java文件的获得方法部分注释需要导出的数据，哪个字段需要导出就在它的获得方法中注释"><a href="#3-在实体类-entity-中的对应java文件的获得方法部分注释需要导出的数据，哪个字段需要导出就在它的获得方法中注释" class="headerlink" title="3.在实体类(entity)中的对应java文件的获得方法部分注释需要导出的数据，哪个字段需要导出就在它的获得方法中注释"></a>3.在实体类(entity)中的对应java文件的获得方法部分注释需要导出的数据，哪个字段需要导出就在它的获得方法中注释</h2><p><img src="//cdn.foreversfj.com/image/blog/20190714/98SA1BB0A1s7.png!blog" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExcelField</span>(title=<span class="string">"电话"</span>,align=<span class="number">2</span>, sort=<span class="number">20</span>)</span><br><span class="line">Title为导出的字段标题</span><br><span class="line">align为对齐类型：<span class="number">0</span>为自动，<span class="number">1</span>为靠左，<span class="number">2</span>为居中，<span class="number">3</span>为靠右</span><br><span class="line">sort为排序</span><br></pre></td></tr></table></figure><h2 id="4-在List-jsp文件的-lt-form：form-gt-部分添加导出按钮"><a href="#4-在List-jsp文件的-lt-form：form-gt-部分添加导出按钮" class="headerlink" title="4.在List.jsp文件的&lt;form：form&gt;部分添加导出按钮"></a>4.在<code>List.jsp</code>文件的<code>&lt;form：form&gt;</code>部分添加导出按钮</h2><p><img src="//cdn.foreversfj.com/image/blog/20190714/XuRnrvoWAQJt.png!blog" alt=""></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 注意插入的按钮代码位置要在<span class="class"><span class="keyword">class</span></span>=<span class="string">"btns"</span>这个li标签中，如果插在外面则不会起作用--&gt;</span><br><span class="line">&lt;input id=<span class="string">"btnExport"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary"</span> type=<span class="string">"button"</span> value=<span class="string">"导出"</span>/&gt;</span><br><span class="line">&lt;input id=<span class="string">"btnImport"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary"</span> type=<span class="string">"button"</span> value=<span class="string">"导入"</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="5-导出方法的代码基本可以复制，注意文件名和路径即可"><a href="#5-导出方法的代码基本可以复制，注意文件名和路径即可" class="headerlink" title="5.导出方法的代码基本可以复制，注意文件名和路径即可"></a>5.导出方法的代码基本可以复制，注意文件名和路径即可</h2><h1 id="导入功能"><a href="#导入功能" class="headerlink" title="导入功能"></a>导入功能</h1><h2 id="1-在list-jsp文件-lt-body-gt-的开始位置添加“导入”信息弹出框"><a href="#1-在list-jsp文件-lt-body-gt-的开始位置添加“导入”信息弹出框" class="headerlink" title="1.在list.jsp文件&lt;body&gt;的开始位置添加“导入”信息弹出框"></a>1.在<code>list.jsp</code>文件<code>&lt;body&gt;</code>的开始位置添加“导入”信息弹出框</h2><p><img src="//cdn.foreversfj.com/image/blog/20190714/bA8cf1quYFlb.png!blog" alt=""></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"importBox"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"hide"</span>&gt;</span><br><span class="line">        &lt;form id=<span class="string">"importForm"</span> action=<span class="string">"$&#123;ctx&#125;/test/testMeet/import"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span></span><br><span class="line">            <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-search"</span> style=<span class="string">"padding-left:20px;text-align:center;"</span> onsubmit=<span class="string">"loading('正在导入，请稍等...');"</span>&gt;&lt;br/&gt;</span><br><span class="line">            &lt;input id=<span class="string">"uploadFile"</span> name=<span class="string">"file"</span> type=<span class="string">"file"</span> style=<span class="string">"width:330px"</span>/&gt;&lt;br/&gt;&lt;br/&gt;　　</span><br><span class="line">            &lt;input id=<span class="string">"btnImportSubmit"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary"</span> type=<span class="string">"submit"</span> value=<span class="string">"   导    入   "</span>/&gt;</span><br><span class="line">            &lt;a href="$&#123;ctx&#125;/test/testMeet/import/template"&gt;下载模板&lt;/a&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="2-在list-jsp文件头部添加按钮触发事件（同导出）"><a href="#2-在list-jsp文件头部添加按钮触发事件（同导出）" class="headerlink" title="2.在list.jsp文件头部添加按钮触发事件（同导出）"></a>2.在<code>list.jsp</code>文件头部添加按钮触发事件（同导出）</h2><h2 id="3-在list-jsp文件的-lt-form：form-gt-部分添加导入按钮（同导出）"><a href="#3-在list-jsp文件的-lt-form：form-gt-部分添加导入按钮（同导出）" class="headerlink" title="3.在list.jsp文件的&lt;form：form&gt;部分添加导入按钮（同导出）"></a>3.在<code>list.jsp</code>文件的<code>&lt;form：form&gt;</code>部分添加导入按钮（同导出）</h2><h2 id="4-在controller-java文件中添加“导入”方法"><a href="#4-在controller-java文件中添加“导入”方法" class="headerlink" title="4.在controller.java文件中添加“导入”方法"></a>4.在<code>controller.java</code>文件中添加“导入”方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导入报名信息数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redirectAttributes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"test:testMeet:edit"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"import"</span>, method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">importFile</span><span class="params">(MultipartFile file, RedirectAttributes redirectAttributes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Global.isDemoMode())&#123;</span><br><span class="line">        addMessage(redirectAttributes, <span class="string">"演示模式，不允许操作！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:"</span> + adminPath + <span class="string">"/test/testMeet/?repage"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> successNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> failureNum = <span class="number">0</span>;</span><br><span class="line">        StringBuilder failureMsg = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        ImportExcel ei = <span class="keyword">new</span> ImportExcel(file, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        List&lt;TestMeet&gt; list = ei.getDataList(TestMeet<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (TestMeet testMeet : list)&#123;                </span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                testMeetService.save(testMeet);</span><br><span class="line">                successNum++;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(ConstraintViolationException ex)&#123;</span><br><span class="line">                failureMsg.append(<span class="string">"&lt;br/&gt;姓名 "</span>+testMeet.getName()+<span class="string">" 导入失败："</span>);</span><br><span class="line">                List&lt;String&gt; messageList = BeanValidators.extractPropertyAndMessageAsList(ex, <span class="string">": "</span>);  <span class="comment">//告诉你出错原因</span></span><br><span class="line">                <span class="keyword">for</span> (String message : messageList)&#123;</span><br><span class="line">                    failureMsg.append(message+<span class="string">"; "</span>);</span><br><span class="line">                    failureNum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                failureMsg.append(<span class="string">"&lt;br/&gt;姓名 "</span>+testMeet.getName()+<span class="string">" 导入失败："</span>+ex.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (failureNum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            failureMsg.insert(<span class="number">0</span>, <span class="string">"，失败 "</span>+failureNum+<span class="string">" 条信息，导入信息如下："</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        addMessage(redirectAttributes, <span class="string">"已成功导入 "</span>+successNum+<span class="string">" 条信息"</span>+failureMsg);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        addMessage(redirectAttributes, <span class="string">"导入报名信息失败！失败信息："</span>+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:"</span> + adminPath + <span class="string">"/sys/user/list?repage"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong><br>&emsp;&emsp;这这一部分需要根据自己的数据库表的实际字段情况自由更改代码匹配，具体代码内容不能普遍适用，此处代码只是最简单的匹配，具体更精确的仍有待加深</p></blockquote><h2 id="5-在导入方法后面添加导入模板的下载内容"><a href="#5-在导入方法后面添加导入模板的下载内容" class="headerlink" title="5.在导入方法后面添加导入模板的下载内容"></a>5.在导入方法后面添加导入模板的下载内容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载导入用户数据模板</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redirectAttributes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"test:testMeet:view"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"import/template"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">importFileTemplate</span><span class="params">(HttpServletResponse response, RedirectAttributes redirectAttributes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String fileName = <span class="string">"报名信息导入模板.xlsx"</span>;</span><br><span class="line">        List&lt;TestMeet&gt; list = Lists.newArrayList(); </span><br><span class="line">        TestMeet testMeet = <span class="keyword">new</span> TestMeet();</span><br><span class="line">        testMeet.setName(<span class="string">"张三风"</span>);</span><br><span class="line">            testMeet.setSex(<span class="string">"男"</span>);</span><br><span class="line">        testMeet.setTel(<span class="string">"18978395032"</span>);</span><br><span class="line">        testMeet.setDepart(<span class="string">"1"</span>);</span><br><span class="line">        testMeet.setTimex(<span class="number">1</span>);</span><br><span class="line">        testMeet.setTrans(<span class="keyword">null</span>);</span><br><span class="line">        testMeet.setNum(<span class="string">"2016214268"</span>);</span><br><span class="line">        testMeet.setStationId(<span class="string">"3"</span>);</span><br><span class="line">        testMeet.setRemarks(<span class="string">"1"</span>);</span><br><span class="line">        list.add(testMeet);</span><br><span class="line">        <span class="keyword">new</span> ExportExcel(<span class="string">"用户数据"</span>, TestMeet<span class="class">.<span class="keyword">class</span>, 2).<span class="title">setDataList</span>(<span class="title">list</span>).<span class="title">write</span>(<span class="title">response</span>, <span class="title">fileName</span>).<span class="title">dispose</span>()</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        addMessage(redirectAttributes, <span class="string">"导入模板下载失败！失败信息："</span>+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:"</span> + adminPath + <span class="string">"/test/testMeet/list?repage"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><b>注意</b>:<br>这一部分需要根据自己的数据库表的而实际字段情况添加</p></blockquote><p>/ <em>小白一个，仅留做自我学习记忆，时常修改，有不对不全之处还望不吝赐教！</em> /</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jeesite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jeesite学习笔记——部分代码功能说明</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-07-19-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81%E5%8A%9F%E8%83%BD%E8%AF%B4%E6%98%8E.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-07-19-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81%E5%8A%9F%E8%83%BD%E8%AF%B4%E6%98%8E.html</url>
      
        <content type="html"><![CDATA[<h1 id="实体文件（-java）"><a href="#实体文件（-java）" class="headerlink" title="实体文件（*.java）"></a>实体文件（*.java）</h1><table>    <tr>        <td width=65%><img src="//cdn.foreversfj.com/image/blog/20190714/CW2u9cuJAHAl.png!blog"></td>        <td><b>红框内表示限制的变量长度（不能为负）及出错后的反馈信息;注释后表示对变量没有限制，变量可空</b></td>    </tr>    <tr>        <td><img src="//cdn.foreversfj.com/image/blog/20190714/GRLbmlGQe4jS.png!blog"></td>        <td><b>定义的变量，用于保存数据库中的字段值，每一个变量都有对应的get和set方法</b></td>    </tr>    <tr>        <td><img src="//cdn.foreversfj.com/image/blog/20190714/h3Fq8o1xwV5f.png!blog"></td>        <td><b>需要导出和导入的字段信息。哪个字段需要导出，或者被导入，就在它的get上面注入这一行</b></td>    </tr></table><h1 id="SQL文件（-Dao-xml）"><a href="#SQL文件（-Dao-xml）" class="headerlink" title="SQL文件（* Dao.xml）"></a>SQL文件（* Dao.xml）</h1><table>    <tr>        <td colspan=2 width=65%><img src="//cdn.foreversfj.com/image/blog/20190714/ioQJ8HY05uHR.png!blog"></td>        <td><b>数据传输，将数据库中对应表的字段值赋给实体表中的变量</b><br/>一个字段值对应一个变量</td>    </tr>    <tr>        <td colspan=2><img src="//cdn.foreversfj.com/image/blog/20190714/sXBi0HKs91nL.png!blog"></td>        <td><b>表连接部分，对表间进行连接，一般都是通过id进行连接</b></td>    </tr>    <tr>        <td colspan=2><img src="//cdn.foreversfj.com/image/blog/20190714/gP3macCriTow.png!blog"></td>        <td><b>get方法，从数据库中取出数据</b></td>    </tr>    <tr>        <td colspan=2><img src="//cdn.foreversfj.com/image/blog/20190714/adKueO7Y1HAm.png!blog"></td>        <td><b>查询匹配部分</b></td>    </tr>    <tr>        <td colspan=2><img src="//cdn.foreversfj.com/image/blog/20190714/YuvlOuhdeVqG.png!blog"></td>        <td><b>对数据分页</b></td>    </tr>    <tr>        <td><img src="//cdn.foreversfj.com/image/blog/20190714/UdSuo2GF8siR.png!blog"></td>        <td><img src="//cdn.foreversfj.com/image/blog/20190714/PwetflvSQSES.png!blog"></td>        <td><b>当前台有插入和修改操作时,在数据库中对数据进行对应操</b></td>    </tr>    <tr>        <td colspan=2><img src="//cdn.foreversfj.com/image/blog/20190714/KChvv8kXKCjT.png!blog"></td>        <td><b>删除前台数据，其实是把数据库中对应记录的del_flag字段值改为1，数据库中这条记录并没有删除</b></td>    </tr></table><h1 id="内容管理文件（-Form-jsp）"><a href="#内容管理文件（-Form-jsp）" class="headerlink" title="内容管理文件（* Form.jsp）"></a>内容管理文件（* Form.jsp）</h1><table>    <tr>        <td width=65%><img src="//cdn.foreversfj.com/image/blog/20190714/lQ41qUtnPuMQ.png!blog"></td>        <td><b>红框内为对输入内容的管理，将输入的内容传给path ;末尾是对数据的限制红圈内的required表示数据不可空，删掉后数据可空，此外还有INT 等数据类型的限制</b></td>    </tr>    <tr>        <td><img src="//cdn.foreversfj.com/image/blog/20190714/1VnUvJo6j0Fg.png!blog"></td>        <td><b>框内是表示在输入框的右侧的一个红色的警示小图标“ \* ”，这是一个span标签</b></td>    </tr></table><p><em>小白一个，仅留做自我学习记忆，时常修改，有不对不全之处还望不吝赐教！</em></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jeesite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jeesite学习笔记——主从表及表间传值（一对多）</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-07-13-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%B8%BB%E4%BB%8E%E8%A1%A8%E5%8F%8A%E8%A1%A8%E9%97%B4%E4%BC%A0%E5%80%BC%EF%BC%88%E4%B8%80%E5%AF%B9%E5%A4%9A%EF%BC%89.html"/>
      <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E5%9E%8B/2018-07-13-/JeeSite/jeesite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%B8%BB%E4%BB%8E%E8%A1%A8%E5%8F%8A%E8%A1%A8%E9%97%B4%E4%BC%A0%E5%80%BC%EF%BC%88%E4%B8%80%E5%AF%B9%E5%A4%9A%EF%BC%89.html</url>
      
        <content type="html"><![CDATA[<h1 id="一，自动生成框架："><a href="#一，自动生成框架：" class="headerlink" title="一，自动生成框架："></a>一，自动生成框架：</h1><p><strong>注意要在生成表前，要在jeesite.properties文件中修改数据库<font color=red>用户名和密码</font>，同时修改最后一行的文件生成路径，每一个符号<code>：</code>和<code>\</code>前加<code>\</code></strong></p><h2 id="1-如下图所示，设计两张表："><a href="#1-如下图所示，设计两张表：" class="headerlink" title="1. 如下图所示，设计两张表："></a>1. 如下图所示，设计两张表：</h2><table>    <tr>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/Pq7irL83P0jA.png!blog">        </td>        <td>            <b><font size=4>1.设计两张表</font></b><br/>            tob_case和tob_logistics<br/>            tob_case是父表<br/>            tob_logistics 是子表<br/>            <b><font size=4>子表调用父表的数据，不能改变父表的任何内容</font></b><br/>            <b><font size=4>调用数据的所有操作都在子表的代码中进行</font></b><br/>        </td>    </tr></table><h2 id="2-代码自动生成-图片可点击放大）"><a href="#2-代码自动生成-图片可点击放大）" class="headerlink" title="2. 代码自动生成:(图片可点击放大）"></a>2. 代码自动生成:(图片可点击放大）</h2><table>    <tr>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/8zrAcJLQxve9.png!blog">        </td>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/F3BEckMHTcG8.png!blog">        </td>        <td>            1.代码生成模块<br/>            2.业务表配置<br/>            3.业务表添加<br/>            4.添加需要生成的数据表        </td>    </tr>    <tr>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/ENpUycOmkWAP.png!blog">        </td>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/BtmI6j9yFI5x.png!blog">        </td>        <td>            1.更改说明为表头<br/>            2.如果有父表就更改，没有就不改<br/>            3.子表中要添加父表表名和外键<br/>            4.修改外键的Java的属性名称为父表中连接的字段        </td>    </tr>    <tr>        <td colspan=2>            <img src="//cdn.foreversfj.com/image/blog/20190714/QsyyX9jCGk17.png!blog">        </td>        <td>            <b>1.在一对多中，如果需要在系统页面中显示子表的信息，则在生成方案中必须先添加子表的方案;<b><br/>            <b>2.如果不需要显示子表信息，就不用添加子表方案;<b><br/>            <b>3.在子表方案添加完成后就点击保存并生成代码<b><br/>        </td>    </tr>    <tr>        <td colspan=2>            <img src="//cdn.foreversfj.com/image/blog/20190714/xrencwsESMa5.png!blog">        </td>        <td>            <b>1.如果需要显示子表的信息，就必须先完成子表的生成代码，然后在生成父表的代码，注意模板分类要选择增删查改一对多<b>        </td>    </tr></table><h2 id="3，效果图："><a href="#3，效果图：" class="headerlink" title="3，效果图："></a>3，效果图：</h2><p><img src="//cdn.foreversfj.com/image/blog/20190714/7gIbesDsNG8m.png!blog" alt=""></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/PixXoo4Esl2I.png!blog" alt=""></p><h1 id="二，表间传值（专业表a和学院表b）："><a href="#二，表间传值（专业表a和学院表b）：" class="headerlink" title="二，表间传值（专业表a和学院表b）："></a>二，表间传值（专业表a和学院表b）：</h1><table>    <tr>        <td width=70%>            <img src="//cdn.foreversfj.com/image/blog/20190714/ACRa1LHHRXCU.png!blog">        </td>        <td>            <b>注意：这里的学院名称和学院代码都有具体内容</b>        </td>    </tr>    <tr>        <td width=70%>            <img src="//cdn.foreversfj.com/image/blog/20190714/aH8ofBYzg4PN.png!blog">        </td>        <td>            <b>这里的专业名称和专业代码都有具体内容，而学院编号是学院表的id</b>        </td>    </tr></table><h2 id="1-在a表信息添加页面中通过下拉框调取b表的数据"><a href="#1-在a表信息添加页面中通过下拉框调取b表的数据" class="headerlink" title="1.在a表信息添加页面中通过下拉框调取b表的数据"></a>1.在a表信息添加页面中通过下拉框调取b表的数据</h2><p><b>效果截图：</b></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/6xA5ga7zeXT1.png!blog" alt=""></p><p><strong>1.1 由于a表中的“学院编号”存的是b表的id，而这里要通过id调取b表中“学院编号”数据，需要在实体表中添加一个变量用于接收这个“学院编号”数据值</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/jKdywmMhoDAQ.png!blog" alt=""></p><p><strong>1.2 在sql文件即dao.xml中与b表通过id建立连接，把b表的“学院编号”字段值传递给a的实体表的新增变量xydm</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/qLGNm1tWGUIw.png!blog" alt=""></p><p><strong>1.3 在a表的controller.java文件中，注入b表的service层，然后在页面请求（form）方法中，增加一个传值的方法</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/10G9Y9CwskTf.png!blog" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DemoInstituteService demoInstituteService;</span><br></pre></td></tr></table></figure><p><img src="//cdn.foreversfj.com/image/blog/20190714/bKXsHDIpUfyC.png!blog" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">form</span><span class="params">(DemoMajor demoMajor, Model model)</span> </span>&#123;</span><br><span class="line">    DemoInstitute demoInstitute = <span class="keyword">new</span> DemoInstitute();</span><br><span class="line">    List&lt;DemoInstitute&gt; institute = demoInstituteService.findList(demoInstitute);</span><br><span class="line">    model.addAttribute(<span class="string">"institute"</span>, institute);    </span><br><span class="line">    model.addAttribute(<span class="string">"demoMajor"</span>, demoMajor);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"jeesite/demo/demoMajorForm"</span>;</span><br><span class="line">&#125;<span class="comment">//     在上表中，先实例化一个父类的对象，再通过父类对象的findlist方法传递参数</span></span><br></pre></td></tr></table></figure><p><strong>1.4 在a的form.jsp文件中，在需要调取b表值的DIV模块中增加联系 - 通过下拉框调取b表的传值而不是自己填写</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/X9Meyj0EakNe.png!blog" alt=""></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:select path=<span class="string">"schoolXydm"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-mini"</span>&gt;</span><br><span class="line">    &lt;form:options items=<span class="string">"$&#123;institute&#125;"</span> itemLabel=<span class="string">"name"</span> itemValue=<span class="string">"id"</span> htmlEscape=<span class="string">"false"</span> /&gt;</span><br><span class="line">&lt;/form:select&gt;</span><br></pre></td></tr></table></figure><p><img src="//cdn.foreversfj.com/image/blog/20190714/ljMEEenMs41d.png!blog" alt=""></p><p><em>1.4.1  <code>itemlabel</code>属性值具体作用：（xydm和name都是b表数据库中的字段），指向b表中要调取的字段</em></p><table>    <tr>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/If3rNasqaW15.png!blog">        </td>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/N1e7hP0tCpfk.png!blog">        </td>    </tr>    <tr>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/XzpmaHWNPCbm.png!blog">        </td>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/wqYiSXHJwPcS.png!blog">        </td>    </tr></table><p><em>1.5  此时页面中“学院编号”一栏显示的还是id值，需要在表单文件（<code>list.java</code>）中把传递的id值换成新增的变量xydm</em></p><table>    <tr>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/tgpGdcPYWTEP.png!blog">        </td>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/4cIy18SA1074.png!blog">        </td>    </tr>    <tr>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/4PLPywOSRkHM.png!blog">        </td>        <td>            <img src="//cdn.foreversfj.com/image/blog/20190714/y2RQA9SeVQfj.png!blog">        </td>    </tr></table><h2 id="2-在a表的表单页面中添加显示b表的数据内容"><a href="#2-在a表的表单页面中添加显示b表的数据内容" class="headerlink" title="2.在a表的表单页面中添加显示b表的数据内容"></a>2.在a表的表单页面中添加显示b表的数据内容</h2><p><strong>截图：</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/r7AHU0d1aPz2.png!blog" alt=""></p><p><strong>1.由于a表的Java实体类文件和数据库中没有“学院名称”的变量，而页面要显示这个值就要在实体表中添加一个用于接收的变量</strong></p><p><img src="//cdn.foreversfj.com/image/blog/20190714/NKWMX40442Lb.png!blog" alt=""></p><p><strong>2.后面的步骤基本类似于上面的表间传值，同样都需要修改list、xml等文件的一些内容，以做到传值的效果，唯一多的一步就是在list中添加一个“学院名称”的栏目</strong></p><table>    <tr>        <th><b>list.java</b>文件</th>        <th><b>xml</b>文件</th>    </tr>    <tr>        <td><img src="//cdn.foreversfj.com/image/blog/20190714/1xVMUeHPjBXf.png!blog"></td>        <td rowspan=2><img src="//cdn.foreversfj.com/image/blog/20190714/P3zGKmMegG1F.png!blog"></td>    </tr>    <tr>        <td><img src="//cdn.foreversfj.com/image/blog/20190714/noxIvKVxGGQU.png!blog"></td>    </tr>    <tr>        <td colspan=2><img src="//cdn.foreversfj.com/image/blog/20190714/VzwcjBIXokGH.png!blog"></td>    </tr><table><ol><li><code>From.jsp</code>文件是列表信息“添加”和“修改”的文件，当需要修改和新增信息时，在此修改</li><li><code>List.jsp</code>文件是前台页面显示文件，当对菜单的内容进行更改时，在此修改</li><li><code>Controller.java</code>是控制文件，连接着前台和后台，里面是各种对前台页面的操作方法，如保存，获取，删除，导入，导出等，当需要对页面的功能进行变动是，在此修改</li><li><code>service.java</code>是后台方法文件，存放着对数据的调取和保存、修改等方法</li><li>在菜单列表中添加父表传值字段时，所添加的字段必须要在子表中有接收值，例如要在子表主要的查询菜单中加入父表学院的学院名称，就要在子表的实体表中添加两个字段，一个用于接收，一个用于传值。不过一般不建议这样。可以在子表数据库中专门设置一个属性字段（例如<code>instituteId</code>）用来作为连接父表的传值，即外键。</li></ol><p><b>表间连接的具体代码说明</b></p><ul><li>实体表（* .java 表）</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190714/hg678XXtYiAT.png!blog" alt=""></p><p>此表中，schoolXydm 是用于存储数据库中实际存在的外键字段的值，用于和demo_institute 数据库表建立连接; Xydm 是实体表中用于传值的，是变量，其变量名可以随意取</p><ul><li>数据表（Dao.xml 表）</li></ul><p><img src="//cdn.foreversfj.com/image/blog/20190714/M0KyoRFx9img.png!blog" alt=""></p><p>此表中，<code>b.xydm AS“xydm”</code>是说将b 表的xydm 字段值（b 表中实际存在xydm 字段）赋予变量xydm （这个xydm 是实体表中建立的用于传值的变量），</p><p>左边加入<code>demo_institute b on b.id = a.school_xydm</code>的作用是在表a 和表b 之间建立连接关系，这里的school_xydm 是一个表中实际存在的字段，是外键，而id 是b 表的主键，两者之间建立关系之后，就可以在XML 表中调取b 表的具体数据，在这里就是调取b 表的xydm 数据</p><p><b>特殊条件连接如下：</b></p><table>    <tr>        <td rowspan=2><img src="//cdn.foreversfj.com/image/blog/20190714/vMQbODQQRK0q.png!blog"></td>        <td><img src="//cdn.foreversfj.com/image/blog/20190714/qoycHx90kWmo.png!blog"></td>    </tr>    <tr>        <td><img src="//cdn.foreversfj.com/image/blog/20190714/hyOeGvOv3oFv.png!blog"></td>    </tr>    <tr>        <td rowspan=2><img src="//cdn.foreversfj.com/image/blog/20190714/btcwDnAfFJnY.png!blog"></td>        <td><img src="//cdn.foreversfj.com/image/blog/20190714/LEytTXthUWGX.png!blog"></td>    </tr>    <tr>        <td><img src="//cdn.foreversfj.com/image/blog/20190714/hlTz9IC3Dqha.png!blog"></td>    </tr><table><p><em>小白一个，仅留做自我学习记忆，时常修改，有不对不全之处还望不吝赐教！</em></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jeesite </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
